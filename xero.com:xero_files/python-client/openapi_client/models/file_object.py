# coding: utf-8

"""
    Xero Files API

    These endpoints are specific to Xero Files API

    The version of the OpenAPI document: 2.9.4
    Contact: api@xero.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class FileObject(BaseModel):
    """
    FileObject
    """ # noqa: E501
    created_date_utc: Optional[StrictStr] = Field(default=None, description="Created date in UTC", alias="CreatedDateUtc")
    folder_id: Optional[StrictStr] = Field(default=None, description="Folder relation object's UUID", alias="FolderId")
    id: Optional[StrictStr] = Field(default=None, description="File object's UUID", alias="Id")
    mime_type: Optional[StrictStr] = Field(default=None, description="MimeType of the file (image/png, image/jpeg, application/pdf, etc..)", alias="MimeType")
    name: Optional[StrictStr] = Field(default=None, description="File Name", alias="Name")
    size: Optional[StrictInt] = Field(default=None, description="Numeric value in bytes", alias="Size")
    updated_date_utc: Optional[StrictStr] = Field(default=None, description="Updated date in UTC", alias="UpdatedDateUtc")
    user: Optional[User] = Field(default=None, alias="User")
    __properties: ClassVar[List[str]] = ["CreatedDateUtc", "FolderId", "Id", "MimeType", "Name", "Size", "UpdatedDateUtc", "User"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['User'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CreatedDateUtc": obj.get("CreatedDateUtc"),
            "FolderId": obj.get("FolderId"),
            "Id": obj.get("Id"),
            "MimeType": obj.get("MimeType"),
            "Name": obj.get("Name"),
            "Size": obj.get("Size"),
            "UpdatedDateUtc": obj.get("UpdatedDateUtc"),
            "User": User.from_dict(obj["User"]) if obj.get("User") is not None else None
        })
        return _obj


