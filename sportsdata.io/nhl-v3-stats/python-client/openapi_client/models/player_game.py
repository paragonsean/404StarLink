# coding: utf-8

"""
    NHL v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PlayerGame(BaseModel):
    """
    PlayerGame
    """ # noqa: E501
    assists: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Assists")
    bench_penalty_minutes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="BenchPenaltyMinutes")
    blocks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Blocks")
    date_time: Optional[StrictStr] = Field(default=None, alias="DateTime")
    day: Optional[StrictStr] = Field(default=None, alias="Day")
    draft_kings_position: Optional[StrictStr] = Field(default=None, alias="DraftKingsPosition")
    draft_kings_salary: Optional[StrictInt] = Field(default=None, alias="DraftKingsSalary")
    empty_net_goals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="EmptyNetGoals")
    faceoffs_lost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FaceoffsLost")
    faceoffs_won: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FaceoffsWon")
    fan_duel_position: Optional[StrictStr] = Field(default=None, alias="FanDuelPosition")
    fan_duel_salary: Optional[StrictInt] = Field(default=None, alias="FanDuelSalary")
    fantasy_data_salary: Optional[StrictInt] = Field(default=None, alias="FantasyDataSalary")
    fantasy_draft_position: Optional[StrictStr] = Field(default=None, alias="FantasyDraftPosition")
    fantasy_draft_salary: Optional[StrictInt] = Field(default=None, alias="FantasyDraftSalary")
    fantasy_points: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FantasyPoints")
    fantasy_points_draft_kings: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FantasyPointsDraftKings")
    fantasy_points_fan_duel: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FantasyPointsFanDuel")
    fantasy_points_fantasy_draft: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FantasyPointsFantasyDraft")
    fantasy_points_yahoo: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FantasyPointsYahoo")
    game_id: Optional[StrictInt] = Field(default=None, alias="GameID")
    games: Optional[StrictInt] = Field(default=None, alias="Games")
    giveaways: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Giveaways")
    global_game_id: Optional[StrictInt] = Field(default=None, alias="GlobalGameID")
    global_opponent_id: Optional[StrictInt] = Field(default=None, alias="GlobalOpponentID")
    global_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalTeamID")
    goals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Goals")
    goaltending_goals_against: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GoaltendingGoalsAgainst")
    goaltending_losses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GoaltendingLosses")
    goaltending_minutes: Optional[StrictInt] = Field(default=None, alias="GoaltendingMinutes")
    goaltending_overtime_losses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GoaltendingOvertimeLosses")
    goaltending_saves: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GoaltendingSaves")
    goaltending_seconds: Optional[StrictInt] = Field(default=None, alias="GoaltendingSeconds")
    goaltending_shots_against: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GoaltendingShotsAgainst")
    goaltending_shutouts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GoaltendingShutouts")
    goaltending_wins: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GoaltendingWins")
    hat_tricks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="HatTricks")
    hits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Hits")
    home_or_away: Optional[StrictStr] = Field(default=None, alias="HomeOrAway")
    injury_body_part: Optional[StrictStr] = Field(default=None, alias="InjuryBodyPart")
    injury_notes: Optional[StrictStr] = Field(default=None, alias="InjuryNotes")
    injury_start_date: Optional[StrictStr] = Field(default=None, alias="InjuryStartDate")
    injury_status: Optional[StrictStr] = Field(default=None, alias="InjuryStatus")
    is_game_over: Optional[StrictBool] = Field(default=None, alias="IsGameOver")
    minutes: Optional[StrictInt] = Field(default=None, alias="Minutes")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    opponent: Optional[StrictStr] = Field(default=None, alias="Opponent")
    opponent_id: Optional[StrictInt] = Field(default=None, alias="OpponentID")
    opponent_position_rank: Optional[StrictInt] = Field(default=None, alias="OpponentPositionRank")
    opponent_rank: Optional[StrictInt] = Field(default=None, alias="OpponentRank")
    penalty_minutes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PenaltyMinutes")
    player_id: Optional[StrictInt] = Field(default=None, alias="PlayerID")
    plus_minus: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PlusMinus")
    position: Optional[StrictStr] = Field(default=None, alias="Position")
    power_play_assists: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PowerPlayAssists")
    power_play_goals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PowerPlayGoals")
    season: Optional[StrictInt] = Field(default=None, alias="Season")
    season_type: Optional[StrictInt] = Field(default=None, alias="SeasonType")
    seconds: Optional[StrictInt] = Field(default=None, alias="Seconds")
    shifts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Shifts")
    shootout_goals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ShootoutGoals")
    short_handed_assists: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ShortHandedAssists")
    short_handed_goals: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ShortHandedGoals")
    shots_on_goal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ShotsOnGoal")
    started: Optional[StrictInt] = Field(default=None, alias="Started")
    stat_id: Optional[StrictInt] = Field(default=None, alias="StatID")
    takeaways: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Takeaways")
    team: Optional[StrictStr] = Field(default=None, alias="Team")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamID")
    updated: Optional[StrictStr] = Field(default=None, alias="Updated")
    yahoo_position: Optional[StrictStr] = Field(default=None, alias="YahooPosition")
    yahoo_salary: Optional[StrictInt] = Field(default=None, alias="YahooSalary")
    __properties: ClassVar[List[str]] = ["Assists", "BenchPenaltyMinutes", "Blocks", "DateTime", "Day", "DraftKingsPosition", "DraftKingsSalary", "EmptyNetGoals", "FaceoffsLost", "FaceoffsWon", "FanDuelPosition", "FanDuelSalary", "FantasyDataSalary", "FantasyDraftPosition", "FantasyDraftSalary", "FantasyPoints", "FantasyPointsDraftKings", "FantasyPointsFanDuel", "FantasyPointsFantasyDraft", "FantasyPointsYahoo", "GameID", "Games", "Giveaways", "GlobalGameID", "GlobalOpponentID", "GlobalTeamID", "Goals", "GoaltendingGoalsAgainst", "GoaltendingLosses", "GoaltendingMinutes", "GoaltendingOvertimeLosses", "GoaltendingSaves", "GoaltendingSeconds", "GoaltendingShotsAgainst", "GoaltendingShutouts", "GoaltendingWins", "HatTricks", "Hits", "HomeOrAway", "InjuryBodyPart", "InjuryNotes", "InjuryStartDate", "InjuryStatus", "IsGameOver", "Minutes", "Name", "Opponent", "OpponentID", "OpponentPositionRank", "OpponentRank", "PenaltyMinutes", "PlayerID", "PlusMinus", "Position", "PowerPlayAssists", "PowerPlayGoals", "Season", "SeasonType", "Seconds", "Shifts", "ShootoutGoals", "ShortHandedAssists", "ShortHandedGoals", "ShotsOnGoal", "Started", "StatID", "Takeaways", "Team", "TeamID", "Updated", "YahooPosition", "YahooSalary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayerGame from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if assists (nullable) is None
        # and model_fields_set contains the field
        if self.assists is None and "assists" in self.model_fields_set:
            _dict['Assists'] = None

        # set to None if bench_penalty_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.bench_penalty_minutes is None and "bench_penalty_minutes" in self.model_fields_set:
            _dict['BenchPenaltyMinutes'] = None

        # set to None if blocks (nullable) is None
        # and model_fields_set contains the field
        if self.blocks is None and "blocks" in self.model_fields_set:
            _dict['Blocks'] = None

        # set to None if date_time (nullable) is None
        # and model_fields_set contains the field
        if self.date_time is None and "date_time" in self.model_fields_set:
            _dict['DateTime'] = None

        # set to None if day (nullable) is None
        # and model_fields_set contains the field
        if self.day is None and "day" in self.model_fields_set:
            _dict['Day'] = None

        # set to None if draft_kings_position (nullable) is None
        # and model_fields_set contains the field
        if self.draft_kings_position is None and "draft_kings_position" in self.model_fields_set:
            _dict['DraftKingsPosition'] = None

        # set to None if draft_kings_salary (nullable) is None
        # and model_fields_set contains the field
        if self.draft_kings_salary is None and "draft_kings_salary" in self.model_fields_set:
            _dict['DraftKingsSalary'] = None

        # set to None if empty_net_goals (nullable) is None
        # and model_fields_set contains the field
        if self.empty_net_goals is None and "empty_net_goals" in self.model_fields_set:
            _dict['EmptyNetGoals'] = None

        # set to None if faceoffs_lost (nullable) is None
        # and model_fields_set contains the field
        if self.faceoffs_lost is None and "faceoffs_lost" in self.model_fields_set:
            _dict['FaceoffsLost'] = None

        # set to None if faceoffs_won (nullable) is None
        # and model_fields_set contains the field
        if self.faceoffs_won is None and "faceoffs_won" in self.model_fields_set:
            _dict['FaceoffsWon'] = None

        # set to None if fan_duel_position (nullable) is None
        # and model_fields_set contains the field
        if self.fan_duel_position is None and "fan_duel_position" in self.model_fields_set:
            _dict['FanDuelPosition'] = None

        # set to None if fan_duel_salary (nullable) is None
        # and model_fields_set contains the field
        if self.fan_duel_salary is None and "fan_duel_salary" in self.model_fields_set:
            _dict['FanDuelSalary'] = None

        # set to None if fantasy_data_salary (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_data_salary is None and "fantasy_data_salary" in self.model_fields_set:
            _dict['FantasyDataSalary'] = None

        # set to None if fantasy_draft_position (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_draft_position is None and "fantasy_draft_position" in self.model_fields_set:
            _dict['FantasyDraftPosition'] = None

        # set to None if fantasy_draft_salary (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_draft_salary is None and "fantasy_draft_salary" in self.model_fields_set:
            _dict['FantasyDraftSalary'] = None

        # set to None if fantasy_points (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_points is None and "fantasy_points" in self.model_fields_set:
            _dict['FantasyPoints'] = None

        # set to None if fantasy_points_draft_kings (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_points_draft_kings is None and "fantasy_points_draft_kings" in self.model_fields_set:
            _dict['FantasyPointsDraftKings'] = None

        # set to None if fantasy_points_fan_duel (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_points_fan_duel is None and "fantasy_points_fan_duel" in self.model_fields_set:
            _dict['FantasyPointsFanDuel'] = None

        # set to None if fantasy_points_fantasy_draft (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_points_fantasy_draft is None and "fantasy_points_fantasy_draft" in self.model_fields_set:
            _dict['FantasyPointsFantasyDraft'] = None

        # set to None if fantasy_points_yahoo (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_points_yahoo is None and "fantasy_points_yahoo" in self.model_fields_set:
            _dict['FantasyPointsYahoo'] = None

        # set to None if game_id (nullable) is None
        # and model_fields_set contains the field
        if self.game_id is None and "game_id" in self.model_fields_set:
            _dict['GameID'] = None

        # set to None if games (nullable) is None
        # and model_fields_set contains the field
        if self.games is None and "games" in self.model_fields_set:
            _dict['Games'] = None

        # set to None if giveaways (nullable) is None
        # and model_fields_set contains the field
        if self.giveaways is None and "giveaways" in self.model_fields_set:
            _dict['Giveaways'] = None

        # set to None if global_game_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_game_id is None and "global_game_id" in self.model_fields_set:
            _dict['GlobalGameID'] = None

        # set to None if global_opponent_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_opponent_id is None and "global_opponent_id" in self.model_fields_set:
            _dict['GlobalOpponentID'] = None

        # set to None if global_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_team_id is None and "global_team_id" in self.model_fields_set:
            _dict['GlobalTeamID'] = None

        # set to None if goals (nullable) is None
        # and model_fields_set contains the field
        if self.goals is None and "goals" in self.model_fields_set:
            _dict['Goals'] = None

        # set to None if goaltending_goals_against (nullable) is None
        # and model_fields_set contains the field
        if self.goaltending_goals_against is None and "goaltending_goals_against" in self.model_fields_set:
            _dict['GoaltendingGoalsAgainst'] = None

        # set to None if goaltending_losses (nullable) is None
        # and model_fields_set contains the field
        if self.goaltending_losses is None and "goaltending_losses" in self.model_fields_set:
            _dict['GoaltendingLosses'] = None

        # set to None if goaltending_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.goaltending_minutes is None and "goaltending_minutes" in self.model_fields_set:
            _dict['GoaltendingMinutes'] = None

        # set to None if goaltending_overtime_losses (nullable) is None
        # and model_fields_set contains the field
        if self.goaltending_overtime_losses is None and "goaltending_overtime_losses" in self.model_fields_set:
            _dict['GoaltendingOvertimeLosses'] = None

        # set to None if goaltending_saves (nullable) is None
        # and model_fields_set contains the field
        if self.goaltending_saves is None and "goaltending_saves" in self.model_fields_set:
            _dict['GoaltendingSaves'] = None

        # set to None if goaltending_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.goaltending_seconds is None and "goaltending_seconds" in self.model_fields_set:
            _dict['GoaltendingSeconds'] = None

        # set to None if goaltending_shots_against (nullable) is None
        # and model_fields_set contains the field
        if self.goaltending_shots_against is None and "goaltending_shots_against" in self.model_fields_set:
            _dict['GoaltendingShotsAgainst'] = None

        # set to None if goaltending_shutouts (nullable) is None
        # and model_fields_set contains the field
        if self.goaltending_shutouts is None and "goaltending_shutouts" in self.model_fields_set:
            _dict['GoaltendingShutouts'] = None

        # set to None if goaltending_wins (nullable) is None
        # and model_fields_set contains the field
        if self.goaltending_wins is None and "goaltending_wins" in self.model_fields_set:
            _dict['GoaltendingWins'] = None

        # set to None if hat_tricks (nullable) is None
        # and model_fields_set contains the field
        if self.hat_tricks is None and "hat_tricks" in self.model_fields_set:
            _dict['HatTricks'] = None

        # set to None if hits (nullable) is None
        # and model_fields_set contains the field
        if self.hits is None and "hits" in self.model_fields_set:
            _dict['Hits'] = None

        # set to None if home_or_away (nullable) is None
        # and model_fields_set contains the field
        if self.home_or_away is None and "home_or_away" in self.model_fields_set:
            _dict['HomeOrAway'] = None

        # set to None if injury_body_part (nullable) is None
        # and model_fields_set contains the field
        if self.injury_body_part is None and "injury_body_part" in self.model_fields_set:
            _dict['InjuryBodyPart'] = None

        # set to None if injury_notes (nullable) is None
        # and model_fields_set contains the field
        if self.injury_notes is None and "injury_notes" in self.model_fields_set:
            _dict['InjuryNotes'] = None

        # set to None if injury_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.injury_start_date is None and "injury_start_date" in self.model_fields_set:
            _dict['InjuryStartDate'] = None

        # set to None if injury_status (nullable) is None
        # and model_fields_set contains the field
        if self.injury_status is None and "injury_status" in self.model_fields_set:
            _dict['InjuryStatus'] = None

        # set to None if minutes (nullable) is None
        # and model_fields_set contains the field
        if self.minutes is None and "minutes" in self.model_fields_set:
            _dict['Minutes'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if opponent (nullable) is None
        # and model_fields_set contains the field
        if self.opponent is None and "opponent" in self.model_fields_set:
            _dict['Opponent'] = None

        # set to None if opponent_id (nullable) is None
        # and model_fields_set contains the field
        if self.opponent_id is None and "opponent_id" in self.model_fields_set:
            _dict['OpponentID'] = None

        # set to None if opponent_position_rank (nullable) is None
        # and model_fields_set contains the field
        if self.opponent_position_rank is None and "opponent_position_rank" in self.model_fields_set:
            _dict['OpponentPositionRank'] = None

        # set to None if opponent_rank (nullable) is None
        # and model_fields_set contains the field
        if self.opponent_rank is None and "opponent_rank" in self.model_fields_set:
            _dict['OpponentRank'] = None

        # set to None if penalty_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.penalty_minutes is None and "penalty_minutes" in self.model_fields_set:
            _dict['PenaltyMinutes'] = None

        # set to None if player_id (nullable) is None
        # and model_fields_set contains the field
        if self.player_id is None and "player_id" in self.model_fields_set:
            _dict['PlayerID'] = None

        # set to None if plus_minus (nullable) is None
        # and model_fields_set contains the field
        if self.plus_minus is None and "plus_minus" in self.model_fields_set:
            _dict['PlusMinus'] = None

        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['Position'] = None

        # set to None if power_play_assists (nullable) is None
        # and model_fields_set contains the field
        if self.power_play_assists is None and "power_play_assists" in self.model_fields_set:
            _dict['PowerPlayAssists'] = None

        # set to None if power_play_goals (nullable) is None
        # and model_fields_set contains the field
        if self.power_play_goals is None and "power_play_goals" in self.model_fields_set:
            _dict['PowerPlayGoals'] = None

        # set to None if season (nullable) is None
        # and model_fields_set contains the field
        if self.season is None and "season" in self.model_fields_set:
            _dict['Season'] = None

        # set to None if season_type (nullable) is None
        # and model_fields_set contains the field
        if self.season_type is None and "season_type" in self.model_fields_set:
            _dict['SeasonType'] = None

        # set to None if seconds (nullable) is None
        # and model_fields_set contains the field
        if self.seconds is None and "seconds" in self.model_fields_set:
            _dict['Seconds'] = None

        # set to None if shifts (nullable) is None
        # and model_fields_set contains the field
        if self.shifts is None and "shifts" in self.model_fields_set:
            _dict['Shifts'] = None

        # set to None if shootout_goals (nullable) is None
        # and model_fields_set contains the field
        if self.shootout_goals is None and "shootout_goals" in self.model_fields_set:
            _dict['ShootoutGoals'] = None

        # set to None if short_handed_assists (nullable) is None
        # and model_fields_set contains the field
        if self.short_handed_assists is None and "short_handed_assists" in self.model_fields_set:
            _dict['ShortHandedAssists'] = None

        # set to None if short_handed_goals (nullable) is None
        # and model_fields_set contains the field
        if self.short_handed_goals is None and "short_handed_goals" in self.model_fields_set:
            _dict['ShortHandedGoals'] = None

        # set to None if shots_on_goal (nullable) is None
        # and model_fields_set contains the field
        if self.shots_on_goal is None and "shots_on_goal" in self.model_fields_set:
            _dict['ShotsOnGoal'] = None

        # set to None if started (nullable) is None
        # and model_fields_set contains the field
        if self.started is None and "started" in self.model_fields_set:
            _dict['Started'] = None

        # set to None if takeaways (nullable) is None
        # and model_fields_set contains the field
        if self.takeaways is None and "takeaways" in self.model_fields_set:
            _dict['Takeaways'] = None

        # set to None if team (nullable) is None
        # and model_fields_set contains the field
        if self.team is None and "team" in self.model_fields_set:
            _dict['Team'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['TeamID'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['Updated'] = None

        # set to None if yahoo_position (nullable) is None
        # and model_fields_set contains the field
        if self.yahoo_position is None and "yahoo_position" in self.model_fields_set:
            _dict['YahooPosition'] = None

        # set to None if yahoo_salary (nullable) is None
        # and model_fields_set contains the field
        if self.yahoo_salary is None and "yahoo_salary" in self.model_fields_set:
            _dict['YahooSalary'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayerGame from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Assists": obj.get("Assists"),
            "BenchPenaltyMinutes": obj.get("BenchPenaltyMinutes"),
            "Blocks": obj.get("Blocks"),
            "DateTime": obj.get("DateTime"),
            "Day": obj.get("Day"),
            "DraftKingsPosition": obj.get("DraftKingsPosition"),
            "DraftKingsSalary": obj.get("DraftKingsSalary"),
            "EmptyNetGoals": obj.get("EmptyNetGoals"),
            "FaceoffsLost": obj.get("FaceoffsLost"),
            "FaceoffsWon": obj.get("FaceoffsWon"),
            "FanDuelPosition": obj.get("FanDuelPosition"),
            "FanDuelSalary": obj.get("FanDuelSalary"),
            "FantasyDataSalary": obj.get("FantasyDataSalary"),
            "FantasyDraftPosition": obj.get("FantasyDraftPosition"),
            "FantasyDraftSalary": obj.get("FantasyDraftSalary"),
            "FantasyPoints": obj.get("FantasyPoints"),
            "FantasyPointsDraftKings": obj.get("FantasyPointsDraftKings"),
            "FantasyPointsFanDuel": obj.get("FantasyPointsFanDuel"),
            "FantasyPointsFantasyDraft": obj.get("FantasyPointsFantasyDraft"),
            "FantasyPointsYahoo": obj.get("FantasyPointsYahoo"),
            "GameID": obj.get("GameID"),
            "Games": obj.get("Games"),
            "Giveaways": obj.get("Giveaways"),
            "GlobalGameID": obj.get("GlobalGameID"),
            "GlobalOpponentID": obj.get("GlobalOpponentID"),
            "GlobalTeamID": obj.get("GlobalTeamID"),
            "Goals": obj.get("Goals"),
            "GoaltendingGoalsAgainst": obj.get("GoaltendingGoalsAgainst"),
            "GoaltendingLosses": obj.get("GoaltendingLosses"),
            "GoaltendingMinutes": obj.get("GoaltendingMinutes"),
            "GoaltendingOvertimeLosses": obj.get("GoaltendingOvertimeLosses"),
            "GoaltendingSaves": obj.get("GoaltendingSaves"),
            "GoaltendingSeconds": obj.get("GoaltendingSeconds"),
            "GoaltendingShotsAgainst": obj.get("GoaltendingShotsAgainst"),
            "GoaltendingShutouts": obj.get("GoaltendingShutouts"),
            "GoaltendingWins": obj.get("GoaltendingWins"),
            "HatTricks": obj.get("HatTricks"),
            "Hits": obj.get("Hits"),
            "HomeOrAway": obj.get("HomeOrAway"),
            "InjuryBodyPart": obj.get("InjuryBodyPart"),
            "InjuryNotes": obj.get("InjuryNotes"),
            "InjuryStartDate": obj.get("InjuryStartDate"),
            "InjuryStatus": obj.get("InjuryStatus"),
            "IsGameOver": obj.get("IsGameOver"),
            "Minutes": obj.get("Minutes"),
            "Name": obj.get("Name"),
            "Opponent": obj.get("Opponent"),
            "OpponentID": obj.get("OpponentID"),
            "OpponentPositionRank": obj.get("OpponentPositionRank"),
            "OpponentRank": obj.get("OpponentRank"),
            "PenaltyMinutes": obj.get("PenaltyMinutes"),
            "PlayerID": obj.get("PlayerID"),
            "PlusMinus": obj.get("PlusMinus"),
            "Position": obj.get("Position"),
            "PowerPlayAssists": obj.get("PowerPlayAssists"),
            "PowerPlayGoals": obj.get("PowerPlayGoals"),
            "Season": obj.get("Season"),
            "SeasonType": obj.get("SeasonType"),
            "Seconds": obj.get("Seconds"),
            "Shifts": obj.get("Shifts"),
            "ShootoutGoals": obj.get("ShootoutGoals"),
            "ShortHandedAssists": obj.get("ShortHandedAssists"),
            "ShortHandedGoals": obj.get("ShortHandedGoals"),
            "ShotsOnGoal": obj.get("ShotsOnGoal"),
            "Started": obj.get("Started"),
            "StatID": obj.get("StatID"),
            "Takeaways": obj.get("Takeaways"),
            "Team": obj.get("Team"),
            "TeamID": obj.get("TeamID"),
            "Updated": obj.get("Updated"),
            "YahooPosition": obj.get("YahooPosition"),
            "YahooSalary": obj.get("YahooSalary")
        })
        return _obj


