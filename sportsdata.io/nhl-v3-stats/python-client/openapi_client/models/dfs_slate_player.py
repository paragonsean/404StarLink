# coding: utf-8

"""
    NHL v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DfsSlatePlayer(BaseModel):
    """
    DfsSlatePlayer
    """ # noqa: E501
    operator_player_id: Optional[StrictStr] = Field(default=None, alias="OperatorPlayerID")
    operator_player_name: Optional[StrictStr] = Field(default=None, alias="OperatorPlayerName")
    operator_position: Optional[StrictStr] = Field(default=None, alias="OperatorPosition")
    operator_roster_slots: Optional[List[Optional[StrictStr]]] = Field(default=None, alias="OperatorRosterSlots")
    operator_salary: Optional[StrictInt] = Field(default=None, alias="OperatorSalary")
    operator_slate_player_id: Optional[StrictStr] = Field(default=None, alias="OperatorSlatePlayerID")
    player_game_projection_stat_id: Optional[StrictInt] = Field(default=None, alias="PlayerGameProjectionStatID")
    player_id: Optional[StrictInt] = Field(default=None, alias="PlayerID")
    removed_by_operator: Optional[StrictBool] = Field(default=None, alias="RemovedByOperator")
    slate_game_id: Optional[StrictInt] = Field(default=None, alias="SlateGameID")
    slate_id: Optional[StrictInt] = Field(default=None, alias="SlateID")
    slate_player_id: Optional[StrictInt] = Field(default=None, alias="SlatePlayerID")
    team: Optional[StrictStr] = Field(default=None, alias="Team")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamID")
    __properties: ClassVar[List[str]] = ["OperatorPlayerID", "OperatorPlayerName", "OperatorPosition", "OperatorRosterSlots", "OperatorSalary", "OperatorSlatePlayerID", "PlayerGameProjectionStatID", "PlayerID", "RemovedByOperator", "SlateGameID", "SlateID", "SlatePlayerID", "Team", "TeamID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DfsSlatePlayer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if operator_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.operator_player_id is None and "operator_player_id" in self.model_fields_set:
            _dict['OperatorPlayerID'] = None

        # set to None if operator_player_name (nullable) is None
        # and model_fields_set contains the field
        if self.operator_player_name is None and "operator_player_name" in self.model_fields_set:
            _dict['OperatorPlayerName'] = None

        # set to None if operator_position (nullable) is None
        # and model_fields_set contains the field
        if self.operator_position is None and "operator_position" in self.model_fields_set:
            _dict['OperatorPosition'] = None

        # set to None if operator_salary (nullable) is None
        # and model_fields_set contains the field
        if self.operator_salary is None and "operator_salary" in self.model_fields_set:
            _dict['OperatorSalary'] = None

        # set to None if operator_slate_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.operator_slate_player_id is None and "operator_slate_player_id" in self.model_fields_set:
            _dict['OperatorSlatePlayerID'] = None

        # set to None if player_game_projection_stat_id (nullable) is None
        # and model_fields_set contains the field
        if self.player_game_projection_stat_id is None and "player_game_projection_stat_id" in self.model_fields_set:
            _dict['PlayerGameProjectionStatID'] = None

        # set to None if player_id (nullable) is None
        # and model_fields_set contains the field
        if self.player_id is None and "player_id" in self.model_fields_set:
            _dict['PlayerID'] = None

        # set to None if removed_by_operator (nullable) is None
        # and model_fields_set contains the field
        if self.removed_by_operator is None and "removed_by_operator" in self.model_fields_set:
            _dict['RemovedByOperator'] = None

        # set to None if slate_game_id (nullable) is None
        # and model_fields_set contains the field
        if self.slate_game_id is None and "slate_game_id" in self.model_fields_set:
            _dict['SlateGameID'] = None

        # set to None if team (nullable) is None
        # and model_fields_set contains the field
        if self.team is None and "team" in self.model_fields_set:
            _dict['Team'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['TeamID'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DfsSlatePlayer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "OperatorPlayerID": obj.get("OperatorPlayerID"),
            "OperatorPlayerName": obj.get("OperatorPlayerName"),
            "OperatorPosition": obj.get("OperatorPosition"),
            "OperatorRosterSlots": obj.get("OperatorRosterSlots"),
            "OperatorSalary": obj.get("OperatorSalary"),
            "OperatorSlatePlayerID": obj.get("OperatorSlatePlayerID"),
            "PlayerGameProjectionStatID": obj.get("PlayerGameProjectionStatID"),
            "PlayerID": obj.get("PlayerID"),
            "RemovedByOperator": obj.get("RemovedByOperator"),
            "SlateGameID": obj.get("SlateGameID"),
            "SlateID": obj.get("SlateID"),
            "SlatePlayerID": obj.get("SlatePlayerID"),
            "Team": obj.get("Team"),
            "TeamID": obj.get("TeamID")
        })
        return _obj


