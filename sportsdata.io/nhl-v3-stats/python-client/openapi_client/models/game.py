# coding: utf-8

"""
    NHL v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.period import Period
from openapi_client.models.series import Series
from typing import Optional, Set
from typing_extensions import Self

class Game(BaseModel):
    """
    Game
    """ # noqa: E501
    attendance: Optional[StrictInt] = Field(default=None, alias="Attendance")
    away_rotation_number: Optional[StrictInt] = Field(default=None, alias="AwayRotationNumber")
    away_team: Optional[StrictStr] = Field(default=None, alias="AwayTeam")
    away_team_id: Optional[StrictInt] = Field(default=None, alias="AwayTeamID")
    away_team_money_line: Optional[StrictInt] = Field(default=None, alias="AwayTeamMoneyLine")
    away_team_score: Optional[StrictInt] = Field(default=None, alias="AwayTeamScore")
    channel: Optional[StrictStr] = Field(default=None, alias="Channel")
    date_time: Optional[StrictStr] = Field(default=None, alias="DateTime")
    date_time_utc: Optional[StrictStr] = Field(default=None, alias="DateTimeUTC")
    day: Optional[StrictStr] = Field(default=None, alias="Day")
    game_end_date_time: Optional[StrictStr] = Field(default=None, alias="GameEndDateTime")
    game_id: Optional[StrictInt] = Field(default=None, alias="GameID")
    global_away_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalAwayTeamID")
    global_game_id: Optional[StrictInt] = Field(default=None, alias="GlobalGameID")
    global_home_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalHomeTeamID")
    home_rotation_number: Optional[StrictInt] = Field(default=None, alias="HomeRotationNumber")
    home_team: Optional[StrictStr] = Field(default=None, alias="HomeTeam")
    home_team_id: Optional[StrictInt] = Field(default=None, alias="HomeTeamID")
    home_team_money_line: Optional[StrictInt] = Field(default=None, alias="HomeTeamMoneyLine")
    home_team_score: Optional[StrictInt] = Field(default=None, alias="HomeTeamScore")
    is_closed: Optional[StrictBool] = Field(default=None, alias="IsClosed")
    last_play: Optional[StrictStr] = Field(default=None, alias="LastPlay")
    neutral_venue: Optional[StrictBool] = Field(default=None, alias="NeutralVenue")
    over_payout: Optional[StrictInt] = Field(default=None, alias="OverPayout")
    over_under: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="OverUnder")
    period: Optional[StrictStr] = Field(default=None, alias="Period")
    periods: Optional[List[Period]] = Field(default=None, alias="Periods")
    point_spread: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PointSpread")
    point_spread_away_team_money_line: Optional[StrictInt] = Field(default=None, alias="PointSpreadAwayTeamMoneyLine")
    point_spread_home_team_money_line: Optional[StrictInt] = Field(default=None, alias="PointSpreadHomeTeamMoneyLine")
    season: Optional[StrictInt] = Field(default=None, alias="Season")
    season_type: Optional[StrictInt] = Field(default=None, alias="SeasonType")
    series_info: Optional[Series] = Field(default=None, alias="SeriesInfo")
    stadium_id: Optional[StrictInt] = Field(default=None, alias="StadiumID")
    status: Optional[StrictStr] = Field(default=None, alias="Status")
    time_remaining_minutes: Optional[StrictInt] = Field(default=None, alias="TimeRemainingMinutes")
    time_remaining_seconds: Optional[StrictInt] = Field(default=None, alias="TimeRemainingSeconds")
    under_payout: Optional[StrictInt] = Field(default=None, alias="UnderPayout")
    updated: Optional[StrictStr] = Field(default=None, alias="Updated")
    __properties: ClassVar[List[str]] = ["Attendance", "AwayRotationNumber", "AwayTeam", "AwayTeamID", "AwayTeamMoneyLine", "AwayTeamScore", "Channel", "DateTime", "DateTimeUTC", "Day", "GameEndDateTime", "GameID", "GlobalAwayTeamID", "GlobalGameID", "GlobalHomeTeamID", "HomeRotationNumber", "HomeTeam", "HomeTeamID", "HomeTeamMoneyLine", "HomeTeamScore", "IsClosed", "LastPlay", "NeutralVenue", "OverPayout", "OverUnder", "Period", "Periods", "PointSpread", "PointSpreadAwayTeamMoneyLine", "PointSpreadHomeTeamMoneyLine", "Season", "SeasonType", "SeriesInfo", "StadiumID", "Status", "TimeRemainingMinutes", "TimeRemainingSeconds", "UnderPayout", "Updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Game from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in periods (list)
        _items = []
        if self.periods:
            for _item_periods in self.periods:
                if _item_periods:
                    _items.append(_item_periods.to_dict())
            _dict['Periods'] = _items
        # override the default output from pydantic by calling `to_dict()` of series_info
        if self.series_info:
            _dict['SeriesInfo'] = self.series_info.to_dict()
        # set to None if attendance (nullable) is None
        # and model_fields_set contains the field
        if self.attendance is None and "attendance" in self.model_fields_set:
            _dict['Attendance'] = None

        # set to None if away_rotation_number (nullable) is None
        # and model_fields_set contains the field
        if self.away_rotation_number is None and "away_rotation_number" in self.model_fields_set:
            _dict['AwayRotationNumber'] = None

        # set to None if away_team (nullable) is None
        # and model_fields_set contains the field
        if self.away_team is None and "away_team" in self.model_fields_set:
            _dict['AwayTeam'] = None

        # set to None if away_team_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_money_line is None and "away_team_money_line" in self.model_fields_set:
            _dict['AwayTeamMoneyLine'] = None

        # set to None if away_team_score (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_score is None and "away_team_score" in self.model_fields_set:
            _dict['AwayTeamScore'] = None

        # set to None if channel (nullable) is None
        # and model_fields_set contains the field
        if self.channel is None and "channel" in self.model_fields_set:
            _dict['Channel'] = None

        # set to None if date_time (nullable) is None
        # and model_fields_set contains the field
        if self.date_time is None and "date_time" in self.model_fields_set:
            _dict['DateTime'] = None

        # set to None if date_time_utc (nullable) is None
        # and model_fields_set contains the field
        if self.date_time_utc is None and "date_time_utc" in self.model_fields_set:
            _dict['DateTimeUTC'] = None

        # set to None if day (nullable) is None
        # and model_fields_set contains the field
        if self.day is None and "day" in self.model_fields_set:
            _dict['Day'] = None

        # set to None if game_end_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.game_end_date_time is None and "game_end_date_time" in self.model_fields_set:
            _dict['GameEndDateTime'] = None

        # set to None if home_rotation_number (nullable) is None
        # and model_fields_set contains the field
        if self.home_rotation_number is None and "home_rotation_number" in self.model_fields_set:
            _dict['HomeRotationNumber'] = None

        # set to None if home_team (nullable) is None
        # and model_fields_set contains the field
        if self.home_team is None and "home_team" in self.model_fields_set:
            _dict['HomeTeam'] = None

        # set to None if home_team_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_money_line is None and "home_team_money_line" in self.model_fields_set:
            _dict['HomeTeamMoneyLine'] = None

        # set to None if home_team_score (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_score is None and "home_team_score" in self.model_fields_set:
            _dict['HomeTeamScore'] = None

        # set to None if is_closed (nullable) is None
        # and model_fields_set contains the field
        if self.is_closed is None and "is_closed" in self.model_fields_set:
            _dict['IsClosed'] = None

        # set to None if last_play (nullable) is None
        # and model_fields_set contains the field
        if self.last_play is None and "last_play" in self.model_fields_set:
            _dict['LastPlay'] = None

        # set to None if neutral_venue (nullable) is None
        # and model_fields_set contains the field
        if self.neutral_venue is None and "neutral_venue" in self.model_fields_set:
            _dict['NeutralVenue'] = None

        # set to None if over_payout (nullable) is None
        # and model_fields_set contains the field
        if self.over_payout is None and "over_payout" in self.model_fields_set:
            _dict['OverPayout'] = None

        # set to None if over_under (nullable) is None
        # and model_fields_set contains the field
        if self.over_under is None and "over_under" in self.model_fields_set:
            _dict['OverUnder'] = None

        # set to None if period (nullable) is None
        # and model_fields_set contains the field
        if self.period is None and "period" in self.model_fields_set:
            _dict['Period'] = None

        # set to None if point_spread (nullable) is None
        # and model_fields_set contains the field
        if self.point_spread is None and "point_spread" in self.model_fields_set:
            _dict['PointSpread'] = None

        # set to None if point_spread_away_team_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.point_spread_away_team_money_line is None and "point_spread_away_team_money_line" in self.model_fields_set:
            _dict['PointSpreadAwayTeamMoneyLine'] = None

        # set to None if point_spread_home_team_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.point_spread_home_team_money_line is None and "point_spread_home_team_money_line" in self.model_fields_set:
            _dict['PointSpreadHomeTeamMoneyLine'] = None

        # set to None if stadium_id (nullable) is None
        # and model_fields_set contains the field
        if self.stadium_id is None and "stadium_id" in self.model_fields_set:
            _dict['StadiumID'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['Status'] = None

        # set to None if time_remaining_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.time_remaining_minutes is None and "time_remaining_minutes" in self.model_fields_set:
            _dict['TimeRemainingMinutes'] = None

        # set to None if time_remaining_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.time_remaining_seconds is None and "time_remaining_seconds" in self.model_fields_set:
            _dict['TimeRemainingSeconds'] = None

        # set to None if under_payout (nullable) is None
        # and model_fields_set contains the field
        if self.under_payout is None and "under_payout" in self.model_fields_set:
            _dict['UnderPayout'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['Updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Game from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Attendance": obj.get("Attendance"),
            "AwayRotationNumber": obj.get("AwayRotationNumber"),
            "AwayTeam": obj.get("AwayTeam"),
            "AwayTeamID": obj.get("AwayTeamID"),
            "AwayTeamMoneyLine": obj.get("AwayTeamMoneyLine"),
            "AwayTeamScore": obj.get("AwayTeamScore"),
            "Channel": obj.get("Channel"),
            "DateTime": obj.get("DateTime"),
            "DateTimeUTC": obj.get("DateTimeUTC"),
            "Day": obj.get("Day"),
            "GameEndDateTime": obj.get("GameEndDateTime"),
            "GameID": obj.get("GameID"),
            "GlobalAwayTeamID": obj.get("GlobalAwayTeamID"),
            "GlobalGameID": obj.get("GlobalGameID"),
            "GlobalHomeTeamID": obj.get("GlobalHomeTeamID"),
            "HomeRotationNumber": obj.get("HomeRotationNumber"),
            "HomeTeam": obj.get("HomeTeam"),
            "HomeTeamID": obj.get("HomeTeamID"),
            "HomeTeamMoneyLine": obj.get("HomeTeamMoneyLine"),
            "HomeTeamScore": obj.get("HomeTeamScore"),
            "IsClosed": obj.get("IsClosed"),
            "LastPlay": obj.get("LastPlay"),
            "NeutralVenue": obj.get("NeutralVenue"),
            "OverPayout": obj.get("OverPayout"),
            "OverUnder": obj.get("OverUnder"),
            "Period": obj.get("Period"),
            "Periods": [Period.from_dict(_item) for _item in obj["Periods"]] if obj.get("Periods") is not None else None,
            "PointSpread": obj.get("PointSpread"),
            "PointSpreadAwayTeamMoneyLine": obj.get("PointSpreadAwayTeamMoneyLine"),
            "PointSpreadHomeTeamMoneyLine": obj.get("PointSpreadHomeTeamMoneyLine"),
            "Season": obj.get("Season"),
            "SeasonType": obj.get("SeasonType"),
            "SeriesInfo": Series.from_dict(obj["SeriesInfo"]) if obj.get("SeriesInfo") is not None else None,
            "StadiumID": obj.get("StadiumID"),
            "Status": obj.get("Status"),
            "TimeRemainingMinutes": obj.get("TimeRemainingMinutes"),
            "TimeRemainingSeconds": obj.get("TimeRemainingSeconds"),
            "UnderPayout": obj.get("UnderPayout"),
            "Updated": obj.get("Updated")
        })
        return _obj


