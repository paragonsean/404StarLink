# coding: utf-8

"""
    NFL v3 Scores

    NFL schedules, scores, odds, weather, and news API.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.stadium import Stadium
from typing import Optional, Set
from typing_extensions import Self

class Score(BaseModel):
    """
    Score
    """ # noqa: E501
    attendance: Optional[StrictInt] = Field(default=None, alias="Attendance")
    away_rotation_number: Optional[StrictInt] = Field(default=None, alias="AwayRotationNumber")
    away_score: Optional[StrictInt] = Field(default=None, alias="AwayScore")
    away_score_overtime: Optional[StrictInt] = Field(default=None, alias="AwayScoreOvertime")
    away_score_quarter1: Optional[StrictInt] = Field(default=None, alias="AwayScoreQuarter1")
    away_score_quarter2: Optional[StrictInt] = Field(default=None, alias="AwayScoreQuarter2")
    away_score_quarter3: Optional[StrictInt] = Field(default=None, alias="AwayScoreQuarter3")
    away_score_quarter4: Optional[StrictInt] = Field(default=None, alias="AwayScoreQuarter4")
    away_team: Optional[StrictStr] = Field(default=None, alias="AwayTeam")
    away_team_id: Optional[StrictInt] = Field(default=None, alias="AwayTeamID")
    away_team_money_line: Optional[StrictInt] = Field(default=None, alias="AwayTeamMoneyLine")
    away_timeouts: Optional[StrictInt] = Field(default=None, alias="AwayTimeouts")
    canceled: Optional[StrictBool] = Field(default=None, alias="Canceled")
    channel: Optional[StrictStr] = Field(default=None, alias="Channel")
    closed: Optional[StrictBool] = Field(default=None, alias="Closed")
    var_date: Optional[StrictStr] = Field(default=None, alias="Date")
    date_time: Optional[StrictStr] = Field(default=None, alias="DateTime")
    date_time_utc: Optional[StrictStr] = Field(default=None, alias="DateTimeUTC")
    day: Optional[StrictStr] = Field(default=None, alias="Day")
    distance: Optional[StrictStr] = Field(default=None, alias="Distance")
    down: Optional[StrictInt] = Field(default=None, alias="Down")
    down_and_distance: Optional[StrictStr] = Field(default=None, alias="DownAndDistance")
    forecast_description: Optional[StrictStr] = Field(default=None, alias="ForecastDescription")
    forecast_temp_high: Optional[StrictInt] = Field(default=None, alias="ForecastTempHigh")
    forecast_temp_low: Optional[StrictInt] = Field(default=None, alias="ForecastTempLow")
    forecast_wind_chill: Optional[StrictInt] = Field(default=None, alias="ForecastWindChill")
    forecast_wind_speed: Optional[StrictInt] = Field(default=None, alias="ForecastWindSpeed")
    game_end_date_time: Optional[StrictStr] = Field(default=None, alias="GameEndDateTime")
    game_key: Optional[StrictStr] = Field(default=None, alias="GameKey")
    geo_lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GeoLat")
    geo_long: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GeoLong")
    global_away_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalAwayTeamID")
    global_game_id: Optional[StrictInt] = Field(default=None, alias="GlobalGameID")
    global_home_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalHomeTeamID")
    has1st_quarter_started: Optional[StrictBool] = Field(default=None, alias="Has1stQuarterStarted")
    has2nd_quarter_started: Optional[StrictBool] = Field(default=None, alias="Has2ndQuarterStarted")
    has3rd_quarter_started: Optional[StrictBool] = Field(default=None, alias="Has3rdQuarterStarted")
    has4th_quarter_started: Optional[StrictBool] = Field(default=None, alias="Has4thQuarterStarted")
    has_started: Optional[StrictBool] = Field(default=None, alias="HasStarted")
    home_rotation_number: Optional[StrictInt] = Field(default=None, alias="HomeRotationNumber")
    home_score: Optional[StrictInt] = Field(default=None, alias="HomeScore")
    home_score_overtime: Optional[StrictInt] = Field(default=None, alias="HomeScoreOvertime")
    home_score_quarter1: Optional[StrictInt] = Field(default=None, alias="HomeScoreQuarter1")
    home_score_quarter2: Optional[StrictInt] = Field(default=None, alias="HomeScoreQuarter2")
    home_score_quarter3: Optional[StrictInt] = Field(default=None, alias="HomeScoreQuarter3")
    home_score_quarter4: Optional[StrictInt] = Field(default=None, alias="HomeScoreQuarter4")
    home_team: Optional[StrictStr] = Field(default=None, alias="HomeTeam")
    home_team_id: Optional[StrictInt] = Field(default=None, alias="HomeTeamID")
    home_team_money_line: Optional[StrictInt] = Field(default=None, alias="HomeTeamMoneyLine")
    home_timeouts: Optional[StrictInt] = Field(default=None, alias="HomeTimeouts")
    is_in_progress: Optional[StrictBool] = Field(default=None, alias="IsInProgress")
    is_over: Optional[StrictBool] = Field(default=None, alias="IsOver")
    is_overtime: Optional[StrictBool] = Field(default=None, alias="IsOvertime")
    last_play: Optional[StrictStr] = Field(default=None, alias="LastPlay")
    last_updated: Optional[StrictStr] = Field(default=None, alias="LastUpdated")
    neutral_venue: Optional[StrictBool] = Field(default=None, alias="NeutralVenue")
    over_payout: Optional[StrictInt] = Field(default=None, alias="OverPayout")
    over_under: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="OverUnder")
    point_spread: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PointSpread")
    point_spread_away_team_money_line: Optional[StrictInt] = Field(default=None, alias="PointSpreadAwayTeamMoneyLine")
    point_spread_home_team_money_line: Optional[StrictInt] = Field(default=None, alias="PointSpreadHomeTeamMoneyLine")
    possession: Optional[StrictStr] = Field(default=None, alias="Possession")
    quarter: Optional[StrictStr] = Field(default=None, alias="Quarter")
    quarter_description: Optional[StrictStr] = Field(default=None, alias="QuarterDescription")
    red_zone: Optional[StrictStr] = Field(default=None, alias="RedZone")
    referee_id: Optional[StrictInt] = Field(default=None, alias="RefereeID")
    score_id: Optional[StrictInt] = Field(default=None, alias="ScoreID")
    season: Optional[StrictInt] = Field(default=None, alias="Season")
    season_type: Optional[StrictInt] = Field(default=None, alias="SeasonType")
    stadium_details: Optional[Stadium] = Field(default=None, alias="StadiumDetails")
    stadium_id: Optional[StrictInt] = Field(default=None, alias="StadiumID")
    status: Optional[StrictStr] = Field(default=None, alias="Status")
    time_remaining: Optional[StrictStr] = Field(default=None, alias="TimeRemaining")
    under_payout: Optional[StrictInt] = Field(default=None, alias="UnderPayout")
    week: Optional[StrictInt] = Field(default=None, alias="Week")
    yard_line: Optional[StrictInt] = Field(default=None, alias="YardLine")
    yard_line_territory: Optional[StrictStr] = Field(default=None, alias="YardLineTerritory")
    __properties: ClassVar[List[str]] = ["Attendance", "AwayRotationNumber", "AwayScore", "AwayScoreOvertime", "AwayScoreQuarter1", "AwayScoreQuarter2", "AwayScoreQuarter3", "AwayScoreQuarter4", "AwayTeam", "AwayTeamID", "AwayTeamMoneyLine", "AwayTimeouts", "Canceled", "Channel", "Closed", "Date", "DateTime", "DateTimeUTC", "Day", "Distance", "Down", "DownAndDistance", "ForecastDescription", "ForecastTempHigh", "ForecastTempLow", "ForecastWindChill", "ForecastWindSpeed", "GameEndDateTime", "GameKey", "GeoLat", "GeoLong", "GlobalAwayTeamID", "GlobalGameID", "GlobalHomeTeamID", "Has1stQuarterStarted", "Has2ndQuarterStarted", "Has3rdQuarterStarted", "Has4thQuarterStarted", "HasStarted", "HomeRotationNumber", "HomeScore", "HomeScoreOvertime", "HomeScoreQuarter1", "HomeScoreQuarter2", "HomeScoreQuarter3", "HomeScoreQuarter4", "HomeTeam", "HomeTeamID", "HomeTeamMoneyLine", "HomeTimeouts", "IsInProgress", "IsOver", "IsOvertime", "LastPlay", "LastUpdated", "NeutralVenue", "OverPayout", "OverUnder", "PointSpread", "PointSpreadAwayTeamMoneyLine", "PointSpreadHomeTeamMoneyLine", "Possession", "Quarter", "QuarterDescription", "RedZone", "RefereeID", "ScoreID", "Season", "SeasonType", "StadiumDetails", "StadiumID", "Status", "TimeRemaining", "UnderPayout", "Week", "YardLine", "YardLineTerritory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Score from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stadium_details
        if self.stadium_details:
            _dict['StadiumDetails'] = self.stadium_details.to_dict()
        # set to None if away_rotation_number (nullable) is None
        # and model_fields_set contains the field
        if self.away_rotation_number is None and "away_rotation_number" in self.model_fields_set:
            _dict['AwayRotationNumber'] = None

        # set to None if away_score (nullable) is None
        # and model_fields_set contains the field
        if self.away_score is None and "away_score" in self.model_fields_set:
            _dict['AwayScore'] = None

        # set to None if away_score_overtime (nullable) is None
        # and model_fields_set contains the field
        if self.away_score_overtime is None and "away_score_overtime" in self.model_fields_set:
            _dict['AwayScoreOvertime'] = None

        # set to None if away_score_quarter1 (nullable) is None
        # and model_fields_set contains the field
        if self.away_score_quarter1 is None and "away_score_quarter1" in self.model_fields_set:
            _dict['AwayScoreQuarter1'] = None

        # set to None if away_score_quarter2 (nullable) is None
        # and model_fields_set contains the field
        if self.away_score_quarter2 is None and "away_score_quarter2" in self.model_fields_set:
            _dict['AwayScoreQuarter2'] = None

        # set to None if away_score_quarter3 (nullable) is None
        # and model_fields_set contains the field
        if self.away_score_quarter3 is None and "away_score_quarter3" in self.model_fields_set:
            _dict['AwayScoreQuarter3'] = None

        # set to None if away_score_quarter4 (nullable) is None
        # and model_fields_set contains the field
        if self.away_score_quarter4 is None and "away_score_quarter4" in self.model_fields_set:
            _dict['AwayScoreQuarter4'] = None

        # set to None if away_team (nullable) is None
        # and model_fields_set contains the field
        if self.away_team is None and "away_team" in self.model_fields_set:
            _dict['AwayTeam'] = None

        # set to None if away_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_id is None and "away_team_id" in self.model_fields_set:
            _dict['AwayTeamID'] = None

        # set to None if away_team_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_money_line is None and "away_team_money_line" in self.model_fields_set:
            _dict['AwayTeamMoneyLine'] = None

        # set to None if away_timeouts (nullable) is None
        # and model_fields_set contains the field
        if self.away_timeouts is None and "away_timeouts" in self.model_fields_set:
            _dict['AwayTimeouts'] = None

        # set to None if canceled (nullable) is None
        # and model_fields_set contains the field
        if self.canceled is None and "canceled" in self.model_fields_set:
            _dict['Canceled'] = None

        # set to None if channel (nullable) is None
        # and model_fields_set contains the field
        if self.channel is None and "channel" in self.model_fields_set:
            _dict['Channel'] = None

        # set to None if closed (nullable) is None
        # and model_fields_set contains the field
        if self.closed is None and "closed" in self.model_fields_set:
            _dict['Closed'] = None

        # set to None if var_date (nullable) is None
        # and model_fields_set contains the field
        if self.var_date is None and "var_date" in self.model_fields_set:
            _dict['Date'] = None

        # set to None if date_time (nullable) is None
        # and model_fields_set contains the field
        if self.date_time is None and "date_time" in self.model_fields_set:
            _dict['DateTime'] = None

        # set to None if date_time_utc (nullable) is None
        # and model_fields_set contains the field
        if self.date_time_utc is None and "date_time_utc" in self.model_fields_set:
            _dict['DateTimeUTC'] = None

        # set to None if day (nullable) is None
        # and model_fields_set contains the field
        if self.day is None and "day" in self.model_fields_set:
            _dict['Day'] = None

        # set to None if distance (nullable) is None
        # and model_fields_set contains the field
        if self.distance is None and "distance" in self.model_fields_set:
            _dict['Distance'] = None

        # set to None if down (nullable) is None
        # and model_fields_set contains the field
        if self.down is None and "down" in self.model_fields_set:
            _dict['Down'] = None

        # set to None if down_and_distance (nullable) is None
        # and model_fields_set contains the field
        if self.down_and_distance is None and "down_and_distance" in self.model_fields_set:
            _dict['DownAndDistance'] = None

        # set to None if forecast_description (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_description is None and "forecast_description" in self.model_fields_set:
            _dict['ForecastDescription'] = None

        # set to None if forecast_temp_high (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_temp_high is None and "forecast_temp_high" in self.model_fields_set:
            _dict['ForecastTempHigh'] = None

        # set to None if forecast_temp_low (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_temp_low is None and "forecast_temp_low" in self.model_fields_set:
            _dict['ForecastTempLow'] = None

        # set to None if forecast_wind_chill (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_wind_chill is None and "forecast_wind_chill" in self.model_fields_set:
            _dict['ForecastWindChill'] = None

        # set to None if forecast_wind_speed (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_wind_speed is None and "forecast_wind_speed" in self.model_fields_set:
            _dict['ForecastWindSpeed'] = None

        # set to None if game_end_date_time (nullable) is None
        # and model_fields_set contains the field
        if self.game_end_date_time is None and "game_end_date_time" in self.model_fields_set:
            _dict['GameEndDateTime'] = None

        # set to None if game_key (nullable) is None
        # and model_fields_set contains the field
        if self.game_key is None and "game_key" in self.model_fields_set:
            _dict['GameKey'] = None

        # set to None if geo_lat (nullable) is None
        # and model_fields_set contains the field
        if self.geo_lat is None and "geo_lat" in self.model_fields_set:
            _dict['GeoLat'] = None

        # set to None if geo_long (nullable) is None
        # and model_fields_set contains the field
        if self.geo_long is None and "geo_long" in self.model_fields_set:
            _dict['GeoLong'] = None

        # set to None if global_away_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_away_team_id is None and "global_away_team_id" in self.model_fields_set:
            _dict['GlobalAwayTeamID'] = None

        # set to None if global_game_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_game_id is None and "global_game_id" in self.model_fields_set:
            _dict['GlobalGameID'] = None

        # set to None if global_home_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_home_team_id is None and "global_home_team_id" in self.model_fields_set:
            _dict['GlobalHomeTeamID'] = None

        # set to None if home_rotation_number (nullable) is None
        # and model_fields_set contains the field
        if self.home_rotation_number is None and "home_rotation_number" in self.model_fields_set:
            _dict['HomeRotationNumber'] = None

        # set to None if home_score (nullable) is None
        # and model_fields_set contains the field
        if self.home_score is None and "home_score" in self.model_fields_set:
            _dict['HomeScore'] = None

        # set to None if home_score_overtime (nullable) is None
        # and model_fields_set contains the field
        if self.home_score_overtime is None and "home_score_overtime" in self.model_fields_set:
            _dict['HomeScoreOvertime'] = None

        # set to None if home_score_quarter1 (nullable) is None
        # and model_fields_set contains the field
        if self.home_score_quarter1 is None and "home_score_quarter1" in self.model_fields_set:
            _dict['HomeScoreQuarter1'] = None

        # set to None if home_score_quarter2 (nullable) is None
        # and model_fields_set contains the field
        if self.home_score_quarter2 is None and "home_score_quarter2" in self.model_fields_set:
            _dict['HomeScoreQuarter2'] = None

        # set to None if home_score_quarter3 (nullable) is None
        # and model_fields_set contains the field
        if self.home_score_quarter3 is None and "home_score_quarter3" in self.model_fields_set:
            _dict['HomeScoreQuarter3'] = None

        # set to None if home_score_quarter4 (nullable) is None
        # and model_fields_set contains the field
        if self.home_score_quarter4 is None and "home_score_quarter4" in self.model_fields_set:
            _dict['HomeScoreQuarter4'] = None

        # set to None if home_team (nullable) is None
        # and model_fields_set contains the field
        if self.home_team is None and "home_team" in self.model_fields_set:
            _dict['HomeTeam'] = None

        # set to None if home_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_id is None and "home_team_id" in self.model_fields_set:
            _dict['HomeTeamID'] = None

        # set to None if home_team_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_money_line is None and "home_team_money_line" in self.model_fields_set:
            _dict['HomeTeamMoneyLine'] = None

        # set to None if home_timeouts (nullable) is None
        # and model_fields_set contains the field
        if self.home_timeouts is None and "home_timeouts" in self.model_fields_set:
            _dict['HomeTimeouts'] = None

        # set to None if last_play (nullable) is None
        # and model_fields_set contains the field
        if self.last_play is None and "last_play" in self.model_fields_set:
            _dict['LastPlay'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['LastUpdated'] = None

        # set to None if neutral_venue (nullable) is None
        # and model_fields_set contains the field
        if self.neutral_venue is None and "neutral_venue" in self.model_fields_set:
            _dict['NeutralVenue'] = None

        # set to None if over_payout (nullable) is None
        # and model_fields_set contains the field
        if self.over_payout is None and "over_payout" in self.model_fields_set:
            _dict['OverPayout'] = None

        # set to None if over_under (nullable) is None
        # and model_fields_set contains the field
        if self.over_under is None and "over_under" in self.model_fields_set:
            _dict['OverUnder'] = None

        # set to None if point_spread (nullable) is None
        # and model_fields_set contains the field
        if self.point_spread is None and "point_spread" in self.model_fields_set:
            _dict['PointSpread'] = None

        # set to None if point_spread_away_team_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.point_spread_away_team_money_line is None and "point_spread_away_team_money_line" in self.model_fields_set:
            _dict['PointSpreadAwayTeamMoneyLine'] = None

        # set to None if point_spread_home_team_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.point_spread_home_team_money_line is None and "point_spread_home_team_money_line" in self.model_fields_set:
            _dict['PointSpreadHomeTeamMoneyLine'] = None

        # set to None if possession (nullable) is None
        # and model_fields_set contains the field
        if self.possession is None and "possession" in self.model_fields_set:
            _dict['Possession'] = None

        # set to None if quarter (nullable) is None
        # and model_fields_set contains the field
        if self.quarter is None and "quarter" in self.model_fields_set:
            _dict['Quarter'] = None

        # set to None if quarter_description (nullable) is None
        # and model_fields_set contains the field
        if self.quarter_description is None and "quarter_description" in self.model_fields_set:
            _dict['QuarterDescription'] = None

        # set to None if red_zone (nullable) is None
        # and model_fields_set contains the field
        if self.red_zone is None and "red_zone" in self.model_fields_set:
            _dict['RedZone'] = None

        # set to None if referee_id (nullable) is None
        # and model_fields_set contains the field
        if self.referee_id is None and "referee_id" in self.model_fields_set:
            _dict['RefereeID'] = None

        # set to None if stadium_id (nullable) is None
        # and model_fields_set contains the field
        if self.stadium_id is None and "stadium_id" in self.model_fields_set:
            _dict['StadiumID'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['Status'] = None

        # set to None if time_remaining (nullable) is None
        # and model_fields_set contains the field
        if self.time_remaining is None and "time_remaining" in self.model_fields_set:
            _dict['TimeRemaining'] = None

        # set to None if under_payout (nullable) is None
        # and model_fields_set contains the field
        if self.under_payout is None and "under_payout" in self.model_fields_set:
            _dict['UnderPayout'] = None

        # set to None if yard_line (nullable) is None
        # and model_fields_set contains the field
        if self.yard_line is None and "yard_line" in self.model_fields_set:
            _dict['YardLine'] = None

        # set to None if yard_line_territory (nullable) is None
        # and model_fields_set contains the field
        if self.yard_line_territory is None and "yard_line_territory" in self.model_fields_set:
            _dict['YardLineTerritory'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Score from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Attendance": obj.get("Attendance"),
            "AwayRotationNumber": obj.get("AwayRotationNumber"),
            "AwayScore": obj.get("AwayScore"),
            "AwayScoreOvertime": obj.get("AwayScoreOvertime"),
            "AwayScoreQuarter1": obj.get("AwayScoreQuarter1"),
            "AwayScoreQuarter2": obj.get("AwayScoreQuarter2"),
            "AwayScoreQuarter3": obj.get("AwayScoreQuarter3"),
            "AwayScoreQuarter4": obj.get("AwayScoreQuarter4"),
            "AwayTeam": obj.get("AwayTeam"),
            "AwayTeamID": obj.get("AwayTeamID"),
            "AwayTeamMoneyLine": obj.get("AwayTeamMoneyLine"),
            "AwayTimeouts": obj.get("AwayTimeouts"),
            "Canceled": obj.get("Canceled"),
            "Channel": obj.get("Channel"),
            "Closed": obj.get("Closed"),
            "Date": obj.get("Date"),
            "DateTime": obj.get("DateTime"),
            "DateTimeUTC": obj.get("DateTimeUTC"),
            "Day": obj.get("Day"),
            "Distance": obj.get("Distance"),
            "Down": obj.get("Down"),
            "DownAndDistance": obj.get("DownAndDistance"),
            "ForecastDescription": obj.get("ForecastDescription"),
            "ForecastTempHigh": obj.get("ForecastTempHigh"),
            "ForecastTempLow": obj.get("ForecastTempLow"),
            "ForecastWindChill": obj.get("ForecastWindChill"),
            "ForecastWindSpeed": obj.get("ForecastWindSpeed"),
            "GameEndDateTime": obj.get("GameEndDateTime"),
            "GameKey": obj.get("GameKey"),
            "GeoLat": obj.get("GeoLat"),
            "GeoLong": obj.get("GeoLong"),
            "GlobalAwayTeamID": obj.get("GlobalAwayTeamID"),
            "GlobalGameID": obj.get("GlobalGameID"),
            "GlobalHomeTeamID": obj.get("GlobalHomeTeamID"),
            "Has1stQuarterStarted": obj.get("Has1stQuarterStarted"),
            "Has2ndQuarterStarted": obj.get("Has2ndQuarterStarted"),
            "Has3rdQuarterStarted": obj.get("Has3rdQuarterStarted"),
            "Has4thQuarterStarted": obj.get("Has4thQuarterStarted"),
            "HasStarted": obj.get("HasStarted"),
            "HomeRotationNumber": obj.get("HomeRotationNumber"),
            "HomeScore": obj.get("HomeScore"),
            "HomeScoreOvertime": obj.get("HomeScoreOvertime"),
            "HomeScoreQuarter1": obj.get("HomeScoreQuarter1"),
            "HomeScoreQuarter2": obj.get("HomeScoreQuarter2"),
            "HomeScoreQuarter3": obj.get("HomeScoreQuarter3"),
            "HomeScoreQuarter4": obj.get("HomeScoreQuarter4"),
            "HomeTeam": obj.get("HomeTeam"),
            "HomeTeamID": obj.get("HomeTeamID"),
            "HomeTeamMoneyLine": obj.get("HomeTeamMoneyLine"),
            "HomeTimeouts": obj.get("HomeTimeouts"),
            "IsInProgress": obj.get("IsInProgress"),
            "IsOver": obj.get("IsOver"),
            "IsOvertime": obj.get("IsOvertime"),
            "LastPlay": obj.get("LastPlay"),
            "LastUpdated": obj.get("LastUpdated"),
            "NeutralVenue": obj.get("NeutralVenue"),
            "OverPayout": obj.get("OverPayout"),
            "OverUnder": obj.get("OverUnder"),
            "PointSpread": obj.get("PointSpread"),
            "PointSpreadAwayTeamMoneyLine": obj.get("PointSpreadAwayTeamMoneyLine"),
            "PointSpreadHomeTeamMoneyLine": obj.get("PointSpreadHomeTeamMoneyLine"),
            "Possession": obj.get("Possession"),
            "Quarter": obj.get("Quarter"),
            "QuarterDescription": obj.get("QuarterDescription"),
            "RedZone": obj.get("RedZone"),
            "RefereeID": obj.get("RefereeID"),
            "ScoreID": obj.get("ScoreID"),
            "Season": obj.get("Season"),
            "SeasonType": obj.get("SeasonType"),
            "StadiumDetails": Stadium.from_dict(obj["StadiumDetails"]) if obj.get("StadiumDetails") is not None else None,
            "StadiumID": obj.get("StadiumID"),
            "Status": obj.get("Status"),
            "TimeRemaining": obj.get("TimeRemaining"),
            "UnderPayout": obj.get("UnderPayout"),
            "Week": obj.get("Week"),
            "YardLine": obj.get("YardLine"),
            "YardLineTerritory": obj.get("YardLineTerritory")
        })
        return _obj


