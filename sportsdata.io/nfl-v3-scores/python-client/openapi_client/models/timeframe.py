# coding: utf-8

"""
    NFL v3 Scores

    NFL schedules, scores, odds, weather, and news API.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Timeframe(BaseModel):
    """
    Timeframe
    """ # noqa: E501
    api_season: Optional[StrictStr] = Field(default=None, alias="ApiSeason")
    api_week: Optional[StrictStr] = Field(default=None, alias="ApiWeek")
    end_date: Optional[StrictStr] = Field(default=None, alias="EndDate")
    first_game_end: Optional[StrictStr] = Field(default=None, alias="FirstGameEnd")
    first_game_start: Optional[StrictStr] = Field(default=None, alias="FirstGameStart")
    has_ended: Optional[StrictBool] = Field(default=None, alias="HasEnded")
    has_first_game_ended: Optional[StrictBool] = Field(default=None, alias="HasFirstGameEnded")
    has_first_game_started: Optional[StrictBool] = Field(default=None, alias="HasFirstGameStarted")
    has_games: Optional[StrictBool] = Field(default=None, alias="HasGames")
    has_last_game_ended: Optional[StrictBool] = Field(default=None, alias="HasLastGameEnded")
    has_started: Optional[StrictBool] = Field(default=None, alias="HasStarted")
    last_game_end: Optional[StrictStr] = Field(default=None, alias="LastGameEnd")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    season: Optional[StrictInt] = Field(default=None, alias="Season")
    season_type: Optional[StrictInt] = Field(default=None, alias="SeasonType")
    short_name: Optional[StrictStr] = Field(default=None, alias="ShortName")
    start_date: Optional[StrictStr] = Field(default=None, alias="StartDate")
    week: Optional[StrictInt] = Field(default=None, alias="Week")
    __properties: ClassVar[List[str]] = ["ApiSeason", "ApiWeek", "EndDate", "FirstGameEnd", "FirstGameStart", "HasEnded", "HasFirstGameEnded", "HasFirstGameStarted", "HasGames", "HasLastGameEnded", "HasStarted", "LastGameEnd", "Name", "Season", "SeasonType", "ShortName", "StartDate", "Week"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Timeframe from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if api_season (nullable) is None
        # and model_fields_set contains the field
        if self.api_season is None and "api_season" in self.model_fields_set:
            _dict['ApiSeason'] = None

        # set to None if api_week (nullable) is None
        # and model_fields_set contains the field
        if self.api_week is None and "api_week" in self.model_fields_set:
            _dict['ApiWeek'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['EndDate'] = None

        # set to None if first_game_end (nullable) is None
        # and model_fields_set contains the field
        if self.first_game_end is None and "first_game_end" in self.model_fields_set:
            _dict['FirstGameEnd'] = None

        # set to None if first_game_start (nullable) is None
        # and model_fields_set contains the field
        if self.first_game_start is None and "first_game_start" in self.model_fields_set:
            _dict['FirstGameStart'] = None

        # set to None if last_game_end (nullable) is None
        # and model_fields_set contains the field
        if self.last_game_end is None and "last_game_end" in self.model_fields_set:
            _dict['LastGameEnd'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if short_name (nullable) is None
        # and model_fields_set contains the field
        if self.short_name is None and "short_name" in self.model_fields_set:
            _dict['ShortName'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['StartDate'] = None

        # set to None if week (nullable) is None
        # and model_fields_set contains the field
        if self.week is None and "week" in self.model_fields_set:
            _dict['Week'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Timeframe from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApiSeason": obj.get("ApiSeason"),
            "ApiWeek": obj.get("ApiWeek"),
            "EndDate": obj.get("EndDate"),
            "FirstGameEnd": obj.get("FirstGameEnd"),
            "FirstGameStart": obj.get("FirstGameStart"),
            "HasEnded": obj.get("HasEnded"),
            "HasFirstGameEnded": obj.get("HasFirstGameEnded"),
            "HasFirstGameStarted": obj.get("HasFirstGameStarted"),
            "HasGames": obj.get("HasGames"),
            "HasLastGameEnded": obj.get("HasLastGameEnded"),
            "HasStarted": obj.get("HasStarted"),
            "LastGameEnd": obj.get("LastGameEnd"),
            "Name": obj.get("Name"),
            "Season": obj.get("Season"),
            "SeasonType": obj.get("SeasonType"),
            "ShortName": obj.get("ShortName"),
            "StartDate": obj.get("StartDate"),
            "Week": obj.get("Week")
        })
        return _obj


