# coding: utf-8

"""
    NFL v3 Scores

    NFL schedules, scores, odds, weather, and news API.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Standing(BaseModel):
    """
    Standing
    """ # noqa: E501
    conference: Optional[StrictStr] = Field(default=None, alias="Conference")
    conference_losses: Optional[StrictInt] = Field(default=None, alias="ConferenceLosses")
    conference_rank: Optional[StrictInt] = Field(default=None, alias="ConferenceRank")
    conference_ties: Optional[StrictInt] = Field(default=None, alias="ConferenceTies")
    conference_wins: Optional[StrictInt] = Field(default=None, alias="ConferenceWins")
    division: Optional[StrictStr] = Field(default=None, alias="Division")
    division_losses: Optional[StrictInt] = Field(default=None, alias="DivisionLosses")
    division_rank: Optional[StrictInt] = Field(default=None, alias="DivisionRank")
    division_ties: Optional[StrictInt] = Field(default=None, alias="DivisionTies")
    division_wins: Optional[StrictInt] = Field(default=None, alias="DivisionWins")
    global_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalTeamID")
    losses: Optional[StrictInt] = Field(default=None, alias="Losses")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    net_points: Optional[StrictInt] = Field(default=None, alias="NetPoints")
    percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Percentage")
    points_against: Optional[StrictInt] = Field(default=None, alias="PointsAgainst")
    points_for: Optional[StrictInt] = Field(default=None, alias="PointsFor")
    season: Optional[StrictInt] = Field(default=None, alias="Season")
    season_type: Optional[StrictInt] = Field(default=None, alias="SeasonType")
    team: Optional[StrictStr] = Field(default=None, alias="Team")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamID")
    ties: Optional[StrictInt] = Field(default=None, alias="Ties")
    touchdowns: Optional[StrictInt] = Field(default=None, alias="Touchdowns")
    wins: Optional[StrictInt] = Field(default=None, alias="Wins")
    __properties: ClassVar[List[str]] = ["Conference", "ConferenceLosses", "ConferenceRank", "ConferenceTies", "ConferenceWins", "Division", "DivisionLosses", "DivisionRank", "DivisionTies", "DivisionWins", "GlobalTeamID", "Losses", "Name", "NetPoints", "Percentage", "PointsAgainst", "PointsFor", "Season", "SeasonType", "Team", "TeamID", "Ties", "Touchdowns", "Wins"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Standing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if conference (nullable) is None
        # and model_fields_set contains the field
        if self.conference is None and "conference" in self.model_fields_set:
            _dict['Conference'] = None

        # set to None if division (nullable) is None
        # and model_fields_set contains the field
        if self.division is None and "division" in self.model_fields_set:
            _dict['Division'] = None

        # set to None if global_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_team_id is None and "global_team_id" in self.model_fields_set:
            _dict['GlobalTeamID'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if team (nullable) is None
        # and model_fields_set contains the field
        if self.team is None and "team" in self.model_fields_set:
            _dict['Team'] = None

        # set to None if touchdowns (nullable) is None
        # and model_fields_set contains the field
        if self.touchdowns is None and "touchdowns" in self.model_fields_set:
            _dict['Touchdowns'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Standing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Conference": obj.get("Conference"),
            "ConferenceLosses": obj.get("ConferenceLosses"),
            "ConferenceRank": obj.get("ConferenceRank"),
            "ConferenceTies": obj.get("ConferenceTies"),
            "ConferenceWins": obj.get("ConferenceWins"),
            "Division": obj.get("Division"),
            "DivisionLosses": obj.get("DivisionLosses"),
            "DivisionRank": obj.get("DivisionRank"),
            "DivisionTies": obj.get("DivisionTies"),
            "DivisionWins": obj.get("DivisionWins"),
            "GlobalTeamID": obj.get("GlobalTeamID"),
            "Losses": obj.get("Losses"),
            "Name": obj.get("Name"),
            "NetPoints": obj.get("NetPoints"),
            "Percentage": obj.get("Percentage"),
            "PointsAgainst": obj.get("PointsAgainst"),
            "PointsFor": obj.get("PointsFor"),
            "Season": obj.get("Season"),
            "SeasonType": obj.get("SeasonType"),
            "Team": obj.get("Team"),
            "TeamID": obj.get("TeamID"),
            "Ties": obj.get("Ties"),
            "Touchdowns": obj.get("Touchdowns"),
            "Wins": obj.get("Wins")
        })
        return _obj


