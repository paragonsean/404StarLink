# coding: utf-8

"""
    NFL v3 Scores

    NFL schedules, scores, odds, weather, and news API.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.stadium import Stadium
from typing import Optional, Set
from typing_extensions import Self

class Team(BaseModel):
    """
    Team
    """ # noqa: E501
    average_draft_position: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AverageDraftPosition")
    average_draft_position2_qb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AverageDraftPosition2QB")
    average_draft_position_dynasty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AverageDraftPositionDynasty")
    average_draft_position_ppr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AverageDraftPositionPPR")
    bye_week: Optional[StrictInt] = Field(default=None, alias="ByeWeek")
    city: Optional[StrictStr] = Field(default=None, alias="City")
    conference: Optional[StrictStr] = Field(default=None, alias="Conference")
    defensive_coordinator: Optional[StrictStr] = Field(default=None, alias="DefensiveCoordinator")
    defensive_scheme: Optional[StrictStr] = Field(default=None, alias="DefensiveScheme")
    division: Optional[StrictStr] = Field(default=None, alias="Division")
    draft_kings_name: Optional[StrictStr] = Field(default=None, alias="DraftKingsName")
    draft_kings_player_id: Optional[StrictInt] = Field(default=None, alias="DraftKingsPlayerID")
    fan_duel_name: Optional[StrictStr] = Field(default=None, alias="FanDuelName")
    fan_duel_player_id: Optional[StrictInt] = Field(default=None, alias="FanDuelPlayerID")
    fantasy_draft_name: Optional[StrictStr] = Field(default=None, alias="FantasyDraftName")
    fantasy_draft_player_id: Optional[StrictInt] = Field(default=None, alias="FantasyDraftPlayerID")
    full_name: Optional[StrictStr] = Field(default=None, alias="FullName")
    global_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalTeamID")
    head_coach: Optional[StrictStr] = Field(default=None, alias="HeadCoach")
    key: Optional[StrictStr] = Field(default=None, alias="Key")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    offensive_coordinator: Optional[StrictStr] = Field(default=None, alias="OffensiveCoordinator")
    offensive_scheme: Optional[StrictStr] = Field(default=None, alias="OffensiveScheme")
    player_id: Optional[StrictInt] = Field(default=None, alias="PlayerID")
    primary_color: Optional[StrictStr] = Field(default=None, alias="PrimaryColor")
    quaternary_color: Optional[StrictStr] = Field(default=None, alias="QuaternaryColor")
    secondary_color: Optional[StrictStr] = Field(default=None, alias="SecondaryColor")
    special_teams_coach: Optional[StrictStr] = Field(default=None, alias="SpecialTeamsCoach")
    stadium_details: Optional[Stadium] = Field(default=None, alias="StadiumDetails")
    stadium_id: Optional[StrictInt] = Field(default=None, alias="StadiumID")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamID")
    tertiary_color: Optional[StrictStr] = Field(default=None, alias="TertiaryColor")
    upcoming_draft_kings_salary: Optional[StrictInt] = Field(default=None, alias="UpcomingDraftKingsSalary")
    upcoming_fan_duel_salary: Optional[StrictInt] = Field(default=None, alias="UpcomingFanDuelSalary")
    upcoming_opponent: Optional[StrictStr] = Field(default=None, alias="UpcomingOpponent")
    upcoming_opponent_position_rank: Optional[StrictInt] = Field(default=None, alias="UpcomingOpponentPositionRank")
    upcoming_opponent_rank: Optional[StrictInt] = Field(default=None, alias="UpcomingOpponentRank")
    upcoming_salary: Optional[StrictInt] = Field(default=None, alias="UpcomingSalary")
    upcoming_yahoo_salary: Optional[StrictInt] = Field(default=None, alias="UpcomingYahooSalary")
    wikipedia_logo_url: Optional[StrictStr] = Field(default=None, alias="WikipediaLogoUrl")
    wikipedia_word_mark_url: Optional[StrictStr] = Field(default=None, alias="WikipediaWordMarkUrl")
    yahoo_name: Optional[StrictStr] = Field(default=None, alias="YahooName")
    yahoo_player_id: Optional[StrictInt] = Field(default=None, alias="YahooPlayerID")
    __properties: ClassVar[List[str]] = ["AverageDraftPosition", "AverageDraftPosition2QB", "AverageDraftPositionDynasty", "AverageDraftPositionPPR", "ByeWeek", "City", "Conference", "DefensiveCoordinator", "DefensiveScheme", "Division", "DraftKingsName", "DraftKingsPlayerID", "FanDuelName", "FanDuelPlayerID", "FantasyDraftName", "FantasyDraftPlayerID", "FullName", "GlobalTeamID", "HeadCoach", "Key", "Name", "OffensiveCoordinator", "OffensiveScheme", "PlayerID", "PrimaryColor", "QuaternaryColor", "SecondaryColor", "SpecialTeamsCoach", "StadiumDetails", "StadiumID", "TeamID", "TertiaryColor", "UpcomingDraftKingsSalary", "UpcomingFanDuelSalary", "UpcomingOpponent", "UpcomingOpponentPositionRank", "UpcomingOpponentRank", "UpcomingSalary", "UpcomingYahooSalary", "WikipediaLogoUrl", "WikipediaWordMarkUrl", "YahooName", "YahooPlayerID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Team from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stadium_details
        if self.stadium_details:
            _dict['StadiumDetails'] = self.stadium_details.to_dict()
        # set to None if average_draft_position (nullable) is None
        # and model_fields_set contains the field
        if self.average_draft_position is None and "average_draft_position" in self.model_fields_set:
            _dict['AverageDraftPosition'] = None

        # set to None if average_draft_position2_qb (nullable) is None
        # and model_fields_set contains the field
        if self.average_draft_position2_qb is None and "average_draft_position2_qb" in self.model_fields_set:
            _dict['AverageDraftPosition2QB'] = None

        # set to None if average_draft_position_dynasty (nullable) is None
        # and model_fields_set contains the field
        if self.average_draft_position_dynasty is None and "average_draft_position_dynasty" in self.model_fields_set:
            _dict['AverageDraftPositionDynasty'] = None

        # set to None if average_draft_position_ppr (nullable) is None
        # and model_fields_set contains the field
        if self.average_draft_position_ppr is None and "average_draft_position_ppr" in self.model_fields_set:
            _dict['AverageDraftPositionPPR'] = None

        # set to None if bye_week (nullable) is None
        # and model_fields_set contains the field
        if self.bye_week is None and "bye_week" in self.model_fields_set:
            _dict['ByeWeek'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['City'] = None

        # set to None if conference (nullable) is None
        # and model_fields_set contains the field
        if self.conference is None and "conference" in self.model_fields_set:
            _dict['Conference'] = None

        # set to None if defensive_coordinator (nullable) is None
        # and model_fields_set contains the field
        if self.defensive_coordinator is None and "defensive_coordinator" in self.model_fields_set:
            _dict['DefensiveCoordinator'] = None

        # set to None if defensive_scheme (nullable) is None
        # and model_fields_set contains the field
        if self.defensive_scheme is None and "defensive_scheme" in self.model_fields_set:
            _dict['DefensiveScheme'] = None

        # set to None if division (nullable) is None
        # and model_fields_set contains the field
        if self.division is None and "division" in self.model_fields_set:
            _dict['Division'] = None

        # set to None if draft_kings_name (nullable) is None
        # and model_fields_set contains the field
        if self.draft_kings_name is None and "draft_kings_name" in self.model_fields_set:
            _dict['DraftKingsName'] = None

        # set to None if draft_kings_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.draft_kings_player_id is None and "draft_kings_player_id" in self.model_fields_set:
            _dict['DraftKingsPlayerID'] = None

        # set to None if fan_duel_name (nullable) is None
        # and model_fields_set contains the field
        if self.fan_duel_name is None and "fan_duel_name" in self.model_fields_set:
            _dict['FanDuelName'] = None

        # set to None if fan_duel_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.fan_duel_player_id is None and "fan_duel_player_id" in self.model_fields_set:
            _dict['FanDuelPlayerID'] = None

        # set to None if fantasy_draft_name (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_draft_name is None and "fantasy_draft_name" in self.model_fields_set:
            _dict['FantasyDraftName'] = None

        # set to None if fantasy_draft_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_draft_player_id is None and "fantasy_draft_player_id" in self.model_fields_set:
            _dict['FantasyDraftPlayerID'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['FullName'] = None

        # set to None if global_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_team_id is None and "global_team_id" in self.model_fields_set:
            _dict['GlobalTeamID'] = None

        # set to None if head_coach (nullable) is None
        # and model_fields_set contains the field
        if self.head_coach is None and "head_coach" in self.model_fields_set:
            _dict['HeadCoach'] = None

        # set to None if key (nullable) is None
        # and model_fields_set contains the field
        if self.key is None and "key" in self.model_fields_set:
            _dict['Key'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if offensive_coordinator (nullable) is None
        # and model_fields_set contains the field
        if self.offensive_coordinator is None and "offensive_coordinator" in self.model_fields_set:
            _dict['OffensiveCoordinator'] = None

        # set to None if offensive_scheme (nullable) is None
        # and model_fields_set contains the field
        if self.offensive_scheme is None and "offensive_scheme" in self.model_fields_set:
            _dict['OffensiveScheme'] = None

        # set to None if primary_color (nullable) is None
        # and model_fields_set contains the field
        if self.primary_color is None and "primary_color" in self.model_fields_set:
            _dict['PrimaryColor'] = None

        # set to None if quaternary_color (nullable) is None
        # and model_fields_set contains the field
        if self.quaternary_color is None and "quaternary_color" in self.model_fields_set:
            _dict['QuaternaryColor'] = None

        # set to None if secondary_color (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_color is None and "secondary_color" in self.model_fields_set:
            _dict['SecondaryColor'] = None

        # set to None if special_teams_coach (nullable) is None
        # and model_fields_set contains the field
        if self.special_teams_coach is None and "special_teams_coach" in self.model_fields_set:
            _dict['SpecialTeamsCoach'] = None

        # set to None if stadium_id (nullable) is None
        # and model_fields_set contains the field
        if self.stadium_id is None and "stadium_id" in self.model_fields_set:
            _dict['StadiumID'] = None

        # set to None if tertiary_color (nullable) is None
        # and model_fields_set contains the field
        if self.tertiary_color is None and "tertiary_color" in self.model_fields_set:
            _dict['TertiaryColor'] = None

        # set to None if upcoming_draft_kings_salary (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_draft_kings_salary is None and "upcoming_draft_kings_salary" in self.model_fields_set:
            _dict['UpcomingDraftKingsSalary'] = None

        # set to None if upcoming_fan_duel_salary (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_fan_duel_salary is None and "upcoming_fan_duel_salary" in self.model_fields_set:
            _dict['UpcomingFanDuelSalary'] = None

        # set to None if upcoming_opponent (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_opponent is None and "upcoming_opponent" in self.model_fields_set:
            _dict['UpcomingOpponent'] = None

        # set to None if upcoming_opponent_position_rank (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_opponent_position_rank is None and "upcoming_opponent_position_rank" in self.model_fields_set:
            _dict['UpcomingOpponentPositionRank'] = None

        # set to None if upcoming_opponent_rank (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_opponent_rank is None and "upcoming_opponent_rank" in self.model_fields_set:
            _dict['UpcomingOpponentRank'] = None

        # set to None if upcoming_salary (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_salary is None and "upcoming_salary" in self.model_fields_set:
            _dict['UpcomingSalary'] = None

        # set to None if upcoming_yahoo_salary (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_yahoo_salary is None and "upcoming_yahoo_salary" in self.model_fields_set:
            _dict['UpcomingYahooSalary'] = None

        # set to None if wikipedia_logo_url (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia_logo_url is None and "wikipedia_logo_url" in self.model_fields_set:
            _dict['WikipediaLogoUrl'] = None

        # set to None if wikipedia_word_mark_url (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia_word_mark_url is None and "wikipedia_word_mark_url" in self.model_fields_set:
            _dict['WikipediaWordMarkUrl'] = None

        # set to None if yahoo_name (nullable) is None
        # and model_fields_set contains the field
        if self.yahoo_name is None and "yahoo_name" in self.model_fields_set:
            _dict['YahooName'] = None

        # set to None if yahoo_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.yahoo_player_id is None and "yahoo_player_id" in self.model_fields_set:
            _dict['YahooPlayerID'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Team from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AverageDraftPosition": obj.get("AverageDraftPosition"),
            "AverageDraftPosition2QB": obj.get("AverageDraftPosition2QB"),
            "AverageDraftPositionDynasty": obj.get("AverageDraftPositionDynasty"),
            "AverageDraftPositionPPR": obj.get("AverageDraftPositionPPR"),
            "ByeWeek": obj.get("ByeWeek"),
            "City": obj.get("City"),
            "Conference": obj.get("Conference"),
            "DefensiveCoordinator": obj.get("DefensiveCoordinator"),
            "DefensiveScheme": obj.get("DefensiveScheme"),
            "Division": obj.get("Division"),
            "DraftKingsName": obj.get("DraftKingsName"),
            "DraftKingsPlayerID": obj.get("DraftKingsPlayerID"),
            "FanDuelName": obj.get("FanDuelName"),
            "FanDuelPlayerID": obj.get("FanDuelPlayerID"),
            "FantasyDraftName": obj.get("FantasyDraftName"),
            "FantasyDraftPlayerID": obj.get("FantasyDraftPlayerID"),
            "FullName": obj.get("FullName"),
            "GlobalTeamID": obj.get("GlobalTeamID"),
            "HeadCoach": obj.get("HeadCoach"),
            "Key": obj.get("Key"),
            "Name": obj.get("Name"),
            "OffensiveCoordinator": obj.get("OffensiveCoordinator"),
            "OffensiveScheme": obj.get("OffensiveScheme"),
            "PlayerID": obj.get("PlayerID"),
            "PrimaryColor": obj.get("PrimaryColor"),
            "QuaternaryColor": obj.get("QuaternaryColor"),
            "SecondaryColor": obj.get("SecondaryColor"),
            "SpecialTeamsCoach": obj.get("SpecialTeamsCoach"),
            "StadiumDetails": Stadium.from_dict(obj["StadiumDetails"]) if obj.get("StadiumDetails") is not None else None,
            "StadiumID": obj.get("StadiumID"),
            "TeamID": obj.get("TeamID"),
            "TertiaryColor": obj.get("TertiaryColor"),
            "UpcomingDraftKingsSalary": obj.get("UpcomingDraftKingsSalary"),
            "UpcomingFanDuelSalary": obj.get("UpcomingFanDuelSalary"),
            "UpcomingOpponent": obj.get("UpcomingOpponent"),
            "UpcomingOpponentPositionRank": obj.get("UpcomingOpponentPositionRank"),
            "UpcomingOpponentRank": obj.get("UpcomingOpponentRank"),
            "UpcomingSalary": obj.get("UpcomingSalary"),
            "UpcomingYahooSalary": obj.get("UpcomingYahooSalary"),
            "WikipediaLogoUrl": obj.get("WikipediaLogoUrl"),
            "WikipediaWordMarkUrl": obj.get("WikipediaWordMarkUrl"),
            "YahooName": obj.get("YahooName"),
            "YahooPlayerID": obj.get("YahooPlayerID")
        })
        return _obj


