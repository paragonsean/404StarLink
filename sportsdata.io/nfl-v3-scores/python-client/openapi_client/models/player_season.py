# coding: utf-8

"""
    NFL v3 Scores

    NFL schedules, scores, odds, weather, and news API.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.scoring_detail import ScoringDetail
from typing import Optional, Set
from typing_extensions import Self

class PlayerSeason(BaseModel):
    """
    PlayerSeason
    """ # noqa: E501
    activated: Optional[StrictInt] = Field(default=None, alias="Activated")
    assisted_tackles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AssistedTackles")
    auction_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AuctionValue")
    auction_value_ppr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AuctionValuePPR")
    average_draft_position: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AverageDraftPosition")
    average_draft_position2_qb: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AverageDraftPosition2QB")
    average_draft_position_dynasty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AverageDraftPositionDynasty")
    average_draft_position_ppr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AverageDraftPositionPPR")
    average_draft_position_rookie: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AverageDraftPositionRookie")
    blocked_kick_return_touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="BlockedKickReturnTouchdowns")
    blocked_kick_return_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="BlockedKickReturnYards")
    blocked_kicks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="BlockedKicks")
    defensive_snaps_played: Optional[StrictInt] = Field(default=None, alias="DefensiveSnapsPlayed")
    defensive_team_snaps: Optional[StrictInt] = Field(default=None, alias="DefensiveTeamSnaps")
    defensive_touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="DefensiveTouchdowns")
    extra_points_attempted: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ExtraPointsAttempted")
    extra_points_had_blocked: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ExtraPointsHadBlocked")
    extra_points_made: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ExtraPointsMade")
    fantasy_points: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FantasyPoints")
    fantasy_points_draft_kings: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FantasyPointsDraftKings")
    fantasy_points_fan_duel: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FantasyPointsFanDuel")
    fantasy_points_fantasy_draft: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FantasyPointsFantasyDraft")
    fantasy_points_ppr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FantasyPointsPPR")
    fantasy_points_yahoo: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FantasyPointsYahoo")
    fantasy_position: Optional[StrictStr] = Field(default=None, alias="FantasyPosition")
    field_goal_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FieldGoalPercentage")
    field_goal_return_touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FieldGoalReturnTouchdowns")
    field_goal_return_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FieldGoalReturnYards")
    field_goals_attempted: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FieldGoalsAttempted")
    field_goals_had_blocked: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FieldGoalsHadBlocked")
    field_goals_longest_made: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FieldGoalsLongestMade")
    field_goals_made: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FieldGoalsMade")
    field_goals_made0to19: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FieldGoalsMade0to19")
    field_goals_made20to29: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FieldGoalsMade20to29")
    field_goals_made30to39: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FieldGoalsMade30to39")
    field_goals_made40to49: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FieldGoalsMade40to49")
    field_goals_made50_plus: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FieldGoalsMade50Plus")
    fumble_return_touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FumbleReturnTouchdowns")
    fumble_return_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FumbleReturnYards")
    fumbles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Fumbles")
    fumbles_forced: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FumblesForced")
    fumbles_lost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FumblesLost")
    fumbles_out_of_bounds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FumblesOutOfBounds")
    fumbles_own_recoveries: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FumblesOwnRecoveries")
    fumbles_recovered: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="FumblesRecovered")
    global_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalTeamID")
    humidity: Optional[StrictInt] = Field(default=None, alias="Humidity")
    interception_return_touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="InterceptionReturnTouchdowns")
    interception_return_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="InterceptionReturnYards")
    interceptions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Interceptions")
    kick_return_fair_catches: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="KickReturnFairCatches")
    kick_return_long: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="KickReturnLong")
    kick_return_touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="KickReturnTouchdowns")
    kick_return_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="KickReturnYards")
    kick_return_yards_per_attempt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="KickReturnYardsPerAttempt")
    kick_returns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="KickReturns")
    misc_assisted_tackles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="MiscAssistedTackles")
    misc_fumbles_forced: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="MiscFumblesForced")
    misc_fumbles_recovered: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="MiscFumblesRecovered")
    misc_solo_tackles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="MiscSoloTackles")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    number: Optional[StrictInt] = Field(default=None, alias="Number")
    offensive_fumble_recovery_touchdowns: Optional[StrictInt] = Field(default=None, alias="OffensiveFumbleRecoveryTouchdowns")
    offensive_snaps_played: Optional[StrictInt] = Field(default=None, alias="OffensiveSnapsPlayed")
    offensive_team_snaps: Optional[StrictInt] = Field(default=None, alias="OffensiveTeamSnaps")
    offensive_touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="OffensiveTouchdowns")
    passes_defended: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassesDefended")
    passing_attempts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassingAttempts")
    passing_completion_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassingCompletionPercentage")
    passing_completions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassingCompletions")
    passing_interceptions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassingInterceptions")
    passing_long: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassingLong")
    passing_rating: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassingRating")
    passing_sack_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassingSackYards")
    passing_sacks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassingSacks")
    passing_touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassingTouchdowns")
    passing_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassingYards")
    passing_yards_per_attempt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassingYardsPerAttempt")
    passing_yards_per_completion: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PassingYardsPerCompletion")
    played: Optional[StrictInt] = Field(default=None, alias="Played")
    player_id: Optional[StrictInt] = Field(default=None, alias="PlayerID")
    player_season_id: Optional[StrictInt] = Field(default=None, alias="PlayerSeasonID")
    position: Optional[StrictStr] = Field(default=None, alias="Position")
    position_category: Optional[StrictStr] = Field(default=None, alias="PositionCategory")
    punt_average: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntAverage")
    punt_inside20: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntInside20")
    punt_long: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntLong")
    punt_net_average: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntNetAverage")
    punt_net_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntNetYards")
    punt_return_fair_catches: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntReturnFairCatches")
    punt_return_long: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntReturnLong")
    punt_return_touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntReturnTouchdowns")
    punt_return_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntReturnYards")
    punt_return_yards_per_attempt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntReturnYardsPerAttempt")
    punt_returns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntReturns")
    punt_touchbacks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntTouchbacks")
    punt_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntYards")
    punts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Punts")
    punts_had_blocked: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PuntsHadBlocked")
    quarterback_hits: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="QuarterbackHits")
    receiving_long: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ReceivingLong")
    receiving_targets: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ReceivingTargets")
    receiving_touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ReceivingTouchdowns")
    receiving_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ReceivingYards")
    receiving_yards_per_reception: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ReceivingYardsPerReception")
    receiving_yards_per_target: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ReceivingYardsPerTarget")
    reception_percentage: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ReceptionPercentage")
    receptions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Receptions")
    rushing_attempts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="RushingAttempts")
    rushing_long: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="RushingLong")
    rushing_touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="RushingTouchdowns")
    rushing_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="RushingYards")
    rushing_yards_per_attempt: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="RushingYardsPerAttempt")
    sack_yards: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SackYards")
    sacks: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Sacks")
    safeties: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Safeties")
    safeties_allowed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SafetiesAllowed")
    scoring_details: Optional[List[ScoringDetail]] = Field(default=None, alias="ScoringDetails")
    season: Optional[StrictInt] = Field(default=None, alias="Season")
    season_type: Optional[StrictInt] = Field(default=None, alias="SeasonType")
    short_name: Optional[StrictStr] = Field(default=None, alias="ShortName")
    solo_tackles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SoloTackles")
    special_teams_assisted_tackles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SpecialTeamsAssistedTackles")
    special_teams_fumbles_forced: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SpecialTeamsFumblesForced")
    special_teams_fumbles_recovered: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SpecialTeamsFumblesRecovered")
    special_teams_snaps_played: Optional[StrictInt] = Field(default=None, alias="SpecialTeamsSnapsPlayed")
    special_teams_solo_tackles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SpecialTeamsSoloTackles")
    special_teams_team_snaps: Optional[StrictInt] = Field(default=None, alias="SpecialTeamsTeamSnaps")
    special_teams_touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SpecialTeamsTouchdowns")
    started: Optional[StrictInt] = Field(default=None, alias="Started")
    tackles: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Tackles")
    tackles_for_loss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TacklesForLoss")
    team: Optional[StrictStr] = Field(default=None, alias="Team")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamID")
    temperature: Optional[StrictInt] = Field(default=None, alias="Temperature")
    touchdowns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Touchdowns")
    two_point_conversion_passes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TwoPointConversionPasses")
    two_point_conversion_receptions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TwoPointConversionReceptions")
    two_point_conversion_returns: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TwoPointConversionReturns")
    two_point_conversion_runs: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TwoPointConversionRuns")
    wind_speed: Optional[StrictInt] = Field(default=None, alias="WindSpeed")
    __properties: ClassVar[List[str]] = ["Activated", "AssistedTackles", "AuctionValue", "AuctionValuePPR", "AverageDraftPosition", "AverageDraftPosition2QB", "AverageDraftPositionDynasty", "AverageDraftPositionPPR", "AverageDraftPositionRookie", "BlockedKickReturnTouchdowns", "BlockedKickReturnYards", "BlockedKicks", "DefensiveSnapsPlayed", "DefensiveTeamSnaps", "DefensiveTouchdowns", "ExtraPointsAttempted", "ExtraPointsHadBlocked", "ExtraPointsMade", "FantasyPoints", "FantasyPointsDraftKings", "FantasyPointsFanDuel", "FantasyPointsFantasyDraft", "FantasyPointsPPR", "FantasyPointsYahoo", "FantasyPosition", "FieldGoalPercentage", "FieldGoalReturnTouchdowns", "FieldGoalReturnYards", "FieldGoalsAttempted", "FieldGoalsHadBlocked", "FieldGoalsLongestMade", "FieldGoalsMade", "FieldGoalsMade0to19", "FieldGoalsMade20to29", "FieldGoalsMade30to39", "FieldGoalsMade40to49", "FieldGoalsMade50Plus", "FumbleReturnTouchdowns", "FumbleReturnYards", "Fumbles", "FumblesForced", "FumblesLost", "FumblesOutOfBounds", "FumblesOwnRecoveries", "FumblesRecovered", "GlobalTeamID", "Humidity", "InterceptionReturnTouchdowns", "InterceptionReturnYards", "Interceptions", "KickReturnFairCatches", "KickReturnLong", "KickReturnTouchdowns", "KickReturnYards", "KickReturnYardsPerAttempt", "KickReturns", "MiscAssistedTackles", "MiscFumblesForced", "MiscFumblesRecovered", "MiscSoloTackles", "Name", "Number", "OffensiveFumbleRecoveryTouchdowns", "OffensiveSnapsPlayed", "OffensiveTeamSnaps", "OffensiveTouchdowns", "PassesDefended", "PassingAttempts", "PassingCompletionPercentage", "PassingCompletions", "PassingInterceptions", "PassingLong", "PassingRating", "PassingSackYards", "PassingSacks", "PassingTouchdowns", "PassingYards", "PassingYardsPerAttempt", "PassingYardsPerCompletion", "Played", "PlayerID", "PlayerSeasonID", "Position", "PositionCategory", "PuntAverage", "PuntInside20", "PuntLong", "PuntNetAverage", "PuntNetYards", "PuntReturnFairCatches", "PuntReturnLong", "PuntReturnTouchdowns", "PuntReturnYards", "PuntReturnYardsPerAttempt", "PuntReturns", "PuntTouchbacks", "PuntYards", "Punts", "PuntsHadBlocked", "QuarterbackHits", "ReceivingLong", "ReceivingTargets", "ReceivingTouchdowns", "ReceivingYards", "ReceivingYardsPerReception", "ReceivingYardsPerTarget", "ReceptionPercentage", "Receptions", "RushingAttempts", "RushingLong", "RushingTouchdowns", "RushingYards", "RushingYardsPerAttempt", "SackYards", "Sacks", "Safeties", "SafetiesAllowed", "ScoringDetails", "Season", "SeasonType", "ShortName", "SoloTackles", "SpecialTeamsAssistedTackles", "SpecialTeamsFumblesForced", "SpecialTeamsFumblesRecovered", "SpecialTeamsSnapsPlayed", "SpecialTeamsSoloTackles", "SpecialTeamsTeamSnaps", "SpecialTeamsTouchdowns", "Started", "Tackles", "TacklesForLoss", "Team", "TeamID", "Temperature", "Touchdowns", "TwoPointConversionPasses", "TwoPointConversionReceptions", "TwoPointConversionReturns", "TwoPointConversionRuns", "WindSpeed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlayerSeason from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in scoring_details (list)
        _items = []
        if self.scoring_details:
            for _item_scoring_details in self.scoring_details:
                if _item_scoring_details:
                    _items.append(_item_scoring_details.to_dict())
            _dict['ScoringDetails'] = _items
        # set to None if auction_value (nullable) is None
        # and model_fields_set contains the field
        if self.auction_value is None and "auction_value" in self.model_fields_set:
            _dict['AuctionValue'] = None

        # set to None if auction_value_ppr (nullable) is None
        # and model_fields_set contains the field
        if self.auction_value_ppr is None and "auction_value_ppr" in self.model_fields_set:
            _dict['AuctionValuePPR'] = None

        # set to None if average_draft_position (nullable) is None
        # and model_fields_set contains the field
        if self.average_draft_position is None and "average_draft_position" in self.model_fields_set:
            _dict['AverageDraftPosition'] = None

        # set to None if average_draft_position2_qb (nullable) is None
        # and model_fields_set contains the field
        if self.average_draft_position2_qb is None and "average_draft_position2_qb" in self.model_fields_set:
            _dict['AverageDraftPosition2QB'] = None

        # set to None if average_draft_position_dynasty (nullable) is None
        # and model_fields_set contains the field
        if self.average_draft_position_dynasty is None and "average_draft_position_dynasty" in self.model_fields_set:
            _dict['AverageDraftPositionDynasty'] = None

        # set to None if average_draft_position_ppr (nullable) is None
        # and model_fields_set contains the field
        if self.average_draft_position_ppr is None and "average_draft_position_ppr" in self.model_fields_set:
            _dict['AverageDraftPositionPPR'] = None

        # set to None if average_draft_position_rookie (nullable) is None
        # and model_fields_set contains the field
        if self.average_draft_position_rookie is None and "average_draft_position_rookie" in self.model_fields_set:
            _dict['AverageDraftPositionRookie'] = None

        # set to None if blocked_kick_return_touchdowns (nullable) is None
        # and model_fields_set contains the field
        if self.blocked_kick_return_touchdowns is None and "blocked_kick_return_touchdowns" in self.model_fields_set:
            _dict['BlockedKickReturnTouchdowns'] = None

        # set to None if blocked_kick_return_yards (nullable) is None
        # and model_fields_set contains the field
        if self.blocked_kick_return_yards is None and "blocked_kick_return_yards" in self.model_fields_set:
            _dict['BlockedKickReturnYards'] = None

        # set to None if defensive_snaps_played (nullable) is None
        # and model_fields_set contains the field
        if self.defensive_snaps_played is None and "defensive_snaps_played" in self.model_fields_set:
            _dict['DefensiveSnapsPlayed'] = None

        # set to None if defensive_team_snaps (nullable) is None
        # and model_fields_set contains the field
        if self.defensive_team_snaps is None and "defensive_team_snaps" in self.model_fields_set:
            _dict['DefensiveTeamSnaps'] = None

        # set to None if extra_points_attempted (nullable) is None
        # and model_fields_set contains the field
        if self.extra_points_attempted is None and "extra_points_attempted" in self.model_fields_set:
            _dict['ExtraPointsAttempted'] = None

        # set to None if extra_points_had_blocked (nullable) is None
        # and model_fields_set contains the field
        if self.extra_points_had_blocked is None and "extra_points_had_blocked" in self.model_fields_set:
            _dict['ExtraPointsHadBlocked'] = None

        # set to None if fantasy_points_draft_kings (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_points_draft_kings is None and "fantasy_points_draft_kings" in self.model_fields_set:
            _dict['FantasyPointsDraftKings'] = None

        # set to None if fantasy_points_fan_duel (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_points_fan_duel is None and "fantasy_points_fan_duel" in self.model_fields_set:
            _dict['FantasyPointsFanDuel'] = None

        # set to None if fantasy_points_fantasy_draft (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_points_fantasy_draft is None and "fantasy_points_fantasy_draft" in self.model_fields_set:
            _dict['FantasyPointsFantasyDraft'] = None

        # set to None if fantasy_points_yahoo (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_points_yahoo is None and "fantasy_points_yahoo" in self.model_fields_set:
            _dict['FantasyPointsYahoo'] = None

        # set to None if fantasy_position (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_position is None and "fantasy_position" in self.model_fields_set:
            _dict['FantasyPosition'] = None

        # set to None if field_goal_return_touchdowns (nullable) is None
        # and model_fields_set contains the field
        if self.field_goal_return_touchdowns is None and "field_goal_return_touchdowns" in self.model_fields_set:
            _dict['FieldGoalReturnTouchdowns'] = None

        # set to None if field_goal_return_yards (nullable) is None
        # and model_fields_set contains the field
        if self.field_goal_return_yards is None and "field_goal_return_yards" in self.model_fields_set:
            _dict['FieldGoalReturnYards'] = None

        # set to None if field_goals_had_blocked (nullable) is None
        # and model_fields_set contains the field
        if self.field_goals_had_blocked is None and "field_goals_had_blocked" in self.model_fields_set:
            _dict['FieldGoalsHadBlocked'] = None

        # set to None if field_goals_made0to19 (nullable) is None
        # and model_fields_set contains the field
        if self.field_goals_made0to19 is None and "field_goals_made0to19" in self.model_fields_set:
            _dict['FieldGoalsMade0to19'] = None

        # set to None if field_goals_made20to29 (nullable) is None
        # and model_fields_set contains the field
        if self.field_goals_made20to29 is None and "field_goals_made20to29" in self.model_fields_set:
            _dict['FieldGoalsMade20to29'] = None

        # set to None if field_goals_made30to39 (nullable) is None
        # and model_fields_set contains the field
        if self.field_goals_made30to39 is None and "field_goals_made30to39" in self.model_fields_set:
            _dict['FieldGoalsMade30to39'] = None

        # set to None if field_goals_made40to49 (nullable) is None
        # and model_fields_set contains the field
        if self.field_goals_made40to49 is None and "field_goals_made40to49" in self.model_fields_set:
            _dict['FieldGoalsMade40to49'] = None

        # set to None if field_goals_made50_plus (nullable) is None
        # and model_fields_set contains the field
        if self.field_goals_made50_plus is None and "field_goals_made50_plus" in self.model_fields_set:
            _dict['FieldGoalsMade50Plus'] = None

        # set to None if fumbles_lost (nullable) is None
        # and model_fields_set contains the field
        if self.fumbles_lost is None and "fumbles_lost" in self.model_fields_set:
            _dict['FumblesLost'] = None

        # set to None if fumbles_out_of_bounds (nullable) is None
        # and model_fields_set contains the field
        if self.fumbles_out_of_bounds is None and "fumbles_out_of_bounds" in self.model_fields_set:
            _dict['FumblesOutOfBounds'] = None

        # set to None if fumbles_own_recoveries (nullable) is None
        # and model_fields_set contains the field
        if self.fumbles_own_recoveries is None and "fumbles_own_recoveries" in self.model_fields_set:
            _dict['FumblesOwnRecoveries'] = None

        # set to None if global_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_team_id is None and "global_team_id" in self.model_fields_set:
            _dict['GlobalTeamID'] = None

        # set to None if humidity (nullable) is None
        # and model_fields_set contains the field
        if self.humidity is None and "humidity" in self.model_fields_set:
            _dict['Humidity'] = None

        # set to None if kick_return_fair_catches (nullable) is None
        # and model_fields_set contains the field
        if self.kick_return_fair_catches is None and "kick_return_fair_catches" in self.model_fields_set:
            _dict['KickReturnFairCatches'] = None

        # set to None if misc_fumbles_forced (nullable) is None
        # and model_fields_set contains the field
        if self.misc_fumbles_forced is None and "misc_fumbles_forced" in self.model_fields_set:
            _dict['MiscFumblesForced'] = None

        # set to None if misc_fumbles_recovered (nullable) is None
        # and model_fields_set contains the field
        if self.misc_fumbles_recovered is None and "misc_fumbles_recovered" in self.model_fields_set:
            _dict['MiscFumblesRecovered'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if offensive_fumble_recovery_touchdowns (nullable) is None
        # and model_fields_set contains the field
        if self.offensive_fumble_recovery_touchdowns is None and "offensive_fumble_recovery_touchdowns" in self.model_fields_set:
            _dict['OffensiveFumbleRecoveryTouchdowns'] = None

        # set to None if offensive_snaps_played (nullable) is None
        # and model_fields_set contains the field
        if self.offensive_snaps_played is None and "offensive_snaps_played" in self.model_fields_set:
            _dict['OffensiveSnapsPlayed'] = None

        # set to None if offensive_team_snaps (nullable) is None
        # and model_fields_set contains the field
        if self.offensive_team_snaps is None and "offensive_team_snaps" in self.model_fields_set:
            _dict['OffensiveTeamSnaps'] = None

        # set to None if player_id (nullable) is None
        # and model_fields_set contains the field
        if self.player_id is None and "player_id" in self.model_fields_set:
            _dict['PlayerID'] = None

        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['Position'] = None

        # set to None if position_category (nullable) is None
        # and model_fields_set contains the field
        if self.position_category is None and "position_category" in self.model_fields_set:
            _dict['PositionCategory'] = None

        # set to None if punt_inside20 (nullable) is None
        # and model_fields_set contains the field
        if self.punt_inside20 is None and "punt_inside20" in self.model_fields_set:
            _dict['PuntInside20'] = None

        # set to None if punt_long (nullable) is None
        # and model_fields_set contains the field
        if self.punt_long is None and "punt_long" in self.model_fields_set:
            _dict['PuntLong'] = None

        # set to None if punt_net_average (nullable) is None
        # and model_fields_set contains the field
        if self.punt_net_average is None and "punt_net_average" in self.model_fields_set:
            _dict['PuntNetAverage'] = None

        # set to None if punt_net_yards (nullable) is None
        # and model_fields_set contains the field
        if self.punt_net_yards is None and "punt_net_yards" in self.model_fields_set:
            _dict['PuntNetYards'] = None

        # set to None if punt_return_fair_catches (nullable) is None
        # and model_fields_set contains the field
        if self.punt_return_fair_catches is None and "punt_return_fair_catches" in self.model_fields_set:
            _dict['PuntReturnFairCatches'] = None

        # set to None if punt_touchbacks (nullable) is None
        # and model_fields_set contains the field
        if self.punt_touchbacks is None and "punt_touchbacks" in self.model_fields_set:
            _dict['PuntTouchbacks'] = None

        # set to None if punts_had_blocked (nullable) is None
        # and model_fields_set contains the field
        if self.punts_had_blocked is None and "punts_had_blocked" in self.model_fields_set:
            _dict['PuntsHadBlocked'] = None

        # set to None if quarterback_hits (nullable) is None
        # and model_fields_set contains the field
        if self.quarterback_hits is None and "quarterback_hits" in self.model_fields_set:
            _dict['QuarterbackHits'] = None

        # set to None if receiving_targets (nullable) is None
        # and model_fields_set contains the field
        if self.receiving_targets is None and "receiving_targets" in self.model_fields_set:
            _dict['ReceivingTargets'] = None

        # set to None if safeties (nullable) is None
        # and model_fields_set contains the field
        if self.safeties is None and "safeties" in self.model_fields_set:
            _dict['Safeties'] = None

        # set to None if safeties_allowed (nullable) is None
        # and model_fields_set contains the field
        if self.safeties_allowed is None and "safeties_allowed" in self.model_fields_set:
            _dict['SafetiesAllowed'] = None

        # set to None if short_name (nullable) is None
        # and model_fields_set contains the field
        if self.short_name is None and "short_name" in self.model_fields_set:
            _dict['ShortName'] = None

        # set to None if special_teams_fumbles_forced (nullable) is None
        # and model_fields_set contains the field
        if self.special_teams_fumbles_forced is None and "special_teams_fumbles_forced" in self.model_fields_set:
            _dict['SpecialTeamsFumblesForced'] = None

        # set to None if special_teams_fumbles_recovered (nullable) is None
        # and model_fields_set contains the field
        if self.special_teams_fumbles_recovered is None and "special_teams_fumbles_recovered" in self.model_fields_set:
            _dict['SpecialTeamsFumblesRecovered'] = None

        # set to None if special_teams_snaps_played (nullable) is None
        # and model_fields_set contains the field
        if self.special_teams_snaps_played is None and "special_teams_snaps_played" in self.model_fields_set:
            _dict['SpecialTeamsSnapsPlayed'] = None

        # set to None if special_teams_team_snaps (nullable) is None
        # and model_fields_set contains the field
        if self.special_teams_team_snaps is None and "special_teams_team_snaps" in self.model_fields_set:
            _dict['SpecialTeamsTeamSnaps'] = None

        # set to None if tackles_for_loss (nullable) is None
        # and model_fields_set contains the field
        if self.tackles_for_loss is None and "tackles_for_loss" in self.model_fields_set:
            _dict['TacklesForLoss'] = None

        # set to None if team (nullable) is None
        # and model_fields_set contains the field
        if self.team is None and "team" in self.model_fields_set:
            _dict['Team'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['TeamID'] = None

        # set to None if temperature (nullable) is None
        # and model_fields_set contains the field
        if self.temperature is None and "temperature" in self.model_fields_set:
            _dict['Temperature'] = None

        # set to None if two_point_conversion_returns (nullable) is None
        # and model_fields_set contains the field
        if self.two_point_conversion_returns is None and "two_point_conversion_returns" in self.model_fields_set:
            _dict['TwoPointConversionReturns'] = None

        # set to None if wind_speed (nullable) is None
        # and model_fields_set contains the field
        if self.wind_speed is None and "wind_speed" in self.model_fields_set:
            _dict['WindSpeed'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlayerSeason from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Activated": obj.get("Activated"),
            "AssistedTackles": obj.get("AssistedTackles"),
            "AuctionValue": obj.get("AuctionValue"),
            "AuctionValuePPR": obj.get("AuctionValuePPR"),
            "AverageDraftPosition": obj.get("AverageDraftPosition"),
            "AverageDraftPosition2QB": obj.get("AverageDraftPosition2QB"),
            "AverageDraftPositionDynasty": obj.get("AverageDraftPositionDynasty"),
            "AverageDraftPositionPPR": obj.get("AverageDraftPositionPPR"),
            "AverageDraftPositionRookie": obj.get("AverageDraftPositionRookie"),
            "BlockedKickReturnTouchdowns": obj.get("BlockedKickReturnTouchdowns"),
            "BlockedKickReturnYards": obj.get("BlockedKickReturnYards"),
            "BlockedKicks": obj.get("BlockedKicks"),
            "DefensiveSnapsPlayed": obj.get("DefensiveSnapsPlayed"),
            "DefensiveTeamSnaps": obj.get("DefensiveTeamSnaps"),
            "DefensiveTouchdowns": obj.get("DefensiveTouchdowns"),
            "ExtraPointsAttempted": obj.get("ExtraPointsAttempted"),
            "ExtraPointsHadBlocked": obj.get("ExtraPointsHadBlocked"),
            "ExtraPointsMade": obj.get("ExtraPointsMade"),
            "FantasyPoints": obj.get("FantasyPoints"),
            "FantasyPointsDraftKings": obj.get("FantasyPointsDraftKings"),
            "FantasyPointsFanDuel": obj.get("FantasyPointsFanDuel"),
            "FantasyPointsFantasyDraft": obj.get("FantasyPointsFantasyDraft"),
            "FantasyPointsPPR": obj.get("FantasyPointsPPR"),
            "FantasyPointsYahoo": obj.get("FantasyPointsYahoo"),
            "FantasyPosition": obj.get("FantasyPosition"),
            "FieldGoalPercentage": obj.get("FieldGoalPercentage"),
            "FieldGoalReturnTouchdowns": obj.get("FieldGoalReturnTouchdowns"),
            "FieldGoalReturnYards": obj.get("FieldGoalReturnYards"),
            "FieldGoalsAttempted": obj.get("FieldGoalsAttempted"),
            "FieldGoalsHadBlocked": obj.get("FieldGoalsHadBlocked"),
            "FieldGoalsLongestMade": obj.get("FieldGoalsLongestMade"),
            "FieldGoalsMade": obj.get("FieldGoalsMade"),
            "FieldGoalsMade0to19": obj.get("FieldGoalsMade0to19"),
            "FieldGoalsMade20to29": obj.get("FieldGoalsMade20to29"),
            "FieldGoalsMade30to39": obj.get("FieldGoalsMade30to39"),
            "FieldGoalsMade40to49": obj.get("FieldGoalsMade40to49"),
            "FieldGoalsMade50Plus": obj.get("FieldGoalsMade50Plus"),
            "FumbleReturnTouchdowns": obj.get("FumbleReturnTouchdowns"),
            "FumbleReturnYards": obj.get("FumbleReturnYards"),
            "Fumbles": obj.get("Fumbles"),
            "FumblesForced": obj.get("FumblesForced"),
            "FumblesLost": obj.get("FumblesLost"),
            "FumblesOutOfBounds": obj.get("FumblesOutOfBounds"),
            "FumblesOwnRecoveries": obj.get("FumblesOwnRecoveries"),
            "FumblesRecovered": obj.get("FumblesRecovered"),
            "GlobalTeamID": obj.get("GlobalTeamID"),
            "Humidity": obj.get("Humidity"),
            "InterceptionReturnTouchdowns": obj.get("InterceptionReturnTouchdowns"),
            "InterceptionReturnYards": obj.get("InterceptionReturnYards"),
            "Interceptions": obj.get("Interceptions"),
            "KickReturnFairCatches": obj.get("KickReturnFairCatches"),
            "KickReturnLong": obj.get("KickReturnLong"),
            "KickReturnTouchdowns": obj.get("KickReturnTouchdowns"),
            "KickReturnYards": obj.get("KickReturnYards"),
            "KickReturnYardsPerAttempt": obj.get("KickReturnYardsPerAttempt"),
            "KickReturns": obj.get("KickReturns"),
            "MiscAssistedTackles": obj.get("MiscAssistedTackles"),
            "MiscFumblesForced": obj.get("MiscFumblesForced"),
            "MiscFumblesRecovered": obj.get("MiscFumblesRecovered"),
            "MiscSoloTackles": obj.get("MiscSoloTackles"),
            "Name": obj.get("Name"),
            "Number": obj.get("Number"),
            "OffensiveFumbleRecoveryTouchdowns": obj.get("OffensiveFumbleRecoveryTouchdowns"),
            "OffensiveSnapsPlayed": obj.get("OffensiveSnapsPlayed"),
            "OffensiveTeamSnaps": obj.get("OffensiveTeamSnaps"),
            "OffensiveTouchdowns": obj.get("OffensiveTouchdowns"),
            "PassesDefended": obj.get("PassesDefended"),
            "PassingAttempts": obj.get("PassingAttempts"),
            "PassingCompletionPercentage": obj.get("PassingCompletionPercentage"),
            "PassingCompletions": obj.get("PassingCompletions"),
            "PassingInterceptions": obj.get("PassingInterceptions"),
            "PassingLong": obj.get("PassingLong"),
            "PassingRating": obj.get("PassingRating"),
            "PassingSackYards": obj.get("PassingSackYards"),
            "PassingSacks": obj.get("PassingSacks"),
            "PassingTouchdowns": obj.get("PassingTouchdowns"),
            "PassingYards": obj.get("PassingYards"),
            "PassingYardsPerAttempt": obj.get("PassingYardsPerAttempt"),
            "PassingYardsPerCompletion": obj.get("PassingYardsPerCompletion"),
            "Played": obj.get("Played"),
            "PlayerID": obj.get("PlayerID"),
            "PlayerSeasonID": obj.get("PlayerSeasonID"),
            "Position": obj.get("Position"),
            "PositionCategory": obj.get("PositionCategory"),
            "PuntAverage": obj.get("PuntAverage"),
            "PuntInside20": obj.get("PuntInside20"),
            "PuntLong": obj.get("PuntLong"),
            "PuntNetAverage": obj.get("PuntNetAverage"),
            "PuntNetYards": obj.get("PuntNetYards"),
            "PuntReturnFairCatches": obj.get("PuntReturnFairCatches"),
            "PuntReturnLong": obj.get("PuntReturnLong"),
            "PuntReturnTouchdowns": obj.get("PuntReturnTouchdowns"),
            "PuntReturnYards": obj.get("PuntReturnYards"),
            "PuntReturnYardsPerAttempt": obj.get("PuntReturnYardsPerAttempt"),
            "PuntReturns": obj.get("PuntReturns"),
            "PuntTouchbacks": obj.get("PuntTouchbacks"),
            "PuntYards": obj.get("PuntYards"),
            "Punts": obj.get("Punts"),
            "PuntsHadBlocked": obj.get("PuntsHadBlocked"),
            "QuarterbackHits": obj.get("QuarterbackHits"),
            "ReceivingLong": obj.get("ReceivingLong"),
            "ReceivingTargets": obj.get("ReceivingTargets"),
            "ReceivingTouchdowns": obj.get("ReceivingTouchdowns"),
            "ReceivingYards": obj.get("ReceivingYards"),
            "ReceivingYardsPerReception": obj.get("ReceivingYardsPerReception"),
            "ReceivingYardsPerTarget": obj.get("ReceivingYardsPerTarget"),
            "ReceptionPercentage": obj.get("ReceptionPercentage"),
            "Receptions": obj.get("Receptions"),
            "RushingAttempts": obj.get("RushingAttempts"),
            "RushingLong": obj.get("RushingLong"),
            "RushingTouchdowns": obj.get("RushingTouchdowns"),
            "RushingYards": obj.get("RushingYards"),
            "RushingYardsPerAttempt": obj.get("RushingYardsPerAttempt"),
            "SackYards": obj.get("SackYards"),
            "Sacks": obj.get("Sacks"),
            "Safeties": obj.get("Safeties"),
            "SafetiesAllowed": obj.get("SafetiesAllowed"),
            "ScoringDetails": [ScoringDetail.from_dict(_item) for _item in obj["ScoringDetails"]] if obj.get("ScoringDetails") is not None else None,
            "Season": obj.get("Season"),
            "SeasonType": obj.get("SeasonType"),
            "ShortName": obj.get("ShortName"),
            "SoloTackles": obj.get("SoloTackles"),
            "SpecialTeamsAssistedTackles": obj.get("SpecialTeamsAssistedTackles"),
            "SpecialTeamsFumblesForced": obj.get("SpecialTeamsFumblesForced"),
            "SpecialTeamsFumblesRecovered": obj.get("SpecialTeamsFumblesRecovered"),
            "SpecialTeamsSnapsPlayed": obj.get("SpecialTeamsSnapsPlayed"),
            "SpecialTeamsSoloTackles": obj.get("SpecialTeamsSoloTackles"),
            "SpecialTeamsTeamSnaps": obj.get("SpecialTeamsTeamSnaps"),
            "SpecialTeamsTouchdowns": obj.get("SpecialTeamsTouchdowns"),
            "Started": obj.get("Started"),
            "Tackles": obj.get("Tackles"),
            "TacklesForLoss": obj.get("TacklesForLoss"),
            "Team": obj.get("Team"),
            "TeamID": obj.get("TeamID"),
            "Temperature": obj.get("Temperature"),
            "Touchdowns": obj.get("Touchdowns"),
            "TwoPointConversionPasses": obj.get("TwoPointConversionPasses"),
            "TwoPointConversionReceptions": obj.get("TwoPointConversionReceptions"),
            "TwoPointConversionReturns": obj.get("TwoPointConversionReturns"),
            "TwoPointConversionRuns": obj.get("TwoPointConversionRuns"),
            "WindSpeed": obj.get("WindSpeed")
        })
        return _obj


