# coding: utf-8

"""
    Soccer v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Lineup(BaseModel):
    """
    Lineup
    """ # noqa: E501
    game_id: Optional[StrictInt] = Field(default=None, alias="GameId")
    game_minute: Optional[StrictInt] = Field(default=None, alias="GameMinute")
    game_minute_extra: Optional[StrictInt] = Field(default=None, alias="GameMinuteExtra")
    lineup_id: Optional[StrictInt] = Field(default=None, alias="LineupId")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    pitch_position_horizontal: Optional[StrictInt] = Field(default=None, alias="PitchPositionHorizontal")
    pitch_position_vertical: Optional[StrictInt] = Field(default=None, alias="PitchPositionVertical")
    player_id: Optional[StrictInt] = Field(default=None, alias="PlayerId")
    position: Optional[StrictStr] = Field(default=None, alias="Position")
    replaced_player_id: Optional[StrictInt] = Field(default=None, alias="ReplacedPlayerId")
    replaced_player_name: Optional[StrictStr] = Field(default=None, alias="ReplacedPlayerName")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamId")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    __properties: ClassVar[List[str]] = ["GameId", "GameMinute", "GameMinuteExtra", "LineupId", "Name", "PitchPositionHorizontal", "PitchPositionVertical", "PlayerId", "Position", "ReplacedPlayerId", "ReplacedPlayerName", "TeamId", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Lineup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if game_minute (nullable) is None
        # and model_fields_set contains the field
        if self.game_minute is None and "game_minute" in self.model_fields_set:
            _dict['GameMinute'] = None

        # set to None if game_minute_extra (nullable) is None
        # and model_fields_set contains the field
        if self.game_minute_extra is None and "game_minute_extra" in self.model_fields_set:
            _dict['GameMinuteExtra'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if pitch_position_horizontal (nullable) is None
        # and model_fields_set contains the field
        if self.pitch_position_horizontal is None and "pitch_position_horizontal" in self.model_fields_set:
            _dict['PitchPositionHorizontal'] = None

        # set to None if pitch_position_vertical (nullable) is None
        # and model_fields_set contains the field
        if self.pitch_position_vertical is None and "pitch_position_vertical" in self.model_fields_set:
            _dict['PitchPositionVertical'] = None

        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['Position'] = None

        # set to None if replaced_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.replaced_player_id is None and "replaced_player_id" in self.model_fields_set:
            _dict['ReplacedPlayerId'] = None

        # set to None if replaced_player_name (nullable) is None
        # and model_fields_set contains the field
        if self.replaced_player_name is None and "replaced_player_name" in self.model_fields_set:
            _dict['ReplacedPlayerName'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['Type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Lineup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "GameId": obj.get("GameId"),
            "GameMinute": obj.get("GameMinute"),
            "GameMinuteExtra": obj.get("GameMinuteExtra"),
            "LineupId": obj.get("LineupId"),
            "Name": obj.get("Name"),
            "PitchPositionHorizontal": obj.get("PitchPositionHorizontal"),
            "PitchPositionVertical": obj.get("PitchPositionVertical"),
            "PlayerId": obj.get("PlayerId"),
            "Position": obj.get("Position"),
            "ReplacedPlayerId": obj.get("ReplacedPlayerId"),
            "ReplacedPlayerName": obj.get("ReplacedPlayerName"),
            "TeamId": obj.get("TeamId"),
            "Type": obj.get("Type")
        })
        return _obj


