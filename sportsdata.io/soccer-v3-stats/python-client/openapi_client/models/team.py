# coding: utf-8

"""
    Soccer v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Team(BaseModel):
    """
    Team
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, alias="Active")
    address: Optional[StrictStr] = Field(default=None, alias="Address")
    area_id: Optional[StrictInt] = Field(default=None, alias="AreaId")
    area_name: Optional[StrictStr] = Field(default=None, alias="AreaName")
    city: Optional[StrictStr] = Field(default=None, alias="City")
    club_color1: Optional[StrictStr] = Field(default=None, alias="ClubColor1")
    club_color2: Optional[StrictStr] = Field(default=None, alias="ClubColor2")
    club_color3: Optional[StrictStr] = Field(default=None, alias="ClubColor3")
    email: Optional[StrictStr] = Field(default=None, alias="Email")
    fax: Optional[StrictStr] = Field(default=None, alias="Fax")
    founded: Optional[StrictInt] = Field(default=None, alias="Founded")
    full_name: Optional[StrictStr] = Field(default=None, alias="FullName")
    gender: Optional[StrictStr] = Field(default=None, alias="Gender")
    global_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalTeamId")
    key: Optional[StrictStr] = Field(default=None, alias="Key")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    nickname1: Optional[StrictStr] = Field(default=None, alias="Nickname1")
    nickname2: Optional[StrictStr] = Field(default=None, alias="Nickname2")
    nickname3: Optional[StrictStr] = Field(default=None, alias="Nickname3")
    phone: Optional[StrictStr] = Field(default=None, alias="Phone")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamId")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    venue_id: Optional[StrictInt] = Field(default=None, alias="VenueId")
    venue_name: Optional[StrictStr] = Field(default=None, alias="VenueName")
    website: Optional[StrictStr] = Field(default=None, alias="Website")
    wikipedia_logo_url: Optional[StrictStr] = Field(default=None, alias="WikipediaLogoUrl")
    wikipedia_word_mark_url: Optional[StrictStr] = Field(default=None, alias="WikipediaWordMarkUrl")
    zip: Optional[StrictStr] = Field(default=None, alias="Zip")
    __properties: ClassVar[List[str]] = ["Active", "Address", "AreaId", "AreaName", "City", "ClubColor1", "ClubColor2", "ClubColor3", "Email", "Fax", "Founded", "FullName", "Gender", "GlobalTeamId", "Key", "Name", "Nickname1", "Nickname2", "Nickname3", "Phone", "TeamId", "Type", "VenueId", "VenueName", "Website", "WikipediaLogoUrl", "WikipediaWordMarkUrl", "Zip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Team from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['Address'] = None

        # set to None if area_id (nullable) is None
        # and model_fields_set contains the field
        if self.area_id is None and "area_id" in self.model_fields_set:
            _dict['AreaId'] = None

        # set to None if area_name (nullable) is None
        # and model_fields_set contains the field
        if self.area_name is None and "area_name" in self.model_fields_set:
            _dict['AreaName'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['City'] = None

        # set to None if club_color1 (nullable) is None
        # and model_fields_set contains the field
        if self.club_color1 is None and "club_color1" in self.model_fields_set:
            _dict['ClubColor1'] = None

        # set to None if club_color2 (nullable) is None
        # and model_fields_set contains the field
        if self.club_color2 is None and "club_color2" in self.model_fields_set:
            _dict['ClubColor2'] = None

        # set to None if club_color3 (nullable) is None
        # and model_fields_set contains the field
        if self.club_color3 is None and "club_color3" in self.model_fields_set:
            _dict['ClubColor3'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['Email'] = None

        # set to None if fax (nullable) is None
        # and model_fields_set contains the field
        if self.fax is None and "fax" in self.model_fields_set:
            _dict['Fax'] = None

        # set to None if founded (nullable) is None
        # and model_fields_set contains the field
        if self.founded is None and "founded" in self.model_fields_set:
            _dict['Founded'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['FullName'] = None

        # set to None if gender (nullable) is None
        # and model_fields_set contains the field
        if self.gender is None and "gender" in self.model_fields_set:
            _dict['Gender'] = None

        # set to None if key (nullable) is None
        # and model_fields_set contains the field
        if self.key is None and "key" in self.model_fields_set:
            _dict['Key'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if nickname1 (nullable) is None
        # and model_fields_set contains the field
        if self.nickname1 is None and "nickname1" in self.model_fields_set:
            _dict['Nickname1'] = None

        # set to None if nickname2 (nullable) is None
        # and model_fields_set contains the field
        if self.nickname2 is None and "nickname2" in self.model_fields_set:
            _dict['Nickname2'] = None

        # set to None if nickname3 (nullable) is None
        # and model_fields_set contains the field
        if self.nickname3 is None and "nickname3" in self.model_fields_set:
            _dict['Nickname3'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['Phone'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['Type'] = None

        # set to None if venue_id (nullable) is None
        # and model_fields_set contains the field
        if self.venue_id is None and "venue_id" in self.model_fields_set:
            _dict['VenueId'] = None

        # set to None if venue_name (nullable) is None
        # and model_fields_set contains the field
        if self.venue_name is None and "venue_name" in self.model_fields_set:
            _dict['VenueName'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['Website'] = None

        # set to None if wikipedia_logo_url (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia_logo_url is None and "wikipedia_logo_url" in self.model_fields_set:
            _dict['WikipediaLogoUrl'] = None

        # set to None if wikipedia_word_mark_url (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia_word_mark_url is None and "wikipedia_word_mark_url" in self.model_fields_set:
            _dict['WikipediaWordMarkUrl'] = None

        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['Zip'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Team from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Active": obj.get("Active"),
            "Address": obj.get("Address"),
            "AreaId": obj.get("AreaId"),
            "AreaName": obj.get("AreaName"),
            "City": obj.get("City"),
            "ClubColor1": obj.get("ClubColor1"),
            "ClubColor2": obj.get("ClubColor2"),
            "ClubColor3": obj.get("ClubColor3"),
            "Email": obj.get("Email"),
            "Fax": obj.get("Fax"),
            "Founded": obj.get("Founded"),
            "FullName": obj.get("FullName"),
            "Gender": obj.get("Gender"),
            "GlobalTeamId": obj.get("GlobalTeamId"),
            "Key": obj.get("Key"),
            "Name": obj.get("Name"),
            "Nickname1": obj.get("Nickname1"),
            "Nickname2": obj.get("Nickname2"),
            "Nickname3": obj.get("Nickname3"),
            "Phone": obj.get("Phone"),
            "TeamId": obj.get("TeamId"),
            "Type": obj.get("Type"),
            "VenueId": obj.get("VenueId"),
            "VenueName": obj.get("VenueName"),
            "Website": obj.get("Website"),
            "WikipediaLogoUrl": obj.get("WikipediaLogoUrl"),
            "WikipediaWordMarkUrl": obj.get("WikipediaWordMarkUrl"),
            "Zip": obj.get("Zip")
        })
        return _obj


