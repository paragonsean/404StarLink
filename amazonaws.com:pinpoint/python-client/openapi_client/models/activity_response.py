# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ActivityResponse(BaseModel):
    """
    Provides information about an activity that was performed by a campaign.
    """ # noqa: E501
    application_id: Any = Field(alias="ApplicationId")
    campaign_id: Any = Field(alias="CampaignId")
    end: Optional[Any] = Field(default=None, alias="End")
    id: Any = Field(alias="Id")
    result: Optional[Any] = Field(default=None, alias="Result")
    scheduled_start: Optional[Any] = Field(default=None, alias="ScheduledStart")
    start: Optional[Any] = Field(default=None, alias="Start")
    state: Optional[Any] = Field(default=None, alias="State")
    successful_endpoint_count: Optional[Any] = Field(default=None, alias="SuccessfulEndpointCount")
    timezones_completed_count: Optional[Any] = Field(default=None, alias="TimezonesCompletedCount")
    timezones_total_count: Optional[Any] = Field(default=None, alias="TimezonesTotalCount")
    total_endpoint_count: Optional[Any] = Field(default=None, alias="TotalEndpointCount")
    treatment_id: Optional[Any] = Field(default=None, alias="TreatmentId")
    __properties: ClassVar[List[str]] = ["ApplicationId", "CampaignId", "End", "Id", "Result", "ScheduledStart", "Start", "State", "SuccessfulEndpointCount", "TimezonesCompletedCount", "TimezonesTotalCount", "TotalEndpointCount", "TreatmentId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationId": obj.get("ApplicationId"),
            "CampaignId": obj.get("CampaignId"),
            "End": obj.get("End"),
            "Id": obj.get("Id"),
            "Result": obj.get("Result"),
            "ScheduledStart": obj.get("ScheduledStart"),
            "Start": obj.get("Start"),
            "State": obj.get("State"),
            "SuccessfulEndpointCount": obj.get("SuccessfulEndpointCount"),
            "TimezonesCompletedCount": obj.get("TimezonesCompletedCount"),
            "TimezonesTotalCount": obj.get("TimezonesTotalCount"),
            "TotalEndpointCount": obj.get("TotalEndpointCount"),
            "TreatmentId": obj.get("TreatmentId")
        })
        return _obj


