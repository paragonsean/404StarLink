# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.template_configuration_email_template import TemplateConfigurationEmailTemplate
from openapi_client.models.template_configuration_push_template import TemplateConfigurationPushTemplate
from openapi_client.models.template_configuration_sms_template import TemplateConfigurationSMSTemplate
from openapi_client.models.template_configuration_voice_template import TemplateConfigurationVoiceTemplate
from typing import Optional, Set
from typing_extensions import Self

class CampaignResponseTemplateConfiguration(BaseModel):
    """
    CampaignResponseTemplateConfiguration
    """ # noqa: E501
    email_template: Optional[TemplateConfigurationEmailTemplate] = Field(default=None, alias="EmailTemplate")
    push_template: Optional[TemplateConfigurationPushTemplate] = Field(default=None, alias="PushTemplate")
    sms_template: Optional[TemplateConfigurationSMSTemplate] = Field(default=None, alias="SMSTemplate")
    voice_template: Optional[TemplateConfigurationVoiceTemplate] = Field(default=None, alias="VoiceTemplate")
    __properties: ClassVar[List[str]] = ["EmailTemplate", "PushTemplate", "SMSTemplate", "VoiceTemplate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CampaignResponseTemplateConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email_template
        if self.email_template:
            _dict['EmailTemplate'] = self.email_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of push_template
        if self.push_template:
            _dict['PushTemplate'] = self.push_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sms_template
        if self.sms_template:
            _dict['SMSTemplate'] = self.sms_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voice_template
        if self.voice_template:
            _dict['VoiceTemplate'] = self.voice_template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CampaignResponseTemplateConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EmailTemplate": TemplateConfigurationEmailTemplate.from_dict(obj["EmailTemplate"]) if obj.get("EmailTemplate") is not None else None,
            "PushTemplate": TemplateConfigurationPushTemplate.from_dict(obj["PushTemplate"]) if obj.get("PushTemplate") is not None else None,
            "SMSTemplate": TemplateConfigurationSMSTemplate.from_dict(obj["SMSTemplate"]) if obj.get("SMSTemplate") is not None else None,
            "VoiceTemplate": TemplateConfigurationVoiceTemplate.from_dict(obj["VoiceTemplate"]) if obj.get("VoiceTemplate") is not None else None
        })
        return _obj


