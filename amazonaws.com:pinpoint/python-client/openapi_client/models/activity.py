# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.activity_conditional_split import ActivityConditionalSplit
from openapi_client.models.activity_contact_center import ActivityContactCenter
from openapi_client.models.activity_custom import ActivityCUSTOM
from openapi_client.models.activity_email import ActivityEMAIL
from openapi_client.models.activity_holdout import ActivityHoldout
from openapi_client.models.activity_multi_condition import ActivityMultiCondition
from openapi_client.models.activity_push import ActivityPUSH
from openapi_client.models.activity_random_split import ActivityRandomSplit
from openapi_client.models.activity_sms import ActivitySMS
from openapi_client.models.activity_wait import ActivityWait
from typing import Optional, Set
from typing_extensions import Self

class Activity(BaseModel):
    """
    Specifies the configuration and other settings for an activity in a journey.
    """ # noqa: E501
    custom: Optional[ActivityCUSTOM] = Field(default=None, alias="CUSTOM")
    conditional_split: Optional[ActivityConditionalSplit] = Field(default=None, alias="ConditionalSplit")
    description: Optional[Any] = Field(default=None, alias="Description")
    email: Optional[ActivityEMAIL] = Field(default=None, alias="EMAIL")
    holdout: Optional[ActivityHoldout] = Field(default=None, alias="Holdout")
    multi_condition: Optional[ActivityMultiCondition] = Field(default=None, alias="MultiCondition")
    push: Optional[ActivityPUSH] = Field(default=None, alias="PUSH")
    random_split: Optional[ActivityRandomSplit] = Field(default=None, alias="RandomSplit")
    sms: Optional[ActivitySMS] = Field(default=None, alias="SMS")
    wait: Optional[ActivityWait] = Field(default=None, alias="Wait")
    contact_center: Optional[ActivityContactCenter] = Field(default=None, alias="ContactCenter")
    __properties: ClassVar[List[str]] = ["CUSTOM", "ConditionalSplit", "Description", "EMAIL", "Holdout", "MultiCondition", "PUSH", "RandomSplit", "SMS", "Wait", "ContactCenter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Activity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom
        if self.custom:
            _dict['CUSTOM'] = self.custom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conditional_split
        if self.conditional_split:
            _dict['ConditionalSplit'] = self.conditional_split.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict['EMAIL'] = self.email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of holdout
        if self.holdout:
            _dict['Holdout'] = self.holdout.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multi_condition
        if self.multi_condition:
            _dict['MultiCondition'] = self.multi_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of push
        if self.push:
            _dict['PUSH'] = self.push.to_dict()
        # override the default output from pydantic by calling `to_dict()` of random_split
        if self.random_split:
            _dict['RandomSplit'] = self.random_split.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sms
        if self.sms:
            _dict['SMS'] = self.sms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wait
        if self.wait:
            _dict['Wait'] = self.wait.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_center
        if self.contact_center:
            _dict['ContactCenter'] = self.contact_center.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Activity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CUSTOM": ActivityCUSTOM.from_dict(obj["CUSTOM"]) if obj.get("CUSTOM") is not None else None,
            "ConditionalSplit": ActivityConditionalSplit.from_dict(obj["ConditionalSplit"]) if obj.get("ConditionalSplit") is not None else None,
            "Description": obj.get("Description"),
            "EMAIL": ActivityEMAIL.from_dict(obj["EMAIL"]) if obj.get("EMAIL") is not None else None,
            "Holdout": ActivityHoldout.from_dict(obj["Holdout"]) if obj.get("Holdout") is not None else None,
            "MultiCondition": ActivityMultiCondition.from_dict(obj["MultiCondition"]) if obj.get("MultiCondition") is not None else None,
            "PUSH": ActivityPUSH.from_dict(obj["PUSH"]) if obj.get("PUSH") is not None else None,
            "RandomSplit": ActivityRandomSplit.from_dict(obj["RandomSplit"]) if obj.get("RandomSplit") is not None else None,
            "SMS": ActivitySMS.from_dict(obj["SMS"]) if obj.get("SMS") is not None else None,
            "Wait": ActivityWait.from_dict(obj["Wait"]) if obj.get("Wait") is not None else None,
            "ContactCenter": ActivityContactCenter.from_dict(obj["ContactCenter"]) if obj.get("ContactCenter") is not None else None
        })
        return _obj


