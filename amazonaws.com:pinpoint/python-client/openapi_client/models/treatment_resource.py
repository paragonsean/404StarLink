# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.treatment_resource_custom_delivery_configuration import TreatmentResourceCustomDeliveryConfiguration
from openapi_client.models.treatment_resource_message_configuration import TreatmentResourceMessageConfiguration
from openapi_client.models.treatment_resource_schedule import TreatmentResourceSchedule
from openapi_client.models.treatment_resource_state import TreatmentResourceState
from openapi_client.models.treatment_resource_template_configuration import TreatmentResourceTemplateConfiguration
from typing import Optional, Set
from typing_extensions import Self

class TreatmentResource(BaseModel):
    """
    Specifies the settings for a campaign treatment. A <i>treatment</i> is a variation of a campaign that's used for A/B testing of a campaign.
    """ # noqa: E501
    custom_delivery_configuration: Optional[TreatmentResourceCustomDeliveryConfiguration] = Field(default=None, alias="CustomDeliveryConfiguration")
    id: Any = Field(alias="Id")
    message_configuration: Optional[TreatmentResourceMessageConfiguration] = Field(default=None, alias="MessageConfiguration")
    schedule: Optional[TreatmentResourceSchedule] = Field(default=None, alias="Schedule")
    size_percent: Any = Field(alias="SizePercent")
    state: Optional[TreatmentResourceState] = Field(default=None, alias="State")
    template_configuration: Optional[TreatmentResourceTemplateConfiguration] = Field(default=None, alias="TemplateConfiguration")
    treatment_description: Optional[Any] = Field(default=None, alias="TreatmentDescription")
    treatment_name: Optional[Any] = Field(default=None, alias="TreatmentName")
    __properties: ClassVar[List[str]] = ["CustomDeliveryConfiguration", "Id", "MessageConfiguration", "Schedule", "SizePercent", "State", "TemplateConfiguration", "TreatmentDescription", "TreatmentName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TreatmentResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_delivery_configuration
        if self.custom_delivery_configuration:
            _dict['CustomDeliveryConfiguration'] = self.custom_delivery_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_configuration
        if self.message_configuration:
            _dict['MessageConfiguration'] = self.message_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['Schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['State'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template_configuration
        if self.template_configuration:
            _dict['TemplateConfiguration'] = self.template_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TreatmentResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CustomDeliveryConfiguration": TreatmentResourceCustomDeliveryConfiguration.from_dict(obj["CustomDeliveryConfiguration"]) if obj.get("CustomDeliveryConfiguration") is not None else None,
            "Id": obj.get("Id"),
            "MessageConfiguration": TreatmentResourceMessageConfiguration.from_dict(obj["MessageConfiguration"]) if obj.get("MessageConfiguration") is not None else None,
            "Schedule": TreatmentResourceSchedule.from_dict(obj["Schedule"]) if obj.get("Schedule") is not None else None,
            "SizePercent": obj.get("SizePercent"),
            "State": TreatmentResourceState.from_dict(obj["State"]) if obj.get("State") is not None else None,
            "TemplateConfiguration": TreatmentResourceTemplateConfiguration.from_dict(obj["TemplateConfiguration"]) if obj.get("TemplateConfiguration") is not None else None,
            "TreatmentDescription": obj.get("TreatmentDescription"),
            "TreatmentName": obj.get("TreatmentName")
        })
        return _obj


