# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.segment_response_dimensions import SegmentResponseDimensions
from openapi_client.models.segment_response_import_definition import SegmentResponseImportDefinition
from openapi_client.models.segment_response_segment_groups import SegmentResponseSegmentGroups
from typing import Optional, Set
from typing_extensions import Self

class SegmentResponse(BaseModel):
    """
    Provides information about the configuration, dimension, and other settings for a segment.
    """ # noqa: E501
    application_id: Any = Field(alias="ApplicationId")
    arn: Any = Field(alias="Arn")
    creation_date: Any = Field(alias="CreationDate")
    dimensions: Optional[SegmentResponseDimensions] = Field(default=None, alias="Dimensions")
    id: Any = Field(alias="Id")
    import_definition: Optional[SegmentResponseImportDefinition] = Field(default=None, alias="ImportDefinition")
    last_modified_date: Optional[Any] = Field(default=None, alias="LastModifiedDate")
    name: Optional[Any] = Field(default=None, alias="Name")
    segment_groups: Optional[SegmentResponseSegmentGroups] = Field(default=None, alias="SegmentGroups")
    segment_type: Any = Field(alias="SegmentType")
    tags: Optional[Any] = None
    version: Optional[Any] = Field(default=None, alias="Version")
    __properties: ClassVar[List[str]] = ["ApplicationId", "Arn", "CreationDate", "Dimensions", "Id", "ImportDefinition", "LastModifiedDate", "Name", "SegmentGroups", "SegmentType", "tags", "Version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SegmentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['Dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of import_definition
        if self.import_definition:
            _dict['ImportDefinition'] = self.import_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segment_groups
        if self.segment_groups:
            _dict['SegmentGroups'] = self.segment_groups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segment_type
        if self.segment_type:
            _dict['SegmentType'] = self.segment_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SegmentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationId": obj.get("ApplicationId"),
            "Arn": obj.get("Arn"),
            "CreationDate": obj.get("CreationDate"),
            "Dimensions": SegmentResponseDimensions.from_dict(obj["Dimensions"]) if obj.get("Dimensions") is not None else None,
            "Id": obj.get("Id"),
            "ImportDefinition": SegmentResponseImportDefinition.from_dict(obj["ImportDefinition"]) if obj.get("ImportDefinition") is not None else None,
            "LastModifiedDate": obj.get("LastModifiedDate"),
            "Name": obj.get("Name"),
            "SegmentGroups": SegmentResponseSegmentGroups.from_dict(obj["SegmentGroups"]) if obj.get("SegmentGroups") is not None else None,
            "SegmentType": SegmentType.from_dict(obj["SegmentType"]) if obj.get("SegmentType") is not None else None,
            "tags": obj.get("tags"),
            "Version": obj.get("Version")
        })
        return _obj


