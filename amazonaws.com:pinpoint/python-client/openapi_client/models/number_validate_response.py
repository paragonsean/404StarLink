# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NumberValidateResponse(BaseModel):
    """
    Provides information about a phone number.
    """ # noqa: E501
    carrier: Optional[Any] = Field(default=None, alias="Carrier")
    city: Optional[Any] = Field(default=None, alias="City")
    cleansed_phone_number_e164: Optional[Any] = Field(default=None, alias="CleansedPhoneNumberE164")
    cleansed_phone_number_national: Optional[Any] = Field(default=None, alias="CleansedPhoneNumberNational")
    country: Optional[Any] = Field(default=None, alias="Country")
    country_code_iso2: Optional[Any] = Field(default=None, alias="CountryCodeIso2")
    country_code_numeric: Optional[Any] = Field(default=None, alias="CountryCodeNumeric")
    county: Optional[Any] = Field(default=None, alias="County")
    original_country_code_iso2: Optional[Any] = Field(default=None, alias="OriginalCountryCodeIso2")
    original_phone_number: Optional[Any] = Field(default=None, alias="OriginalPhoneNumber")
    phone_type: Optional[Any] = Field(default=None, alias="PhoneType")
    phone_type_code: Optional[Any] = Field(default=None, alias="PhoneTypeCode")
    timezone: Optional[Any] = Field(default=None, alias="Timezone")
    zip_code: Optional[Any] = Field(default=None, alias="ZipCode")
    __properties: ClassVar[List[str]] = ["Carrier", "City", "CleansedPhoneNumberE164", "CleansedPhoneNumberNational", "Country", "CountryCodeIso2", "CountryCodeNumeric", "County", "OriginalCountryCodeIso2", "OriginalPhoneNumber", "PhoneType", "PhoneTypeCode", "Timezone", "ZipCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NumberValidateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NumberValidateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Carrier": obj.get("Carrier"),
            "City": obj.get("City"),
            "CleansedPhoneNumberE164": obj.get("CleansedPhoneNumberE164"),
            "CleansedPhoneNumberNational": obj.get("CleansedPhoneNumberNational"),
            "Country": obj.get("Country"),
            "CountryCodeIso2": obj.get("CountryCodeIso2"),
            "CountryCodeNumeric": obj.get("CountryCodeNumeric"),
            "County": obj.get("County"),
            "OriginalCountryCodeIso2": obj.get("OriginalCountryCodeIso2"),
            "OriginalPhoneNumber": obj.get("OriginalPhoneNumber"),
            "PhoneType": obj.get("PhoneType"),
            "PhoneTypeCode": obj.get("PhoneTypeCode"),
            "Timezone": obj.get("Timezone"),
            "ZipCode": obj.get("ZipCode")
        })
        return _obj


