# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class APNSMessage(BaseModel):
    """
    Specifies the settings for a one-time message that's sent directly to an endpoint through the APNs (Apple Push Notification service) channel.
    """ # noqa: E501
    apns_push_type: Optional[Any] = Field(default=None, alias="APNSPushType")
    action: Optional[Any] = Field(default=None, alias="Action")
    badge: Optional[Any] = Field(default=None, alias="Badge")
    body: Optional[Any] = Field(default=None, alias="Body")
    category: Optional[Any] = Field(default=None, alias="Category")
    collapse_id: Optional[Any] = Field(default=None, alias="CollapseId")
    data: Optional[Any] = Field(default=None, alias="Data")
    media_url: Optional[Any] = Field(default=None, alias="MediaUrl")
    preferred_authentication_method: Optional[Any] = Field(default=None, alias="PreferredAuthenticationMethod")
    priority: Optional[Any] = Field(default=None, alias="Priority")
    raw_content: Optional[Any] = Field(default=None, alias="RawContent")
    silent_push: Optional[Any] = Field(default=None, alias="SilentPush")
    sound: Optional[Any] = Field(default=None, alias="Sound")
    substitutions: Optional[Any] = Field(default=None, alias="Substitutions")
    thread_id: Optional[Any] = Field(default=None, alias="ThreadId")
    time_to_live: Optional[Any] = Field(default=None, alias="TimeToLive")
    title: Optional[Any] = Field(default=None, alias="Title")
    url: Optional[Any] = Field(default=None, alias="Url")
    __properties: ClassVar[List[str]] = ["APNSPushType", "Action", "Badge", "Body", "Category", "CollapseId", "Data", "MediaUrl", "PreferredAuthenticationMethod", "Priority", "RawContent", "SilentPush", "Sound", "Substitutions", "ThreadId", "TimeToLive", "Title", "Url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of APNSMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['Action'] = self.action.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of APNSMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "APNSPushType": obj.get("APNSPushType"),
            "Action": Action.from_dict(obj["Action"]) if obj.get("Action") is not None else None,
            "Badge": obj.get("Badge"),
            "Body": obj.get("Body"),
            "Category": obj.get("Category"),
            "CollapseId": obj.get("CollapseId"),
            "Data": obj.get("Data"),
            "MediaUrl": obj.get("MediaUrl"),
            "PreferredAuthenticationMethod": obj.get("PreferredAuthenticationMethod"),
            "Priority": obj.get("Priority"),
            "RawContent": obj.get("RawContent"),
            "SilentPush": obj.get("SilentPush"),
            "Sound": obj.get("Sound"),
            "Substitutions": obj.get("Substitutions"),
            "ThreadId": obj.get("ThreadId"),
            "TimeToLive": obj.get("TimeToLive"),
            "Title": obj.get("Title"),
            "Url": obj.get("Url")
        })
        return _obj


