# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_session import EventSession
from typing import Optional, Set
from typing_extensions import Self

class Event(BaseModel):
    """
    Specifies information about an event that reports data to Amazon Pinpoint.
    """ # noqa: E501
    app_package_name: Optional[Any] = Field(default=None, alias="AppPackageName")
    app_title: Optional[Any] = Field(default=None, alias="AppTitle")
    app_version_code: Optional[Any] = Field(default=None, alias="AppVersionCode")
    attributes: Optional[Any] = Field(default=None, alias="Attributes")
    client_sdk_version: Optional[Any] = Field(default=None, alias="ClientSdkVersion")
    event_type: Any = Field(alias="EventType")
    metrics: Optional[Any] = Field(default=None, alias="Metrics")
    sdk_name: Optional[Any] = Field(default=None, alias="SdkName")
    session: Optional[EventSession] = Field(default=None, alias="Session")
    timestamp: Any = Field(alias="Timestamp")
    __properties: ClassVar[List[str]] = ["AppPackageName", "AppTitle", "AppVersionCode", "Attributes", "ClientSdkVersion", "EventType", "Metrics", "SdkName", "Session", "Timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of session
        if self.session:
            _dict['Session'] = self.session.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AppPackageName": obj.get("AppPackageName"),
            "AppTitle": obj.get("AppTitle"),
            "AppVersionCode": obj.get("AppVersionCode"),
            "Attributes": obj.get("Attributes"),
            "ClientSdkVersion": obj.get("ClientSdkVersion"),
            "EventType": obj.get("EventType"),
            "Metrics": obj.get("Metrics"),
            "SdkName": obj.get("SdkName"),
            "Session": EventSession.from_dict(obj["Session"]) if obj.get("Session") is not None else None,
            "Timestamp": obj.get("Timestamp")
        })
        return _obj


