# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_date_range_kpi_response_kpi_result import ApplicationDateRangeKpiResponseKpiResult
from typing import Optional, Set
from typing_extensions import Self

class CampaignDateRangeKpiResponse(BaseModel):
    """
    Provides the results of a query that retrieved the data for a standard metric that applies to a campaign, and provides information about that query.
    """ # noqa: E501
    application_id: Any = Field(alias="ApplicationId")
    campaign_id: Any = Field(alias="CampaignId")
    end_time: Any = Field(alias="EndTime")
    kpi_name: Any = Field(alias="KpiName")
    kpi_result: ApplicationDateRangeKpiResponseKpiResult = Field(alias="KpiResult")
    next_token: Optional[Any] = Field(default=None, alias="NextToken")
    start_time: Any = Field(alias="StartTime")
    __properties: ClassVar[List[str]] = ["ApplicationId", "CampaignId", "EndTime", "KpiName", "KpiResult", "NextToken", "StartTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CampaignDateRangeKpiResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of kpi_result
        if self.kpi_result:
            _dict['KpiResult'] = self.kpi_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CampaignDateRangeKpiResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationId": obj.get("ApplicationId"),
            "CampaignId": obj.get("CampaignId"),
            "EndTime": obj.get("EndTime"),
            "KpiName": obj.get("KpiName"),
            "KpiResult": ApplicationDateRangeKpiResponseKpiResult.from_dict(obj["KpiResult"]) if obj.get("KpiResult") is not None else None,
            "NextToken": obj.get("NextToken"),
            "StartTime": obj.get("StartTime")
        })
        return _obj


