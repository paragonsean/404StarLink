# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_journey_request_write_journey_request_closed_days import CreateJourneyRequestWriteJourneyRequestClosedDays
from openapi_client.models.create_journey_request_write_journey_request_journey_channel_settings import CreateJourneyRequestWriteJourneyRequestJourneyChannelSettings
from openapi_client.models.create_journey_request_write_journey_request_limits import CreateJourneyRequestWriteJourneyRequestLimits
from openapi_client.models.create_journey_request_write_journey_request_open_hours import CreateJourneyRequestWriteJourneyRequestOpenHours
from openapi_client.models.create_journey_request_write_journey_request_quiet_time import CreateJourneyRequestWriteJourneyRequestQuietTime
from openapi_client.models.create_journey_request_write_journey_request_schedule import CreateJourneyRequestWriteJourneyRequestSchedule
from openapi_client.models.create_journey_request_write_journey_request_start_condition import CreateJourneyRequestWriteJourneyRequestStartCondition
from typing import Optional, Set
from typing_extensions import Self

class JourneyResponse(BaseModel):
    """
    Provides information about the status, configuration, and other settings for a journey.
    """ # noqa: E501
    activities: Optional[Any] = Field(default=None, alias="Activities")
    application_id: Any = Field(alias="ApplicationId")
    creation_date: Optional[Any] = Field(default=None, alias="CreationDate")
    id: Any = Field(alias="Id")
    last_modified_date: Optional[Any] = Field(default=None, alias="LastModifiedDate")
    limits: Optional[CreateJourneyRequestWriteJourneyRequestLimits] = Field(default=None, alias="Limits")
    local_time: Optional[Any] = Field(default=None, alias="LocalTime")
    name: Any = Field(alias="Name")
    quiet_time: Optional[CreateJourneyRequestWriteJourneyRequestQuietTime] = Field(default=None, alias="QuietTime")
    refresh_frequency: Optional[Any] = Field(default=None, alias="RefreshFrequency")
    schedule: Optional[CreateJourneyRequestWriteJourneyRequestSchedule] = Field(default=None, alias="Schedule")
    start_activity: Optional[Any] = Field(default=None, alias="StartActivity")
    start_condition: Optional[CreateJourneyRequestWriteJourneyRequestStartCondition] = Field(default=None, alias="StartCondition")
    state: Optional[Any] = Field(default=None, alias="State")
    tags: Optional[Any] = None
    wait_for_quiet_time: Optional[Any] = Field(default=None, alias="WaitForQuietTime")
    refresh_on_segment_update: Optional[Any] = Field(default=None, alias="RefreshOnSegmentUpdate")
    journey_channel_settings: Optional[CreateJourneyRequestWriteJourneyRequestJourneyChannelSettings] = Field(default=None, alias="JourneyChannelSettings")
    sending_schedule: Optional[Any] = Field(default=None, alias="SendingSchedule")
    open_hours: Optional[CreateJourneyRequestWriteJourneyRequestOpenHours] = Field(default=None, alias="OpenHours")
    closed_days: Optional[CreateJourneyRequestWriteJourneyRequestClosedDays] = Field(default=None, alias="ClosedDays")
    __properties: ClassVar[List[str]] = ["Activities", "ApplicationId", "CreationDate", "Id", "LastModifiedDate", "Limits", "LocalTime", "Name", "QuietTime", "RefreshFrequency", "Schedule", "StartActivity", "StartCondition", "State", "tags", "WaitForQuietTime", "RefreshOnSegmentUpdate", "JourneyChannelSettings", "SendingSchedule", "OpenHours", "ClosedDays"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JourneyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of limits
        if self.limits:
            _dict['Limits'] = self.limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quiet_time
        if self.quiet_time:
            _dict['QuietTime'] = self.quiet_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['Schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_condition
        if self.start_condition:
            _dict['StartCondition'] = self.start_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['State'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of journey_channel_settings
        if self.journey_channel_settings:
            _dict['JourneyChannelSettings'] = self.journey_channel_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_hours
        if self.open_hours:
            _dict['OpenHours'] = self.open_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of closed_days
        if self.closed_days:
            _dict['ClosedDays'] = self.closed_days.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JourneyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Activities": obj.get("Activities"),
            "ApplicationId": obj.get("ApplicationId"),
            "CreationDate": obj.get("CreationDate"),
            "Id": obj.get("Id"),
            "LastModifiedDate": obj.get("LastModifiedDate"),
            "Limits": CreateJourneyRequestWriteJourneyRequestLimits.from_dict(obj["Limits"]) if obj.get("Limits") is not None else None,
            "LocalTime": obj.get("LocalTime"),
            "Name": obj.get("Name"),
            "QuietTime": CreateJourneyRequestWriteJourneyRequestQuietTime.from_dict(obj["QuietTime"]) if obj.get("QuietTime") is not None else None,
            "RefreshFrequency": obj.get("RefreshFrequency"),
            "Schedule": CreateJourneyRequestWriteJourneyRequestSchedule.from_dict(obj["Schedule"]) if obj.get("Schedule") is not None else None,
            "StartActivity": obj.get("StartActivity"),
            "StartCondition": CreateJourneyRequestWriteJourneyRequestStartCondition.from_dict(obj["StartCondition"]) if obj.get("StartCondition") is not None else None,
            "State": State.from_dict(obj["State"]) if obj.get("State") is not None else None,
            "tags": obj.get("tags"),
            "WaitForQuietTime": obj.get("WaitForQuietTime"),
            "RefreshOnSegmentUpdate": obj.get("RefreshOnSegmentUpdate"),
            "JourneyChannelSettings": CreateJourneyRequestWriteJourneyRequestJourneyChannelSettings.from_dict(obj["JourneyChannelSettings"]) if obj.get("JourneyChannelSettings") is not None else None,
            "SendingSchedule": obj.get("SendingSchedule"),
            "OpenHours": CreateJourneyRequestWriteJourneyRequestOpenHours.from_dict(obj["OpenHours"]) if obj.get("OpenHours") is not None else None,
            "ClosedDays": CreateJourneyRequestWriteJourneyRequestClosedDays.from_dict(obj["ClosedDays"]) if obj.get("ClosedDays") is not None else None
        })
        return _obj


