# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bool import bool
from openapi_client.models.frequency import Frequency
from openapi_client.models.schedule_event_filter import ScheduleEventFilter
from openapi_client.models.schedule_quiet_time import ScheduleQuietTime
from openapi_client.models.str import str
from typing import Optional, Set
from typing_extensions import Self

class TreatmentResourceSchedule(BaseModel):
    """
    TreatmentResourceSchedule
    """ # noqa: E501
    end_time: Optional[Any] = Field(default=None, alias="EndTime")
    event_filter: Optional[ScheduleEventFilter] = Field(default=None, alias="EventFilter")
    frequency: Optional[Any] = Field(default=None, alias="Frequency")
    is_local_time: Optional[Any] = Field(default=None, alias="IsLocalTime")
    quiet_time: Optional[ScheduleQuietTime] = Field(default=None, alias="QuietTime")
    start_time: Any = Field(alias="StartTime")
    timezone: Optional[Any] = Field(default=None, alias="Timezone")
    __properties: ClassVar[List[str]] = ["EndTime", "EventFilter", "Frequency", "IsLocalTime", "QuietTime", "StartTime", "Timezone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TreatmentResourceSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_filter
        if self.event_filter:
            _dict['EventFilter'] = self.event_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of frequency
        if self.frequency:
            _dict['Frequency'] = self.frequency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quiet_time
        if self.quiet_time:
            _dict['QuietTime'] = self.quiet_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TreatmentResourceSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "EndTime": obj.get("EndTime"),
            "EventFilter": ScheduleEventFilter.from_dict(obj["EventFilter"]) if obj.get("EventFilter") is not None else None,
            "Frequency": Frequency.from_dict(obj["Frequency"]) if obj.get("Frequency") is not None else None,
            "IsLocalTime": obj.get("IsLocalTime"),
            "QuietTime": ScheduleQuietTime.from_dict(obj["QuietTime"]) if obj.get("QuietTime") is not None else None,
            "StartTime": obj.get("StartTime"),
            "Timezone": obj.get("Timezone")
        })
        return _obj


