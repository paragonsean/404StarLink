# coding: utf-8

"""
    papiNet API

    papinet API is a global initiative for the Forst and Paper supply chain.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.order_line_item import OrderLineItem
from openapi_client.models.pagination_links import PaginationLinks
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Order
    """ # noqa: E501
    id: StrictStr
    number_of_line_items: Annotated[int, Field(strict=True, ge=0)] = Field(alias="numberOfLineItems")
    order_number: StrictStr = Field(alias="orderNumber")
    order_status: StrictStr = Field(alias="orderStatus")
    links: Optional[PaginationLinks] = None
    order_line_items: Optional[List[OrderLineItem]] = Field(default=None, alias="orderLineItems")
    __properties: ClassVar[List[str]] = ["id", "numberOfLineItems", "orderNumber", "orderStatus", "links", "orderLineItems"]

    @field_validator('order_status')
    def order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Active', 'Cancelled', 'Completed']):
            raise ValueError("must be one of enum values ('Active', 'Cancelled', 'Completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_line_items (list)
        _items = []
        if self.order_line_items:
            for _item_order_line_items in self.order_line_items:
                if _item_order_line_items:
                    _items.append(_item_order_line_items.to_dict())
            _dict['orderLineItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "numberOfLineItems": obj.get("numberOfLineItems"),
            "orderNumber": obj.get("orderNumber"),
            "orderStatus": obj.get("orderStatus"),
            "links": PaginationLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "orderLineItems": [OrderLineItem.from_dict(_item) for _item in obj["orderLineItems"]] if obj.get("orderLineItems") is not None else None
        })
        return _obj


