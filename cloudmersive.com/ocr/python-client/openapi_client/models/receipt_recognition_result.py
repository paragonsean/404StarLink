# coding: utf-8

"""
    ocrapi

    The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.receipt_line_item import ReceiptLineItem
from typing import Optional, Set
from typing_extensions import Self

class ReceiptRecognitionResult(BaseModel):
    """
    Result of recognizing a receipt, to extract the key information from the receipt
    """ # noqa: E501
    address_string: Optional[StrictStr] = Field(default=None, description="The address of the business printed on the receipt (if included on the receipt)", alias="AddressString")
    business_name: Optional[StrictStr] = Field(default=None, description="The name of the business printed on the receipt (if included on the receipt)", alias="BusinessName")
    business_website: Optional[StrictStr] = Field(default=None, description="The website URL of the business printed on the receipt (if included on the receipt)", alias="BusinessWebsite")
    phone_number: Optional[StrictStr] = Field(default=None, description="The phone number printed on the receipt (if included on the receipt)", alias="PhoneNumber")
    receipt_items: Optional[List[ReceiptLineItem]] = Field(default=None, description="The individual line items comprising the order; does not include total (see ReceiptTotal)", alias="ReceiptItems")
    receipt_sub_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional; if available, the monetary value of the receipt subtotal - typically not including specialized line items such as Tax. If this value is not available, it will be 0.", alias="ReceiptSubTotal")
    receipt_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total monetary value of the receipt (if included on the receipt)", alias="ReceiptTotal")
    successful: Optional[StrictBool] = Field(default=None, description="True if the operation was successful, false otherwise", alias="Successful")
    timestamp: Optional[datetime] = Field(default=None, description="The date and time printed on the receipt (if included on the receipt)", alias="Timestamp")
    __properties: ClassVar[List[str]] = ["AddressString", "BusinessName", "BusinessWebsite", "PhoneNumber", "ReceiptItems", "ReceiptSubTotal", "ReceiptTotal", "Successful", "Timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReceiptRecognitionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in receipt_items (list)
        _items = []
        if self.receipt_items:
            for _item_receipt_items in self.receipt_items:
                if _item_receipt_items:
                    _items.append(_item_receipt_items.to_dict())
            _dict['ReceiptItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReceiptRecognitionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AddressString": obj.get("AddressString"),
            "BusinessName": obj.get("BusinessName"),
            "BusinessWebsite": obj.get("BusinessWebsite"),
            "PhoneNumber": obj.get("PhoneNumber"),
            "ReceiptItems": [ReceiptLineItem.from_dict(_item) for _item in obj["ReceiptItems"]] if obj.get("ReceiptItems") is not None else None,
            "ReceiptSubTotal": obj.get("ReceiptSubTotal"),
            "ReceiptTotal": obj.get("ReceiptTotal"),
            "Successful": obj.get("Successful"),
            "Timestamp": obj.get("Timestamp")
        })
        return _obj


