# coding: utf-8

"""
    ocrapi

    The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FormTableColumnDefinition(BaseModel):
    """
    Definition of a column within a table for OCR data extraction from images
    """ # noqa: E501
    allow_numeric_digits: Optional[StrictBool] = Field(default=None, description="Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits", alias="AllowNumericDigits")
    anchor_mode: Optional[StrictStr] = Field(default=None, description="Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match).  Default is Partial.", alias="AnchorMode")
    column_id: Optional[StrictStr] = Field(default=None, description="The identifier of the field; use this to identify which field is being referenced", alias="ColumnID")
    data_type: Optional[StrictStr] = Field(default=None, description="The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)", alias="DataType")
    minimum_character_count: Optional[StrictInt] = Field(default=None, description="Optional - the target number of digits in the field; useful for fixed-length fields", alias="MinimumCharacterCount")
    top_anchor: Optional[StrictStr] = Field(default=None, description="Optional - the top anchor of the column heading", alias="TopAnchor")
    __properties: ClassVar[List[str]] = ["AllowNumericDigits", "AnchorMode", "ColumnID", "DataType", "MinimumCharacterCount", "TopAnchor"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormTableColumnDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormTableColumnDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AllowNumericDigits": obj.get("AllowNumericDigits"),
            "AnchorMode": obj.get("AnchorMode"),
            "ColumnID": obj.get("ColumnID"),
            "DataType": obj.get("DataType"),
            "MinimumCharacterCount": obj.get("MinimumCharacterCount"),
            "TopAnchor": obj.get("TopAnchor")
        })
        return _obj


