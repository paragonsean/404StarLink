# coding: utf-8

"""
    ocrapi

    The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FormFieldDefinition(BaseModel):
    """
    Definition of a form field for OCR data extraction from images
    """ # noqa: E501
    allow_numeric_digits: Optional[StrictBool] = Field(default=None, description="Optional - set to false to block values that contain numeric digits, set to true to allow numeric digits", alias="AllowNumericDigits")
    alternate_anchor: Optional[StrictStr] = Field(default=None, description="Optional - alterate match text for the specified anchor", alias="AlternateAnchor")
    anchor_mode: Optional[StrictStr] = Field(default=None, description="Optional - the matching mode for the anchor.  Possible values are Complete (requires the entire anchor to match) and Partial (allows only part of the anchor to match) and Horizontal (anchor must be laid out horizontally).  Default is Partial.", alias="AnchorMode")
    bottom_anchor: Optional[StrictStr] = Field(default=None, description="Optional - the bottom anchor of the field", alias="BottomAnchor")
    data_type: Optional[StrictStr] = Field(default=None, description="The data type of the field; possible values are INTEGER (Integer value), STRING (Arbitrary string value, spaces are permitted), DATE (Date in a structured format), DECIMAL (Decimal number), ALPHANUMERIC (Continuous alphanumeric string with no spaces), STRINGNOWHITESPACE (A string that contains no whitespace characters), SERIALNUMBER (A serial-number style string that contains letters and numbers, and certain symbols; must contain at least one number), ALPHAONLY (Alphabet characters only, no numbers or symbols or whitespace)", alias="DataType")
    field_id: Optional[StrictStr] = Field(default=None, description="The identifier of the field; use this to identify which field is being referenced.  Set to SkipField if you do not wish to return the value of this field in the result.", alias="FieldID")
    horizontal_alignment_type: Optional[StrictStr] = Field(default=None, description="Horizontal alignment of target value area relative to the field anchor; Possible values are Left, Right", alias="HorizontalAlignmentType")
    ignore: Optional[List[StrictStr]] = Field(default=None, description="Optional - Ignore any result items that contain a partial or complete match with these text strings", alias="Ignore")
    left_anchor: Optional[StrictStr] = Field(default=None, description="Optional - the left-hand anchor of the field", alias="LeftAnchor")
    minimum_character_count: Optional[StrictInt] = Field(default=None, description="Optional - the target number of digits in the field; useful for fixed-length fields", alias="MinimumCharacterCount")
    options: Optional[StrictStr] = Field(default=None, description="Optional - additional options that can be set for this field definition, separated by commas.  Possible values are AllowMultiMatch (allow the same anchor to be matched to multiple fields)", alias="Options")
    target_digit_count: Optional[StrictInt] = Field(default=None, description="Optional - the target number of digits in the field; useful for fixed-length fields", alias="TargetDigitCount")
    target_field_height_relative: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional - scale factor for target field height - relative to height of field title", alias="TargetFieldHeight_Relative")
    target_field_horizontal_adjustment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional - horizontal adjestment in relative width of the field", alias="TargetFieldHorizontalAdjustment")
    target_field_vertical_adjustment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional - vertical adjestment in relative height of the field", alias="TargetFieldVerticalAdjustment")
    target_field_width_relative: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional - scale factor for target field width - relative to width of field title; a value of 1.0 indicates the target value area has the same width as the field value as occurring in the image; a value of 2.0 would indicate that the target value area has 2 times the width of the field value as occurring in the image.", alias="TargetFieldWidth_Relative")
    top_anchor: Optional[StrictStr] = Field(default=None, description="Optional - the top anchor of the field", alias="TopAnchor")
    vertical_alignment_type: Optional[StrictStr] = Field(default=None, description="Vertical alignment of target value area relative to the field anchor; Possible values are VCenter, Top, Bottom", alias="VerticalAlignmentType")
    __properties: ClassVar[List[str]] = ["AllowNumericDigits", "AlternateAnchor", "AnchorMode", "BottomAnchor", "DataType", "FieldID", "HorizontalAlignmentType", "Ignore", "LeftAnchor", "MinimumCharacterCount", "Options", "TargetDigitCount", "TargetFieldHeight_Relative", "TargetFieldHorizontalAdjustment", "TargetFieldVerticalAdjustment", "TargetFieldWidth_Relative", "TopAnchor", "VerticalAlignmentType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormFieldDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormFieldDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AllowNumericDigits": obj.get("AllowNumericDigits"),
            "AlternateAnchor": obj.get("AlternateAnchor"),
            "AnchorMode": obj.get("AnchorMode"),
            "BottomAnchor": obj.get("BottomAnchor"),
            "DataType": obj.get("DataType"),
            "FieldID": obj.get("FieldID"),
            "HorizontalAlignmentType": obj.get("HorizontalAlignmentType"),
            "Ignore": obj.get("Ignore"),
            "LeftAnchor": obj.get("LeftAnchor"),
            "MinimumCharacterCount": obj.get("MinimumCharacterCount"),
            "Options": obj.get("Options"),
            "TargetDigitCount": obj.get("TargetDigitCount"),
            "TargetFieldHeight_Relative": obj.get("TargetFieldHeight_Relative"),
            "TargetFieldHorizontalAdjustment": obj.get("TargetFieldHorizontalAdjustment"),
            "TargetFieldVerticalAdjustment": obj.get("TargetFieldVerticalAdjustment"),
            "TargetFieldWidth_Relative": obj.get("TargetFieldWidth_Relative"),
            "TopAnchor": obj.get("TopAnchor"),
            "VerticalAlignmentType": obj.get("VerticalAlignmentType")
        })
        return _obj


