# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.video_selector_hdr10_metadata import VideoSelectorHdr10Metadata
from typing import Optional, Set
from typing_extensions import Self

class VideoSelector(BaseModel):
    """
    Input video selectors contain the video settings for the input. Each of your inputs can have up to one video selector.
    """ # noqa: E501
    alpha_behavior: Optional[Any] = Field(default=None, alias="AlphaBehavior")
    color_space: Optional[Any] = Field(default=None, alias="ColorSpace")
    color_space_usage: Optional[Any] = Field(default=None, alias="ColorSpaceUsage")
    embedded_timecode_override: Optional[Any] = Field(default=None, alias="EmbeddedTimecodeOverride")
    hdr10_metadata: Optional[VideoSelectorHdr10Metadata] = Field(default=None, alias="Hdr10Metadata")
    pad_video: Optional[Any] = Field(default=None, alias="PadVideo")
    pid: Optional[Any] = Field(default=None, alias="Pid")
    program_number: Optional[Any] = Field(default=None, alias="ProgramNumber")
    rotate: Optional[Any] = Field(default=None, alias="Rotate")
    sample_range: Optional[Any] = Field(default=None, alias="SampleRange")
    __properties: ClassVar[List[str]] = ["AlphaBehavior", "ColorSpace", "ColorSpaceUsage", "EmbeddedTimecodeOverride", "Hdr10Metadata", "PadVideo", "Pid", "ProgramNumber", "Rotate", "SampleRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoSelector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alpha_behavior
        if self.alpha_behavior:
            _dict['AlphaBehavior'] = self.alpha_behavior.to_dict()
        # override the default output from pydantic by calling `to_dict()` of color_space
        if self.color_space:
            _dict['ColorSpace'] = self.color_space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of color_space_usage
        if self.color_space_usage:
            _dict['ColorSpaceUsage'] = self.color_space_usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of embedded_timecode_override
        if self.embedded_timecode_override:
            _dict['EmbeddedTimecodeOverride'] = self.embedded_timecode_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hdr10_metadata
        if self.hdr10_metadata:
            _dict['Hdr10Metadata'] = self.hdr10_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pad_video
        if self.pad_video:
            _dict['PadVideo'] = self.pad_video.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rotate
        if self.rotate:
            _dict['Rotate'] = self.rotate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sample_range
        if self.sample_range:
            _dict['SampleRange'] = self.sample_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoSelector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AlphaBehavior": AlphaBehavior.from_dict(obj["AlphaBehavior"]) if obj.get("AlphaBehavior") is not None else None,
            "ColorSpace": ColorSpace.from_dict(obj["ColorSpace"]) if obj.get("ColorSpace") is not None else None,
            "ColorSpaceUsage": ColorSpaceUsage.from_dict(obj["ColorSpaceUsage"]) if obj.get("ColorSpaceUsage") is not None else None,
            "EmbeddedTimecodeOverride": EmbeddedTimecodeOverride.from_dict(obj["EmbeddedTimecodeOverride"]) if obj.get("EmbeddedTimecodeOverride") is not None else None,
            "Hdr10Metadata": VideoSelectorHdr10Metadata.from_dict(obj["Hdr10Metadata"]) if obj.get("Hdr10Metadata") is not None else None,
            "PadVideo": PadVideo.from_dict(obj["PadVideo"]) if obj.get("PadVideo") is not None else None,
            "Pid": obj.get("Pid"),
            "ProgramNumber": obj.get("ProgramNumber"),
            "Rotate": InputRotate.from_dict(obj["Rotate"]) if obj.get("Rotate") is not None else None,
            "SampleRange": InputSampleRange.from_dict(obj["SampleRange"]) if obj.get("SampleRange") is not None else None
        })
        return _obj


