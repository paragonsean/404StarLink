# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.create_job_request_acceleration_settings import CreateJobRequestAccelerationSettings
from openapi_client.models.create_job_request_settings import CreateJobRequestSettings
from openapi_client.models.hop_destination import HopDestination
from typing import Optional, Set
from typing_extensions import Self

class CreateJobRequest(BaseModel):
    """
    CreateJobRequest
    """ # noqa: E501
    acceleration_settings: Optional[CreateJobRequestAccelerationSettings] = Field(default=None, alias="accelerationSettings")
    billing_tags_source: Optional[StrictStr] = Field(default=None, description="The tag type that AWS Billing and Cost Management will use to sort your AWS Elemental MediaConvert costs on any billing report that you set up.", alias="billingTagsSource")
    client_request_token: Optional[StrictStr] = Field(default=None, description="Prevent duplicate jobs from being created and ensure idempotency for your requests. A client request token can be any string that includes up to 64 ASCII characters. If you reuse a client request token within one minute of a successful request, the API returns the job details of the original request instead. For more information see https://docs.aws.amazon.com/mediaconvert/latest/apireference/idempotency.html.", alias="clientRequestToken")
    hop_destinations: Optional[List[HopDestination]] = Field(default=None, description="Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.", alias="hopDestinations")
    job_template: Optional[StrictStr] = Field(default=None, description="Optional. When you create a job, you can either specify a job template or specify the transcoding settings individually.", alias="jobTemplate")
    priority: Optional[Annotated[int, Field(le=50, strict=True, ge=-50)]] = Field(default=None, description="Optional. Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.")
    queue: Optional[StrictStr] = Field(default=None, description="Optional. When you create a job, you can specify a queue to send it to. If you don't specify, the job will go to the default queue. For more about queues, see the User Guide topic at https://docs.aws.amazon.com/mediaconvert/latest/ug/what-is.html.")
    role: StrictStr = Field(description="Required. The IAM role you use for creating this job. For details about permissions, see the User Guide topic at the User Guide at https://docs.aws.amazon.com/mediaconvert/latest/ug/iam-role.html.")
    settings: CreateJobRequestSettings
    simulate_reserved_queue: Optional[StrictStr] = Field(default=None, description="Enable this setting when you run a test job to estimate how many reserved transcoding slots (RTS) you need. When this is enabled, MediaConvert runs your job from an on-demand queue with similar performance to what you will see with one RTS in a reserved queue. This setting is disabled by default.", alias="simulateReservedQueue")
    status_update_interval: Optional[StrictStr] = Field(default=None, description="Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.", alias="statusUpdateInterval")
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.  Use standard AWS tags on your job for automatic integration with AWS services and for custom integrations and workflows.")
    user_metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. User-defined metadata that you want to associate with an MediaConvert job. You specify metadata in key/value pairs.  Use only for existing integrations or workflows that rely on job metadata tags. Otherwise, we recommend that you use standard AWS tags.", alias="userMetadata")
    __properties: ClassVar[List[str]] = ["accelerationSettings", "billingTagsSource", "clientRequestToken", "hopDestinations", "jobTemplate", "priority", "queue", "role", "settings", "simulateReservedQueue", "statusUpdateInterval", "tags", "userMetadata"]

    @field_validator('billing_tags_source')
    def billing_tags_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['QUEUE', 'PRESET', 'JOB_TEMPLATE', 'JOB']):
            raise ValueError("must be one of enum values ('QUEUE', 'PRESET', 'JOB_TEMPLATE', 'JOB')")
        return value

    @field_validator('simulate_reserved_queue')
    def simulate_reserved_queue_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISABLED', 'ENABLED']):
            raise ValueError("must be one of enum values ('DISABLED', 'ENABLED')")
        return value

    @field_validator('status_update_interval')
    def status_update_interval_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SECONDS_10', 'SECONDS_12', 'SECONDS_15', 'SECONDS_20', 'SECONDS_30', 'SECONDS_60', 'SECONDS_120', 'SECONDS_180', 'SECONDS_240', 'SECONDS_300', 'SECONDS_360', 'SECONDS_420', 'SECONDS_480', 'SECONDS_540', 'SECONDS_600']):
            raise ValueError("must be one of enum values ('SECONDS_10', 'SECONDS_12', 'SECONDS_15', 'SECONDS_20', 'SECONDS_30', 'SECONDS_60', 'SECONDS_120', 'SECONDS_180', 'SECONDS_240', 'SECONDS_300', 'SECONDS_360', 'SECONDS_420', 'SECONDS_480', 'SECONDS_540', 'SECONDS_600')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateJobRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acceleration_settings
        if self.acceleration_settings:
            _dict['accelerationSettings'] = self.acceleration_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in hop_destinations (list)
        _items = []
        if self.hop_destinations:
            for _item_hop_destinations in self.hop_destinations:
                if _item_hop_destinations:
                    _items.append(_item_hop_destinations.to_dict())
            _dict['hopDestinations'] = _items
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateJobRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accelerationSettings": CreateJobRequestAccelerationSettings.from_dict(obj["accelerationSettings"]) if obj.get("accelerationSettings") is not None else None,
            "billingTagsSource": obj.get("billingTagsSource"),
            "clientRequestToken": obj.get("clientRequestToken"),
            "hopDestinations": [HopDestination.from_dict(_item) for _item in obj["hopDestinations"]] if obj.get("hopDestinations") is not None else None,
            "jobTemplate": obj.get("jobTemplate"),
            "priority": obj.get("priority"),
            "queue": obj.get("queue"),
            "role": obj.get("role"),
            "settings": CreateJobRequestSettings.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "simulateReservedQueue": obj.get("simulateReservedQueue"),
            "statusUpdateInterval": obj.get("statusUpdateInterval"),
            "tags": obj.get("tags"),
            "userMetadata": obj.get("userMetadata")
        })
        return _obj


