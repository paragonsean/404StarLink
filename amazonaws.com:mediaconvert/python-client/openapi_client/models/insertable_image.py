# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InsertableImage(BaseModel):
    """
    These settings apply to a specific graphic overlay. You can include multiple overlays in your job.
    """ # noqa: E501
    duration: Optional[Any] = Field(default=None, alias="Duration")
    fade_in: Optional[Any] = Field(default=None, alias="FadeIn")
    fade_out: Optional[Any] = Field(default=None, alias="FadeOut")
    height: Optional[Any] = Field(default=None, alias="Height")
    image_inserter_input: Optional[Any] = Field(default=None, alias="ImageInserterInput")
    image_x: Optional[Any] = Field(default=None, alias="ImageX")
    image_y: Optional[Any] = Field(default=None, alias="ImageY")
    layer: Optional[Any] = Field(default=None, alias="Layer")
    opacity: Optional[Any] = Field(default=None, alias="Opacity")
    start_time: Optional[Any] = Field(default=None, alias="StartTime")
    width: Optional[Any] = Field(default=None, alias="Width")
    __properties: ClassVar[List[str]] = ["Duration", "FadeIn", "FadeOut", "Height", "ImageInserterInput", "ImageX", "ImageY", "Layer", "Opacity", "StartTime", "Width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InsertableImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InsertableImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Duration": obj.get("Duration"),
            "FadeIn": obj.get("FadeIn"),
            "FadeOut": obj.get("FadeOut"),
            "Height": obj.get("Height"),
            "ImageInserterInput": obj.get("ImageInserterInput"),
            "ImageX": obj.get("ImageX"),
            "ImageY": obj.get("ImageY"),
            "Layer": obj.get("Layer"),
            "Opacity": obj.get("Opacity"),
            "StartTime": obj.get("StartTime"),
            "Width": obj.get("Width")
        })
        return _obj


