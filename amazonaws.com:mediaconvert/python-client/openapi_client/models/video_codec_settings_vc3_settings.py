# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.int import int
from openapi_client.models.vc3_class import Vc3Class
from openapi_client.models.vc3_framerate_control import Vc3FramerateControl
from openapi_client.models.vc3_framerate_conversion_algorithm import Vc3FramerateConversionAlgorithm
from openapi_client.models.vc3_interlace_mode import Vc3InterlaceMode
from openapi_client.models.vc3_scan_type_conversion_mode import Vc3ScanTypeConversionMode
from openapi_client.models.vc3_slow_pal import Vc3SlowPal
from openapi_client.models.vc3_telecine import Vc3Telecine
from typing import Optional, Set
from typing_extensions import Self

class VideoCodecSettingsVc3Settings(BaseModel):
    """
    VideoCodecSettingsVc3Settings
    """ # noqa: E501
    framerate_control: Optional[Any] = Field(default=None, alias="FramerateControl")
    framerate_conversion_algorithm: Optional[Any] = Field(default=None, alias="FramerateConversionAlgorithm")
    framerate_denominator: Optional[Any] = Field(default=None, alias="FramerateDenominator")
    framerate_numerator: Optional[Any] = Field(default=None, alias="FramerateNumerator")
    interlace_mode: Optional[Any] = Field(default=None, alias="InterlaceMode")
    scan_type_conversion_mode: Optional[Any] = Field(default=None, alias="ScanTypeConversionMode")
    slow_pal: Optional[Any] = Field(default=None, alias="SlowPal")
    telecine: Optional[Any] = Field(default=None, alias="Telecine")
    vc3_class: Optional[Any] = Field(default=None, alias="Vc3Class")
    __properties: ClassVar[List[str]] = ["FramerateControl", "FramerateConversionAlgorithm", "FramerateDenominator", "FramerateNumerator", "InterlaceMode", "ScanTypeConversionMode", "SlowPal", "Telecine", "Vc3Class"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoCodecSettingsVc3Settings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of framerate_control
        if self.framerate_control:
            _dict['FramerateControl'] = self.framerate_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of framerate_conversion_algorithm
        if self.framerate_conversion_algorithm:
            _dict['FramerateConversionAlgorithm'] = self.framerate_conversion_algorithm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interlace_mode
        if self.interlace_mode:
            _dict['InterlaceMode'] = self.interlace_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scan_type_conversion_mode
        if self.scan_type_conversion_mode:
            _dict['ScanTypeConversionMode'] = self.scan_type_conversion_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slow_pal
        if self.slow_pal:
            _dict['SlowPal'] = self.slow_pal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of telecine
        if self.telecine:
            _dict['Telecine'] = self.telecine.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vc3_class
        if self.vc3_class:
            _dict['Vc3Class'] = self.vc3_class.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoCodecSettingsVc3Settings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "FramerateControl": Vc3FramerateControl.from_dict(obj["FramerateControl"]) if obj.get("FramerateControl") is not None else None,
            "FramerateConversionAlgorithm": Vc3FramerateConversionAlgorithm.from_dict(obj["FramerateConversionAlgorithm"]) if obj.get("FramerateConversionAlgorithm") is not None else None,
            "FramerateDenominator": obj.get("FramerateDenominator"),
            "FramerateNumerator": obj.get("FramerateNumerator"),
            "InterlaceMode": Vc3InterlaceMode.from_dict(obj["InterlaceMode"]) if obj.get("InterlaceMode") is not None else None,
            "ScanTypeConversionMode": Vc3ScanTypeConversionMode.from_dict(obj["ScanTypeConversionMode"]) if obj.get("ScanTypeConversionMode") is not None else None,
            "SlowPal": Vc3SlowPal.from_dict(obj["SlowPal"]) if obj.get("SlowPal") is not None else None,
            "Telecine": Vc3Telecine.from_dict(obj["Telecine"]) if obj.get("Telecine") is not None else None,
            "Vc3Class": Vc3Class.from_dict(obj["Vc3Class"]) if obj.get("Vc3Class") is not None else None
        })
        return _obj


