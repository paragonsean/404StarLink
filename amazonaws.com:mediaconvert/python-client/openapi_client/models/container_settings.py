# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_settings_cmfc_settings import ContainerSettingsCmfcSettings
from openapi_client.models.container_settings_f4v_settings import ContainerSettingsF4vSettings
from openapi_client.models.container_settings_m2ts_settings import ContainerSettingsM2tsSettings
from openapi_client.models.container_settings_m3u8_settings import ContainerSettingsM3u8Settings
from openapi_client.models.container_settings_mov_settings import ContainerSettingsMovSettings
from openapi_client.models.container_settings_mp4_settings import ContainerSettingsMp4Settings
from openapi_client.models.container_settings_mpd_settings import ContainerSettingsMpdSettings
from openapi_client.models.container_settings_mxf_settings import ContainerSettingsMxfSettings
from typing import Optional, Set
from typing_extensions import Self

class ContainerSettings(BaseModel):
    """
    Container specific settings.
    """ # noqa: E501
    cmfc_settings: Optional[ContainerSettingsCmfcSettings] = Field(default=None, alias="CmfcSettings")
    container: Optional[Any] = Field(default=None, alias="Container")
    f4v_settings: Optional[ContainerSettingsF4vSettings] = Field(default=None, alias="F4vSettings")
    m2ts_settings: Optional[ContainerSettingsM2tsSettings] = Field(default=None, alias="M2tsSettings")
    m3u8_settings: Optional[ContainerSettingsM3u8Settings] = Field(default=None, alias="M3u8Settings")
    mov_settings: Optional[ContainerSettingsMovSettings] = Field(default=None, alias="MovSettings")
    mp4_settings: Optional[ContainerSettingsMp4Settings] = Field(default=None, alias="Mp4Settings")
    mpd_settings: Optional[ContainerSettingsMpdSettings] = Field(default=None, alias="MpdSettings")
    mxf_settings: Optional[ContainerSettingsMxfSettings] = Field(default=None, alias="MxfSettings")
    __properties: ClassVar[List[str]] = ["CmfcSettings", "Container", "F4vSettings", "M2tsSettings", "M3u8Settings", "MovSettings", "Mp4Settings", "MpdSettings", "MxfSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cmfc_settings
        if self.cmfc_settings:
            _dict['CmfcSettings'] = self.cmfc_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container
        if self.container:
            _dict['Container'] = self.container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of f4v_settings
        if self.f4v_settings:
            _dict['F4vSettings'] = self.f4v_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of m2ts_settings
        if self.m2ts_settings:
            _dict['M2tsSettings'] = self.m2ts_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of m3u8_settings
        if self.m3u8_settings:
            _dict['M3u8Settings'] = self.m3u8_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mov_settings
        if self.mov_settings:
            _dict['MovSettings'] = self.mov_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mp4_settings
        if self.mp4_settings:
            _dict['Mp4Settings'] = self.mp4_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mpd_settings
        if self.mpd_settings:
            _dict['MpdSettings'] = self.mpd_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mxf_settings
        if self.mxf_settings:
            _dict['MxfSettings'] = self.mxf_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CmfcSettings": ContainerSettingsCmfcSettings.from_dict(obj["CmfcSettings"]) if obj.get("CmfcSettings") is not None else None,
            "Container": ContainerType.from_dict(obj["Container"]) if obj.get("Container") is not None else None,
            "F4vSettings": ContainerSettingsF4vSettings.from_dict(obj["F4vSettings"]) if obj.get("F4vSettings") is not None else None,
            "M2tsSettings": ContainerSettingsM2tsSettings.from_dict(obj["M2tsSettings"]) if obj.get("M2tsSettings") is not None else None,
            "M3u8Settings": ContainerSettingsM3u8Settings.from_dict(obj["M3u8Settings"]) if obj.get("M3u8Settings") is not None else None,
            "MovSettings": ContainerSettingsMovSettings.from_dict(obj["MovSettings"]) if obj.get("MovSettings") is not None else None,
            "Mp4Settings": ContainerSettingsMp4Settings.from_dict(obj["Mp4Settings"]) if obj.get("Mp4Settings") is not None else None,
            "MpdSettings": ContainerSettingsMpdSettings.from_dict(obj["MpdSettings"]) if obj.get("MpdSettings") is not None else None,
            "MxfSettings": ContainerSettingsMxfSettings.from_dict(obj["MxfSettings"]) if obj.get("MxfSettings") is not None else None
        })
        return _obj


