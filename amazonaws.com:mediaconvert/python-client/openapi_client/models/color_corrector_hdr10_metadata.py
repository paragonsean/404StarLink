# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.int import int
from typing import Optional, Set
from typing_extensions import Self

class ColorCorrectorHdr10Metadata(BaseModel):
    """
    ColorCorrectorHdr10Metadata
    """ # noqa: E501
    blue_primary_x: Optional[Any] = Field(default=None, alias="BluePrimaryX")
    blue_primary_y: Optional[Any] = Field(default=None, alias="BluePrimaryY")
    green_primary_x: Optional[Any] = Field(default=None, alias="GreenPrimaryX")
    green_primary_y: Optional[Any] = Field(default=None, alias="GreenPrimaryY")
    max_content_light_level: Optional[Any] = Field(default=None, alias="MaxContentLightLevel")
    max_frame_average_light_level: Optional[Any] = Field(default=None, alias="MaxFrameAverageLightLevel")
    max_luminance: Optional[Any] = Field(default=None, alias="MaxLuminance")
    min_luminance: Optional[Any] = Field(default=None, alias="MinLuminance")
    red_primary_x: Optional[Any] = Field(default=None, alias="RedPrimaryX")
    red_primary_y: Optional[Any] = Field(default=None, alias="RedPrimaryY")
    white_point_x: Optional[Any] = Field(default=None, alias="WhitePointX")
    white_point_y: Optional[Any] = Field(default=None, alias="WhitePointY")
    __properties: ClassVar[List[str]] = ["BluePrimaryX", "BluePrimaryY", "GreenPrimaryX", "GreenPrimaryY", "MaxContentLightLevel", "MaxFrameAverageLightLevel", "MaxLuminance", "MinLuminance", "RedPrimaryX", "RedPrimaryY", "WhitePointX", "WhitePointY"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ColorCorrectorHdr10Metadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ColorCorrectorHdr10Metadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BluePrimaryX": obj.get("BluePrimaryX"),
            "BluePrimaryY": obj.get("BluePrimaryY"),
            "GreenPrimaryX": obj.get("GreenPrimaryX"),
            "GreenPrimaryY": obj.get("GreenPrimaryY"),
            "MaxContentLightLevel": obj.get("MaxContentLightLevel"),
            "MaxFrameAverageLightLevel": obj.get("MaxFrameAverageLightLevel"),
            "MaxLuminance": obj.get("MaxLuminance"),
            "MinLuminance": obj.get("MinLuminance"),
            "RedPrimaryX": obj.get("RedPrimaryX"),
            "RedPrimaryY": obj.get("RedPrimaryY"),
            "WhitePointX": obj.get("WhitePointX"),
            "WhitePointY": obj.get("WhitePointY")
        })
        return _obj


