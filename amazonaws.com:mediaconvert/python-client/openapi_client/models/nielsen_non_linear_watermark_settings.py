# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NielsenNonLinearWatermarkSettings(BaseModel):
    """
    Ignore these settings unless you are using Nielsen non-linear watermarking. Specify the values that MediaConvert uses to generate and place Nielsen watermarks in your output audio. In addition to specifying these values, you also need to set up your cloud TIC server. These settings apply to every output in your job. The MediaConvert implementation is currently with the following Nielsen versions: Nielsen Watermark SDK Version 5.2.1 Nielsen NLM Watermark Engine Version 1.2.7 Nielsen Watermark Authenticator [SID_TIC] Version [5.0.0]
    """ # noqa: E501
    active_watermark_process: Optional[Any] = Field(default=None, alias="ActiveWatermarkProcess")
    adi_filename: Optional[Any] = Field(default=None, alias="AdiFilename")
    asset_id: Optional[Any] = Field(default=None, alias="AssetId")
    asset_name: Optional[Any] = Field(default=None, alias="AssetName")
    cbet_source_id: Optional[Any] = Field(default=None, alias="CbetSourceId")
    episode_id: Optional[Any] = Field(default=None, alias="EpisodeId")
    metadata_destination: Optional[Any] = Field(default=None, alias="MetadataDestination")
    source_id: Optional[Any] = Field(default=None, alias="SourceId")
    source_watermark_status: Optional[Any] = Field(default=None, alias="SourceWatermarkStatus")
    tic_server_url: Optional[Any] = Field(default=None, alias="TicServerUrl")
    unique_tic_per_audio_track: Optional[Any] = Field(default=None, alias="UniqueTicPerAudioTrack")
    __properties: ClassVar[List[str]] = ["ActiveWatermarkProcess", "AdiFilename", "AssetId", "AssetName", "CbetSourceId", "EpisodeId", "MetadataDestination", "SourceId", "SourceWatermarkStatus", "TicServerUrl", "UniqueTicPerAudioTrack"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NielsenNonLinearWatermarkSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of active_watermark_process
        if self.active_watermark_process:
            _dict['ActiveWatermarkProcess'] = self.active_watermark_process.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_watermark_status
        if self.source_watermark_status:
            _dict['SourceWatermarkStatus'] = self.source_watermark_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unique_tic_per_audio_track
        if self.unique_tic_per_audio_track:
            _dict['UniqueTicPerAudioTrack'] = self.unique_tic_per_audio_track.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NielsenNonLinearWatermarkSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ActiveWatermarkProcess": NielsenActiveWatermarkProcessType.from_dict(obj["ActiveWatermarkProcess"]) if obj.get("ActiveWatermarkProcess") is not None else None,
            "AdiFilename": obj.get("AdiFilename"),
            "AssetId": obj.get("AssetId"),
            "AssetName": obj.get("AssetName"),
            "CbetSourceId": obj.get("CbetSourceId"),
            "EpisodeId": obj.get("EpisodeId"),
            "MetadataDestination": obj.get("MetadataDestination"),
            "SourceId": obj.get("SourceId"),
            "SourceWatermarkStatus": NielsenSourceWatermarkStatusType.from_dict(obj["SourceWatermarkStatus"]) if obj.get("SourceWatermarkStatus") is not None else None,
            "TicServerUrl": obj.get("TicServerUrl"),
            "UniqueTicPerAudioTrack": NielsenUniqueTicPerAudioTrackType.from_dict(obj["UniqueTicPerAudioTrack"]) if obj.get("UniqueTicPerAudioTrack") is not None else None
        })
        return _obj


