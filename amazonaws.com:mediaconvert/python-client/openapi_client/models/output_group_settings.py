# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.output_group_settings_cmaf_group_settings import OutputGroupSettingsCmafGroupSettings
from openapi_client.models.output_group_settings_dash_iso_group_settings import OutputGroupSettingsDashIsoGroupSettings
from openapi_client.models.output_group_settings_file_group_settings import OutputGroupSettingsFileGroupSettings
from openapi_client.models.output_group_settings_hls_group_settings import OutputGroupSettingsHlsGroupSettings
from openapi_client.models.output_group_settings_ms_smooth_group_settings import OutputGroupSettingsMsSmoothGroupSettings
from typing import Optional, Set
from typing_extensions import Self

class OutputGroupSettings(BaseModel):
    """
    Output Group settings, including type
    """ # noqa: E501
    cmaf_group_settings: Optional[OutputGroupSettingsCmafGroupSettings] = Field(default=None, alias="CmafGroupSettings")
    dash_iso_group_settings: Optional[OutputGroupSettingsDashIsoGroupSettings] = Field(default=None, alias="DashIsoGroupSettings")
    file_group_settings: Optional[OutputGroupSettingsFileGroupSettings] = Field(default=None, alias="FileGroupSettings")
    hls_group_settings: Optional[OutputGroupSettingsHlsGroupSettings] = Field(default=None, alias="HlsGroupSettings")
    ms_smooth_group_settings: Optional[OutputGroupSettingsMsSmoothGroupSettings] = Field(default=None, alias="MsSmoothGroupSettings")
    type: Optional[Any] = Field(default=None, alias="Type")
    __properties: ClassVar[List[str]] = ["CmafGroupSettings", "DashIsoGroupSettings", "FileGroupSettings", "HlsGroupSettings", "MsSmoothGroupSettings", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutputGroupSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cmaf_group_settings
        if self.cmaf_group_settings:
            _dict['CmafGroupSettings'] = self.cmaf_group_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dash_iso_group_settings
        if self.dash_iso_group_settings:
            _dict['DashIsoGroupSettings'] = self.dash_iso_group_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_group_settings
        if self.file_group_settings:
            _dict['FileGroupSettings'] = self.file_group_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hls_group_settings
        if self.hls_group_settings:
            _dict['HlsGroupSettings'] = self.hls_group_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ms_smooth_group_settings
        if self.ms_smooth_group_settings:
            _dict['MsSmoothGroupSettings'] = self.ms_smooth_group_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['Type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutputGroupSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CmafGroupSettings": OutputGroupSettingsCmafGroupSettings.from_dict(obj["CmafGroupSettings"]) if obj.get("CmafGroupSettings") is not None else None,
            "DashIsoGroupSettings": OutputGroupSettingsDashIsoGroupSettings.from_dict(obj["DashIsoGroupSettings"]) if obj.get("DashIsoGroupSettings") is not None else None,
            "FileGroupSettings": OutputGroupSettingsFileGroupSettings.from_dict(obj["FileGroupSettings"]) if obj.get("FileGroupSettings") is not None else None,
            "HlsGroupSettings": OutputGroupSettingsHlsGroupSettings.from_dict(obj["HlsGroupSettings"]) if obj.get("HlsGroupSettings") is not None else None,
            "MsSmoothGroupSettings": OutputGroupSettingsMsSmoothGroupSettings.from_dict(obj["MsSmoothGroupSettings"]) if obj.get("MsSmoothGroupSettings") is not None else None,
            "Type": OutputGroupType.from_dict(obj["Type"]) if obj.get("Type") is not None else None
        })
        return _obj


