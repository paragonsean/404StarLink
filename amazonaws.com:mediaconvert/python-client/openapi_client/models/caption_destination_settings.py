# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.caption_destination_settings_burnin_destination_settings import CaptionDestinationSettingsBurninDestinationSettings
from openapi_client.models.caption_destination_settings_dvb_sub_destination_settings import CaptionDestinationSettingsDvbSubDestinationSettings
from openapi_client.models.caption_destination_settings_embedded_destination_settings import CaptionDestinationSettingsEmbeddedDestinationSettings
from openapi_client.models.caption_destination_settings_imsc_destination_settings import CaptionDestinationSettingsImscDestinationSettings
from openapi_client.models.caption_destination_settings_scc_destination_settings import CaptionDestinationSettingsSccDestinationSettings
from openapi_client.models.caption_destination_settings_srt_destination_settings import CaptionDestinationSettingsSrtDestinationSettings
from openapi_client.models.caption_destination_settings_teletext_destination_settings import CaptionDestinationSettingsTeletextDestinationSettings
from openapi_client.models.caption_destination_settings_ttml_destination_settings import CaptionDestinationSettingsTtmlDestinationSettings
from openapi_client.models.caption_destination_settings_webvtt_destination_settings import CaptionDestinationSettingsWebvttDestinationSettings
from typing import Optional, Set
from typing_extensions import Self

class CaptionDestinationSettings(BaseModel):
    """
    Settings related to one captions tab on the MediaConvert console. In your job JSON, an instance of captions DestinationSettings is equivalent to one captions tab in the console. Usually, one captions tab corresponds to one output captions track. Depending on your output captions format, one tab might correspond to a set of output captions tracks. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/including-captions.html.
    """ # noqa: E501
    burnin_destination_settings: Optional[CaptionDestinationSettingsBurninDestinationSettings] = Field(default=None, alias="BurninDestinationSettings")
    destination_type: Optional[Any] = Field(default=None, alias="DestinationType")
    dvb_sub_destination_settings: Optional[CaptionDestinationSettingsDvbSubDestinationSettings] = Field(default=None, alias="DvbSubDestinationSettings")
    embedded_destination_settings: Optional[CaptionDestinationSettingsEmbeddedDestinationSettings] = Field(default=None, alias="EmbeddedDestinationSettings")
    imsc_destination_settings: Optional[CaptionDestinationSettingsImscDestinationSettings] = Field(default=None, alias="ImscDestinationSettings")
    scc_destination_settings: Optional[CaptionDestinationSettingsSccDestinationSettings] = Field(default=None, alias="SccDestinationSettings")
    srt_destination_settings: Optional[CaptionDestinationSettingsSrtDestinationSettings] = Field(default=None, alias="SrtDestinationSettings")
    teletext_destination_settings: Optional[CaptionDestinationSettingsTeletextDestinationSettings] = Field(default=None, alias="TeletextDestinationSettings")
    ttml_destination_settings: Optional[CaptionDestinationSettingsTtmlDestinationSettings] = Field(default=None, alias="TtmlDestinationSettings")
    webvtt_destination_settings: Optional[CaptionDestinationSettingsWebvttDestinationSettings] = Field(default=None, alias="WebvttDestinationSettings")
    __properties: ClassVar[List[str]] = ["BurninDestinationSettings", "DestinationType", "DvbSubDestinationSettings", "EmbeddedDestinationSettings", "ImscDestinationSettings", "SccDestinationSettings", "SrtDestinationSettings", "TeletextDestinationSettings", "TtmlDestinationSettings", "WebvttDestinationSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CaptionDestinationSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of burnin_destination_settings
        if self.burnin_destination_settings:
            _dict['BurninDestinationSettings'] = self.burnin_destination_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_type
        if self.destination_type:
            _dict['DestinationType'] = self.destination_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dvb_sub_destination_settings
        if self.dvb_sub_destination_settings:
            _dict['DvbSubDestinationSettings'] = self.dvb_sub_destination_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of embedded_destination_settings
        if self.embedded_destination_settings:
            _dict['EmbeddedDestinationSettings'] = self.embedded_destination_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of imsc_destination_settings
        if self.imsc_destination_settings:
            _dict['ImscDestinationSettings'] = self.imsc_destination_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scc_destination_settings
        if self.scc_destination_settings:
            _dict['SccDestinationSettings'] = self.scc_destination_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of srt_destination_settings
        if self.srt_destination_settings:
            _dict['SrtDestinationSettings'] = self.srt_destination_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teletext_destination_settings
        if self.teletext_destination_settings:
            _dict['TeletextDestinationSettings'] = self.teletext_destination_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ttml_destination_settings
        if self.ttml_destination_settings:
            _dict['TtmlDestinationSettings'] = self.ttml_destination_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webvtt_destination_settings
        if self.webvtt_destination_settings:
            _dict['WebvttDestinationSettings'] = self.webvtt_destination_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CaptionDestinationSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BurninDestinationSettings": CaptionDestinationSettingsBurninDestinationSettings.from_dict(obj["BurninDestinationSettings"]) if obj.get("BurninDestinationSettings") is not None else None,
            "DestinationType": CaptionDestinationType.from_dict(obj["DestinationType"]) if obj.get("DestinationType") is not None else None,
            "DvbSubDestinationSettings": CaptionDestinationSettingsDvbSubDestinationSettings.from_dict(obj["DvbSubDestinationSettings"]) if obj.get("DvbSubDestinationSettings") is not None else None,
            "EmbeddedDestinationSettings": CaptionDestinationSettingsEmbeddedDestinationSettings.from_dict(obj["EmbeddedDestinationSettings"]) if obj.get("EmbeddedDestinationSettings") is not None else None,
            "ImscDestinationSettings": CaptionDestinationSettingsImscDestinationSettings.from_dict(obj["ImscDestinationSettings"]) if obj.get("ImscDestinationSettings") is not None else None,
            "SccDestinationSettings": CaptionDestinationSettingsSccDestinationSettings.from_dict(obj["SccDestinationSettings"]) if obj.get("SccDestinationSettings") is not None else None,
            "SrtDestinationSettings": CaptionDestinationSettingsSrtDestinationSettings.from_dict(obj["SrtDestinationSettings"]) if obj.get("SrtDestinationSettings") is not None else None,
            "TeletextDestinationSettings": CaptionDestinationSettingsTeletextDestinationSettings.from_dict(obj["TeletextDestinationSettings"]) if obj.get("TeletextDestinationSettings") is not None else None,
            "TtmlDestinationSettings": CaptionDestinationSettingsTtmlDestinationSettings.from_dict(obj["TtmlDestinationSettings"]) if obj.get("TtmlDestinationSettings") is not None else None,
            "WebvttDestinationSettings": CaptionDestinationSettingsWebvttDestinationSettings.from_dict(obj["WebvttDestinationSettings"]) if obj.get("WebvttDestinationSettings") is not None else None
        })
        return _obj


