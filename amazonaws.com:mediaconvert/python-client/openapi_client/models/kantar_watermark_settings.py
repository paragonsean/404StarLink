# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KantarWatermarkSettings(BaseModel):
    """
    Use these settings only when you use Kantar watermarking. Specify the values that MediaConvert uses to generate and place Kantar watermarks in your output audio. These settings apply to every output in your job. In addition to specifying these values, you also need to store your Kantar credentials in AWS Secrets Manager. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/kantar-watermarking.html.
    """ # noqa: E501
    channel_name: Optional[Any] = Field(default=None, alias="ChannelName")
    content_reference: Optional[Any] = Field(default=None, alias="ContentReference")
    credentials_secret_name: Optional[Any] = Field(default=None, alias="CredentialsSecretName")
    file_offset: Optional[Any] = Field(default=None, alias="FileOffset")
    kantar_license_id: Optional[Any] = Field(default=None, alias="KantarLicenseId")
    kantar_server_url: Optional[Any] = Field(default=None, alias="KantarServerUrl")
    log_destination: Optional[Any] = Field(default=None, alias="LogDestination")
    metadata3: Optional[Any] = Field(default=None, alias="Metadata3")
    metadata4: Optional[Any] = Field(default=None, alias="Metadata4")
    metadata5: Optional[Any] = Field(default=None, alias="Metadata5")
    metadata6: Optional[Any] = Field(default=None, alias="Metadata6")
    metadata7: Optional[Any] = Field(default=None, alias="Metadata7")
    metadata8: Optional[Any] = Field(default=None, alias="Metadata8")
    __properties: ClassVar[List[str]] = ["ChannelName", "ContentReference", "CredentialsSecretName", "FileOffset", "KantarLicenseId", "KantarServerUrl", "LogDestination", "Metadata3", "Metadata4", "Metadata5", "Metadata6", "Metadata7", "Metadata8"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KantarWatermarkSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KantarWatermarkSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ChannelName": obj.get("ChannelName"),
            "ContentReference": obj.get("ContentReference"),
            "CredentialsSecretName": obj.get("CredentialsSecretName"),
            "FileOffset": obj.get("FileOffset"),
            "KantarLicenseId": obj.get("KantarLicenseId"),
            "KantarServerUrl": obj.get("KantarServerUrl"),
            "LogDestination": obj.get("LogDestination"),
            "Metadata3": obj.get("Metadata3"),
            "Metadata4": obj.get("Metadata4"),
            "Metadata5": obj.get("Metadata5"),
            "Metadata6": obj.get("Metadata6"),
            "Metadata7": obj.get("Metadata7"),
            "Metadata8": obj.get("Metadata8")
        })
        return _obj


