# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.create_job_request_acceleration_settings import CreateJobRequestAccelerationSettings
from openapi_client.models.create_job_template_request_settings import CreateJobTemplateRequestSettings
from openapi_client.models.hop_destination import HopDestination
from typing import Optional, Set
from typing_extensions import Self

class CreateJobTemplateRequest(BaseModel):
    """
    CreateJobTemplateRequest
    """ # noqa: E501
    acceleration_settings: Optional[CreateJobRequestAccelerationSettings] = Field(default=None, alias="accelerationSettings")
    category: Optional[StrictStr] = Field(default=None, description="Optional. A category for the job template you are creating")
    description: Optional[StrictStr] = Field(default=None, description="Optional. A description of the job template you are creating.")
    hop_destinations: Optional[List[HopDestination]] = Field(default=None, description="Optional. Use queue hopping to avoid overly long waits in the backlog of the queue that you submit your job to. Specify an alternate queue and the maximum time that your job will wait in the initial queue before hopping. For more information about this feature, see the AWS Elemental MediaConvert User Guide.", alias="hopDestinations")
    name: StrictStr = Field(description="The name of the job template you are creating.")
    priority: Optional[Annotated[int, Field(le=50, strict=True, ge=-50)]] = Field(default=None, description="Specify the relative priority for this job. In any given queue, the service begins processing the job with the highest value first. When more than one job has the same priority, the service begins processing the job that you submitted first. If you don't specify a priority, the service uses the default value 0.")
    queue: Optional[StrictStr] = Field(default=None, description="Optional. The queue that jobs created from this template are assigned to. If you don't specify this, jobs will go to the default queue.")
    settings: CreateJobTemplateRequestSettings
    status_update_interval: Optional[StrictStr] = Field(default=None, description="Specify how often MediaConvert sends STATUS_UPDATE events to Amazon CloudWatch Events. Set the interval, in seconds, between status updates. MediaConvert sends an update at this interval from the time the service begins processing your job to the time it completes the transcode or encounters an error.", alias="statusUpdateInterval")
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The tags that you want to add to the resource. You can tag resources with a key-value pair or with only a key.")
    __properties: ClassVar[List[str]] = ["accelerationSettings", "category", "description", "hopDestinations", "name", "priority", "queue", "settings", "statusUpdateInterval", "tags"]

    @field_validator('status_update_interval')
    def status_update_interval_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SECONDS_10', 'SECONDS_12', 'SECONDS_15', 'SECONDS_20', 'SECONDS_30', 'SECONDS_60', 'SECONDS_120', 'SECONDS_180', 'SECONDS_240', 'SECONDS_300', 'SECONDS_360', 'SECONDS_420', 'SECONDS_480', 'SECONDS_540', 'SECONDS_600']):
            raise ValueError("must be one of enum values ('SECONDS_10', 'SECONDS_12', 'SECONDS_15', 'SECONDS_20', 'SECONDS_30', 'SECONDS_60', 'SECONDS_120', 'SECONDS_180', 'SECONDS_240', 'SECONDS_300', 'SECONDS_360', 'SECONDS_420', 'SECONDS_480', 'SECONDS_540', 'SECONDS_600')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateJobTemplateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acceleration_settings
        if self.acceleration_settings:
            _dict['accelerationSettings'] = self.acceleration_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in hop_destinations (list)
        _items = []
        if self.hop_destinations:
            for _item_hop_destinations in self.hop_destinations:
                if _item_hop_destinations:
                    _items.append(_item_hop_destinations.to_dict())
            _dict['hopDestinations'] = _items
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateJobTemplateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accelerationSettings": CreateJobRequestAccelerationSettings.from_dict(obj["accelerationSettings"]) if obj.get("accelerationSettings") is not None else None,
            "category": obj.get("category"),
            "description": obj.get("description"),
            "hopDestinations": [HopDestination.from_dict(_item) for _item in obj["hopDestinations"]] if obj.get("hopDestinations") is not None else None,
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "queue": obj.get("queue"),
            "settings": CreateJobTemplateRequestSettings.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "statusUpdateInterval": obj.get("statusUpdateInterval"),
            "tags": obj.get("tags")
        })
        return _obj


