# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.float import float
from openapi_client.models.int import int
from openapi_client.models.vp8_framerate_control import Vp8FramerateControl
from openapi_client.models.vp8_framerate_conversion_algorithm import Vp8FramerateConversionAlgorithm
from openapi_client.models.vp8_par_control import Vp8ParControl
from openapi_client.models.vp8_quality_tuning_level import Vp8QualityTuningLevel
from openapi_client.models.vp8_rate_control_mode import Vp8RateControlMode
from typing import Optional, Set
from typing_extensions import Self

class VideoCodecSettingsVp8Settings(BaseModel):
    """
    VideoCodecSettingsVp8Settings
    """ # noqa: E501
    bitrate: Optional[Any] = Field(default=None, alias="Bitrate")
    framerate_control: Optional[Any] = Field(default=None, alias="FramerateControl")
    framerate_conversion_algorithm: Optional[Any] = Field(default=None, alias="FramerateConversionAlgorithm")
    framerate_denominator: Optional[Any] = Field(default=None, alias="FramerateDenominator")
    framerate_numerator: Optional[Any] = Field(default=None, alias="FramerateNumerator")
    gop_size: Optional[Any] = Field(default=None, alias="GopSize")
    hrd_buffer_size: Optional[Any] = Field(default=None, alias="HrdBufferSize")
    max_bitrate: Optional[Any] = Field(default=None, alias="MaxBitrate")
    par_control: Optional[Any] = Field(default=None, alias="ParControl")
    par_denominator: Optional[Any] = Field(default=None, alias="ParDenominator")
    par_numerator: Optional[Any] = Field(default=None, alias="ParNumerator")
    quality_tuning_level: Optional[Any] = Field(default=None, alias="QualityTuningLevel")
    rate_control_mode: Optional[Any] = Field(default=None, alias="RateControlMode")
    __properties: ClassVar[List[str]] = ["Bitrate", "FramerateControl", "FramerateConversionAlgorithm", "FramerateDenominator", "FramerateNumerator", "GopSize", "HrdBufferSize", "MaxBitrate", "ParControl", "ParDenominator", "ParNumerator", "QualityTuningLevel", "RateControlMode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoCodecSettingsVp8Settings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of framerate_control
        if self.framerate_control:
            _dict['FramerateControl'] = self.framerate_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of framerate_conversion_algorithm
        if self.framerate_conversion_algorithm:
            _dict['FramerateConversionAlgorithm'] = self.framerate_conversion_algorithm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of par_control
        if self.par_control:
            _dict['ParControl'] = self.par_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quality_tuning_level
        if self.quality_tuning_level:
            _dict['QualityTuningLevel'] = self.quality_tuning_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rate_control_mode
        if self.rate_control_mode:
            _dict['RateControlMode'] = self.rate_control_mode.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoCodecSettingsVp8Settings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Bitrate": obj.get("Bitrate"),
            "FramerateControl": Vp8FramerateControl.from_dict(obj["FramerateControl"]) if obj.get("FramerateControl") is not None else None,
            "FramerateConversionAlgorithm": Vp8FramerateConversionAlgorithm.from_dict(obj["FramerateConversionAlgorithm"]) if obj.get("FramerateConversionAlgorithm") is not None else None,
            "FramerateDenominator": obj.get("FramerateDenominator"),
            "FramerateNumerator": obj.get("FramerateNumerator"),
            "GopSize": obj.get("GopSize"),
            "HrdBufferSize": obj.get("HrdBufferSize"),
            "MaxBitrate": obj.get("MaxBitrate"),
            "ParControl": Vp8ParControl.from_dict(obj["ParControl"]) if obj.get("ParControl") is not None else None,
            "ParDenominator": obj.get("ParDenominator"),
            "ParNumerator": obj.get("ParNumerator"),
            "QualityTuningLevel": Vp8QualityTuningLevel.from_dict(obj["QualityTuningLevel"]) if obj.get("QualityTuningLevel") is not None else None,
            "RateControlMode": Vp8RateControlMode.from_dict(obj["RateControlMode"]) if obj.get("RateControlMode") is not None else None
        })
        return _obj


