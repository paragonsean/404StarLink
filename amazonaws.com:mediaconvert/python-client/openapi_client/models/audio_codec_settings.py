# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.audio_codec_settings_aac_settings import AudioCodecSettingsAacSettings
from openapi_client.models.audio_codec_settings_ac3_settings import AudioCodecSettingsAc3Settings
from openapi_client.models.audio_codec_settings_aiff_settings import AudioCodecSettingsAiffSettings
from openapi_client.models.audio_codec_settings_eac3_atmos_settings import AudioCodecSettingsEac3AtmosSettings
from openapi_client.models.audio_codec_settings_eac3_settings import AudioCodecSettingsEac3Settings
from openapi_client.models.audio_codec_settings_mp2_settings import AudioCodecSettingsMp2Settings
from openapi_client.models.audio_codec_settings_mp3_settings import AudioCodecSettingsMp3Settings
from openapi_client.models.audio_codec_settings_opus_settings import AudioCodecSettingsOpusSettings
from openapi_client.models.audio_codec_settings_vorbis_settings import AudioCodecSettingsVorbisSettings
from openapi_client.models.audio_codec_settings_wav_settings import AudioCodecSettingsWavSettings
from typing import Optional, Set
from typing_extensions import Self

class AudioCodecSettings(BaseModel):
    """
    Settings related to audio encoding. The settings in this group vary depending on the value that you choose for your audio codec.
    """ # noqa: E501
    aac_settings: Optional[AudioCodecSettingsAacSettings] = Field(default=None, alias="AacSettings")
    ac3_settings: Optional[AudioCodecSettingsAc3Settings] = Field(default=None, alias="Ac3Settings")
    aiff_settings: Optional[AudioCodecSettingsAiffSettings] = Field(default=None, alias="AiffSettings")
    codec: Optional[Any] = Field(default=None, alias="Codec")
    eac3_atmos_settings: Optional[AudioCodecSettingsEac3AtmosSettings] = Field(default=None, alias="Eac3AtmosSettings")
    eac3_settings: Optional[AudioCodecSettingsEac3Settings] = Field(default=None, alias="Eac3Settings")
    mp2_settings: Optional[AudioCodecSettingsMp2Settings] = Field(default=None, alias="Mp2Settings")
    mp3_settings: Optional[AudioCodecSettingsMp3Settings] = Field(default=None, alias="Mp3Settings")
    opus_settings: Optional[AudioCodecSettingsOpusSettings] = Field(default=None, alias="OpusSettings")
    vorbis_settings: Optional[AudioCodecSettingsVorbisSettings] = Field(default=None, alias="VorbisSettings")
    wav_settings: Optional[AudioCodecSettingsWavSettings] = Field(default=None, alias="WavSettings")
    __properties: ClassVar[List[str]] = ["AacSettings", "Ac3Settings", "AiffSettings", "Codec", "Eac3AtmosSettings", "Eac3Settings", "Mp2Settings", "Mp3Settings", "OpusSettings", "VorbisSettings", "WavSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AudioCodecSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aac_settings
        if self.aac_settings:
            _dict['AacSettings'] = self.aac_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ac3_settings
        if self.ac3_settings:
            _dict['Ac3Settings'] = self.ac3_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aiff_settings
        if self.aiff_settings:
            _dict['AiffSettings'] = self.aiff_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of codec
        if self.codec:
            _dict['Codec'] = self.codec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eac3_atmos_settings
        if self.eac3_atmos_settings:
            _dict['Eac3AtmosSettings'] = self.eac3_atmos_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eac3_settings
        if self.eac3_settings:
            _dict['Eac3Settings'] = self.eac3_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mp2_settings
        if self.mp2_settings:
            _dict['Mp2Settings'] = self.mp2_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mp3_settings
        if self.mp3_settings:
            _dict['Mp3Settings'] = self.mp3_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opus_settings
        if self.opus_settings:
            _dict['OpusSettings'] = self.opus_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vorbis_settings
        if self.vorbis_settings:
            _dict['VorbisSettings'] = self.vorbis_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wav_settings
        if self.wav_settings:
            _dict['WavSettings'] = self.wav_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AudioCodecSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AacSettings": AudioCodecSettingsAacSettings.from_dict(obj["AacSettings"]) if obj.get("AacSettings") is not None else None,
            "Ac3Settings": AudioCodecSettingsAc3Settings.from_dict(obj["Ac3Settings"]) if obj.get("Ac3Settings") is not None else None,
            "AiffSettings": AudioCodecSettingsAiffSettings.from_dict(obj["AiffSettings"]) if obj.get("AiffSettings") is not None else None,
            "Codec": AudioCodec.from_dict(obj["Codec"]) if obj.get("Codec") is not None else None,
            "Eac3AtmosSettings": AudioCodecSettingsEac3AtmosSettings.from_dict(obj["Eac3AtmosSettings"]) if obj.get("Eac3AtmosSettings") is not None else None,
            "Eac3Settings": AudioCodecSettingsEac3Settings.from_dict(obj["Eac3Settings"]) if obj.get("Eac3Settings") is not None else None,
            "Mp2Settings": AudioCodecSettingsMp2Settings.from_dict(obj["Mp2Settings"]) if obj.get("Mp2Settings") is not None else None,
            "Mp3Settings": AudioCodecSettingsMp3Settings.from_dict(obj["Mp3Settings"]) if obj.get("Mp3Settings") is not None else None,
            "OpusSettings": AudioCodecSettingsOpusSettings.from_dict(obj["OpusSettings"]) if obj.get("OpusSettings") is not None else None,
            "VorbisSettings": AudioCodecSettingsVorbisSettings.from_dict(obj["VorbisSettings"]) if obj.get("VorbisSettings") is not None else None,
            "WavSettings": AudioCodecSettingsWavSettings.from_dict(obj["WavSettings"]) if obj.get("WavSettings") is not None else None
        })
        return _obj


