# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.color_corrector_clip_limits import ColorCorrectorClipLimits
from openapi_client.models.color_corrector_hdr10_metadata import ColorCorrectorHdr10Metadata
from typing import Optional, Set
from typing_extensions import Self

class ColorCorrector(BaseModel):
    """
    Settings for color correction.
    """ # noqa: E501
    brightness: Optional[Any] = Field(default=None, alias="Brightness")
    clip_limits: Optional[ColorCorrectorClipLimits] = Field(default=None, alias="ClipLimits")
    color_space_conversion: Optional[Any] = Field(default=None, alias="ColorSpaceConversion")
    contrast: Optional[Any] = Field(default=None, alias="Contrast")
    hdr10_metadata: Optional[ColorCorrectorHdr10Metadata] = Field(default=None, alias="Hdr10Metadata")
    hdr_to_sdr_tone_mapper: Optional[Any] = Field(default=None, alias="HdrToSdrToneMapper")
    hue: Optional[Any] = Field(default=None, alias="Hue")
    sample_range_conversion: Optional[Any] = Field(default=None, alias="SampleRangeConversion")
    saturation: Optional[Any] = Field(default=None, alias="Saturation")
    sdr_reference_white_level: Optional[Any] = Field(default=None, alias="SdrReferenceWhiteLevel")
    __properties: ClassVar[List[str]] = ["Brightness", "ClipLimits", "ColorSpaceConversion", "Contrast", "Hdr10Metadata", "HdrToSdrToneMapper", "Hue", "SampleRangeConversion", "Saturation", "SdrReferenceWhiteLevel"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ColorCorrector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clip_limits
        if self.clip_limits:
            _dict['ClipLimits'] = self.clip_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of color_space_conversion
        if self.color_space_conversion:
            _dict['ColorSpaceConversion'] = self.color_space_conversion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hdr10_metadata
        if self.hdr10_metadata:
            _dict['Hdr10Metadata'] = self.hdr10_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hdr_to_sdr_tone_mapper
        if self.hdr_to_sdr_tone_mapper:
            _dict['HdrToSdrToneMapper'] = self.hdr_to_sdr_tone_mapper.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sample_range_conversion
        if self.sample_range_conversion:
            _dict['SampleRangeConversion'] = self.sample_range_conversion.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ColorCorrector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Brightness": obj.get("Brightness"),
            "ClipLimits": ColorCorrectorClipLimits.from_dict(obj["ClipLimits"]) if obj.get("ClipLimits") is not None else None,
            "ColorSpaceConversion": ColorSpaceConversion.from_dict(obj["ColorSpaceConversion"]) if obj.get("ColorSpaceConversion") is not None else None,
            "Contrast": obj.get("Contrast"),
            "Hdr10Metadata": ColorCorrectorHdr10Metadata.from_dict(obj["Hdr10Metadata"]) if obj.get("Hdr10Metadata") is not None else None,
            "HdrToSdrToneMapper": HDRToSDRToneMapper.from_dict(obj["HdrToSdrToneMapper"]) if obj.get("HdrToSdrToneMapper") is not None else None,
            "Hue": obj.get("Hue"),
            "SampleRangeConversion": SampleRangeConversion.from_dict(obj["SampleRangeConversion"]) if obj.get("SampleRangeConversion") is not None else None,
            "Saturation": obj.get("Saturation"),
            "SdrReferenceWhiteLevel": obj.get("SdrReferenceWhiteLevel")
        })
        return _obj


