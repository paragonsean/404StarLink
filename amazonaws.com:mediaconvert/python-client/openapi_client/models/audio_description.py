# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.audio_description_audio_channel_tagging_settings import AudioDescriptionAudioChannelTaggingSettings
from openapi_client.models.audio_description_audio_normalization_settings import AudioDescriptionAudioNormalizationSettings
from openapi_client.models.audio_description_codec_settings import AudioDescriptionCodecSettings
from openapi_client.models.audio_description_remix_settings import AudioDescriptionRemixSettings
from typing import Optional, Set
from typing_extensions import Self

class AudioDescription(BaseModel):
    """
    Settings related to one audio tab on the MediaConvert console. In your job JSON, an instance of AudioDescription is equivalent to one audio tab in the console. Usually, one audio tab corresponds to one output audio track. Depending on how you set up your input audio selectors and whether you use audio selector groups, one audio tab can correspond to a group of output audio tracks.
    """ # noqa: E501
    audio_channel_tagging_settings: Optional[AudioDescriptionAudioChannelTaggingSettings] = Field(default=None, alias="AudioChannelTaggingSettings")
    audio_normalization_settings: Optional[AudioDescriptionAudioNormalizationSettings] = Field(default=None, alias="AudioNormalizationSettings")
    audio_source_name: Optional[Any] = Field(default=None, alias="AudioSourceName")
    audio_type: Optional[Any] = Field(default=None, alias="AudioType")
    audio_type_control: Optional[Any] = Field(default=None, alias="AudioTypeControl")
    codec_settings: Optional[AudioDescriptionCodecSettings] = Field(default=None, alias="CodecSettings")
    custom_language_code: Optional[Any] = Field(default=None, alias="CustomLanguageCode")
    language_code: Optional[Any] = Field(default=None, alias="LanguageCode")
    language_code_control: Optional[Any] = Field(default=None, alias="LanguageCodeControl")
    remix_settings: Optional[AudioDescriptionRemixSettings] = Field(default=None, alias="RemixSettings")
    stream_name: Optional[Any] = Field(default=None, alias="StreamName")
    __properties: ClassVar[List[str]] = ["AudioChannelTaggingSettings", "AudioNormalizationSettings", "AudioSourceName", "AudioType", "AudioTypeControl", "CodecSettings", "CustomLanguageCode", "LanguageCode", "LanguageCodeControl", "RemixSettings", "StreamName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AudioDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio_channel_tagging_settings
        if self.audio_channel_tagging_settings:
            _dict['AudioChannelTaggingSettings'] = self.audio_channel_tagging_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audio_normalization_settings
        if self.audio_normalization_settings:
            _dict['AudioNormalizationSettings'] = self.audio_normalization_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audio_type_control
        if self.audio_type_control:
            _dict['AudioTypeControl'] = self.audio_type_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of codec_settings
        if self.codec_settings:
            _dict['CodecSettings'] = self.codec_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_code
        if self.language_code:
            _dict['LanguageCode'] = self.language_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_code_control
        if self.language_code_control:
            _dict['LanguageCodeControl'] = self.language_code_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remix_settings
        if self.remix_settings:
            _dict['RemixSettings'] = self.remix_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AudioDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AudioChannelTaggingSettings": AudioDescriptionAudioChannelTaggingSettings.from_dict(obj["AudioChannelTaggingSettings"]) if obj.get("AudioChannelTaggingSettings") is not None else None,
            "AudioNormalizationSettings": AudioDescriptionAudioNormalizationSettings.from_dict(obj["AudioNormalizationSettings"]) if obj.get("AudioNormalizationSettings") is not None else None,
            "AudioSourceName": obj.get("AudioSourceName"),
            "AudioType": obj.get("AudioType"),
            "AudioTypeControl": AudioTypeControl.from_dict(obj["AudioTypeControl"]) if obj.get("AudioTypeControl") is not None else None,
            "CodecSettings": AudioDescriptionCodecSettings.from_dict(obj["CodecSettings"]) if obj.get("CodecSettings") is not None else None,
            "CustomLanguageCode": obj.get("CustomLanguageCode"),
            "LanguageCode": LanguageCode.from_dict(obj["LanguageCode"]) if obj.get("LanguageCode") is not None else None,
            "LanguageCodeControl": AudioLanguageCodeControl.from_dict(obj["LanguageCodeControl"]) if obj.get("LanguageCodeControl") is not None else None,
            "RemixSettings": AudioDescriptionRemixSettings.from_dict(obj["RemixSettings"]) if obj.get("RemixSettings") is not None else None,
            "StreamName": obj.get("StreamName")
        })
        return _obj


