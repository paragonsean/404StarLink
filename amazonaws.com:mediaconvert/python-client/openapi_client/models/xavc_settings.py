# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.xavc_settings_xavc4k_intra_cbg_profile_settings import XavcSettingsXavc4kIntraCbgProfileSettings
from openapi_client.models.xavc_settings_xavc4k_intra_vbr_profile_settings import XavcSettingsXavc4kIntraVbrProfileSettings
from openapi_client.models.xavc_settings_xavc4k_profile_settings import XavcSettingsXavc4kProfileSettings
from openapi_client.models.xavc_settings_xavc_hd_intra_cbg_profile_settings import XavcSettingsXavcHdIntraCbgProfileSettings
from openapi_client.models.xavc_settings_xavc_hd_profile_settings import XavcSettingsXavcHdProfileSettings
from typing import Optional, Set
from typing_extensions import Self

class XavcSettings(BaseModel):
    """
    Required when you set (Codec) under (VideoDescription)>(CodecSettings) to the value XAVC.
    """ # noqa: E501
    adaptive_quantization: Optional[Any] = Field(default=None, alias="AdaptiveQuantization")
    entropy_encoding: Optional[Any] = Field(default=None, alias="EntropyEncoding")
    framerate_control: Optional[Any] = Field(default=None, alias="FramerateControl")
    framerate_conversion_algorithm: Optional[Any] = Field(default=None, alias="FramerateConversionAlgorithm")
    framerate_denominator: Optional[Any] = Field(default=None, alias="FramerateDenominator")
    framerate_numerator: Optional[Any] = Field(default=None, alias="FramerateNumerator")
    profile: Optional[Any] = Field(default=None, alias="Profile")
    slow_pal: Optional[Any] = Field(default=None, alias="SlowPal")
    softness: Optional[Any] = Field(default=None, alias="Softness")
    spatial_adaptive_quantization: Optional[Any] = Field(default=None, alias="SpatialAdaptiveQuantization")
    temporal_adaptive_quantization: Optional[Any] = Field(default=None, alias="TemporalAdaptiveQuantization")
    xavc4k_intra_cbg_profile_settings: Optional[XavcSettingsXavc4kIntraCbgProfileSettings] = Field(default=None, alias="Xavc4kIntraCbgProfileSettings")
    xavc4k_intra_vbr_profile_settings: Optional[XavcSettingsXavc4kIntraVbrProfileSettings] = Field(default=None, alias="Xavc4kIntraVbrProfileSettings")
    xavc4k_profile_settings: Optional[XavcSettingsXavc4kProfileSettings] = Field(default=None, alias="Xavc4kProfileSettings")
    xavc_hd_intra_cbg_profile_settings: Optional[XavcSettingsXavcHdIntraCbgProfileSettings] = Field(default=None, alias="XavcHdIntraCbgProfileSettings")
    xavc_hd_profile_settings: Optional[XavcSettingsXavcHdProfileSettings] = Field(default=None, alias="XavcHdProfileSettings")
    __properties: ClassVar[List[str]] = ["AdaptiveQuantization", "EntropyEncoding", "FramerateControl", "FramerateConversionAlgorithm", "FramerateDenominator", "FramerateNumerator", "Profile", "SlowPal", "Softness", "SpatialAdaptiveQuantization", "TemporalAdaptiveQuantization", "Xavc4kIntraCbgProfileSettings", "Xavc4kIntraVbrProfileSettings", "Xavc4kProfileSettings", "XavcHdIntraCbgProfileSettings", "XavcHdProfileSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XavcSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adaptive_quantization
        if self.adaptive_quantization:
            _dict['AdaptiveQuantization'] = self.adaptive_quantization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entropy_encoding
        if self.entropy_encoding:
            _dict['EntropyEncoding'] = self.entropy_encoding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of framerate_control
        if self.framerate_control:
            _dict['FramerateControl'] = self.framerate_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of framerate_conversion_algorithm
        if self.framerate_conversion_algorithm:
            _dict['FramerateConversionAlgorithm'] = self.framerate_conversion_algorithm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['Profile'] = self.profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slow_pal
        if self.slow_pal:
            _dict['SlowPal'] = self.slow_pal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spatial_adaptive_quantization
        if self.spatial_adaptive_quantization:
            _dict['SpatialAdaptiveQuantization'] = self.spatial_adaptive_quantization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temporal_adaptive_quantization
        if self.temporal_adaptive_quantization:
            _dict['TemporalAdaptiveQuantization'] = self.temporal_adaptive_quantization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xavc4k_intra_cbg_profile_settings
        if self.xavc4k_intra_cbg_profile_settings:
            _dict['Xavc4kIntraCbgProfileSettings'] = self.xavc4k_intra_cbg_profile_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xavc4k_intra_vbr_profile_settings
        if self.xavc4k_intra_vbr_profile_settings:
            _dict['Xavc4kIntraVbrProfileSettings'] = self.xavc4k_intra_vbr_profile_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xavc4k_profile_settings
        if self.xavc4k_profile_settings:
            _dict['Xavc4kProfileSettings'] = self.xavc4k_profile_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xavc_hd_intra_cbg_profile_settings
        if self.xavc_hd_intra_cbg_profile_settings:
            _dict['XavcHdIntraCbgProfileSettings'] = self.xavc_hd_intra_cbg_profile_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xavc_hd_profile_settings
        if self.xavc_hd_profile_settings:
            _dict['XavcHdProfileSettings'] = self.xavc_hd_profile_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XavcSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AdaptiveQuantization": XavcAdaptiveQuantization.from_dict(obj["AdaptiveQuantization"]) if obj.get("AdaptiveQuantization") is not None else None,
            "EntropyEncoding": XavcEntropyEncoding.from_dict(obj["EntropyEncoding"]) if obj.get("EntropyEncoding") is not None else None,
            "FramerateControl": XavcFramerateControl.from_dict(obj["FramerateControl"]) if obj.get("FramerateControl") is not None else None,
            "FramerateConversionAlgorithm": XavcFramerateConversionAlgorithm.from_dict(obj["FramerateConversionAlgorithm"]) if obj.get("FramerateConversionAlgorithm") is not None else None,
            "FramerateDenominator": obj.get("FramerateDenominator"),
            "FramerateNumerator": obj.get("FramerateNumerator"),
            "Profile": XavcProfile.from_dict(obj["Profile"]) if obj.get("Profile") is not None else None,
            "SlowPal": XavcSlowPal.from_dict(obj["SlowPal"]) if obj.get("SlowPal") is not None else None,
            "Softness": obj.get("Softness"),
            "SpatialAdaptiveQuantization": XavcSpatialAdaptiveQuantization.from_dict(obj["SpatialAdaptiveQuantization"]) if obj.get("SpatialAdaptiveQuantization") is not None else None,
            "TemporalAdaptiveQuantization": XavcTemporalAdaptiveQuantization.from_dict(obj["TemporalAdaptiveQuantization"]) if obj.get("TemporalAdaptiveQuantization") is not None else None,
            "Xavc4kIntraCbgProfileSettings": XavcSettingsXavc4kIntraCbgProfileSettings.from_dict(obj["Xavc4kIntraCbgProfileSettings"]) if obj.get("Xavc4kIntraCbgProfileSettings") is not None else None,
            "Xavc4kIntraVbrProfileSettings": XavcSettingsXavc4kIntraVbrProfileSettings.from_dict(obj["Xavc4kIntraVbrProfileSettings"]) if obj.get("Xavc4kIntraVbrProfileSettings") is not None else None,
            "Xavc4kProfileSettings": XavcSettingsXavc4kProfileSettings.from_dict(obj["Xavc4kProfileSettings"]) if obj.get("Xavc4kProfileSettings") is not None else None,
            "XavcHdIntraCbgProfileSettings": XavcSettingsXavcHdIntraCbgProfileSettings.from_dict(obj["XavcHdIntraCbgProfileSettings"]) if obj.get("XavcHdIntraCbgProfileSettings") is not None else None,
            "XavcHdProfileSettings": XavcSettingsXavcHdProfileSettings.from_dict(obj["XavcHdProfileSettings"]) if obj.get("XavcHdProfileSettings") is not None else None
        })
        return _obj


