# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.burn_in_subtitle_style_passthrough import BurnInSubtitleStylePassthrough
from openapi_client.models.burnin_subtitle_alignment import BurninSubtitleAlignment
from openapi_client.models.burnin_subtitle_apply_font_color import BurninSubtitleApplyFontColor
from openapi_client.models.burnin_subtitle_background_color import BurninSubtitleBackgroundColor
from openapi_client.models.burnin_subtitle_fallback_font import BurninSubtitleFallbackFont
from openapi_client.models.burnin_subtitle_font_color import BurninSubtitleFontColor
from openapi_client.models.burnin_subtitle_outline_color import BurninSubtitleOutlineColor
from openapi_client.models.burnin_subtitle_shadow_color import BurninSubtitleShadowColor
from openapi_client.models.burnin_subtitle_teletext_spacing import BurninSubtitleTeletextSpacing
from openapi_client.models.font_script import FontScript
from openapi_client.models.int import int
from openapi_client.models.str import str
from typing import Optional, Set
from typing_extensions import Self

class CaptionDestinationSettingsBurninDestinationSettings(BaseModel):
    """
    CaptionDestinationSettingsBurninDestinationSettings
    """ # noqa: E501
    alignment: Optional[Any] = Field(default=None, alias="Alignment")
    apply_font_color: Optional[Any] = Field(default=None, alias="ApplyFontColor")
    background_color: Optional[Any] = Field(default=None, alias="BackgroundColor")
    background_opacity: Optional[Any] = Field(default=None, alias="BackgroundOpacity")
    fallback_font: Optional[Any] = Field(default=None, alias="FallbackFont")
    font_color: Optional[Any] = Field(default=None, alias="FontColor")
    font_opacity: Optional[Any] = Field(default=None, alias="FontOpacity")
    font_resolution: Optional[Any] = Field(default=None, alias="FontResolution")
    font_script: Optional[Any] = Field(default=None, alias="FontScript")
    font_size: Optional[Any] = Field(default=None, alias="FontSize")
    hex_font_color: Optional[Any] = Field(default=None, alias="HexFontColor")
    outline_color: Optional[Any] = Field(default=None, alias="OutlineColor")
    outline_size: Optional[Any] = Field(default=None, alias="OutlineSize")
    shadow_color: Optional[Any] = Field(default=None, alias="ShadowColor")
    shadow_opacity: Optional[Any] = Field(default=None, alias="ShadowOpacity")
    shadow_x_offset: Optional[Any] = Field(default=None, alias="ShadowXOffset")
    shadow_y_offset: Optional[Any] = Field(default=None, alias="ShadowYOffset")
    style_passthrough: Optional[Any] = Field(default=None, alias="StylePassthrough")
    teletext_spacing: Optional[Any] = Field(default=None, alias="TeletextSpacing")
    x_position: Optional[Any] = Field(default=None, alias="XPosition")
    y_position: Optional[Any] = Field(default=None, alias="YPosition")
    __properties: ClassVar[List[str]] = ["Alignment", "ApplyFontColor", "BackgroundColor", "BackgroundOpacity", "FallbackFont", "FontColor", "FontOpacity", "FontResolution", "FontScript", "FontSize", "HexFontColor", "OutlineColor", "OutlineSize", "ShadowColor", "ShadowOpacity", "ShadowXOffset", "ShadowYOffset", "StylePassthrough", "TeletextSpacing", "XPosition", "YPosition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CaptionDestinationSettingsBurninDestinationSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alignment
        if self.alignment:
            _dict['Alignment'] = self.alignment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of apply_font_color
        if self.apply_font_color:
            _dict['ApplyFontColor'] = self.apply_font_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of background_color
        if self.background_color:
            _dict['BackgroundColor'] = self.background_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fallback_font
        if self.fallback_font:
            _dict['FallbackFont'] = self.fallback_font.to_dict()
        # override the default output from pydantic by calling `to_dict()` of font_color
        if self.font_color:
            _dict['FontColor'] = self.font_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of font_script
        if self.font_script:
            _dict['FontScript'] = self.font_script.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outline_color
        if self.outline_color:
            _dict['OutlineColor'] = self.outline_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shadow_color
        if self.shadow_color:
            _dict['ShadowColor'] = self.shadow_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of style_passthrough
        if self.style_passthrough:
            _dict['StylePassthrough'] = self.style_passthrough.to_dict()
        # override the default output from pydantic by calling `to_dict()` of teletext_spacing
        if self.teletext_spacing:
            _dict['TeletextSpacing'] = self.teletext_spacing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CaptionDestinationSettingsBurninDestinationSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Alignment": BurninSubtitleAlignment.from_dict(obj["Alignment"]) if obj.get("Alignment") is not None else None,
            "ApplyFontColor": BurninSubtitleApplyFontColor.from_dict(obj["ApplyFontColor"]) if obj.get("ApplyFontColor") is not None else None,
            "BackgroundColor": BurninSubtitleBackgroundColor.from_dict(obj["BackgroundColor"]) if obj.get("BackgroundColor") is not None else None,
            "BackgroundOpacity": obj.get("BackgroundOpacity"),
            "FallbackFont": BurninSubtitleFallbackFont.from_dict(obj["FallbackFont"]) if obj.get("FallbackFont") is not None else None,
            "FontColor": BurninSubtitleFontColor.from_dict(obj["FontColor"]) if obj.get("FontColor") is not None else None,
            "FontOpacity": obj.get("FontOpacity"),
            "FontResolution": obj.get("FontResolution"),
            "FontScript": FontScript.from_dict(obj["FontScript"]) if obj.get("FontScript") is not None else None,
            "FontSize": obj.get("FontSize"),
            "HexFontColor": obj.get("HexFontColor"),
            "OutlineColor": BurninSubtitleOutlineColor.from_dict(obj["OutlineColor"]) if obj.get("OutlineColor") is not None else None,
            "OutlineSize": obj.get("OutlineSize"),
            "ShadowColor": BurninSubtitleShadowColor.from_dict(obj["ShadowColor"]) if obj.get("ShadowColor") is not None else None,
            "ShadowOpacity": obj.get("ShadowOpacity"),
            "ShadowXOffset": obj.get("ShadowXOffset"),
            "ShadowYOffset": obj.get("ShadowYOffset"),
            "StylePassthrough": BurnInSubtitleStylePassthrough.from_dict(obj["StylePassthrough"]) if obj.get("StylePassthrough") is not None else None,
            "TeletextSpacing": BurninSubtitleTeletextSpacing.from_dict(obj["TeletextSpacing"]) if obj.get("TeletextSpacing") is not None else None,
            "XPosition": obj.get("XPosition"),
            "YPosition": obj.get("YPosition")
        })
        return _obj


