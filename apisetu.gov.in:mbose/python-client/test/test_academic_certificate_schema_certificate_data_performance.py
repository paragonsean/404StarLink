# coding: utf-8

"""
    Meghalaya Board of School Education, Tura, Meghalaya

    Meghalaya Board of School Education (MBOSE) with Marksheets of Class Xth and Class XIIth (Arts , Science, Commerce and Vocational), is availablke on DigiLocker for the students of 2015-2019.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.academic_certificate_schema_certificate_data_performance import AcademicCertificateSchemaCertificateDataPerformance

class TestAcademicCertificateSchemaCertificateDataPerformance(unittest.TestCase):
    """AcademicCertificateSchemaCertificateDataPerformance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AcademicCertificateSchemaCertificateDataPerformance:
        """Test AcademicCertificateSchemaCertificateDataPerformance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AcademicCertificateSchemaCertificateDataPerformance`
        """
        model = AcademicCertificateSchemaCertificateDataPerformance()
        if include_optional:
            return AcademicCertificateSchemaCertificateDataPerformance(
                subjects = [
                    openapi_client.models.academic_certificate_schema_certificate_data_performance_subjects_inner.AcademicCertificateSchema_CertificateData_Performance_Subjects_inner(
                        code = '30', 
                        gp = '', 
                        gp_max = '', 
                        grade = 'A2', 
                        marks_max = 56, 
                        marks_max_practical = 56, 
                        marks_max_theory = 56, 
                        marks_practical = 17, 
                        marks_theory = 70, 
                        marks_total = 87, 
                        name = 'ECONOMICS', )
                    ],
                cgpa = '',
                cgpa_max = '',
                grade = '',
                marks_max = '',
                marks_total = '',
                percentage = '',
                result = 'PASS',
                result_date = '02-05-2019',
                update_date = ''
            )
        else:
            return AcademicCertificateSchemaCertificateDataPerformance(
                subjects = [
                    openapi_client.models.academic_certificate_schema_certificate_data_performance_subjects_inner.AcademicCertificateSchema_CertificateData_Performance_Subjects_inner(
                        code = '30', 
                        gp = '', 
                        gp_max = '', 
                        grade = 'A2', 
                        marks_max = 56, 
                        marks_max_practical = 56, 
                        marks_max_theory = 56, 
                        marks_practical = 17, 
                        marks_theory = 70, 
                        marks_total = 87, 
                        name = 'ECONOMICS', )
                    ],
                cgpa = '',
                cgpa_max = '',
                grade = '',
                marks_max = '',
                marks_total = '',
                percentage = '',
                result = 'PASS',
                result_date = '02-05-2019',
                update_date = '',
        )
        """

    def testAcademicCertificateSchemaCertificateDataPerformance(self):
        """Test AcademicCertificateSchemaCertificateDataPerformance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
