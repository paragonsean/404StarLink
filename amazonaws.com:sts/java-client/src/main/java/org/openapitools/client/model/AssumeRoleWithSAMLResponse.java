/*
 * AWS Security Token Service
 * <fullname>Security Token Service</fullname> <p>Security Token Service (STS) enables you to request temporary, limited-privilege credentials for Identity and Access Management (IAM) users or for users that you authenticate (federated users). This guide provides descriptions of the STS API. For more information about using this service, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html\">Temporary Security Credentials</a>.</p>
 *
 * The version of the OpenAPI document: 2011-06-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AssumeRoleResponseCredentials;
import org.openapitools.client.model.AssumeRoleWithSAMLResponseAssumedRoleUser;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the response to a successful &lt;a&gt;AssumeRoleWithSAML&lt;/a&gt; request, including temporary Amazon Web Services credentials that can be used to make Amazon Web Services requests. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:55:53.890345-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssumeRoleWithSAMLResponse {
  public static final String SERIALIZED_NAME_CREDENTIALS = "Credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private AssumeRoleResponseCredentials credentials;

  public static final String SERIALIZED_NAME_ASSUMED_ROLE_USER = "AssumedRoleUser";
  @SerializedName(SERIALIZED_NAME_ASSUMED_ROLE_USER)
  private AssumeRoleWithSAMLResponseAssumedRoleUser assumedRoleUser;

  public static final String SERIALIZED_NAME_PACKED_POLICY_SIZE = "PackedPolicySize";
  @SerializedName(SERIALIZED_NAME_PACKED_POLICY_SIZE)
  private Integer packedPolicySize;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_SUBJECT_TYPE = "SubjectType";
  @SerializedName(SERIALIZED_NAME_SUBJECT_TYPE)
  private String subjectType;

  public static final String SERIALIZED_NAME_ISSUER = "Issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_AUDIENCE = "Audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  private String audience;

  public static final String SERIALIZED_NAME_NAME_QUALIFIER = "NameQualifier";
  @SerializedName(SERIALIZED_NAME_NAME_QUALIFIER)
  private String nameQualifier;

  public static final String SERIALIZED_NAME_SOURCE_IDENTITY = "SourceIdentity";
  @SerializedName(SERIALIZED_NAME_SOURCE_IDENTITY)
  private String sourceIdentity;

  public AssumeRoleWithSAMLResponse() {
  }

  public AssumeRoleWithSAMLResponse credentials(AssumeRoleResponseCredentials credentials) {
    this.credentials = credentials;
    return this;
  }

  /**
   * Get credentials
   * @return credentials
   */
  @javax.annotation.Nullable
  public AssumeRoleResponseCredentials getCredentials() {
    return credentials;
  }

  public void setCredentials(AssumeRoleResponseCredentials credentials) {
    this.credentials = credentials;
  }


  public AssumeRoleWithSAMLResponse assumedRoleUser(AssumeRoleWithSAMLResponseAssumedRoleUser assumedRoleUser) {
    this.assumedRoleUser = assumedRoleUser;
    return this;
  }

  /**
   * Get assumedRoleUser
   * @return assumedRoleUser
   */
  @javax.annotation.Nullable
  public AssumeRoleWithSAMLResponseAssumedRoleUser getAssumedRoleUser() {
    return assumedRoleUser;
  }

  public void setAssumedRoleUser(AssumeRoleWithSAMLResponseAssumedRoleUser assumedRoleUser) {
    this.assumedRoleUser = assumedRoleUser;
  }


  public AssumeRoleWithSAMLResponse packedPolicySize(Integer packedPolicySize) {
    this.packedPolicySize = packedPolicySize;
    return this;
  }

  /**
   * Get packedPolicySize
   * @return packedPolicySize
   */
  @javax.annotation.Nullable
  public Integer getPackedPolicySize() {
    return packedPolicySize;
  }

  public void setPackedPolicySize(Integer packedPolicySize) {
    this.packedPolicySize = packedPolicySize;
  }


  public AssumeRoleWithSAMLResponse subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public AssumeRoleWithSAMLResponse subjectType(String subjectType) {
    this.subjectType = subjectType;
    return this;
  }

  /**
   * Get subjectType
   * @return subjectType
   */
  @javax.annotation.Nullable
  public String getSubjectType() {
    return subjectType;
  }

  public void setSubjectType(String subjectType) {
    this.subjectType = subjectType;
  }


  public AssumeRoleWithSAMLResponse issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Get issuer
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public AssumeRoleWithSAMLResponse audience(String audience) {
    this.audience = audience;
    return this;
  }

  /**
   * Get audience
   * @return audience
   */
  @javax.annotation.Nullable
  public String getAudience() {
    return audience;
  }

  public void setAudience(String audience) {
    this.audience = audience;
  }


  public AssumeRoleWithSAMLResponse nameQualifier(String nameQualifier) {
    this.nameQualifier = nameQualifier;
    return this;
  }

  /**
   * Get nameQualifier
   * @return nameQualifier
   */
  @javax.annotation.Nullable
  public String getNameQualifier() {
    return nameQualifier;
  }

  public void setNameQualifier(String nameQualifier) {
    this.nameQualifier = nameQualifier;
  }


  public AssumeRoleWithSAMLResponse sourceIdentity(String sourceIdentity) {
    this.sourceIdentity = sourceIdentity;
    return this;
  }

  /**
   * Get sourceIdentity
   * @return sourceIdentity
   */
  @javax.annotation.Nullable
  public String getSourceIdentity() {
    return sourceIdentity;
  }

  public void setSourceIdentity(String sourceIdentity) {
    this.sourceIdentity = sourceIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssumeRoleWithSAMLResponse assumeRoleWithSAMLResponse = (AssumeRoleWithSAMLResponse) o;
    return Objects.equals(this.credentials, assumeRoleWithSAMLResponse.credentials) &&
        Objects.equals(this.assumedRoleUser, assumeRoleWithSAMLResponse.assumedRoleUser) &&
        Objects.equals(this.packedPolicySize, assumeRoleWithSAMLResponse.packedPolicySize) &&
        Objects.equals(this.subject, assumeRoleWithSAMLResponse.subject) &&
        Objects.equals(this.subjectType, assumeRoleWithSAMLResponse.subjectType) &&
        Objects.equals(this.issuer, assumeRoleWithSAMLResponse.issuer) &&
        Objects.equals(this.audience, assumeRoleWithSAMLResponse.audience) &&
        Objects.equals(this.nameQualifier, assumeRoleWithSAMLResponse.nameQualifier) &&
        Objects.equals(this.sourceIdentity, assumeRoleWithSAMLResponse.sourceIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credentials, assumedRoleUser, packedPolicySize, subject, subjectType, issuer, audience, nameQualifier, sourceIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssumeRoleWithSAMLResponse {\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    assumedRoleUser: ").append(toIndentedString(assumedRoleUser)).append("\n");
    sb.append("    packedPolicySize: ").append(toIndentedString(packedPolicySize)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    subjectType: ").append(toIndentedString(subjectType)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    nameQualifier: ").append(toIndentedString(nameQualifier)).append("\n");
    sb.append("    sourceIdentity: ").append(toIndentedString(sourceIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Credentials");
    openapiFields.add("AssumedRoleUser");
    openapiFields.add("PackedPolicySize");
    openapiFields.add("Subject");
    openapiFields.add("SubjectType");
    openapiFields.add("Issuer");
    openapiFields.add("Audience");
    openapiFields.add("NameQualifier");
    openapiFields.add("SourceIdentity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssumeRoleWithSAMLResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssumeRoleWithSAMLResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssumeRoleWithSAMLResponse is not found in the empty JSON string", AssumeRoleWithSAMLResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssumeRoleWithSAMLResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssumeRoleWithSAMLResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Credentials`
      if (jsonObj.get("Credentials") != null && !jsonObj.get("Credentials").isJsonNull()) {
        AssumeRoleResponseCredentials.validateJsonElement(jsonObj.get("Credentials"));
      }
      // validate the optional field `AssumedRoleUser`
      if (jsonObj.get("AssumedRoleUser") != null && !jsonObj.get("AssumedRoleUser").isJsonNull()) {
        AssumeRoleWithSAMLResponseAssumedRoleUser.validateJsonElement(jsonObj.get("AssumedRoleUser"));
      }
      // validate the optional field `PackedPolicySize`
      if (jsonObj.get("PackedPolicySize") != null && !jsonObj.get("PackedPolicySize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PackedPolicySize"));
      }
      // validate the optional field `Subject`
      if (jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Subject"));
      }
      // validate the optional field `SubjectType`
      if (jsonObj.get("SubjectType") != null && !jsonObj.get("SubjectType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubjectType"));
      }
      // validate the optional field `Issuer`
      if (jsonObj.get("Issuer") != null && !jsonObj.get("Issuer").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Issuer"));
      }
      // validate the optional field `Audience`
      if (jsonObj.get("Audience") != null && !jsonObj.get("Audience").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Audience"));
      }
      // validate the optional field `NameQualifier`
      if (jsonObj.get("NameQualifier") != null && !jsonObj.get("NameQualifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NameQualifier"));
      }
      // validate the optional field `SourceIdentity`
      if (jsonObj.get("SourceIdentity") != null && !jsonObj.get("SourceIdentity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceIdentity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssumeRoleWithSAMLResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssumeRoleWithSAMLResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssumeRoleWithSAMLResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssumeRoleWithSAMLResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AssumeRoleWithSAMLResponse>() {
           @Override
           public void write(JsonWriter out, AssumeRoleWithSAMLResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssumeRoleWithSAMLResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssumeRoleWithSAMLResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssumeRoleWithSAMLResponse
   * @throws IOException if the JSON string is invalid with respect to AssumeRoleWithSAMLResponse
   */
  public static AssumeRoleWithSAMLResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssumeRoleWithSAMLResponse.class);
  }

  /**
   * Convert an instance of AssumeRoleWithSAMLResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

