# coding: utf-8

"""
    NHL v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Play(BaseModel):
    """
    Play
    """ # noqa: E501
    away_team_score: Optional[StrictInt] = Field(default=None, alias="AwayTeamScore")
    category: Optional[StrictStr] = Field(default=None, alias="Category")
    clock_minutes: Optional[StrictInt] = Field(default=None, alias="ClockMinutes")
    clock_seconds: Optional[StrictInt] = Field(default=None, alias="ClockSeconds")
    created: Optional[StrictStr] = Field(default=None, alias="Created")
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    first_assisted_by_player_id: Optional[StrictInt] = Field(default=None, alias="FirstAssistedByPlayerID")
    home_team_score: Optional[StrictInt] = Field(default=None, alias="HomeTeamScore")
    opponent: Optional[StrictStr] = Field(default=None, alias="Opponent")
    opponent_id: Optional[StrictInt] = Field(default=None, alias="OpponentID")
    opposing_player_id: Optional[StrictInt] = Field(default=None, alias="OpposingPlayerID")
    period_id: Optional[StrictInt] = Field(default=None, alias="PeriodID")
    period_name: Optional[StrictStr] = Field(default=None, alias="PeriodName")
    play_id: Optional[StrictInt] = Field(default=None, alias="PlayID")
    player_id: Optional[StrictInt] = Field(default=None, alias="PlayerID")
    power_play_team: Optional[StrictStr] = Field(default=None, alias="PowerPlayTeam")
    power_play_team_id: Optional[StrictInt] = Field(default=None, alias="PowerPlayTeamID")
    second_assisted_by_player_id: Optional[StrictInt] = Field(default=None, alias="SecondAssistedByPlayerID")
    sequence: Optional[StrictInt] = Field(default=None, alias="Sequence")
    team: Optional[StrictStr] = Field(default=None, alias="Team")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamID")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    updated: Optional[StrictStr] = Field(default=None, alias="Updated")
    __properties: ClassVar[List[str]] = ["AwayTeamScore", "Category", "ClockMinutes", "ClockSeconds", "Created", "Description", "FirstAssistedByPlayerID", "HomeTeamScore", "Opponent", "OpponentID", "OpposingPlayerID", "PeriodID", "PeriodName", "PlayID", "PlayerID", "PowerPlayTeam", "PowerPlayTeamID", "SecondAssistedByPlayerID", "Sequence", "Team", "TeamID", "Type", "Updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Play from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if away_team_score (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_score is None and "away_team_score" in self.model_fields_set:
            _dict['AwayTeamScore'] = None

        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict['Category'] = None

        # set to None if clock_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.clock_minutes is None and "clock_minutes" in self.model_fields_set:
            _dict['ClockMinutes'] = None

        # set to None if clock_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.clock_seconds is None and "clock_seconds" in self.model_fields_set:
            _dict['ClockSeconds'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['Created'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['Description'] = None

        # set to None if first_assisted_by_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.first_assisted_by_player_id is None and "first_assisted_by_player_id" in self.model_fields_set:
            _dict['FirstAssistedByPlayerID'] = None

        # set to None if home_team_score (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_score is None and "home_team_score" in self.model_fields_set:
            _dict['HomeTeamScore'] = None

        # set to None if opponent (nullable) is None
        # and model_fields_set contains the field
        if self.opponent is None and "opponent" in self.model_fields_set:
            _dict['Opponent'] = None

        # set to None if opponent_id (nullable) is None
        # and model_fields_set contains the field
        if self.opponent_id is None and "opponent_id" in self.model_fields_set:
            _dict['OpponentID'] = None

        # set to None if opposing_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.opposing_player_id is None and "opposing_player_id" in self.model_fields_set:
            _dict['OpposingPlayerID'] = None

        # set to None if period_name (nullable) is None
        # and model_fields_set contains the field
        if self.period_name is None and "period_name" in self.model_fields_set:
            _dict['PeriodName'] = None

        # set to None if player_id (nullable) is None
        # and model_fields_set contains the field
        if self.player_id is None and "player_id" in self.model_fields_set:
            _dict['PlayerID'] = None

        # set to None if power_play_team (nullable) is None
        # and model_fields_set contains the field
        if self.power_play_team is None and "power_play_team" in self.model_fields_set:
            _dict['PowerPlayTeam'] = None

        # set to None if power_play_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.power_play_team_id is None and "power_play_team_id" in self.model_fields_set:
            _dict['PowerPlayTeamID'] = None

        # set to None if second_assisted_by_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.second_assisted_by_player_id is None and "second_assisted_by_player_id" in self.model_fields_set:
            _dict['SecondAssistedByPlayerID'] = None

        # set to None if team (nullable) is None
        # and model_fields_set contains the field
        if self.team is None and "team" in self.model_fields_set:
            _dict['Team'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['TeamID'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['Type'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['Updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Play from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AwayTeamScore": obj.get("AwayTeamScore"),
            "Category": obj.get("Category"),
            "ClockMinutes": obj.get("ClockMinutes"),
            "ClockSeconds": obj.get("ClockSeconds"),
            "Created": obj.get("Created"),
            "Description": obj.get("Description"),
            "FirstAssistedByPlayerID": obj.get("FirstAssistedByPlayerID"),
            "HomeTeamScore": obj.get("HomeTeamScore"),
            "Opponent": obj.get("Opponent"),
            "OpponentID": obj.get("OpponentID"),
            "OpposingPlayerID": obj.get("OpposingPlayerID"),
            "PeriodID": obj.get("PeriodID"),
            "PeriodName": obj.get("PeriodName"),
            "PlayID": obj.get("PlayID"),
            "PlayerID": obj.get("PlayerID"),
            "PowerPlayTeam": obj.get("PowerPlayTeam"),
            "PowerPlayTeamID": obj.get("PowerPlayTeamID"),
            "SecondAssistedByPlayerID": obj.get("SecondAssistedByPlayerID"),
            "Sequence": obj.get("Sequence"),
            "Team": obj.get("Team"),
            "TeamID": obj.get("TeamID"),
            "Type": obj.get("Type"),
            "Updated": obj.get("Updated")
        })
        return _obj


