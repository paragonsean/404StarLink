# coding: utf-8

"""
    NHL v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Team(BaseModel):
    """
    Team
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, alias="Active")
    city: Optional[StrictStr] = Field(default=None, alias="City")
    conference: Optional[StrictStr] = Field(default=None, alias="Conference")
    division: Optional[StrictStr] = Field(default=None, alias="Division")
    global_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalTeamID")
    key: Optional[StrictStr] = Field(default=None, alias="Key")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    primary_color: Optional[StrictStr] = Field(default=None, alias="PrimaryColor")
    quaternary_color: Optional[StrictStr] = Field(default=None, alias="QuaternaryColor")
    secondary_color: Optional[StrictStr] = Field(default=None, alias="SecondaryColor")
    stadium_id: Optional[StrictInt] = Field(default=None, alias="StadiumID")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamID")
    tertiary_color: Optional[StrictStr] = Field(default=None, alias="TertiaryColor")
    wikipedia_logo_url: Optional[StrictStr] = Field(default=None, alias="WikipediaLogoUrl")
    wikipedia_word_mark_url: Optional[StrictStr] = Field(default=None, alias="WikipediaWordMarkUrl")
    __properties: ClassVar[List[str]] = ["Active", "City", "Conference", "Division", "GlobalTeamID", "Key", "Name", "PrimaryColor", "QuaternaryColor", "SecondaryColor", "StadiumID", "TeamID", "TertiaryColor", "WikipediaLogoUrl", "WikipediaWordMarkUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Team from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['City'] = None

        # set to None if conference (nullable) is None
        # and model_fields_set contains the field
        if self.conference is None and "conference" in self.model_fields_set:
            _dict['Conference'] = None

        # set to None if division (nullable) is None
        # and model_fields_set contains the field
        if self.division is None and "division" in self.model_fields_set:
            _dict['Division'] = None

        # set to None if key (nullable) is None
        # and model_fields_set contains the field
        if self.key is None and "key" in self.model_fields_set:
            _dict['Key'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if primary_color (nullable) is None
        # and model_fields_set contains the field
        if self.primary_color is None and "primary_color" in self.model_fields_set:
            _dict['PrimaryColor'] = None

        # set to None if quaternary_color (nullable) is None
        # and model_fields_set contains the field
        if self.quaternary_color is None and "quaternary_color" in self.model_fields_set:
            _dict['QuaternaryColor'] = None

        # set to None if secondary_color (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_color is None and "secondary_color" in self.model_fields_set:
            _dict['SecondaryColor'] = None

        # set to None if stadium_id (nullable) is None
        # and model_fields_set contains the field
        if self.stadium_id is None and "stadium_id" in self.model_fields_set:
            _dict['StadiumID'] = None

        # set to None if tertiary_color (nullable) is None
        # and model_fields_set contains the field
        if self.tertiary_color is None and "tertiary_color" in self.model_fields_set:
            _dict['TertiaryColor'] = None

        # set to None if wikipedia_logo_url (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia_logo_url is None and "wikipedia_logo_url" in self.model_fields_set:
            _dict['WikipediaLogoUrl'] = None

        # set to None if wikipedia_word_mark_url (nullable) is None
        # and model_fields_set contains the field
        if self.wikipedia_word_mark_url is None and "wikipedia_word_mark_url" in self.model_fields_set:
            _dict['WikipediaWordMarkUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Team from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Active": obj.get("Active"),
            "City": obj.get("City"),
            "Conference": obj.get("Conference"),
            "Division": obj.get("Division"),
            "GlobalTeamID": obj.get("GlobalTeamID"),
            "Key": obj.get("Key"),
            "Name": obj.get("Name"),
            "PrimaryColor": obj.get("PrimaryColor"),
            "QuaternaryColor": obj.get("QuaternaryColor"),
            "SecondaryColor": obj.get("SecondaryColor"),
            "StadiumID": obj.get("StadiumID"),
            "TeamID": obj.get("TeamID"),
            "TertiaryColor": obj.get("TertiaryColor"),
            "WikipediaLogoUrl": obj.get("WikipediaLogoUrl"),
            "WikipediaWordMarkUrl": obj.get("WikipediaWordMarkUrl")
        })
        return _obj


