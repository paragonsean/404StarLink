# coding: utf-8

"""
    NHL v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.game import Game
from openapi_client.models.period import Period
from openapi_client.models.play import Play
from openapi_client.models.player_game import PlayerGame
from openapi_client.models.team_game import TeamGame
from typing import Optional, Set
from typing_extensions import Self

class BoxScore(BaseModel):
    """
    BoxScore
    """ # noqa: E501
    game: Optional[Game] = Field(default=None, alias="Game")
    periods: Optional[List[Period]] = Field(default=None, alias="Periods")
    player_games: Optional[List[PlayerGame]] = Field(default=None, alias="PlayerGames")
    shootout_plays: Optional[List[Play]] = Field(default=None, alias="ShootoutPlays")
    team_games: Optional[List[TeamGame]] = Field(default=None, alias="TeamGames")
    __properties: ClassVar[List[str]] = ["Game", "Periods", "PlayerGames", "ShootoutPlays", "TeamGames"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoxScore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of game
        if self.game:
            _dict['Game'] = self.game.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in periods (list)
        _items = []
        if self.periods:
            for _item_periods in self.periods:
                if _item_periods:
                    _items.append(_item_periods.to_dict())
            _dict['Periods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in player_games (list)
        _items = []
        if self.player_games:
            for _item_player_games in self.player_games:
                if _item_player_games:
                    _items.append(_item_player_games.to_dict())
            _dict['PlayerGames'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shootout_plays (list)
        _items = []
        if self.shootout_plays:
            for _item_shootout_plays in self.shootout_plays:
                if _item_shootout_plays:
                    _items.append(_item_shootout_plays.to_dict())
            _dict['ShootoutPlays'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in team_games (list)
        _items = []
        if self.team_games:
            for _item_team_games in self.team_games:
                if _item_team_games:
                    _items.append(_item_team_games.to_dict())
            _dict['TeamGames'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoxScore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Game": Game.from_dict(obj["Game"]) if obj.get("Game") is not None else None,
            "Periods": [Period.from_dict(_item) for _item in obj["Periods"]] if obj.get("Periods") is not None else None,
            "PlayerGames": [PlayerGame.from_dict(_item) for _item in obj["PlayerGames"]] if obj.get("PlayerGames") is not None else None,
            "ShootoutPlays": [Play.from_dict(_item) for _item in obj["ShootoutPlays"]] if obj.get("ShootoutPlays") is not None else None,
            "TeamGames": [TeamGame.from_dict(_item) for _item in obj["TeamGames"]] if obj.get("TeamGames") is not None else None
        })
        return _obj


