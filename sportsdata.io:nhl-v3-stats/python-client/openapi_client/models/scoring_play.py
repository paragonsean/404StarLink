# coding: utf-8

"""
    NHL v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ScoringPlay(BaseModel):
    """
    ScoringPlay
    """ # noqa: E501
    allowed_by_team_id: Optional[StrictInt] = Field(default=None, alias="AllowedByTeamID")
    assisted_by_player_id1: Optional[StrictInt] = Field(default=None, alias="AssistedByPlayerID1")
    assisted_by_player_id2: Optional[StrictInt] = Field(default=None, alias="AssistedByPlayerID2")
    away_team_score: Optional[StrictInt] = Field(default=None, alias="AwayTeamScore")
    empty_net: Optional[StrictBool] = Field(default=None, alias="EmptyNet")
    home_team_score: Optional[StrictInt] = Field(default=None, alias="HomeTeamScore")
    period_id: Optional[StrictInt] = Field(default=None, alias="PeriodID")
    power_play: Optional[StrictBool] = Field(default=None, alias="PowerPlay")
    scored_by_player_id: Optional[StrictInt] = Field(default=None, alias="ScoredByPlayerID")
    scored_by_team_id: Optional[StrictInt] = Field(default=None, alias="ScoredByTeamID")
    scoring_play_id: Optional[StrictInt] = Field(default=None, alias="ScoringPlayID")
    sequence: Optional[StrictInt] = Field(default=None, alias="Sequence")
    short_handed: Optional[StrictBool] = Field(default=None, alias="ShortHanded")
    time_remaining_minutes: Optional[StrictInt] = Field(default=None, alias="TimeRemainingMinutes")
    time_remaining_seconds: Optional[StrictInt] = Field(default=None, alias="TimeRemainingSeconds")
    __properties: ClassVar[List[str]] = ["AllowedByTeamID", "AssistedByPlayerID1", "AssistedByPlayerID2", "AwayTeamScore", "EmptyNet", "HomeTeamScore", "PeriodID", "PowerPlay", "ScoredByPlayerID", "ScoredByTeamID", "ScoringPlayID", "Sequence", "ShortHanded", "TimeRemainingMinutes", "TimeRemainingSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScoringPlay from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if allowed_by_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.allowed_by_team_id is None and "allowed_by_team_id" in self.model_fields_set:
            _dict['AllowedByTeamID'] = None

        # set to None if assisted_by_player_id1 (nullable) is None
        # and model_fields_set contains the field
        if self.assisted_by_player_id1 is None and "assisted_by_player_id1" in self.model_fields_set:
            _dict['AssistedByPlayerID1'] = None

        # set to None if assisted_by_player_id2 (nullable) is None
        # and model_fields_set contains the field
        if self.assisted_by_player_id2 is None and "assisted_by_player_id2" in self.model_fields_set:
            _dict['AssistedByPlayerID2'] = None

        # set to None if away_team_score (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_score is None and "away_team_score" in self.model_fields_set:
            _dict['AwayTeamScore'] = None

        # set to None if empty_net (nullable) is None
        # and model_fields_set contains the field
        if self.empty_net is None and "empty_net" in self.model_fields_set:
            _dict['EmptyNet'] = None

        # set to None if home_team_score (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_score is None and "home_team_score" in self.model_fields_set:
            _dict['HomeTeamScore'] = None

        # set to None if power_play (nullable) is None
        # and model_fields_set contains the field
        if self.power_play is None and "power_play" in self.model_fields_set:
            _dict['PowerPlay'] = None

        # set to None if scored_by_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.scored_by_player_id is None and "scored_by_player_id" in self.model_fields_set:
            _dict['ScoredByPlayerID'] = None

        # set to None if scored_by_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.scored_by_team_id is None and "scored_by_team_id" in self.model_fields_set:
            _dict['ScoredByTeamID'] = None

        # set to None if sequence (nullable) is None
        # and model_fields_set contains the field
        if self.sequence is None and "sequence" in self.model_fields_set:
            _dict['Sequence'] = None

        # set to None if short_handed (nullable) is None
        # and model_fields_set contains the field
        if self.short_handed is None and "short_handed" in self.model_fields_set:
            _dict['ShortHanded'] = None

        # set to None if time_remaining_minutes (nullable) is None
        # and model_fields_set contains the field
        if self.time_remaining_minutes is None and "time_remaining_minutes" in self.model_fields_set:
            _dict['TimeRemainingMinutes'] = None

        # set to None if time_remaining_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.time_remaining_seconds is None and "time_remaining_seconds" in self.model_fields_set:
            _dict['TimeRemainingSeconds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScoringPlay from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AllowedByTeamID": obj.get("AllowedByTeamID"),
            "AssistedByPlayerID1": obj.get("AssistedByPlayerID1"),
            "AssistedByPlayerID2": obj.get("AssistedByPlayerID2"),
            "AwayTeamScore": obj.get("AwayTeamScore"),
            "EmptyNet": obj.get("EmptyNet"),
            "HomeTeamScore": obj.get("HomeTeamScore"),
            "PeriodID": obj.get("PeriodID"),
            "PowerPlay": obj.get("PowerPlay"),
            "ScoredByPlayerID": obj.get("ScoredByPlayerID"),
            "ScoredByTeamID": obj.get("ScoredByTeamID"),
            "ScoringPlayID": obj.get("ScoringPlayID"),
            "Sequence": obj.get("Sequence"),
            "ShortHanded": obj.get("ShortHanded"),
            "TimeRemainingMinutes": obj.get("TimeRemainingMinutes"),
            "TimeRemainingSeconds": obj.get("TimeRemainingSeconds")
        })
        return _obj


