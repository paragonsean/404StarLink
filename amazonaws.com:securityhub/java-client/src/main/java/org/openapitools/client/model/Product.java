/*
 * AWS SecurityHub
 * <p>Security Hub provides you with a comprehensive view of the security state of your Amazon Web Services environment and resources. It also provides you with the readiness status of your environment based on controls from supported security standards. Security Hub collects security data from Amazon Web Services accounts, services, and integrated third-party products and helps you analyze security trends in your environment to identify the highest priority security issues. For more information about Security Hub, see the <a href=\"https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html\">Security HubUser Guide</a>.</p> <p>When you use operations in the Security Hub API, the requests are executed only in the Amazon Web Services Region that is currently active or in the specific Amazon Web Services Region that you specify in your request. Any configuration or settings change that results from the operation is applied only to that Region. To make the same change in other Regions, run the same command for each Region in which you want to apply the change.</p> <p>For example, if your Region is set to <code>us-west-2</code>, when you use <code>CreateMembers</code> to add a member account to Security Hub, the association of the member account with the administrator account is created only in the <code>us-west-2</code> Region. Security Hub must be enabled for the member account in the same Region that the invitation was sent from.</p> <p>The following throttling limits apply to using Security Hub API operations.</p> <ul> <li> <p> <code>BatchEnableStandards</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 1 request per second.</p> </li> <li> <p> <code>GetFindings</code> - <code>RateLimit</code> of 3 requests per second. <code>BurstLimit</code> of 6 requests per second.</p> </li> <li> <p> <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>UpdateStandardsControl</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 5 requests per second.</p> </li> <li> <p>All other operations - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains details about a product.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:57:13.081466-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Product {
  public static final String SERIALIZED_NAME_PRODUCT_ARN = "ProductArn";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ARN)
  private String productArn;

  public static final String SERIALIZED_NAME_PRODUCT_NAME = "ProductName";
  @SerializedName(SERIALIZED_NAME_PRODUCT_NAME)
  private String productName;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "CompanyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CATEGORIES = "Categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List categories;

  public static final String SERIALIZED_NAME_INTEGRATION_TYPES = "IntegrationTypes";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_TYPES)
  private List integrationTypes;

  public static final String SERIALIZED_NAME_MARKETPLACE_URL = "MarketplaceUrl";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_URL)
  private String marketplaceUrl;

  public static final String SERIALIZED_NAME_ACTIVATION_URL = "ActivationUrl";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_URL)
  private String activationUrl;

  public static final String SERIALIZED_NAME_PRODUCT_SUBSCRIPTION_RESOURCE_POLICY = "ProductSubscriptionResourcePolicy";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SUBSCRIPTION_RESOURCE_POLICY)
  private String productSubscriptionResourcePolicy;

  public Product() {
  }

  public Product productArn(String productArn) {
    this.productArn = productArn;
    return this;
  }

  /**
   * Get productArn
   * @return productArn
   */
  @javax.annotation.Nonnull
  public String getProductArn() {
    return productArn;
  }

  public void setProductArn(String productArn) {
    this.productArn = productArn;
  }


  public Product productName(String productName) {
    this.productName = productName;
    return this;
  }

  /**
   * Get productName
   * @return productName
   */
  @javax.annotation.Nullable
  public String getProductName() {
    return productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }


  public Product companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * Get companyName
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public Product description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Product categories(List categories) {
    this.categories = categories;
    return this;
  }

  /**
   * Get categories
   * @return categories
   */
  @javax.annotation.Nullable
  public List getCategories() {
    return categories;
  }

  public void setCategories(List categories) {
    this.categories = categories;
  }


  public Product integrationTypes(List integrationTypes) {
    this.integrationTypes = integrationTypes;
    return this;
  }

  /**
   * Get integrationTypes
   * @return integrationTypes
   */
  @javax.annotation.Nullable
  public List getIntegrationTypes() {
    return integrationTypes;
  }

  public void setIntegrationTypes(List integrationTypes) {
    this.integrationTypes = integrationTypes;
  }


  public Product marketplaceUrl(String marketplaceUrl) {
    this.marketplaceUrl = marketplaceUrl;
    return this;
  }

  /**
   * Get marketplaceUrl
   * @return marketplaceUrl
   */
  @javax.annotation.Nullable
  public String getMarketplaceUrl() {
    return marketplaceUrl;
  }

  public void setMarketplaceUrl(String marketplaceUrl) {
    this.marketplaceUrl = marketplaceUrl;
  }


  public Product activationUrl(String activationUrl) {
    this.activationUrl = activationUrl;
    return this;
  }

  /**
   * Get activationUrl
   * @return activationUrl
   */
  @javax.annotation.Nullable
  public String getActivationUrl() {
    return activationUrl;
  }

  public void setActivationUrl(String activationUrl) {
    this.activationUrl = activationUrl;
  }


  public Product productSubscriptionResourcePolicy(String productSubscriptionResourcePolicy) {
    this.productSubscriptionResourcePolicy = productSubscriptionResourcePolicy;
    return this;
  }

  /**
   * Get productSubscriptionResourcePolicy
   * @return productSubscriptionResourcePolicy
   */
  @javax.annotation.Nullable
  public String getProductSubscriptionResourcePolicy() {
    return productSubscriptionResourcePolicy;
  }

  public void setProductSubscriptionResourcePolicy(String productSubscriptionResourcePolicy) {
    this.productSubscriptionResourcePolicy = productSubscriptionResourcePolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Product product = (Product) o;
    return Objects.equals(this.productArn, product.productArn) &&
        Objects.equals(this.productName, product.productName) &&
        Objects.equals(this.companyName, product.companyName) &&
        Objects.equals(this.description, product.description) &&
        Objects.equals(this.categories, product.categories) &&
        Objects.equals(this.integrationTypes, product.integrationTypes) &&
        Objects.equals(this.marketplaceUrl, product.marketplaceUrl) &&
        Objects.equals(this.activationUrl, product.activationUrl) &&
        Objects.equals(this.productSubscriptionResourcePolicy, product.productSubscriptionResourcePolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productArn, productName, companyName, description, categories, integrationTypes, marketplaceUrl, activationUrl, productSubscriptionResourcePolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Product {\n");
    sb.append("    productArn: ").append(toIndentedString(productArn)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    integrationTypes: ").append(toIndentedString(integrationTypes)).append("\n");
    sb.append("    marketplaceUrl: ").append(toIndentedString(marketplaceUrl)).append("\n");
    sb.append("    activationUrl: ").append(toIndentedString(activationUrl)).append("\n");
    sb.append("    productSubscriptionResourcePolicy: ").append(toIndentedString(productSubscriptionResourcePolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ProductArn");
    openapiFields.add("ProductName");
    openapiFields.add("CompanyName");
    openapiFields.add("Description");
    openapiFields.add("Categories");
    openapiFields.add("IntegrationTypes");
    openapiFields.add("MarketplaceUrl");
    openapiFields.add("ActivationUrl");
    openapiFields.add("ProductSubscriptionResourcePolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ProductArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Product
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Product.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Product is not found in the empty JSON string", Product.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Product.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Product` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Product.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ProductArn`
      String.validateJsonElement(jsonObj.get("ProductArn"));
      // validate the optional field `ProductName`
      if (jsonObj.get("ProductName") != null && !jsonObj.get("ProductName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProductName"));
      }
      // validate the optional field `CompanyName`
      if (jsonObj.get("CompanyName") != null && !jsonObj.get("CompanyName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CompanyName"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Categories`
      if (jsonObj.get("Categories") != null && !jsonObj.get("Categories").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Categories"));
      }
      // validate the optional field `IntegrationTypes`
      if (jsonObj.get("IntegrationTypes") != null && !jsonObj.get("IntegrationTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IntegrationTypes"));
      }
      // validate the optional field `MarketplaceUrl`
      if (jsonObj.get("MarketplaceUrl") != null && !jsonObj.get("MarketplaceUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MarketplaceUrl"));
      }
      // validate the optional field `ActivationUrl`
      if (jsonObj.get("ActivationUrl") != null && !jsonObj.get("ActivationUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActivationUrl"));
      }
      // validate the optional field `ProductSubscriptionResourcePolicy`
      if (jsonObj.get("ProductSubscriptionResourcePolicy") != null && !jsonObj.get("ProductSubscriptionResourcePolicy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ProductSubscriptionResourcePolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Product.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Product' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Product> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Product.class));

       return (TypeAdapter<T>) new TypeAdapter<Product>() {
           @Override
           public void write(JsonWriter out, Product value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Product read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Product given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Product
   * @throws IOException if the JSON string is invalid with respect to Product
   */
  public static Product fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Product.class);
  }

  /**
   * Convert an instance of Product to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

