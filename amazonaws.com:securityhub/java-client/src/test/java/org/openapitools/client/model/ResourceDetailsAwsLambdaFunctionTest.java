/*
 * AWS SecurityHub
 * <p>Security Hub provides you with a comprehensive view of the security state of your Amazon Web Services environment and resources. It also provides you with the readiness status of your environment based on controls from supported security standards. Security Hub collects security data from Amazon Web Services accounts, services, and integrated third-party products and helps you analyze security trends in your environment to identify the highest priority security issues. For more information about Security Hub, see the <a href=\"https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html\">Security HubUser Guide</a>.</p> <p>When you use operations in the Security Hub API, the requests are executed only in the Amazon Web Services Region that is currently active or in the specific Amazon Web Services Region that you specify in your request. Any configuration or settings change that results from the operation is applied only to that Region. To make the same change in other Regions, run the same command for each Region in which you want to apply the change.</p> <p>For example, if your Region is set to <code>us-west-2</code>, when you use <code>CreateMembers</code> to add a member account to Security Hub, the association of the member account with the administrator account is created only in the <code>us-west-2</code> Region. Security Hub must be enabled for the member account in the same Region that the invitation was sent from.</p> <p>The following throttling limits apply to using Security Hub API operations.</p> <ul> <li> <p> <code>BatchEnableStandards</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 1 request per second.</p> </li> <li> <p> <code>GetFindings</code> - <code>RateLimit</code> of 3 requests per second. <code>BurstLimit</code> of 6 requests per second.</p> </li> <li> <p> <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>UpdateStandardsControl</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 5 requests per second.</p> </li> <li> <p>All other operations - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AwsLambdaFunctionDetailsCode;
import org.openapitools.client.model.AwsLambdaFunctionDetailsDeadLetterConfig;
import org.openapitools.client.model.AwsLambdaFunctionDetailsEnvironment;
import org.openapitools.client.model.AwsLambdaFunctionDetailsTracingConfig;
import org.openapitools.client.model.AwsLambdaFunctionDetailsVpcConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ResourceDetailsAwsLambdaFunction
 */
public class ResourceDetailsAwsLambdaFunctionTest {
    private final ResourceDetailsAwsLambdaFunction model = new ResourceDetailsAwsLambdaFunction();

    /**
     * Model tests for ResourceDetailsAwsLambdaFunction
     */
    @Test
    public void testResourceDetailsAwsLambdaFunction() {
        // TODO: test ResourceDetailsAwsLambdaFunction
    }

    /**
     * Test the property 'code'
     */
    @Test
    public void codeTest() {
        // TODO: test code
    }

    /**
     * Test the property 'codeSha256'
     */
    @Test
    public void codeSha256Test() {
        // TODO: test codeSha256
    }

    /**
     * Test the property 'deadLetterConfig'
     */
    @Test
    public void deadLetterConfigTest() {
        // TODO: test deadLetterConfig
    }

    /**
     * Test the property 'environment'
     */
    @Test
    public void environmentTest() {
        // TODO: test environment
    }

    /**
     * Test the property 'functionName'
     */
    @Test
    public void functionNameTest() {
        // TODO: test functionName
    }

    /**
     * Test the property 'handler'
     */
    @Test
    public void handlerTest() {
        // TODO: test handler
    }

    /**
     * Test the property 'kmsKeyArn'
     */
    @Test
    public void kmsKeyArnTest() {
        // TODO: test kmsKeyArn
    }

    /**
     * Test the property 'lastModified'
     */
    @Test
    public void lastModifiedTest() {
        // TODO: test lastModified
    }

    /**
     * Test the property 'layers'
     */
    @Test
    public void layersTest() {
        // TODO: test layers
    }

    /**
     * Test the property 'masterArn'
     */
    @Test
    public void masterArnTest() {
        // TODO: test masterArn
    }

    /**
     * Test the property 'memorySize'
     */
    @Test
    public void memorySizeTest() {
        // TODO: test memorySize
    }

    /**
     * Test the property 'revisionId'
     */
    @Test
    public void revisionIdTest() {
        // TODO: test revisionId
    }

    /**
     * Test the property 'role'
     */
    @Test
    public void roleTest() {
        // TODO: test role
    }

    /**
     * Test the property 'runtime'
     */
    @Test
    public void runtimeTest() {
        // TODO: test runtime
    }

    /**
     * Test the property 'timeout'
     */
    @Test
    public void timeoutTest() {
        // TODO: test timeout
    }

    /**
     * Test the property 'tracingConfig'
     */
    @Test
    public void tracingConfigTest() {
        // TODO: test tracingConfig
    }

    /**
     * Test the property 'vpcConfig'
     */
    @Test
    public void vpcConfigTest() {
        // TODO: test vpcConfig
    }

    /**
     * Test the property 'version'
     */
    @Test
    public void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'architectures'
     */
    @Test
    public void architecturesTest() {
        // TODO: test architectures
    }

    /**
     * Test the property 'packageType'
     */
    @Test
    public void packageTypeTest() {
        // TODO: test packageType
    }

}
