/*
 * AWS SecurityHub
 * <p>Security Hub provides you with a comprehensive view of the security state of your Amazon Web Services environment and resources. It also provides you with the readiness status of your environment based on controls from supported security standards. Security Hub collects security data from Amazon Web Services accounts, services, and integrated third-party products and helps you analyze security trends in your environment to identify the highest priority security issues. For more information about Security Hub, see the <a href=\"https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html\">Security HubUser Guide</a>.</p> <p>When you use operations in the Security Hub API, the requests are executed only in the Amazon Web Services Region that is currently active or in the specific Amazon Web Services Region that you specify in your request. Any configuration or settings change that results from the operation is applied only to that Region. To make the same change in other Regions, run the same command for each Region in which you want to apply the change.</p> <p>For example, if your Region is set to <code>us-west-2</code>, when you use <code>CreateMembers</code> to add a member account to Security Hub, the association of the member account with the administrator account is created only in the <code>us-west-2</code> Region. Security Hub must be enabled for the member account in the same Region that the invitation was sent from.</p> <p>The following throttling limits apply to using Security Hub API operations.</p> <ul> <li> <p> <code>BatchEnableStandards</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 1 request per second.</p> </li> <li> <p> <code>GetFindings</code> - <code>RateLimit</code> of 3 requests per second. <code>BurstLimit</code> of 6 requests per second.</p> </li> <li> <p> <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>UpdateStandardsControl</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 5 requests per second.</p> </li> <li> <p>All other operations - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptAdministratorInvitationRequest;
import org.openapitools.client.model.AcceptInvitationRequest;
import org.openapitools.client.model.BatchDisableStandardsRequest;
import org.openapitools.client.model.BatchDisableStandardsResponse;
import org.openapitools.client.model.BatchEnableStandardsRequest;
import org.openapitools.client.model.BatchEnableStandardsResponse;
import org.openapitools.client.model.BatchGetSecurityControlsRequest;
import org.openapitools.client.model.BatchGetSecurityControlsResponse;
import org.openapitools.client.model.BatchGetStandardsControlAssociationsRequest;
import org.openapitools.client.model.BatchGetStandardsControlAssociationsResponse;
import org.openapitools.client.model.BatchImportFindingsRequest;
import org.openapitools.client.model.BatchImportFindingsResponse;
import org.openapitools.client.model.BatchUpdateFindingsRequest;
import org.openapitools.client.model.BatchUpdateFindingsResponse;
import org.openapitools.client.model.BatchUpdateStandardsControlAssociationsRequest;
import org.openapitools.client.model.BatchUpdateStandardsControlAssociationsResponse;
import org.openapitools.client.model.CreateActionTargetRequest;
import org.openapitools.client.model.CreateActionTargetResponse;
import org.openapitools.client.model.CreateFindingAggregatorRequest;
import org.openapitools.client.model.CreateFindingAggregatorResponse;
import org.openapitools.client.model.CreateInsightRequest;
import org.openapitools.client.model.CreateInsightResponse;
import org.openapitools.client.model.CreateMembersRequest;
import org.openapitools.client.model.CreateMembersResponse;
import org.openapitools.client.model.DeclineInvitationsRequest;
import org.openapitools.client.model.DeclineInvitationsResponse;
import org.openapitools.client.model.DeleteActionTargetResponse;
import org.openapitools.client.model.DeleteInsightResponse;
import org.openapitools.client.model.DeleteInvitationsRequest;
import org.openapitools.client.model.DeleteInvitationsResponse;
import org.openapitools.client.model.DeleteMembersRequest;
import org.openapitools.client.model.DeleteMembersResponse;
import org.openapitools.client.model.DescribeActionTargetsRequest;
import org.openapitools.client.model.DescribeActionTargetsResponse;
import org.openapitools.client.model.DescribeHubResponse;
import org.openapitools.client.model.DescribeOrganizationConfigurationResponse;
import org.openapitools.client.model.DescribeProductsResponse;
import org.openapitools.client.model.DescribeStandardsControlsResponse;
import org.openapitools.client.model.DescribeStandardsResponse;
import org.openapitools.client.model.DisableOrganizationAdminAccountRequest;
import org.openapitools.client.model.DisassociateMembersRequest;
import org.openapitools.client.model.EnableImportFindingsForProductRequest;
import org.openapitools.client.model.EnableImportFindingsForProductResponse;
import org.openapitools.client.model.EnableOrganizationAdminAccountRequest;
import org.openapitools.client.model.EnableSecurityHubRequest;
import org.openapitools.client.model.GetAdministratorAccountResponse;
import org.openapitools.client.model.GetEnabledStandardsRequest;
import org.openapitools.client.model.GetEnabledStandardsResponse;
import org.openapitools.client.model.GetFindingAggregatorResponse;
import org.openapitools.client.model.GetFindingsRequest;
import org.openapitools.client.model.GetFindingsResponse;
import org.openapitools.client.model.GetInsightResultsResponse;
import org.openapitools.client.model.GetInsightsRequest;
import org.openapitools.client.model.GetInsightsResponse;
import org.openapitools.client.model.GetInvitationsCountResponse;
import org.openapitools.client.model.GetMasterAccountResponse;
import org.openapitools.client.model.GetMembersRequest;
import org.openapitools.client.model.GetMembersResponse;
import org.openapitools.client.model.InviteMembersRequest;
import org.openapitools.client.model.InviteMembersResponse;
import org.openapitools.client.model.ListEnabledProductsForImportResponse;
import org.openapitools.client.model.ListFindingAggregatorsResponse;
import org.openapitools.client.model.ListInvitationsResponse;
import org.openapitools.client.model.ListMembersResponse;
import org.openapitools.client.model.ListOrganizationAdminAccountsResponse;
import org.openapitools.client.model.ListSecurityControlDefinitionsResponse;
import org.openapitools.client.model.ListStandardsControlAssociationsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateActionTargetRequest;
import org.openapitools.client.model.UpdateFindingAggregatorRequest;
import org.openapitools.client.model.UpdateFindingAggregatorResponse;
import org.openapitools.client.model.UpdateFindingsRequest;
import org.openapitools.client.model.UpdateInsightRequest;
import org.openapitools.client.model.UpdateOrganizationConfigurationRequest;
import org.openapitools.client.model.UpdateSecurityHubConfigurationRequest;
import org.openapitools.client.model.UpdateStandardsControlRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Accepts the invitation to be a member account and be monitored by the Security Hub administrator account that the invitation was sent from.&lt;/p&gt; &lt;p&gt;This operation is only used by member accounts that are not added through Organizations.&lt;/p&gt; &lt;p&gt;When the member account accepts the invitation, permission is granted to the administrator account to view findings generated in the member account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptAdministratorInvitationTest() throws ApiException {
        AcceptAdministratorInvitationRequest acceptAdministratorInvitationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.acceptAdministratorInvitation(acceptAdministratorInvitationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This method is deprecated. Instead, use &lt;code&gt;AcceptAdministratorInvitation&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The Security Hub console continues to use &lt;code&gt;AcceptInvitation&lt;/code&gt;. It will eventually change to use &lt;code&gt;AcceptAdministratorInvitation&lt;/code&gt;. Any IAM policies that specifically control access to this function must continue to use &lt;code&gt;AcceptInvitation&lt;/code&gt;. You should also add &lt;code&gt;AcceptAdministratorInvitation&lt;/code&gt; to your policies to ensure that the correct permissions are in place after the console begins to use &lt;code&gt;AcceptAdministratorInvitation&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Accepts the invitation to be a member account and be monitored by the Security Hub administrator account that the invitation was sent from.&lt;/p&gt; &lt;p&gt;This operation is only used by member accounts that are not added through Organizations.&lt;/p&gt; &lt;p&gt;When the member account accepts the invitation, permission is granted to the administrator account to view findings generated in the member account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acceptInvitationTest() throws ApiException {
        AcceptInvitationRequest acceptInvitationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.acceptInvitation(acceptInvitationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disables the standards specified by the provided &lt;code&gt;StandardsSubscriptionArns&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards.html\&quot;&gt;Security Standards&lt;/a&gt; section of the &lt;i&gt;Security Hub User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDisableStandardsTest() throws ApiException {
        BatchDisableStandardsRequest batchDisableStandardsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDisableStandardsResponse response = api.batchDisableStandards(batchDisableStandardsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables the standards specified by the provided &lt;code&gt;StandardsArn&lt;/code&gt;. To obtain the ARN for a standard, use the &lt;code&gt;DescribeStandards&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards.html\&quot;&gt;Security Standards&lt;/a&gt; section of the &lt;i&gt;Security Hub User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchEnableStandardsTest() throws ApiException {
        BatchEnableStandardsRequest batchEnableStandardsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchEnableStandardsResponse response = api.batchEnableStandards(batchEnableStandardsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Provides details about a batch of security controls for the current Amazon Web Services account and Amazon Web Services Region. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetSecurityControlsTest() throws ApiException {
        BatchGetSecurityControlsRequest batchGetSecurityControlsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetSecurityControlsResponse response = api.batchGetSecurityControls(batchGetSecurityControlsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  For a batch of security controls and standards, identifies whether each control is currently enabled or disabled in a standard. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetStandardsControlAssociationsTest() throws ApiException {
        BatchGetStandardsControlAssociationsRequest batchGetStandardsControlAssociationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetStandardsControlAssociationsResponse response = api.batchGetStandardsControlAssociations(batchGetStandardsControlAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Imports security findings generated by a finding provider into Security Hub. This action is requested by the finding provider to import its findings into Security Hub.&lt;/p&gt; &lt;p&gt; &lt;code&gt;BatchImportFindings&lt;/code&gt; must be called by one of the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The Amazon Web Services account that is associated with a finding if you are using the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-custom-providers.html#securityhub-custom-providers-bfi-reqs\&quot;&gt;default product ARN&lt;/a&gt; or are a partner sending findings from within a customer&#39;s Amazon Web Services account. In these cases, the identifier of the account that you are calling &lt;code&gt;BatchImportFindings&lt;/code&gt; from needs to be the same as the &lt;code&gt;AwsAccountId&lt;/code&gt; attribute for the finding.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An Amazon Web Services account that Security Hub has allow-listed for an official partner integration. In this case, you can call &lt;code&gt;BatchImportFindings&lt;/code&gt; from the allow-listed account and send findings from different customer accounts in the same batch.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The maximum allowed size for a finding is 240 Kb. An error is returned for any finding larger than 240 Kb.&lt;/p&gt; &lt;p&gt;After a finding is created, &lt;code&gt;BatchImportFindings&lt;/code&gt; cannot be used to update the following finding fields and objects, which Security Hub customers use to manage their investigation workflow.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Note&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UserDefinedFields&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VerificationState&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Workflow&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Finding providers also should not use &lt;code&gt;BatchImportFindings&lt;/code&gt; to update the following attributes.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Confidence&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Criticality&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RelatedFindings&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Severity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Types&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Instead, finding providers use &lt;code&gt;FindingProviderFields&lt;/code&gt; to provide values for these attributes.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchImportFindingsTest() throws ApiException {
        BatchImportFindingsRequest batchImportFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchImportFindingsResponse response = api.batchImportFindings(batchImportFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Used by Security Hub customers to update information about their investigation into a finding. Requested by administrator accounts or member accounts. Administrator accounts can update findings for their account and their member accounts. Member accounts can update findings for their account.&lt;/p&gt; &lt;p&gt;Updates from &lt;code&gt;BatchUpdateFindings&lt;/code&gt; do not affect the value of &lt;code&gt;UpdatedAt&lt;/code&gt; for a finding.&lt;/p&gt; &lt;p&gt;Administrator and member accounts can use &lt;code&gt;BatchUpdateFindings&lt;/code&gt; to update the following finding fields and objects.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Confidence&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Criticality&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Note&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RelatedFindings&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Severity&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Types&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;UserDefinedFields&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;VerificationState&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;Workflow&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can configure IAM policies to restrict access to fields and field values. For example, you might not want member accounts to be able to suppress findings or change the finding severity. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/securityhub/latest/userguide/finding-update-batchupdatefindings.html#batchupdatefindings-configure-access\&quot;&gt;Configuring access to BatchUpdateFindings&lt;/a&gt; in the &lt;i&gt;Security Hub User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUpdateFindingsTest() throws ApiException {
        BatchUpdateFindingsRequest batchUpdateFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchUpdateFindingsResponse response = api.batchUpdateFindings(batchUpdateFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  For a batch of security controls and standards, this operation updates the enablement status of a control in a standard. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUpdateStandardsControlAssociationsTest() throws ApiException {
        BatchUpdateStandardsControlAssociationsRequest batchUpdateStandardsControlAssociationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchUpdateStandardsControlAssociationsResponse response = api.batchUpdateStandardsControlAssociations(batchUpdateStandardsControlAssociationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a custom action target in Security Hub.&lt;/p&gt; &lt;p&gt;You can use custom actions on findings and insights in Security Hub to trigger target actions in Amazon CloudWatch Events.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createActionTargetTest() throws ApiException {
        CreateActionTargetRequest createActionTargetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateActionTargetResponse response = api.createActionTarget(createActionTargetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Used to enable finding aggregation. Must be called from the aggregation Region.&lt;/p&gt; &lt;p&gt;For more details about cross-Region replication, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/securityhub/latest/userguide/finding-aggregation.html\&quot;&gt;Configuring finding aggregation&lt;/a&gt; in the &lt;i&gt;Security Hub User Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFindingAggregatorTest() throws ApiException {
        CreateFindingAggregatorRequest createFindingAggregatorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFindingAggregatorResponse response = api.createFindingAggregator(createFindingAggregatorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a custom insight in Security Hub. An insight is a consolidation of findings that relate to a security issue that requires attention or remediation.&lt;/p&gt; &lt;p&gt;To group the related findings in the insight, use the &lt;code&gt;GroupByAttribute&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInsightTest() throws ApiException {
        CreateInsightRequest createInsightRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateInsightResponse response = api.createInsight(createInsightRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a member association in Security Hub between the specified accounts and the account used to make the request, which is the administrator account. If you are integrated with Organizations, then the administrator account is designated by the organization management account.&lt;/p&gt; &lt;p&gt; &lt;code&gt;CreateMembers&lt;/code&gt; is always used to add accounts that are not organization members.&lt;/p&gt; &lt;p&gt;For accounts that are managed using Organizations, &lt;code&gt;CreateMembers&lt;/code&gt; is only used in the following cases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Security Hub is not configured to automatically add new organization accounts.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The account was disassociated or deleted in Security Hub.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This action can only be used by an account that has Security Hub enabled. To enable Security Hub, you can use the &lt;code&gt;EnableSecurityHub&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;For accounts that are not organization members, you create the account association and then send an invitation to the member account. To send the invitation, you use the &lt;code&gt;InviteMembers&lt;/code&gt; operation. If the account owner accepts the invitation, the account becomes a member account in Security Hub.&lt;/p&gt; &lt;p&gt;Accounts that are managed using Organizations do not receive an invitation. They automatically become a member account in Security Hub.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the organization account does not have Security Hub enabled, then Security Hub and the default standards are automatically enabled. Note that Security Hub cannot be enabled automatically for the organization management account. The organization management account must enable Security Hub before the administrator account enables it as a member account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For organization accounts that already have Security Hub enabled, Security Hub does not make any other changes to those accounts. It does not change their enabled standards or controls.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A permissions policy is added that permits the administrator account to view the findings generated in the member account.&lt;/p&gt; &lt;p&gt;To remove the association between the administrator and member accounts, use the &lt;code&gt;DisassociateFromMasterAccount&lt;/code&gt; or &lt;code&gt;DisassociateMembers&lt;/code&gt; operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMembersTest() throws ApiException {
        CreateMembersRequest createMembersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMembersResponse response = api.createMembers(createMembersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Declines invitations to become a member account.&lt;/p&gt; &lt;p&gt;A prospective member account uses this operation to decline an invitation to become a member.&lt;/p&gt; &lt;p&gt;This operation is only called by member accounts that aren&#39;t part of an organization. Organization accounts don&#39;t receive invitations.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void declineInvitationsTest() throws ApiException {
        DeclineInvitationsRequest declineInvitationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeclineInvitationsResponse response = api.declineInvitations(declineInvitationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a custom action target from Security Hub.&lt;/p&gt; &lt;p&gt;Deleting a custom action target does not affect any findings or insights that were already sent to Amazon CloudWatch Events using the custom action.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteActionTargetTest() throws ApiException {
        String actionTargetArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteActionTargetResponse response = api.deleteActionTarget(actionTargetArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a finding aggregator. When you delete the finding aggregator, you stop finding aggregation.&lt;/p&gt; &lt;p&gt;When you stop finding aggregation, findings that were already aggregated to the aggregation Region are still visible from the aggregation Region. New findings and finding updates are not aggregated. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFindingAggregatorTest() throws ApiException {
        String findingAggregatorArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteFindingAggregator(findingAggregatorArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the insight specified by the &lt;code&gt;InsightArn&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInsightTest() throws ApiException {
        String insightArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteInsightResponse response = api.deleteInsight(insightArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes invitations received by the Amazon Web Services account to become a member account.&lt;/p&gt; &lt;p&gt;A Security Hub administrator account can use this operation to delete invitations sent to one or more member accounts.&lt;/p&gt; &lt;p&gt;This operation is only used to delete invitations that are sent to member accounts that aren&#39;t part of an organization. Organization accounts don&#39;t receive invitations.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInvitationsTest() throws ApiException {
        DeleteInvitationsRequest deleteInvitationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteInvitationsResponse response = api.deleteInvitations(deleteInvitationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified member accounts from Security Hub.&lt;/p&gt; &lt;p&gt;Can be used to delete member accounts that belong to an organization as well as member accounts that were invited manually.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMembersTest() throws ApiException {
        DeleteMembersRequest deleteMembersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteMembersResponse response = api.deleteMembers(deleteMembersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of the custom action targets in Security Hub in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeActionTargetsTest() throws ApiException {
        DescribeActionTargetsRequest describeActionTargetsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeActionTargetsResponse response = api.describeActionTargets(describeActionTargetsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns details about the Hub resource in your account, including the &lt;code&gt;HubArn&lt;/code&gt; and the time when you enabled Security Hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeHubTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String hubArn = null;
        DescribeHubResponse response = api.describeHub(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, hubArn);
        // TODO: test validations
    }

    /**
     * Returns information about the Organizations configuration for Security Hub. Can only be called from a Security Hub administrator account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeOrganizationConfigurationTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeOrganizationConfigurationResponse response = api.describeOrganizationConfiguration(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about product integrations in Security Hub.&lt;/p&gt; &lt;p&gt;You can optionally provide an integration ARN. If you provide an integration ARN, then the results only include that integration.&lt;/p&gt; &lt;p&gt;If you do not provide an integration ARN, then the results include all of the available product integrations. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeProductsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        String productArn = null;
        DescribeProductsResponse response = api.describeProducts(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, productArn);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of the available standards in Security Hub.&lt;/p&gt; &lt;p&gt;For each standard, the results include the standard ARN, the name, and a description. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeStandardsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        DescribeStandardsResponse response = api.describeStandards(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of security standards controls.&lt;/p&gt; &lt;p&gt;For each control, the results include information about whether it is currently enabled, the severity, and a link to remediation information.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeStandardsControlsTest() throws ApiException {
        String standardsSubscriptionArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        DescribeStandardsControlsResponse response = api.describeStandardsControls(standardsSubscriptionArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Disables the integration of the specified product with Security Hub. After the integration is disabled, findings from that product are no longer sent to Security Hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableImportFindingsForProductTest() throws ApiException {
        String productSubscriptionArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disableImportFindingsForProduct(productSubscriptionArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables a Security Hub administrator account. Can only be called by the organization management account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableOrganizationAdminAccountTest() throws ApiException {
        DisableOrganizationAdminAccountRequest disableOrganizationAdminAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disableOrganizationAdminAccount(disableOrganizationAdminAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disables Security Hub in your account only in the current Region. To disable Security Hub in all Regions, you must submit one request per Region where you have enabled Security Hub.&lt;/p&gt; &lt;p&gt;When you disable Security Hub for an administrator account, it doesn&#39;t disable Security Hub for any associated member accounts.&lt;/p&gt; &lt;p&gt;When you disable Security Hub, your existing findings and insights and any Security Hub configuration settings are deleted after 90 days and cannot be recovered. Any standards that were enabled are disabled, and your administrator and member account associations are removed.&lt;/p&gt; &lt;p&gt;If you want to save your existing findings, you must export them before you disable Security Hub.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableSecurityHubTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disableSecurityHub(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disassociates the current Security Hub member account from the associated administrator account.&lt;/p&gt; &lt;p&gt;This operation is only used by accounts that are not part of an organization. For organization accounts, only the administrator account can disassociate a member account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateFromAdministratorAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateFromAdministratorAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This method is deprecated. Instead, use &lt;code&gt;DisassociateFromAdministratorAccount&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The Security Hub console continues to use &lt;code&gt;DisassociateFromMasterAccount&lt;/code&gt;. It will eventually change to use &lt;code&gt;DisassociateFromAdministratorAccount&lt;/code&gt;. Any IAM policies that specifically control access to this function must continue to use &lt;code&gt;DisassociateFromMasterAccount&lt;/code&gt;. You should also add &lt;code&gt;DisassociateFromAdministratorAccount&lt;/code&gt; to your policies to ensure that the correct permissions are in place after the console begins to use &lt;code&gt;DisassociateFromAdministratorAccount&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Disassociates the current Security Hub member account from the associated administrator account.&lt;/p&gt; &lt;p&gt;This operation is only used by accounts that are not part of an organization. For organization accounts, only the administrator account can disassociate a member account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateFromMasterAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateFromMasterAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disassociates the specified member accounts from the associated administrator account.&lt;/p&gt; &lt;p&gt;Can be used to disassociate both accounts that are managed using Organizations and accounts that were invited manually.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateMembersTest() throws ApiException {
        DisassociateMembersRequest disassociateMembersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateMembers(disassociateMembersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables the integration of a partner product with Security Hub. Integrated products send findings to Security Hub.&lt;/p&gt; &lt;p&gt;When you enable a product integration, a permissions policy that grants permission for the product to send findings to Security Hub is applied.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableImportFindingsForProductTest() throws ApiException {
        EnableImportFindingsForProductRequest enableImportFindingsForProductRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EnableImportFindingsForProductResponse response = api.enableImportFindingsForProduct(enableImportFindingsForProductRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Designates the Security Hub administrator account for an organization. Can only be called by the organization management account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableOrganizationAdminAccountTest() throws ApiException {
        EnableOrganizationAdminAccountRequest enableOrganizationAdminAccountRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.enableOrganizationAdminAccount(enableOrganizationAdminAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Enables Security Hub for your account in the current Region or the Region you specify in the request.&lt;/p&gt; &lt;p&gt;When you enable Security Hub, you grant to Security Hub the permissions necessary to gather findings from other services that are integrated with Security Hub.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;EnableSecurityHub&lt;/code&gt; operation to enable Security Hub, you also automatically enable the following standards:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Center for Internet Security (CIS) Amazon Web Services Foundations Benchmark v1.2.0&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Amazon Web Services Foundational Security Best Practices&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Other standards are not automatically enabled. &lt;/p&gt; &lt;p&gt;To opt out of automatically enabled standards, set &lt;code&gt;EnableDefaultStandards&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you enable Security Hub, to enable a standard, use the &lt;code&gt;BatchEnableStandards&lt;/code&gt; operation. To disable a standard, use the &lt;code&gt;BatchDisableStandards&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt;To learn more, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-settingup.html\&quot;&gt;setup information&lt;/a&gt; in the &lt;i&gt;Security Hub User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableSecurityHubTest() throws ApiException {
        EnableSecurityHubRequest enableSecurityHubRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.enableSecurityHub(enableSecurityHubRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides the details for the Security Hub administrator account for the current member account.&lt;/p&gt; &lt;p&gt;Can be used by both member accounts that are managed using Organizations and accounts that were invited manually.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAdministratorAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAdministratorAccountResponse response = api.getAdministratorAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a list of the standards that are currently enabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnabledStandardsTest() throws ApiException {
        GetEnabledStandardsRequest getEnabledStandardsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetEnabledStandardsResponse response = api.getEnabledStandards(getEnabledStandardsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the current finding aggregation configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFindingAggregatorTest() throws ApiException {
        String findingAggregatorArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFindingAggregatorResponse response = api.getFindingAggregator(findingAggregatorArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of findings that match the specified criteria.&lt;/p&gt; &lt;p&gt;If finding aggregation is enabled, then when you call &lt;code&gt;GetFindings&lt;/code&gt; from the aggregation Region, the results include all of the matching findings from both the aggregation Region and the linked Regions.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFindingsTest() throws ApiException {
        GetFindingsRequest getFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetFindingsResponse response = api.getFindings(getFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the results of the Security Hub insight specified by the insight ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInsightResultsTest() throws ApiException {
        String insightArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInsightResultsResponse response = api.getInsightResults(insightArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists and describes insights for the specified insight ARNs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInsightsTest() throws ApiException {
        GetInsightsRequest getInsightsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetInsightsResponse response = api.getInsights(getInsightsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the count of all Security Hub membership invitations that were sent to the current member account, not including the currently accepted invitation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInvitationsCountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetInvitationsCountResponse response = api.getInvitationsCount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This method is deprecated. Instead, use &lt;code&gt;GetAdministratorAccount&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The Security Hub console continues to use &lt;code&gt;GetMasterAccount&lt;/code&gt;. It will eventually change to use &lt;code&gt;GetAdministratorAccount&lt;/code&gt;. Any IAM policies that specifically control access to this function must continue to use &lt;code&gt;GetMasterAccount&lt;/code&gt;. You should also add &lt;code&gt;GetAdministratorAccount&lt;/code&gt; to your policies to ensure that the correct permissions are in place after the console begins to use &lt;code&gt;GetAdministratorAccount&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Provides the details for the Security Hub administrator account for the current member account.&lt;/p&gt; &lt;p&gt;Can be used by both member accounts that are managed using Organizations and accounts that were invited manually.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMasterAccountTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMasterAccountResponse response = api.getMasterAccount(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the details for the Security Hub member accounts for the specified account IDs.&lt;/p&gt; &lt;p&gt;An administrator account can be either the delegated Security Hub administrator account for an organization or an administrator account that enabled Security Hub manually.&lt;/p&gt; &lt;p&gt;The results include both member accounts that are managed using Organizations and accounts that were invited manually.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMembersTest() throws ApiException {
        GetMembersRequest getMembersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMembersResponse response = api.getMembers(getMembersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Invites other Amazon Web Services accounts to become member accounts for the Security Hub administrator account that the invitation is sent from.&lt;/p&gt; &lt;p&gt;This operation is only used to invite accounts that do not belong to an organization. Organization accounts do not receive invitations.&lt;/p&gt; &lt;p&gt;Before you can use this action to invite a member, you must first use the &lt;code&gt;CreateMembers&lt;/code&gt; action to create the member account in Security Hub.&lt;/p&gt; &lt;p&gt;When the account owner enables Security Hub and accepts the invitation to become a member account, the administrator account can view the findings generated from the member account.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteMembersTest() throws ApiException {
        InviteMembersRequest inviteMembersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        InviteMembersResponse response = api.inviteMembers(inviteMembersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all findings-generating solutions (products) that you are subscribed to receive findings from in Security Hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEnabledProductsForImportTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListEnabledProductsForImportResponse response = api.listEnabledProductsForImport(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * If finding aggregation is enabled, then &lt;code&gt;ListFindingAggregators&lt;/code&gt; returns the ARN of the finding aggregator. You can run this operation from any Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFindingAggregatorsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListFindingAggregatorsResponse response = api.listFindingAggregators(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all Security Hub membership invitations that were sent to the current Amazon Web Services account.&lt;/p&gt; &lt;p&gt;This operation is only used by accounts that are managed by invitation. Accounts that are managed using the integration with Organizations do not receive invitations.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInvitationsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListInvitationsResponse response = api.listInvitations(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists details about all member accounts for the current Security Hub administrator account.&lt;/p&gt; &lt;p&gt;The results include both member accounts that belong to an organization and member accounts that were invited manually.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMembersTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Boolean onlyAssociated = null;
        Integer maxResults = null;
        String nextToken = null;
        ListMembersResponse response = api.listMembers(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, onlyAssociated, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the Security Hub administrator accounts. Can only be called by the organization management account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrganizationAdminAccountsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListOrganizationAdminAccountsResponse response = api.listOrganizationAdminAccounts(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     *  Lists all of the security controls that apply to a specified standard. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSecurityControlDefinitionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String standardsArn = null;
        String nextToken = null;
        Integer maxResults = null;
        ListSecurityControlDefinitionsResponse response = api.listSecurityControlDefinitions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, standardsArn, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     *  Specifies whether a control is currently enabled or disabled in each enabled standard in the calling account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listStandardsControlAssociationsTest() throws ApiException {
        String securityControlId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListStandardsControlAssociationsResponse response = api.listStandardsControlAssociations(securityControlId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Returns a list of tags associated with a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds one or more tags to a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the name and description of a custom action target in Security Hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateActionTargetTest() throws ApiException {
        String actionTargetArn = null;
        UpdateActionTargetRequest updateActionTargetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateActionTarget(actionTargetArn, updateActionTargetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the finding aggregation configuration. Used to update the Region linking mode and the list of included or excluded Regions. You cannot use &lt;code&gt;UpdateFindingAggregator&lt;/code&gt; to change the aggregation Region.&lt;/p&gt; &lt;p&gt;You must run &lt;code&gt;UpdateFindingAggregator&lt;/code&gt; from the current aggregation Region. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFindingAggregatorTest() throws ApiException {
        UpdateFindingAggregatorRequest updateFindingAggregatorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFindingAggregatorResponse response = api.updateFindingAggregator(updateFindingAggregatorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; &lt;code&gt;UpdateFindings&lt;/code&gt; is deprecated. Instead of &lt;code&gt;UpdateFindings&lt;/code&gt;, use &lt;code&gt;BatchUpdateFindings&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Updates the &lt;code&gt;Note&lt;/code&gt; and &lt;code&gt;RecordState&lt;/code&gt; of the Security Hub-aggregated findings that the filter attributes specify. Any member account that can view the finding also sees the update to the finding.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFindingsTest() throws ApiException {
        UpdateFindingsRequest updateFindingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateFindings(updateFindingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the Security Hub insight identified by the specified insight ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInsightTest() throws ApiException {
        String insightArn = null;
        UpdateInsightRequest updateInsightRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateInsight(insightArn, updateInsightRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Used to update the configuration related to Organizations. Can only be called from a Security Hub administrator account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOrganizationConfigurationTest() throws ApiException {
        UpdateOrganizationConfigurationRequest updateOrganizationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateOrganizationConfiguration(updateOrganizationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates configuration options for Security Hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSecurityHubConfigurationTest() throws ApiException {
        UpdateSecurityHubConfigurationRequest updateSecurityHubConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateSecurityHubConfiguration(updateSecurityHubConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Used to control whether an individual security standard control is enabled or disabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStandardsControlTest() throws ApiException {
        String standardsControlArn = null;
        UpdateStandardsControlRequest updateStandardsControlRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateStandardsControl(standardsControlArn, updateStandardsControlRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
