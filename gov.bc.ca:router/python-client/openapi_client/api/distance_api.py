# coding: utf-8

"""
    BC Route Planner REST API

    Finds shortest/fastest route between a start point and one or more stop points on British Columbia's public road network. The BC Route planner [webpage](https://www2.gov.bc.ca/gov/content?id=9D99E684CCD042CD88FADC51E079B4B5) provides additional information.  Here are some geocoded addresses to play with:<br>18 Douglas St,Victoria -123.36962,48.40892<br>1002 Johnson St, Victoria -123.355745,48.426206<br>543 Johnson St, Victoria, BC -123.36907,48.42770 <br>14 Centennial Sq, Victoria, BC -123.36564,48.42863<br>1105 Royal Ave,New Westminster  -122.92009,49.20063<br>808 Jackson Cres, New Westminster -122.90762,49.22558<br>10810 McDonald Rd, Chilliwack -121.93808,49.19859<br>3950 June Springs Rd, Kelowna -119.40751,49.83960<br>1201 Riondel Rd, Kootenay Bay -116.85402,49.74448<br>1201 Riondel Rd, Kootenay Bay -116.832759,49.730500 (parcelPoint)<br>2499 Walbran Pl, Courtenay -124.97295,49.71518<br>2013 Smoke Bluff Rd, Squamish -123.13946,49.70401<br>235 Kelvin Grove Way, Lions Bay -123.23524,49.45035<br>   Please see our <a href=https://github.com/bcgov/api-specs/blob/master/COLLECTION_NOTICE.md#collection-notice target=\"_blank\">data collection notice</a>.   Please note that you may experience issues when submitting requests to the delivery or test environment if using this [OpenAPI specification](https://github.com/bcgov/api-specs) in other API console viewers.   [API keys](https://api.gov.bc.ca/devportal/api-directory/740) are unique and can be acquired with a GitHub or IDIR account.   

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DistanceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def distance_between_pairs_output_format_get(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        from_points: Annotated[StrictStr, Field(description="A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>")],
        to_points: Annotated[StrictStr, Field(description="A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        max_pairs: Annotated[Optional[StrictInt], Field(description="The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get distance and travel time between each pair of geographic points

        Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param from_points: A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a> (required)
        :type from_points: str
        :param to_points: A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a> (required)
        :type to_points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param max_pairs: The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
        :type max_pairs: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distance_between_pairs_output_format_get_serialize(
            output_format=output_format,
            from_points=from_points,
            to_points=to_points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            max_pairs=max_pairs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def distance_between_pairs_output_format_get_with_http_info(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        from_points: Annotated[StrictStr, Field(description="A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>")],
        to_points: Annotated[StrictStr, Field(description="A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        max_pairs: Annotated[Optional[StrictInt], Field(description="The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get distance and travel time between each pair of geographic points

        Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param from_points: A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a> (required)
        :type from_points: str
        :param to_points: A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a> (required)
        :type to_points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param max_pairs: The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
        :type max_pairs: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distance_between_pairs_output_format_get_serialize(
            output_format=output_format,
            from_points=from_points,
            to_points=to_points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            max_pairs=max_pairs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def distance_between_pairs_output_format_get_without_preload_content(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        from_points: Annotated[StrictStr, Field(description="A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>")],
        to_points: Annotated[StrictStr, Field(description="A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        max_pairs: Annotated[Optional[StrictInt], Field(description="The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get distance and travel time between each pair of geographic points

        Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param from_points: A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a> (required)
        :type from_points: str
        :param to_points: A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a> (required)
        :type to_points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param max_pairs: The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
        :type max_pairs: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distance_between_pairs_output_format_get_serialize(
            output_format=output_format,
            from_points=from_points,
            to_points=to_points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            max_pairs=max_pairs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _distance_between_pairs_output_format_get_serialize(
        self,
        output_format,
        from_points,
        to_points,
        output_srs,
        criteria,
        distance_unit,
        departure,
        correct_side,
        disable,
        route_description,
        max_pairs,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if output_format is not None:
            _path_params['outputFormat'] = output_format
        # process the query parameters
        if from_points is not None:
            
            _query_params.append(('fromPoints', from_points))
            
        if to_points is not None:
            
            _query_params.append(('toPoints', to_points))
            
        if output_srs is not None:
            
            _query_params.append(('outputSRS', output_srs))
            
        if criteria is not None:
            
            _query_params.append(('criteria', criteria))
            
        if distance_unit is not None:
            
            _query_params.append(('distanceUnit', distance_unit))
            
        if departure is not None:
            if isinstance(departure, datetime):
                _query_params.append(
                    (
                        'departure',
                        departure.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('departure', departure))
            
        if correct_side is not None:
            
            _query_params.append(('correctSide', correct_side))
            
        if disable is not None:
            
            _query_params.append(('disable', disable))
            
        if route_description is not None:
            
            _query_params.append(('routeDescription', route_description))
            
        if max_pairs is not None:
            
            _query_params.append(('maxPairs', max_pairs))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/distance/betweenPairs.{outputFormat}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def distance_between_pairs_output_format_post(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        from_points: Annotated[StrictStr, Field(description="A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>")],
        to_points: Annotated[StrictStr, Field(description="A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        max_pairs: Annotated[Optional[StrictInt], Field(description="The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get distance and travel time between each pair of geographic points

        Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param from_points: A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a> (required)
        :type from_points: str
        :param to_points: A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a> (required)
        :type to_points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param max_pairs: The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
        :type max_pairs: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distance_between_pairs_output_format_post_serialize(
            output_format=output_format,
            from_points=from_points,
            to_points=to_points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            max_pairs=max_pairs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def distance_between_pairs_output_format_post_with_http_info(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        from_points: Annotated[StrictStr, Field(description="A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>")],
        to_points: Annotated[StrictStr, Field(description="A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        max_pairs: Annotated[Optional[StrictInt], Field(description="The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get distance and travel time between each pair of geographic points

        Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param from_points: A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a> (required)
        :type from_points: str
        :param to_points: A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a> (required)
        :type to_points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param max_pairs: The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
        :type max_pairs: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distance_between_pairs_output_format_post_serialize(
            output_format=output_format,
            from_points=from_points,
            to_points=to_points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            max_pairs=max_pairs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def distance_between_pairs_output_format_post_without_preload_content(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        from_points: Annotated[StrictStr, Field(description="A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>")],
        to_points: Annotated[StrictStr, Field(description="A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        max_pairs: Annotated[Optional[StrictInt], Field(description="The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get distance and travel time between each pair of geographic points

        Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param from_points: A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a> (required)
        :type from_points: str
        :param to_points: A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a> (required)
        :type to_points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param max_pairs: The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
        :type max_pairs: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distance_between_pairs_output_format_post_serialize(
            output_format=output_format,
            from_points=from_points,
            to_points=to_points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            max_pairs=max_pairs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _distance_between_pairs_output_format_post_serialize(
        self,
        output_format,
        from_points,
        to_points,
        output_srs,
        criteria,
        distance_unit,
        departure,
        correct_side,
        disable,
        route_description,
        max_pairs,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if output_format is not None:
            _path_params['outputFormat'] = output_format
        # process the query parameters
        if from_points is not None:
            
            _query_params.append(('fromPoints', from_points))
            
        if to_points is not None:
            
            _query_params.append(('toPoints', to_points))
            
        if output_srs is not None:
            
            _query_params.append(('outputSRS', output_srs))
            
        if criteria is not None:
            
            _query_params.append(('criteria', criteria))
            
        if distance_unit is not None:
            
            _query_params.append(('distanceUnit', distance_unit))
            
        if departure is not None:
            if isinstance(departure, datetime):
                _query_params.append(
                    (
                        'departure',
                        departure.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('departure', departure))
            
        if correct_side is not None:
            
            _query_params.append(('correctSide', correct_side))
            
        if disable is not None:
            
            _query_params.append(('disable', disable))
            
        if route_description is not None:
            
            _query_params.append(('routeDescription', route_description))
            
        if max_pairs is not None:
            
            _query_params.append(('maxPairs', max_pairs))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/distance/betweenPairs.{outputFormat}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def distance_output_format_get(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        points: Annotated[StrictStr, Field(description="A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        round_trip: Annotated[Optional[StrictBool], Field(description="If true, route ends at start point. Default is false.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get distance and travel time between two geographic points

        Represents the distance and time of the shortest or fastest path between given start and end points.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param points: A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a> (required)
        :type points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param round_trip: If true, route ends at start point. Default is false.
        :type round_trip: bool
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distance_output_format_get_serialize(
            output_format=output_format,
            points=points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            round_trip=round_trip,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def distance_output_format_get_with_http_info(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        points: Annotated[StrictStr, Field(description="A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        round_trip: Annotated[Optional[StrictBool], Field(description="If true, route ends at start point. Default is false.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get distance and travel time between two geographic points

        Represents the distance and time of the shortest or fastest path between given start and end points.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param points: A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a> (required)
        :type points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param round_trip: If true, route ends at start point. Default is false.
        :type round_trip: bool
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distance_output_format_get_serialize(
            output_format=output_format,
            points=points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            round_trip=round_trip,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def distance_output_format_get_without_preload_content(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        points: Annotated[StrictStr, Field(description="A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        round_trip: Annotated[Optional[StrictBool], Field(description="If true, route ends at start point. Default is false.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get distance and travel time between two geographic points

        Represents the distance and time of the shortest or fastest path between given start and end points.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param points: A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a> (required)
        :type points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param round_trip: If true, route ends at start point. Default is false.
        :type round_trip: bool
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distance_output_format_get_serialize(
            output_format=output_format,
            points=points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            round_trip=round_trip,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _distance_output_format_get_serialize(
        self,
        output_format,
        points,
        output_srs,
        criteria,
        distance_unit,
        round_trip,
        departure,
        correct_side,
        disable,
        route_description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if output_format is not None:
            _path_params['outputFormat'] = output_format
        # process the query parameters
        if points is not None:
            
            _query_params.append(('points', points))
            
        if output_srs is not None:
            
            _query_params.append(('outputSRS', output_srs))
            
        if criteria is not None:
            
            _query_params.append(('criteria', criteria))
            
        if distance_unit is not None:
            
            _query_params.append(('distanceUnit', distance_unit))
            
        if round_trip is not None:
            
            _query_params.append(('roundTrip', round_trip))
            
        if departure is not None:
            if isinstance(departure, datetime):
                _query_params.append(
                    (
                        'departure',
                        departure.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('departure', departure))
            
        if correct_side is not None:
            
            _query_params.append(('correctSide', correct_side))
            
        if disable is not None:
            
            _query_params.append(('disable', disable))
            
        if route_description is not None:
            
            _query_params.append(('routeDescription', route_description))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/distance.{outputFormat}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def distance_output_format_post(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        points: Annotated[StrictStr, Field(description="A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        round_trip: Annotated[Optional[StrictBool], Field(description="If true, route ends at start point. Default is false.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get distance and travel time between two geographic points

        Represents the distance and time of the shortest or fastest path between given start and end points.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param points: A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a> (required)
        :type points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param round_trip: If true, route ends at start point. Default is false.
        :type round_trip: bool
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distance_output_format_post_serialize(
            output_format=output_format,
            points=points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            round_trip=round_trip,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def distance_output_format_post_with_http_info(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        points: Annotated[StrictStr, Field(description="A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        round_trip: Annotated[Optional[StrictBool], Field(description="If true, route ends at start point. Default is false.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get distance and travel time between two geographic points

        Represents the distance and time of the shortest or fastest path between given start and end points.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param points: A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a> (required)
        :type points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param round_trip: If true, route ends at start point. Default is false.
        :type round_trip: bool
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distance_output_format_post_serialize(
            output_format=output_format,
            points=points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            round_trip=round_trip,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def distance_output_format_post_without_preload_content(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        points: Annotated[StrictStr, Field(description="A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        round_trip: Annotated[Optional[StrictBool], Field(description="If true, route ends at start point. Default is false.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get distance and travel time between two geographic points

        Represents the distance and time of the shortest or fastest path between given start and end points.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param points: A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a> (required)
        :type points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param round_trip: If true, route ends at start point. Default is false.
        :type round_trip: bool
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._distance_output_format_post_serialize(
            output_format=output_format,
            points=points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            round_trip=round_trip,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _distance_output_format_post_serialize(
        self,
        output_format,
        points,
        output_srs,
        criteria,
        distance_unit,
        round_trip,
        departure,
        correct_side,
        disable,
        route_description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if output_format is not None:
            _path_params['outputFormat'] = output_format
        # process the query parameters
        if points is not None:
            
            _query_params.append(('points', points))
            
        if output_srs is not None:
            
            _query_params.append(('outputSRS', output_srs))
            
        if criteria is not None:
            
            _query_params.append(('criteria', criteria))
            
        if distance_unit is not None:
            
            _query_params.append(('distanceUnit', distance_unit))
            
        if round_trip is not None:
            
            _query_params.append(('roundTrip', round_trip))
            
        if departure is not None:
            if isinstance(departure, datetime):
                _query_params.append(
                    (
                        'departure',
                        departure.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('departure', departure))
            
        if correct_side is not None:
            
            _query_params.append(('correctSide', correct_side))
            
        if disable is not None:
            
            _query_params.append(('disable', disable))
            
        if route_description is not None:
            
            _query_params.append(('routeDescription', route_description))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/distance.{outputFormat}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def truck_distance_between_pairs_output_format_get(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        from_points: Annotated[StrictStr, Field(description="A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>")],
        to_points: Annotated[StrictStr, Field(description="A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        max_pairs: Annotated[Optional[StrictInt], Field(description="The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get distance and travel time between each pair of geographic points for a commercial vehicle

        Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints for a commercial vehicle. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param from_points: A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a> (required)
        :type from_points: str
        :param to_points: A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a> (required)
        :type to_points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param max_pairs: The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
        :type max_pairs: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._truck_distance_between_pairs_output_format_get_serialize(
            output_format=output_format,
            from_points=from_points,
            to_points=to_points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            max_pairs=max_pairs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def truck_distance_between_pairs_output_format_get_with_http_info(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        from_points: Annotated[StrictStr, Field(description="A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>")],
        to_points: Annotated[StrictStr, Field(description="A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        max_pairs: Annotated[Optional[StrictInt], Field(description="The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get distance and travel time between each pair of geographic points for a commercial vehicle

        Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints for a commercial vehicle. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param from_points: A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a> (required)
        :type from_points: str
        :param to_points: A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a> (required)
        :type to_points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param max_pairs: The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
        :type max_pairs: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._truck_distance_between_pairs_output_format_get_serialize(
            output_format=output_format,
            from_points=from_points,
            to_points=to_points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            max_pairs=max_pairs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def truck_distance_between_pairs_output_format_get_without_preload_content(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        from_points: Annotated[StrictStr, Field(description="A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>")],
        to_points: Annotated[StrictStr, Field(description="A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        max_pairs: Annotated[Optional[StrictInt], Field(description="The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get distance and travel time between each pair of geographic points for a commercial vehicle

        Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints for a commercial vehicle. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param from_points: A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a> (required)
        :type from_points: str
        :param to_points: A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a> (required)
        :type to_points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param max_pairs: The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
        :type max_pairs: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._truck_distance_between_pairs_output_format_get_serialize(
            output_format=output_format,
            from_points=from_points,
            to_points=to_points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            max_pairs=max_pairs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _truck_distance_between_pairs_output_format_get_serialize(
        self,
        output_format,
        from_points,
        to_points,
        output_srs,
        criteria,
        distance_unit,
        departure,
        correct_side,
        disable,
        route_description,
        max_pairs,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if output_format is not None:
            _path_params['outputFormat'] = output_format
        # process the query parameters
        if from_points is not None:
            
            _query_params.append(('fromPoints', from_points))
            
        if to_points is not None:
            
            _query_params.append(('toPoints', to_points))
            
        if output_srs is not None:
            
            _query_params.append(('outputSRS', output_srs))
            
        if criteria is not None:
            
            _query_params.append(('criteria', criteria))
            
        if distance_unit is not None:
            
            _query_params.append(('distanceUnit', distance_unit))
            
        if departure is not None:
            if isinstance(departure, datetime):
                _query_params.append(
                    (
                        'departure',
                        departure.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('departure', departure))
            
        if correct_side is not None:
            
            _query_params.append(('correctSide', correct_side))
            
        if disable is not None:
            
            _query_params.append(('disable', disable))
            
        if route_description is not None:
            
            _query_params.append(('routeDescription', route_description))
            
        if max_pairs is not None:
            
            _query_params.append(('maxPairs', max_pairs))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/truck/distance/betweenPairs.{outputFormat}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def truck_distance_between_pairs_output_format_post(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        from_points: Annotated[StrictStr, Field(description="A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>")],
        to_points: Annotated[StrictStr, Field(description="A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        max_pairs: Annotated[Optional[StrictInt], Field(description="The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get distance and travel time between each pair of geographic points

        Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param from_points: A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a> (required)
        :type from_points: str
        :param to_points: A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a> (required)
        :type to_points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param max_pairs: The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
        :type max_pairs: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._truck_distance_between_pairs_output_format_post_serialize(
            output_format=output_format,
            from_points=from_points,
            to_points=to_points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            max_pairs=max_pairs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def truck_distance_between_pairs_output_format_post_with_http_info(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        from_points: Annotated[StrictStr, Field(description="A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>")],
        to_points: Annotated[StrictStr, Field(description="A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        max_pairs: Annotated[Optional[StrictInt], Field(description="The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get distance and travel time between each pair of geographic points

        Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param from_points: A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a> (required)
        :type from_points: str
        :param to_points: A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a> (required)
        :type to_points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param max_pairs: The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
        :type max_pairs: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._truck_distance_between_pairs_output_format_post_serialize(
            output_format=output_format,
            from_points=from_points,
            to_points=to_points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            max_pairs=max_pairs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def truck_distance_between_pairs_output_format_post_without_preload_content(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        from_points: Annotated[StrictStr, Field(description="A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a>")],
        to_points: Annotated[StrictStr, Field(description="A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        max_pairs: Annotated[Optional[StrictInt], Field(description="The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get distance and travel time between each pair of geographic points

        Represents the distance and time of the shortest or fastest paths between all pairs of fromPoints and toPoints. The number of fromPoints times the number of toPoints should not exceed 100 or the request will time out.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param from_points: A comma-separated list of origin points.  See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#fromPoints target='_blank'>fromPoints</a> (required)
        :type from_points: str
        :param to_points: A comma-separated list of destination points. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#toPoints target='_blank'>toPoints</a> (required)
        :type to_points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param max_pairs: The maximum number of pairs to return for each toPoint.  Pairs are ordered by distance/time from fromPoint. For example, given 1 fromPoint, and 10 toPoints, and maxPairs=1 , return the nearest toPoint to the fromPoint. Given 3 fromPoints and 10 toPoints, maxPairs=3 means return the 3 nearest toPoints to each fromPoint.
        :type max_pairs: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._truck_distance_between_pairs_output_format_post_serialize(
            output_format=output_format,
            from_points=from_points,
            to_points=to_points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            max_pairs=max_pairs,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _truck_distance_between_pairs_output_format_post_serialize(
        self,
        output_format,
        from_points,
        to_points,
        output_srs,
        criteria,
        distance_unit,
        departure,
        correct_side,
        disable,
        route_description,
        max_pairs,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if output_format is not None:
            _path_params['outputFormat'] = output_format
        # process the query parameters
        if from_points is not None:
            
            _query_params.append(('fromPoints', from_points))
            
        if to_points is not None:
            
            _query_params.append(('toPoints', to_points))
            
        if output_srs is not None:
            
            _query_params.append(('outputSRS', output_srs))
            
        if criteria is not None:
            
            _query_params.append(('criteria', criteria))
            
        if distance_unit is not None:
            
            _query_params.append(('distanceUnit', distance_unit))
            
        if departure is not None:
            if isinstance(departure, datetime):
                _query_params.append(
                    (
                        'departure',
                        departure.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('departure', departure))
            
        if correct_side is not None:
            
            _query_params.append(('correctSide', correct_side))
            
        if disable is not None:
            
            _query_params.append(('disable', disable))
            
        if route_description is not None:
            
            _query_params.append(('routeDescription', route_description))
            
        if max_pairs is not None:
            
            _query_params.append(('maxPairs', max_pairs))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/truck/distance/betweenPairs.{outputFormat}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def truck_distance_output_format_get(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        points: Annotated[StrictStr, Field(description="A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        round_trip: Annotated[Optional[StrictBool], Field(description="If true, route ends at start point. Default is false.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        truck_route_multiplier: Annotated[Optional[StrictInt], Field(description="The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get distance and travel time between two geographic points for a commercial vehicle

        Represents the distance and time of the shortest or fastest path between given start and end points.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param points: A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a> (required)
        :type points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param round_trip: If true, route ends at start point. Default is false.
        :type round_trip: bool
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param truck_route_multiplier: The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
        :type truck_route_multiplier: int
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._truck_distance_output_format_get_serialize(
            output_format=output_format,
            points=points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            round_trip=round_trip,
            departure=departure,
            correct_side=correct_side,
            truck_route_multiplier=truck_route_multiplier,
            disable=disable,
            route_description=route_description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def truck_distance_output_format_get_with_http_info(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        points: Annotated[StrictStr, Field(description="A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        round_trip: Annotated[Optional[StrictBool], Field(description="If true, route ends at start point. Default is false.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        truck_route_multiplier: Annotated[Optional[StrictInt], Field(description="The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get distance and travel time between two geographic points for a commercial vehicle

        Represents the distance and time of the shortest or fastest path between given start and end points.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param points: A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a> (required)
        :type points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param round_trip: If true, route ends at start point. Default is false.
        :type round_trip: bool
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param truck_route_multiplier: The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
        :type truck_route_multiplier: int
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._truck_distance_output_format_get_serialize(
            output_format=output_format,
            points=points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            round_trip=round_trip,
            departure=departure,
            correct_side=correct_side,
            truck_route_multiplier=truck_route_multiplier,
            disable=disable,
            route_description=route_description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def truck_distance_output_format_get_without_preload_content(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        points: Annotated[StrictStr, Field(description="A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        round_trip: Annotated[Optional[StrictBool], Field(description="If true, route ends at start point. Default is false.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        truck_route_multiplier: Annotated[Optional[StrictInt], Field(description="The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get distance and travel time between two geographic points for a commercial vehicle

        Represents the distance and time of the shortest or fastest path between given start and end points.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param points: A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a> (required)
        :type points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param round_trip: If true, route ends at start point. Default is false.
        :type round_trip: bool
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param truck_route_multiplier: The truck route multiplier value is used to multiply the cost of using roads that are not truck routes.
        :type truck_route_multiplier: int
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._truck_distance_output_format_get_serialize(
            output_format=output_format,
            points=points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            round_trip=round_trip,
            departure=departure,
            correct_side=correct_side,
            truck_route_multiplier=truck_route_multiplier,
            disable=disable,
            route_description=route_description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _truck_distance_output_format_get_serialize(
        self,
        output_format,
        points,
        output_srs,
        criteria,
        distance_unit,
        round_trip,
        departure,
        correct_side,
        truck_route_multiplier,
        disable,
        route_description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if output_format is not None:
            _path_params['outputFormat'] = output_format
        # process the query parameters
        if points is not None:
            
            _query_params.append(('points', points))
            
        if output_srs is not None:
            
            _query_params.append(('outputSRS', output_srs))
            
        if criteria is not None:
            
            _query_params.append(('criteria', criteria))
            
        if distance_unit is not None:
            
            _query_params.append(('distanceUnit', distance_unit))
            
        if round_trip is not None:
            
            _query_params.append(('roundTrip', round_trip))
            
        if departure is not None:
            if isinstance(departure, datetime):
                _query_params.append(
                    (
                        'departure',
                        departure.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('departure', departure))
            
        if correct_side is not None:
            
            _query_params.append(('correctSide', correct_side))
            
        if truck_route_multiplier is not None:
            
            _query_params.append(('truckRouteMultiplier', truck_route_multiplier))
            
        if disable is not None:
            
            _query_params.append(('disable', disable))
            
        if route_description is not None:
            
            _query_params.append(('routeDescription', route_description))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/truck/distance.{outputFormat}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def truck_distance_output_format_post(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        points: Annotated[StrictStr, Field(description="A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        round_trip: Annotated[Optional[StrictBool], Field(description="If true, route ends at start point. Default is false.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Get distance and travel time between two geographic points

        Represents the distance and time of the shortest or fastest path between given start and end points.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param points: A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a> (required)
        :type points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param round_trip: If true, route ends at start point. Default is false.
        :type round_trip: bool
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._truck_distance_output_format_post_serialize(
            output_format=output_format,
            points=points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            round_trip=round_trip,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def truck_distance_output_format_post_with_http_info(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        points: Annotated[StrictStr, Field(description="A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        round_trip: Annotated[Optional[StrictBool], Field(description="If true, route ends at start point. Default is false.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Get distance and travel time between two geographic points

        Represents the distance and time of the shortest or fastest path between given start and end points.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param points: A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a> (required)
        :type points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param round_trip: If true, route ends at start point. Default is false.
        :type round_trip: bool
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._truck_distance_output_format_post_serialize(
            output_format=output_format,
            points=points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            round_trip=round_trip,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def truck_distance_output_format_post_without_preload_content(
        self,
        output_format: Annotated[StrictStr, Field(description="Format of representation")],
        points: Annotated[StrictStr, Field(description="A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a>")],
        output_srs: Annotated[Optional[StrictInt], Field(description="The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>")] = None,
        criteria: Annotated[Optional[StrictStr], Field(description="Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.")] = None,
        distance_unit: Annotated[Optional[StrictStr], Field(description="distance unit of measure (e.g., km, mi). Default is km.")] = None,
        round_trip: Annotated[Optional[StrictBool], Field(description="If true, route ends at start point. Default is false.")] = None,
        departure: Annotated[Optional[datetime], Field(description="departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled")] = None,
        correct_side: Annotated[Optional[StrictBool], Field(description="If true, route starts and ends on same side of road as start and end points.Default is false.")] = None,
        disable: Annotated[Optional[StrictStr], Field(description="A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)")] = None,
        route_description: Annotated[Optional[StrictStr], Field(description="Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get distance and travel time between two geographic points

        Represents the distance and time of the shortest or fastest path between given start and end points.

        :param output_format: Format of representation (required)
        :type output_format: str
        :param points: A list of any number of route points in start to end order. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#points target='_blank'>points</a> (required)
        :type points: str
        :param output_srs: The EPSG code of the spatial reference system (SRS) to use for output geometries. See <a href=https://github.com/bcgov/ols-router/blob/gh-pages/glossary.md#outputSRS target=\"_blank\">outputSRS</a>
        :type output_srs: int
        :param criteria: Routing criteria to optimize (e.g., shortest, fastest). Default is shortest.
        :type criteria: str
        :param distance_unit: distance unit of measure (e.g., km, mi). Default is km.
        :type distance_unit: str
        :param round_trip: If true, route ends at start point. Default is false.
        :type round_trip: bool
        :param departure: departure date and time in internet timestamp notation as defined in RFC 3339, section 5.6 (e.g., 2019-02-28T11:36:00-08:00);<br> Ignored if time-dependency modules are disabled
        :type departure: datetime
        :param correct_side: If true, route starts and ends on same side of road as start and end points.Default is false.
        :type correct_side: bool
        :param disable: A comma-separated list of time-related modules to disable (e.g., sc,tf,ev,td).<br><br>Module names include:<br> sc – ferry schedules; disabled by default; disabled by default and only suitable for demos<br>tf – historic traffic congestion; disabled by default and only suitable for demos<br>ev – road events; disabled by default and only suitable for demos<br>td – time-dependency; disabling this disables sc, tf, and ev modules<br>tr – turn restrictions; if td is disabled, time-dependent turn restrictions are ignored<br>tc - turn costs (e.g., left turns take longer than right turns)
        :type disable: str
        :param route_description: Route description (e.g., Shortest route from 1002 Johnson St, Victoria to 1105 Royal Ave,New Westminster)
        :type route_description: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._truck_distance_output_format_post_serialize(
            output_format=output_format,
            points=points,
            output_srs=output_srs,
            criteria=criteria,
            distance_unit=distance_unit,
            round_trip=round_trip,
            departure=departure,
            correct_side=correct_side,
            disable=disable,
            route_description=route_description,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _truck_distance_output_format_post_serialize(
        self,
        output_format,
        points,
        output_srs,
        criteria,
        distance_unit,
        round_trip,
        departure,
        correct_side,
        disable,
        route_description,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if output_format is not None:
            _path_params['outputFormat'] = output_format
        # process the query parameters
        if points is not None:
            
            _query_params.append(('points', points))
            
        if output_srs is not None:
            
            _query_params.append(('outputSRS', output_srs))
            
        if criteria is not None:
            
            _query_params.append(('criteria', criteria))
            
        if distance_unit is not None:
            
            _query_params.append(('distanceUnit', distance_unit))
            
        if round_trip is not None:
            
            _query_params.append(('roundTrip', round_trip))
            
        if departure is not None:
            if isinstance(departure, datetime):
                _query_params.append(
                    (
                        'departure',
                        departure.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('departure', departure))
            
        if correct_side is not None:
            
            _query_params.append(('correctSide', correct_side))
            
        if disable is not None:
            
            _query_params.append(('disable', disable))
            
        if route_description is not None:
            
            _query_params.append(('routeDescription', route_description))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'apikey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/truck/distance.{outputFormat}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


