# coding: utf-8

"""
    sms77.io API

    sms77.io Swagger API. Get your API-Key now at sms77.io.

    The version of the OpenAPI document: 1.0.0
    Contact: support@sms77.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.analytics200_response import Analytics200Response

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class AnalyticsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def analytics(
        self,
        start: Annotated[Optional[StrictStr], Field(description="Start date of the statistics in the format YYYY-MM-DD. By default, the date of 30 days ago is set.")] = None,
        end: Annotated[Optional[StrictStr], Field(description="End date of the statistics in the format YYYY-MM-DD. By default, the current day.")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Shows only data of a specific label.")] = None,
        subaccounts: Annotated[Optional[StrictStr], Field(description="Receive the data only for the main account, all your (sub-)accounts or only for specific subaccounts.")] = None,
        group_by: Annotated[Optional[StrictStr], Field(description="Defines the grouping of the data.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Analytics200Response:
        """analytics


        :param start: Start date of the statistics in the format YYYY-MM-DD. By default, the date of 30 days ago is set.
        :type start: str
        :param end: End date of the statistics in the format YYYY-MM-DD. By default, the current day.
        :type end: str
        :param label: Shows only data of a specific label.
        :type label: str
        :param subaccounts: Receive the data only for the main account, all your (sub-)accounts or only for specific subaccounts.
        :type subaccounts: str
        :param group_by: Defines the grouping of the data.
        :type group_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_serialize(
            start=start,
            end=end,
            label=label,
            subaccounts=subaccounts,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Analytics200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def analytics_with_http_info(
        self,
        start: Annotated[Optional[StrictStr], Field(description="Start date of the statistics in the format YYYY-MM-DD. By default, the date of 30 days ago is set.")] = None,
        end: Annotated[Optional[StrictStr], Field(description="End date of the statistics in the format YYYY-MM-DD. By default, the current day.")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Shows only data of a specific label.")] = None,
        subaccounts: Annotated[Optional[StrictStr], Field(description="Receive the data only for the main account, all your (sub-)accounts or only for specific subaccounts.")] = None,
        group_by: Annotated[Optional[StrictStr], Field(description="Defines the grouping of the data.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Analytics200Response]:
        """analytics


        :param start: Start date of the statistics in the format YYYY-MM-DD. By default, the date of 30 days ago is set.
        :type start: str
        :param end: End date of the statistics in the format YYYY-MM-DD. By default, the current day.
        :type end: str
        :param label: Shows only data of a specific label.
        :type label: str
        :param subaccounts: Receive the data only for the main account, all your (sub-)accounts or only for specific subaccounts.
        :type subaccounts: str
        :param group_by: Defines the grouping of the data.
        :type group_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_serialize(
            start=start,
            end=end,
            label=label,
            subaccounts=subaccounts,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Analytics200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def analytics_without_preload_content(
        self,
        start: Annotated[Optional[StrictStr], Field(description="Start date of the statistics in the format YYYY-MM-DD. By default, the date of 30 days ago is set.")] = None,
        end: Annotated[Optional[StrictStr], Field(description="End date of the statistics in the format YYYY-MM-DD. By default, the current day.")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Shows only data of a specific label.")] = None,
        subaccounts: Annotated[Optional[StrictStr], Field(description="Receive the data only for the main account, all your (sub-)accounts or only for specific subaccounts.")] = None,
        group_by: Annotated[Optional[StrictStr], Field(description="Defines the grouping of the data.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """analytics


        :param start: Start date of the statistics in the format YYYY-MM-DD. By default, the date of 30 days ago is set.
        :type start: str
        :param end: End date of the statistics in the format YYYY-MM-DD. By default, the current day.
        :type end: str
        :param label: Shows only data of a specific label.
        :type label: str
        :param subaccounts: Receive the data only for the main account, all your (sub-)accounts or only for specific subaccounts.
        :type subaccounts: str
        :param group_by: Defines the grouping of the data.
        :type group_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._analytics_serialize(
            start=start,
            end=end,
            label=label,
            subaccounts=subaccounts,
            group_by=group_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Analytics200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _analytics_serialize(
        self,
        start,
        end,
        label,
        subaccounts,
        group_by,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if start is not None:
            
            _query_params.append(('start', start))
            
        if end is not None:
            
            _query_params.append(('end', end))
            
        if label is not None:
            
            _query_params.append(('label', label))
            
        if subaccounts is not None:
            
            _query_params.append(('subaccounts', subaccounts))
            
        if group_by is not None:
            
            _query_params.append(('group_by', group_by))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/analytics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


