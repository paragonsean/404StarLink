# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseSettingsEnterpriseSmtp(BaseModel):
    """
    EnterpriseSettingsEnterpriseSmtp
    """ # noqa: E501
    address: Optional[StrictStr] = None
    authentication: Optional[StrictStr] = None
    discard_to_noreply_address: Optional[StrictBool] = Field(default=None, alias="discard-to-noreply-address")
    domain: Optional[StrictStr] = None
    enable_starttls_auto: Optional[StrictBool] = None
    enabled: Optional[StrictBool] = None
    noreply_address: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    port: Optional[StrictStr] = None
    support_address: Optional[StrictStr] = None
    support_address_type: Optional[StrictStr] = None
    user_name: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["address", "authentication", "discard-to-noreply-address", "domain", "enable_starttls_auto", "enabled", "noreply_address", "password", "port", "support_address", "support_address_type", "user_name", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseSettingsEnterpriseSmtp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseSettingsEnterpriseSmtp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "authentication": obj.get("authentication"),
            "discard-to-noreply-address": obj.get("discard-to-noreply-address"),
            "domain": obj.get("domain"),
            "enable_starttls_auto": obj.get("enable_starttls_auto"),
            "enabled": obj.get("enabled"),
            "noreply_address": obj.get("noreply_address"),
            "password": obj.get("password"),
            "port": obj.get("port"),
            "support_address": obj.get("support_address"),
            "support_address_type": obj.get("support_address_type"),
            "user_name": obj.get("user_name"),
            "username": obj.get("username")
        })
        return _obj


