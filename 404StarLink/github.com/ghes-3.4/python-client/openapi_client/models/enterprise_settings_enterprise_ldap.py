# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_settings_enterprise_ldap_profile import EnterpriseSettingsEnterpriseLdapProfile
from openapi_client.models.enterprise_settings_enterprise_ldap_reconciliation import EnterpriseSettingsEnterpriseLdapReconciliation
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseSettingsEnterpriseLdap(BaseModel):
    """
    EnterpriseSettingsEnterpriseLdap
    """ # noqa: E501
    admin_group: Optional[StrictStr] = None
    base: Optional[List[Any]] = None
    bind_dn: Optional[StrictStr] = None
    host: Optional[StrictStr] = None
    method: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    port: Optional[StrictInt] = None
    posix_support: Optional[StrictBool] = None
    profile: Optional[EnterpriseSettingsEnterpriseLdapProfile] = None
    reconciliation: Optional[EnterpriseSettingsEnterpriseLdapReconciliation] = None
    recursive_group_search: Optional[StrictBool] = None
    search_strategy: Optional[StrictStr] = None
    sync_enabled: Optional[StrictBool] = None
    team_sync_interval: Optional[StrictInt] = None
    uid: Optional[StrictStr] = None
    user_groups: Optional[List[Any]] = None
    user_sync_emails: Optional[StrictBool] = None
    user_sync_interval: Optional[StrictInt] = None
    user_sync_keys: Optional[StrictBool] = None
    virtual_attribute_enabled: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["admin_group", "base", "bind_dn", "host", "method", "password", "port", "posix_support", "profile", "reconciliation", "recursive_group_search", "search_strategy", "sync_enabled", "team_sync_interval", "uid", "user_groups", "user_sync_emails", "user_sync_interval", "user_sync_keys", "virtual_attribute_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseSettingsEnterpriseLdap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict['profile'] = self.profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reconciliation
        if self.reconciliation:
            _dict['reconciliation'] = self.reconciliation.to_dict()
        # set to None if admin_group (nullable) is None
        # and model_fields_set contains the field
        if self.admin_group is None and "admin_group" in self.model_fields_set:
            _dict['admin_group'] = None

        # set to None if bind_dn (nullable) is None
        # and model_fields_set contains the field
        if self.bind_dn is None and "bind_dn" in self.model_fields_set:
            _dict['bind_dn'] = None

        # set to None if host (nullable) is None
        # and model_fields_set contains the field
        if self.host is None and "host" in self.model_fields_set:
            _dict['host'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if uid (nullable) is None
        # and model_fields_set contains the field
        if self.uid is None and "uid" in self.model_fields_set:
            _dict['uid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseSettingsEnterpriseLdap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admin_group": obj.get("admin_group"),
            "base": obj.get("base"),
            "bind_dn": obj.get("bind_dn"),
            "host": obj.get("host"),
            "method": obj.get("method"),
            "password": obj.get("password"),
            "port": obj.get("port"),
            "posix_support": obj.get("posix_support"),
            "profile": EnterpriseSettingsEnterpriseLdapProfile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "reconciliation": EnterpriseSettingsEnterpriseLdapReconciliation.from_dict(obj["reconciliation"]) if obj.get("reconciliation") is not None else None,
            "recursive_group_search": obj.get("recursive_group_search"),
            "search_strategy": obj.get("search_strategy"),
            "sync_enabled": obj.get("sync_enabled"),
            "team_sync_interval": obj.get("team_sync_interval"),
            "uid": obj.get("uid"),
            "user_groups": obj.get("user_groups"),
            "user_sync_emails": obj.get("user_sync_emails"),
            "user_sync_interval": obj.get("user_sync_interval"),
            "user_sync_keys": obj.get("user_sync_keys"),
            "virtual_attribute_enabled": obj.get("virtual_attribute_enabled")
        })
        return _obj


