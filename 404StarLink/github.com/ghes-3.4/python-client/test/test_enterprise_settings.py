# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.enterprise_settings import EnterpriseSettings

class TestEnterpriseSettings(unittest.TestCase):
    """EnterpriseSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EnterpriseSettings:
        """Test EnterpriseSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EnterpriseSettings`
        """
        model = EnterpriseSettings()
        if include_optional:
            return EnterpriseSettings(
                enterprise = openapi_client.models.enterprise_settings_enterprise.enterprise_settings_enterprise(
                    admin_password = '', 
                    assets = '', 
                    auth_mode = '', 
                    avatar = openapi_client.models.enterprise_settings_enterprise_avatar.enterprise_settings_enterprise_avatar(
                        enabled = True, 
                        uri = '', ), 
                    cas = openapi_client.models.enterprise_settings_enterprise_cas.enterprise_settings_enterprise_cas(
                        url = '', ), 
                    collectd = openapi_client.models.enterprise_settings_enterprise_collectd.enterprise_settings_enterprise_collectd(
                        enabled = True, 
                        encryption = '', 
                        password = '', 
                        port = 56, 
                        server = '', 
                        username = '', ), 
                    configuration_id = 56, 
                    configuration_run_count = 56, 
                    customer = openapi_client.models.enterprise_settings_enterprise_customer.enterprise_settings_enterprise_customer(
                        email = '', 
                        name = '', 
                        public_key_data = '', 
                        secret_key_data = '', 
                        uuid = '', ), 
                    expire_sessions = True, 
                    github_hostname = '', 
                    github_oauth = openapi_client.models.enterprise_settings_enterprise_github_oauth.enterprise_settings_enterprise_github_oauth(
                        client_id = '', 
                        client_secret = '', 
                        organization_name = '', 
                        organization_team = '', ), 
                    github_ssl = openapi_client.models.enterprise_settings_enterprise_github_ssl.enterprise_settings_enterprise_github_ssl(
                        cert = '', 
                        enabled = True, 
                        key = '', ), 
                    http_proxy = '', 
                    identicons_host = '', 
                    ldap = openapi_client.models.enterprise_settings_enterprise_ldap.enterprise_settings_enterprise_ldap(
                        admin_group = '', 
                        base = [
                            null
                            ], 
                        bind_dn = '', 
                        host = '', 
                        method = '', 
                        password = '', 
                        port = 56, 
                        posix_support = True, 
                        profile = openapi_client.models.enterprise_settings_enterprise_ldap_profile.enterprise_settings_enterprise_ldap_profile(
                            key = '', 
                            mail = '', 
                            name = '', 
                            uid = '', ), 
                        reconciliation = openapi_client.models.enterprise_settings_enterprise_ldap_reconciliation.enterprise_settings_enterprise_ldap_reconciliation(
                            org = '', 
                            user = '', ), 
                        recursive_group_search = True, 
                        search_strategy = '', 
                        sync_enabled = True, 
                        team_sync_interval = 56, 
                        uid = '', 
                        user_groups = [
                            null
                            ], 
                        user_sync_emails = True, 
                        user_sync_interval = 56, 
                        user_sync_keys = True, 
                        virtual_attribute_enabled = True, ), 
                    license = openapi_client.models.enterprise_settings_enterprise_license.enterprise_settings_enterprise_license(
                        cluster_support = True, 
                        evaluation = True, 
                        expire_at = '', 
                        perpetual = True, 
                        seats = 56, 
                        ssh_allowed = True, 
                        support_key = '', 
                        unlimited_seating = True, ), 
                    load_balancer = '', 
                    mapping = openapi_client.models.enterprise_settings_enterprise_mapping.enterprise_settings_enterprise_mapping(
                        basemap = '', 
                        enabled = True, 
                        tileserver = '', 
                        token = '', ), 
                    ntp = openapi_client.models.enterprise_settings_enterprise_ntp.enterprise_settings_enterprise_ntp(
                        primary_server = '', 
                        secondary_server = '', ), 
                    pages = openapi_client.models.branch_protection_allow_deletions.branch_protection_allow_deletions(
                        enabled = True, ), 
                    private_mode = True, 
                    public_pages = True, 
                    saml = openapi_client.models.enterprise_settings_enterprise_saml.enterprise_settings_enterprise_saml(
                        certificate = '', 
                        certificate_path = '', 
                        disable_admin_demote = True, 
                        idp_initiated_sso = True, 
                        issuer = '', 
                        sso_url = '', ), 
                    signup_enabled = True, 
                    smtp = openapi_client.models.enterprise_settings_enterprise_smtp.enterprise_settings_enterprise_smtp(
                        address = '', 
                        authentication = '', 
                        discard_to_noreply_address = True, 
                        domain = '', 
                        enable_starttls_auto = True, 
                        enabled = True, 
                        noreply_address = '', 
                        password = '', 
                        port = '', 
                        support_address = '', 
                        support_address_type = '', 
                        user_name = '', 
                        username = '', ), 
                    snmp = openapi_client.models.enterprise_settings_enterprise_snmp.enterprise_settings_enterprise_snmp(
                        community = '', 
                        enabled = True, ), 
                    subdomain_isolation = True, 
                    syslog = openapi_client.models.enterprise_settings_enterprise_syslog.enterprise_settings_enterprise_syslog(
                        enabled = True, 
                        protocol_name = '', 
                        server = '', ), 
                    timezone = '', ),
                run_list = [
                    ''
                    ]
            )
        else:
            return EnterpriseSettings(
        )
        """

    def testEnterpriseSettings(self):
        """Test EnterpriseSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
