# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.enterprise_admin_list_selected_organizations_enabled_github_actions_enterprise200_response import EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response

class TestEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response(unittest.TestCase):
    """EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response:
        """Test EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response`
        """
        model = EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response()
        if include_optional:
            return EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response(
                organizations = [
                    openapi_client.models.organization_simple.Organization Simple(
                        avatar_url = 'https://github.com/images/error/octocat_happy.gif', 
                        description = 'A great organization', 
                        events_url = 'https://api.github.com/orgs/github/events', 
                        hooks_url = 'https://api.github.com/orgs/github/hooks', 
                        id = 1, 
                        issues_url = 'https://api.github.com/orgs/github/issues', 
                        login = 'github', 
                        members_url = 'https://api.github.com/orgs/github/members{/member}', 
                        node_id = 'MDEyOk9yZ2FuaXphdGlvbjE=', 
                        public_members_url = 'https://api.github.com/orgs/github/public_members{/member}', 
                        repos_url = 'https://api.github.com/orgs/github/repos', 
                        url = 'https://api.github.com/orgs/github', )
                    ],
                total_count = 1.337
            )
        else:
            return EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response(
                organizations = [
                    openapi_client.models.organization_simple.Organization Simple(
                        avatar_url = 'https://github.com/images/error/octocat_happy.gif', 
                        description = 'A great organization', 
                        events_url = 'https://api.github.com/orgs/github/events', 
                        hooks_url = 'https://api.github.com/orgs/github/hooks', 
                        id = 1, 
                        issues_url = 'https://api.github.com/orgs/github/issues', 
                        login = 'github', 
                        members_url = 'https://api.github.com/orgs/github/members{/member}', 
                        node_id = 'MDEyOk9yZ2FuaXphdGlvbjE=', 
                        public_members_url = 'https://api.github.com/orgs/github/public_members{/member}', 
                        repos_url = 'https://api.github.com/orgs/github/repos', 
                        url = 'https://api.github.com/orgs/github', )
                    ],
                total_count = 1.337,
        )
        """

    def testEnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response(self):
        """Test EnterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
