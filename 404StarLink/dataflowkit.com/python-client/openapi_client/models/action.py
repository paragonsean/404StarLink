# coding: utf-8

"""
    Dataflow Kit Web Scraper

    Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from openapi_client.models.click import Click
from openapi_client.models.double_click import DoubleClick
from openapi_client.models.execute import Execute
from openapi_client.models.getcontent import Getcontent
from openapi_client.models.input import Input
from openapi_client.models.jsclick import Jsclick
from openapi_client.models.pause import Pause
from openapi_client.models.scroll import Scroll
from openapi_client.models.send_keys import SendKeys
from openapi_client.models.submit import Submit
from openapi_client.models.wait_not_visible import WaitNotVisible
from openapi_client.models.wait_visible import WaitVisible
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

ACTION_ANY_OF_SCHEMAS = ["Click", "DoubleClick", "Execute", "Getcontent", "Input", "Jsclick", "LoopTimes", "Pause", "Scroll", "SendKeys", "Submit", "WaitNotVisible", "WaitVisible"]

class Action(BaseModel):
    """
    Action
    """

    # data type: Input
    anyof_schema_1_validator: Optional[Input] = None
    # data type: SendKeys
    anyof_schema_2_validator: Optional[SendKeys] = None
    # data type: Click
    anyof_schema_3_validator: Optional[Click] = None
    # data type: DoubleClick
    anyof_schema_4_validator: Optional[DoubleClick] = None
    # data type: Jsclick
    anyof_schema_5_validator: Optional[Jsclick] = None
    # data type: Submit
    anyof_schema_6_validator: Optional[Submit] = None
    # data type: WaitVisible
    anyof_schema_7_validator: Optional[WaitVisible] = None
    # data type: WaitNotVisible
    anyof_schema_8_validator: Optional[WaitNotVisible] = None
    # data type: Pause
    anyof_schema_9_validator: Optional[Pause] = None
    # data type: Execute
    anyof_schema_10_validator: Optional[Execute] = None
    # data type: LoopTimes
    anyof_schema_11_validator: Optional[LoopTimes] = None
    # data type: Getcontent
    anyof_schema_12_validator: Optional[Getcontent] = None
    # data type: Scroll
    anyof_schema_13_validator: Optional[Scroll] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[Click, DoubleClick, Execute, Getcontent, Input, Jsclick, LoopTimes, Pause, Scroll, SendKeys, Submit, WaitNotVisible, WaitVisible]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "Click", "DoubleClick", "Execute", "Getcontent", "Input", "Jsclick", "LoopTimes", "Pause", "Scroll", "SendKeys", "Submit", "WaitNotVisible", "WaitVisible" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = Action.model_construct()
        error_messages = []
        # validate data type: Input
        if not isinstance(v, Input):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Input`")
        else:
            return v

        # validate data type: SendKeys
        if not isinstance(v, SendKeys):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SendKeys`")
        else:
            return v

        # validate data type: Click
        if not isinstance(v, Click):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Click`")
        else:
            return v

        # validate data type: DoubleClick
        if not isinstance(v, DoubleClick):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DoubleClick`")
        else:
            return v

        # validate data type: Jsclick
        if not isinstance(v, Jsclick):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Jsclick`")
        else:
            return v

        # validate data type: Submit
        if not isinstance(v, Submit):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Submit`")
        else:
            return v

        # validate data type: WaitVisible
        if not isinstance(v, WaitVisible):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WaitVisible`")
        else:
            return v

        # validate data type: WaitNotVisible
        if not isinstance(v, WaitNotVisible):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WaitNotVisible`")
        else:
            return v

        # validate data type: Pause
        if not isinstance(v, Pause):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Pause`")
        else:
            return v

        # validate data type: Execute
        if not isinstance(v, Execute):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Execute`")
        else:
            return v

        # validate data type: LoopTimes
        if not isinstance(v, LoopTimes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LoopTimes`")
        else:
            return v

        # validate data type: Getcontent
        if not isinstance(v, Getcontent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Getcontent`")
        else:
            return v

        # validate data type: Scroll
        if not isinstance(v, Scroll):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Scroll`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in Action with anyOf schemas: Click, DoubleClick, Execute, Getcontent, Input, Jsclick, LoopTimes, Pause, Scroll, SendKeys, Submit, WaitNotVisible, WaitVisible. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[Input] = None
        try:
            instance.actual_instance = Input.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[SendKeys] = None
        try:
            instance.actual_instance = SendKeys.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[Click] = None
        try:
            instance.actual_instance = Click.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[DoubleClick] = None
        try:
            instance.actual_instance = DoubleClick.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[Jsclick] = None
        try:
            instance.actual_instance = Jsclick.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[Submit] = None
        try:
            instance.actual_instance = Submit.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[WaitVisible] = None
        try:
            instance.actual_instance = WaitVisible.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[WaitNotVisible] = None
        try:
            instance.actual_instance = WaitNotVisible.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[Pause] = None
        try:
            instance.actual_instance = Pause.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[Execute] = None
        try:
            instance.actual_instance = Execute.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[LoopTimes] = None
        try:
            instance.actual_instance = LoopTimes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[Getcontent] = None
        try:
            instance.actual_instance = Getcontent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[Scroll] = None
        try:
            instance.actual_instance = Scroll.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Action with anyOf schemas: Click, DoubleClick, Execute, Getcontent, Input, Jsclick, LoopTimes, Pause, Scroll, SendKeys, Submit, WaitNotVisible, WaitVisible. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], Click, DoubleClick, Execute, Getcontent, Input, Jsclick, LoopTimes, Pause, Scroll, SendKeys, Submit, WaitNotVisible, WaitVisible]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from openapi_client.models.loop_times import LoopTimes
# TODO: Rewrite to not use raise_errors
Action.model_rebuild(raise_errors=False)

