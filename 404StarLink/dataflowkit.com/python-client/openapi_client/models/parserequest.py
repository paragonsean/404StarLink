# coding: utf-8

"""
    Dataflow Kit Web Scraper

    Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.fetchrequest import Fetchrequest
from openapi_client.models.paginator import Paginator
from typing import Optional, Set
from typing_extensions import Self

class Parserequest(BaseModel):
    """
    Parserequest
    """ # noqa: E501
    common_parent: Optional[StrictStr] = Field(default=None, description="Specifies common ancestor block for a set of fields used to extract data from a web page. _(CSS Selector)_", alias="commonParent")
    fields: List[ModelField] = Field(description="Define a  set of fields used to extract data from a web page. A Field represents a given chunk of extracted data from every block on each page. ")
    format: StrictStr = Field(description="Extracted data is returned either in CSV, MS Excel, JSON, JSON(Lines) or XML format.")
    name: StrictStr = Field(description="Collection name.")
    paginator: Optional[Paginator] = None
    path: Optional[StrictBool] = Field(default=False, description="Path is a special parameter specifying navigation pages only. It collects information from detailed pages. No results from the current page return. Defaults to false.")
    request: Optional[Fetchrequest] = None
    __properties: ClassVar[List[str]] = ["commonParent", "fields", "format", "name", "paginator", "path", "request"]

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['csv', 'json', 'jsonl', 'excel', 'xml']):
            raise ValueError("must be one of enum values ('csv', 'json', 'jsonl', 'excel', 'xml')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Parserequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of paginator
        if self.paginator:
            _dict['paginator'] = self.paginator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Parserequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonParent": obj.get("commonParent"),
            "fields": [ModelField.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "format": obj.get("format"),
            "name": obj.get("name"),
            "paginator": Paginator.from_dict(obj["paginator"]) if obj.get("paginator") is not None else None,
            "path": obj.get("path") if obj.get("path") is not None else False,
            "request": Fetchrequest.from_dict(obj["request"]) if obj.get("request") is not None else None
        })
        return _obj

from openapi_client.models.model_field import ModelField
# TODO: Rewrite to not use raise_errors
Parserequest.model_rebuild(raise_errors=False)

