/*
 * AWS SecurityHub
 * <p>Security Hub provides you with a comprehensive view of the security state of your Amazon Web Services environment and resources. It also provides you with the readiness status of your environment based on controls from supported security standards. Security Hub collects security data from Amazon Web Services accounts, services, and integrated third-party products and helps you analyze security trends in your environment to identify the highest priority security issues. For more information about Security Hub, see the <a href=\"https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html\">Security HubUser Guide</a>.</p> <p>When you use operations in the Security Hub API, the requests are executed only in the Amazon Web Services Region that is currently active or in the specific Amazon Web Services Region that you specify in your request. Any configuration or settings change that results from the operation is applied only to that Region. To make the same change in other Regions, run the same command for each Region in which you want to apply the change.</p> <p>For example, if your Region is set to <code>us-west-2</code>, when you use <code>CreateMembers</code> to add a member account to Security Hub, the association of the member account with the administrator account is created only in the <code>us-west-2</code> Region. Security Hub must be enabled for the member account in the same Region that the invitation was sent from.</p> <p>The following throttling limits apply to using Security Hub API operations.</p> <ul> <li> <p> <code>BatchEnableStandards</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 1 request per second.</p> </li> <li> <p> <code>GetFindings</code> - <code>RateLimit</code> of 3 requests per second. <code>BurstLimit</code> of 6 requests per second.</p> </li> <li> <p> <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>UpdateStandardsControl</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 5 requests per second.</p> </li> <li> <p>All other operations - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AwsCloudWatchAlarmDetails
 */
public class AwsCloudWatchAlarmDetailsTest {
    private final AwsCloudWatchAlarmDetails model = new AwsCloudWatchAlarmDetails();

    /**
     * Model tests for AwsCloudWatchAlarmDetails
     */
    @Test
    public void testAwsCloudWatchAlarmDetails() {
        // TODO: test AwsCloudWatchAlarmDetails
    }

    /**
     * Test the property 'actionsEnabled'
     */
    @Test
    public void actionsEnabledTest() {
        // TODO: test actionsEnabled
    }

    /**
     * Test the property 'alarmActions'
     */
    @Test
    public void alarmActionsTest() {
        // TODO: test alarmActions
    }

    /**
     * Test the property 'alarmArn'
     */
    @Test
    public void alarmArnTest() {
        // TODO: test alarmArn
    }

    /**
     * Test the property 'alarmConfigurationUpdatedTimestamp'
     */
    @Test
    public void alarmConfigurationUpdatedTimestampTest() {
        // TODO: test alarmConfigurationUpdatedTimestamp
    }

    /**
     * Test the property 'alarmDescription'
     */
    @Test
    public void alarmDescriptionTest() {
        // TODO: test alarmDescription
    }

    /**
     * Test the property 'alarmName'
     */
    @Test
    public void alarmNameTest() {
        // TODO: test alarmName
    }

    /**
     * Test the property 'comparisonOperator'
     */
    @Test
    public void comparisonOperatorTest() {
        // TODO: test comparisonOperator
    }

    /**
     * Test the property 'datapointsToAlarm'
     */
    @Test
    public void datapointsToAlarmTest() {
        // TODO: test datapointsToAlarm
    }

    /**
     * Test the property 'dimensions'
     */
    @Test
    public void dimensionsTest() {
        // TODO: test dimensions
    }

    /**
     * Test the property 'evaluateLowSampleCountPercentile'
     */
    @Test
    public void evaluateLowSampleCountPercentileTest() {
        // TODO: test evaluateLowSampleCountPercentile
    }

    /**
     * Test the property 'evaluationPeriods'
     */
    @Test
    public void evaluationPeriodsTest() {
        // TODO: test evaluationPeriods
    }

    /**
     * Test the property 'extendedStatistic'
     */
    @Test
    public void extendedStatisticTest() {
        // TODO: test extendedStatistic
    }

    /**
     * Test the property 'insufficientDataActions'
     */
    @Test
    public void insufficientDataActionsTest() {
        // TODO: test insufficientDataActions
    }

    /**
     * Test the property 'metricName'
     */
    @Test
    public void metricNameTest() {
        // TODO: test metricName
    }

    /**
     * Test the property 'namespace'
     */
    @Test
    public void namespaceTest() {
        // TODO: test namespace
    }

    /**
     * Test the property 'okActions'
     */
    @Test
    public void okActionsTest() {
        // TODO: test okActions
    }

    /**
     * Test the property 'period'
     */
    @Test
    public void periodTest() {
        // TODO: test period
    }

    /**
     * Test the property 'statistic'
     */
    @Test
    public void statisticTest() {
        // TODO: test statistic
    }

    /**
     * Test the property 'threshold'
     */
    @Test
    public void thresholdTest() {
        // TODO: test threshold
    }

    /**
     * Test the property 'thresholdMetricId'
     */
    @Test
    public void thresholdMetricIdTest() {
        // TODO: test thresholdMetricId
    }

    /**
     * Test the property 'treatMissingData'
     */
    @Test
    public void treatMissingDataTest() {
        // TODO: test treatMissingData
    }

    /**
     * Test the property 'unit'
     */
    @Test
    public void unitTest() {
        // TODO: test unit
    }

}
