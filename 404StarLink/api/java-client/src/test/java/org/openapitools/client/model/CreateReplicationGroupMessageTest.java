/*
 * Amazon ElastiCache
 * <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
 *
 * The version of the OpenAPI document: 2015-02-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpDiscovery;
import org.openapitools.client.model.NetworkType;
import org.openapitools.client.model.TransitEncryptionMode;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CreateReplicationGroupMessage
 */
public class CreateReplicationGroupMessageTest {
    private final CreateReplicationGroupMessage model = new CreateReplicationGroupMessage();

    /**
     * Model tests for CreateReplicationGroupMessage
     */
    @Test
    public void testCreateReplicationGroupMessage() {
        // TODO: test CreateReplicationGroupMessage
    }

    /**
     * Test the property 'replicationGroupId'
     */
    @Test
    public void replicationGroupIdTest() {
        // TODO: test replicationGroupId
    }

    /**
     * Test the property 'replicationGroupDescription'
     */
    @Test
    public void replicationGroupDescriptionTest() {
        // TODO: test replicationGroupDescription
    }

    /**
     * Test the property 'globalReplicationGroupId'
     */
    @Test
    public void globalReplicationGroupIdTest() {
        // TODO: test globalReplicationGroupId
    }

    /**
     * Test the property 'primaryClusterId'
     */
    @Test
    public void primaryClusterIdTest() {
        // TODO: test primaryClusterId
    }

    /**
     * Test the property 'automaticFailoverEnabled'
     */
    @Test
    public void automaticFailoverEnabledTest() {
        // TODO: test automaticFailoverEnabled
    }

    /**
     * Test the property 'multiAZEnabled'
     */
    @Test
    public void multiAZEnabledTest() {
        // TODO: test multiAZEnabled
    }

    /**
     * Test the property 'numCacheClusters'
     */
    @Test
    public void numCacheClustersTest() {
        // TODO: test numCacheClusters
    }

    /**
     * Test the property 'preferredCacheClusterAZs'
     */
    @Test
    public void preferredCacheClusterAZsTest() {
        // TODO: test preferredCacheClusterAZs
    }

    /**
     * Test the property 'numNodeGroups'
     */
    @Test
    public void numNodeGroupsTest() {
        // TODO: test numNodeGroups
    }

    /**
     * Test the property 'replicasPerNodeGroup'
     */
    @Test
    public void replicasPerNodeGroupTest() {
        // TODO: test replicasPerNodeGroup
    }

    /**
     * Test the property 'nodeGroupConfiguration'
     */
    @Test
    public void nodeGroupConfigurationTest() {
        // TODO: test nodeGroupConfiguration
    }

    /**
     * Test the property 'cacheNodeType'
     */
    @Test
    public void cacheNodeTypeTest() {
        // TODO: test cacheNodeType
    }

    /**
     * Test the property 'engine'
     */
    @Test
    public void engineTest() {
        // TODO: test engine
    }

    /**
     * Test the property 'engineVersion'
     */
    @Test
    public void engineVersionTest() {
        // TODO: test engineVersion
    }

    /**
     * Test the property 'cacheParameterGroupName'
     */
    @Test
    public void cacheParameterGroupNameTest() {
        // TODO: test cacheParameterGroupName
    }

    /**
     * Test the property 'cacheSubnetGroupName'
     */
    @Test
    public void cacheSubnetGroupNameTest() {
        // TODO: test cacheSubnetGroupName
    }

    /**
     * Test the property 'cacheSecurityGroupNames'
     */
    @Test
    public void cacheSecurityGroupNamesTest() {
        // TODO: test cacheSecurityGroupNames
    }

    /**
     * Test the property 'securityGroupIds'
     */
    @Test
    public void securityGroupIdsTest() {
        // TODO: test securityGroupIds
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'snapshotArns'
     */
    @Test
    public void snapshotArnsTest() {
        // TODO: test snapshotArns
    }

    /**
     * Test the property 'snapshotName'
     */
    @Test
    public void snapshotNameTest() {
        // TODO: test snapshotName
    }

    /**
     * Test the property 'preferredMaintenanceWindow'
     */
    @Test
    public void preferredMaintenanceWindowTest() {
        // TODO: test preferredMaintenanceWindow
    }

    /**
     * Test the property 'port'
     */
    @Test
    public void portTest() {
        // TODO: test port
    }

    /**
     * Test the property 'notificationTopicArn'
     */
    @Test
    public void notificationTopicArnTest() {
        // TODO: test notificationTopicArn
    }

    /**
     * Test the property 'autoMinorVersionUpgrade'
     */
    @Test
    public void autoMinorVersionUpgradeTest() {
        // TODO: test autoMinorVersionUpgrade
    }

    /**
     * Test the property 'snapshotRetentionLimit'
     */
    @Test
    public void snapshotRetentionLimitTest() {
        // TODO: test snapshotRetentionLimit
    }

    /**
     * Test the property 'snapshotWindow'
     */
    @Test
    public void snapshotWindowTest() {
        // TODO: test snapshotWindow
    }

    /**
     * Test the property 'authToken'
     */
    @Test
    public void authTokenTest() {
        // TODO: test authToken
    }

    /**
     * Test the property 'transitEncryptionEnabled'
     */
    @Test
    public void transitEncryptionEnabledTest() {
        // TODO: test transitEncryptionEnabled
    }

    /**
     * Test the property 'atRestEncryptionEnabled'
     */
    @Test
    public void atRestEncryptionEnabledTest() {
        // TODO: test atRestEncryptionEnabled
    }

    /**
     * Test the property 'kmsKeyId'
     */
    @Test
    public void kmsKeyIdTest() {
        // TODO: test kmsKeyId
    }

    /**
     * Test the property 'userGroupIds'
     */
    @Test
    public void userGroupIdsTest() {
        // TODO: test userGroupIds
    }

    /**
     * Test the property 'logDeliveryConfigurations'
     */
    @Test
    public void logDeliveryConfigurationsTest() {
        // TODO: test logDeliveryConfigurations
    }

    /**
     * Test the property 'dataTieringEnabled'
     */
    @Test
    public void dataTieringEnabledTest() {
        // TODO: test dataTieringEnabled
    }

    /**
     * Test the property 'networkType'
     */
    @Test
    public void networkTypeTest() {
        // TODO: test networkType
    }

    /**
     * Test the property 'ipDiscovery'
     */
    @Test
    public void ipDiscoveryTest() {
        // TODO: test ipDiscovery
    }

    /**
     * Test the property 'transitEncryptionMode'
     */
    @Test
    public void transitEncryptionModeTest() {
        // TODO: test transitEncryptionMode
    }

}
