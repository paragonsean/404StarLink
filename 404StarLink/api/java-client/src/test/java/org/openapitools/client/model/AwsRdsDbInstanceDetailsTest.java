/*
 * AWS SecurityHub
 * <p>Security Hub provides you with a comprehensive view of the security state of your Amazon Web Services environment and resources. It also provides you with the readiness status of your environment based on controls from supported security standards. Security Hub collects security data from Amazon Web Services accounts, services, and integrated third-party products and helps you analyze security trends in your environment to identify the highest priority security issues. For more information about Security Hub, see the <a href=\"https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html\">Security HubUser Guide</a>.</p> <p>When you use operations in the Security Hub API, the requests are executed only in the Amazon Web Services Region that is currently active or in the specific Amazon Web Services Region that you specify in your request. Any configuration or settings change that results from the operation is applied only to that Region. To make the same change in other Regions, run the same command for each Region in which you want to apply the change.</p> <p>For example, if your Region is set to <code>us-west-2</code>, when you use <code>CreateMembers</code> to add a member account to Security Hub, the association of the member account with the administrator account is created only in the <code>us-west-2</code> Region. Security Hub must be enabled for the member account in the same Region that the invitation was sent from.</p> <p>The following throttling limits apply to using Security Hub API operations.</p> <ul> <li> <p> <code>BatchEnableStandards</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 1 request per second.</p> </li> <li> <p> <code>GetFindings</code> - <code>RateLimit</code> of 3 requests per second. <code>BurstLimit</code> of 6 requests per second.</p> </li> <li> <p> <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>UpdateStandardsControl</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 5 requests per second.</p> </li> <li> <p>All other operations - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AwsRdsDbInstanceDetailsDbSubnetGroup;
import org.openapitools.client.model.AwsRdsDbInstanceDetailsEndpoint;
import org.openapitools.client.model.AwsRdsDbInstanceDetailsPendingModifiedValues;
import org.openapitools.client.model.AwsRdsDbInstanceEndpoint;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AwsRdsDbInstanceDetails
 */
public class AwsRdsDbInstanceDetailsTest {
    private final AwsRdsDbInstanceDetails model = new AwsRdsDbInstanceDetails();

    /**
     * Model tests for AwsRdsDbInstanceDetails
     */
    @Test
    public void testAwsRdsDbInstanceDetails() {
        // TODO: test AwsRdsDbInstanceDetails
    }

    /**
     * Test the property 'associatedRoles'
     */
    @Test
    public void associatedRolesTest() {
        // TODO: test associatedRoles
    }

    /**
     * Test the property 'caCertificateIdentifier'
     */
    @Test
    public void caCertificateIdentifierTest() {
        // TODO: test caCertificateIdentifier
    }

    /**
     * Test the property 'dbClusterIdentifier'
     */
    @Test
    public void dbClusterIdentifierTest() {
        // TODO: test dbClusterIdentifier
    }

    /**
     * Test the property 'dbInstanceIdentifier'
     */
    @Test
    public void dbInstanceIdentifierTest() {
        // TODO: test dbInstanceIdentifier
    }

    /**
     * Test the property 'dbInstanceClass'
     */
    @Test
    public void dbInstanceClassTest() {
        // TODO: test dbInstanceClass
    }

    /**
     * Test the property 'dbInstancePort'
     */
    @Test
    public void dbInstancePortTest() {
        // TODO: test dbInstancePort
    }

    /**
     * Test the property 'dbiResourceId'
     */
    @Test
    public void dbiResourceIdTest() {
        // TODO: test dbiResourceId
    }

    /**
     * Test the property 'dbName'
     */
    @Test
    public void dbNameTest() {
        // TODO: test dbName
    }

    /**
     * Test the property 'deletionProtection'
     */
    @Test
    public void deletionProtectionTest() {
        // TODO: test deletionProtection
    }

    /**
     * Test the property 'endpoint'
     */
    @Test
    public void endpointTest() {
        // TODO: test endpoint
    }

    /**
     * Test the property 'engine'
     */
    @Test
    public void engineTest() {
        // TODO: test engine
    }

    /**
     * Test the property 'engineVersion'
     */
    @Test
    public void engineVersionTest() {
        // TODO: test engineVersion
    }

    /**
     * Test the property 'iaMDatabaseAuthenticationEnabled'
     */
    @Test
    public void iaMDatabaseAuthenticationEnabledTest() {
        // TODO: test iaMDatabaseAuthenticationEnabled
    }

    /**
     * Test the property 'instanceCreateTime'
     */
    @Test
    public void instanceCreateTimeTest() {
        // TODO: test instanceCreateTime
    }

    /**
     * Test the property 'kmsKeyId'
     */
    @Test
    public void kmsKeyIdTest() {
        // TODO: test kmsKeyId
    }

    /**
     * Test the property 'publiclyAccessible'
     */
    @Test
    public void publiclyAccessibleTest() {
        // TODO: test publiclyAccessible
    }

    /**
     * Test the property 'storageEncrypted'
     */
    @Test
    public void storageEncryptedTest() {
        // TODO: test storageEncrypted
    }

    /**
     * Test the property 'tdeCredentialArn'
     */
    @Test
    public void tdeCredentialArnTest() {
        // TODO: test tdeCredentialArn
    }

    /**
     * Test the property 'vpcSecurityGroups'
     */
    @Test
    public void vpcSecurityGroupsTest() {
        // TODO: test vpcSecurityGroups
    }

    /**
     * Test the property 'multiAz'
     */
    @Test
    public void multiAzTest() {
        // TODO: test multiAz
    }

    /**
     * Test the property 'enhancedMonitoringResourceArn'
     */
    @Test
    public void enhancedMonitoringResourceArnTest() {
        // TODO: test enhancedMonitoringResourceArn
    }

    /**
     * Test the property 'dbInstanceStatus'
     */
    @Test
    public void dbInstanceStatusTest() {
        // TODO: test dbInstanceStatus
    }

    /**
     * Test the property 'masterUsername'
     */
    @Test
    public void masterUsernameTest() {
        // TODO: test masterUsername
    }

    /**
     * Test the property 'allocatedStorage'
     */
    @Test
    public void allocatedStorageTest() {
        // TODO: test allocatedStorage
    }

    /**
     * Test the property 'preferredBackupWindow'
     */
    @Test
    public void preferredBackupWindowTest() {
        // TODO: test preferredBackupWindow
    }

    /**
     * Test the property 'backupRetentionPeriod'
     */
    @Test
    public void backupRetentionPeriodTest() {
        // TODO: test backupRetentionPeriod
    }

    /**
     * Test the property 'dbSecurityGroups'
     */
    @Test
    public void dbSecurityGroupsTest() {
        // TODO: test dbSecurityGroups
    }

    /**
     * Test the property 'dbParameterGroups'
     */
    @Test
    public void dbParameterGroupsTest() {
        // TODO: test dbParameterGroups
    }

    /**
     * Test the property 'availabilityZone'
     */
    @Test
    public void availabilityZoneTest() {
        // TODO: test availabilityZone
    }

    /**
     * Test the property 'dbSubnetGroup'
     */
    @Test
    public void dbSubnetGroupTest() {
        // TODO: test dbSubnetGroup
    }

    /**
     * Test the property 'preferredMaintenanceWindow'
     */
    @Test
    public void preferredMaintenanceWindowTest() {
        // TODO: test preferredMaintenanceWindow
    }

    /**
     * Test the property 'pendingModifiedValues'
     */
    @Test
    public void pendingModifiedValuesTest() {
        // TODO: test pendingModifiedValues
    }

    /**
     * Test the property 'latestRestorableTime'
     */
    @Test
    public void latestRestorableTimeTest() {
        // TODO: test latestRestorableTime
    }

    /**
     * Test the property 'autoMinorVersionUpgrade'
     */
    @Test
    public void autoMinorVersionUpgradeTest() {
        // TODO: test autoMinorVersionUpgrade
    }

    /**
     * Test the property 'readReplicaSourceDBInstanceIdentifier'
     */
    @Test
    public void readReplicaSourceDBInstanceIdentifierTest() {
        // TODO: test readReplicaSourceDBInstanceIdentifier
    }

    /**
     * Test the property 'readReplicaDBInstanceIdentifiers'
     */
    @Test
    public void readReplicaDBInstanceIdentifiersTest() {
        // TODO: test readReplicaDBInstanceIdentifiers
    }

    /**
     * Test the property 'readReplicaDBClusterIdentifiers'
     */
    @Test
    public void readReplicaDBClusterIdentifiersTest() {
        // TODO: test readReplicaDBClusterIdentifiers
    }

    /**
     * Test the property 'licenseModel'
     */
    @Test
    public void licenseModelTest() {
        // TODO: test licenseModel
    }

    /**
     * Test the property 'iops'
     */
    @Test
    public void iopsTest() {
        // TODO: test iops
    }

    /**
     * Test the property 'optionGroupMemberships'
     */
    @Test
    public void optionGroupMembershipsTest() {
        // TODO: test optionGroupMemberships
    }

    /**
     * Test the property 'characterSetName'
     */
    @Test
    public void characterSetNameTest() {
        // TODO: test characterSetName
    }

    /**
     * Test the property 'secondaryAvailabilityZone'
     */
    @Test
    public void secondaryAvailabilityZoneTest() {
        // TODO: test secondaryAvailabilityZone
    }

    /**
     * Test the property 'statusInfos'
     */
    @Test
    public void statusInfosTest() {
        // TODO: test statusInfos
    }

    /**
     * Test the property 'storageType'
     */
    @Test
    public void storageTypeTest() {
        // TODO: test storageType
    }

    /**
     * Test the property 'domainMemberships'
     */
    @Test
    public void domainMembershipsTest() {
        // TODO: test domainMemberships
    }

    /**
     * Test the property 'copyTagsToSnapshot'
     */
    @Test
    public void copyTagsToSnapshotTest() {
        // TODO: test copyTagsToSnapshot
    }

    /**
     * Test the property 'monitoringInterval'
     */
    @Test
    public void monitoringIntervalTest() {
        // TODO: test monitoringInterval
    }

    /**
     * Test the property 'monitoringRoleArn'
     */
    @Test
    public void monitoringRoleArnTest() {
        // TODO: test monitoringRoleArn
    }

    /**
     * Test the property 'promotionTier'
     */
    @Test
    public void promotionTierTest() {
        // TODO: test promotionTier
    }

    /**
     * Test the property 'timezone'
     */
    @Test
    public void timezoneTest() {
        // TODO: test timezone
    }

    /**
     * Test the property 'performanceInsightsEnabled'
     */
    @Test
    public void performanceInsightsEnabledTest() {
        // TODO: test performanceInsightsEnabled
    }

    /**
     * Test the property 'performanceInsightsKmsKeyId'
     */
    @Test
    public void performanceInsightsKmsKeyIdTest() {
        // TODO: test performanceInsightsKmsKeyId
    }

    /**
     * Test the property 'performanceInsightsRetentionPeriod'
     */
    @Test
    public void performanceInsightsRetentionPeriodTest() {
        // TODO: test performanceInsightsRetentionPeriod
    }

    /**
     * Test the property 'enabledCloudWatchLogsExports'
     */
    @Test
    public void enabledCloudWatchLogsExportsTest() {
        // TODO: test enabledCloudWatchLogsExports
    }

    /**
     * Test the property 'processorFeatures'
     */
    @Test
    public void processorFeaturesTest() {
        // TODO: test processorFeatures
    }

    /**
     * Test the property 'listenerEndpoint'
     */
    @Test
    public void listenerEndpointTest() {
        // TODO: test listenerEndpoint
    }

    /**
     * Test the property 'maxAllocatedStorage'
     */
    @Test
    public void maxAllocatedStorageTest() {
        // TODO: test maxAllocatedStorage
    }

}
