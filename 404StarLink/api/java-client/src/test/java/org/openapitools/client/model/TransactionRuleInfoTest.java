/*
 * Configuration API
 * The Configuration API enables you to create a platform where you can onboard your users as account holders and create balance accounts, cards, and business accounts.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Versioning The Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/bcl/v1/accountHolders ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v1`.
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.TransactionRuleInterval;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for TransactionRuleInfo
 */
public class TransactionRuleInfoTest {
    private final TransactionRuleInfo model = new TransactionRuleInfo();

    /**
     * Model tests for TransactionRuleInfo
     */
    @Test
    public void testTransactionRuleInfo() {
        // TODO: test TransactionRuleInfo
    }

    /**
     * Test the property 'amount'
     */
    @Test
    public void amountTest() {
        // TODO: test amount
    }

    /**
     * Test the property 'balancePlatformId'
     */
    @Test
    public void balancePlatformIdTest() {
        // TODO: test balancePlatformId
    }

    /**
     * Test the property 'countries'
     */
    @Test
    public void countriesTest() {
        // TODO: test countries
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'endDate'
     */
    @Test
    public void endDateTest() {
        // TODO: test endDate
    }

    /**
     * Test the property 'entryModes'
     */
    @Test
    public void entryModesTest() {
        // TODO: test entryModes
    }

    /**
     * Test the property 'interval'
     */
    @Test
    public void intervalTest() {
        // TODO: test interval
    }

    /**
     * Test the property 'maxTransactions'
     */
    @Test
    public void maxTransactionsTest() {
        // TODO: test maxTransactions
    }

    /**
     * Test the property 'mccs'
     */
    @Test
    public void mccsTest() {
        // TODO: test mccs
    }

    /**
     * Test the property 'paymentInstrumentGroupId'
     */
    @Test
    public void paymentInstrumentGroupIdTest() {
        // TODO: test paymentInstrumentGroupId
    }

    /**
     * Test the property 'paymentInstrumentId'
     */
    @Test
    public void paymentInstrumentIdTest() {
        // TODO: test paymentInstrumentId
    }

    /**
     * Test the property 'processingTypes'
     */
    @Test
    public void processingTypesTest() {
        // TODO: test processingTypes
    }

    /**
     * Test the property 'reference'
     */
    @Test
    public void referenceTest() {
        // TODO: test reference
    }

    /**
     * Test the property 'startDate'
     */
    @Test
    public void startDateTest() {
        // TODO: test startDate
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

}
