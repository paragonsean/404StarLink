/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpAddressType;
import org.openapitools.client.model.LightsailDistributionCacheBehaviorSettings;
import org.openapitools.client.model.LightsailDistributionDefaultCacheBehavior;
import org.openapitools.client.model.LightsailDistributionLocation;
import org.openapitools.client.model.LightsailDistributionOrigin;
import org.openapitools.client.model.ResourceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an Amazon Lightsail content delivery network (CDN) distribution.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:45.376997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LightsailDistribution {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_SUPPORT_CODE = "supportCode";
  @SerializedName(SERIALIZED_NAME_SUPPORT_CODE)
  private String supportCode;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private LightsailDistributionLocation location;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceType resourceType;

  public static final String SERIALIZED_NAME_ALTERNATIVE_DOMAIN_NAMES = "alternativeDomainNames";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_DOMAIN_NAMES)
  private List alternativeDomainNames;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_BUNDLE_ID = "bundleId";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  private String bundleId;

  public static final String SERIALIZED_NAME_CERTIFICATE_NAME = "certificateName";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_NAME)
  private String certificateName;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private LightsailDistributionOrigin origin;

  public static final String SERIALIZED_NAME_ORIGIN_PUBLIC_D_N_S = "originPublicDNS";
  @SerializedName(SERIALIZED_NAME_ORIGIN_PUBLIC_D_N_S)
  private String originPublicDNS;

  public static final String SERIALIZED_NAME_DEFAULT_CACHE_BEHAVIOR = "defaultCacheBehavior";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CACHE_BEHAVIOR)
  private LightsailDistributionDefaultCacheBehavior defaultCacheBehavior;

  public static final String SERIALIZED_NAME_CACHE_BEHAVIOR_SETTINGS = "cacheBehaviorSettings";
  @SerializedName(SERIALIZED_NAME_CACHE_BEHAVIOR_SETTINGS)
  private LightsailDistributionCacheBehaviorSettings cacheBehaviorSettings;

  public static final String SERIALIZED_NAME_CACHE_BEHAVIORS = "cacheBehaviors";
  @SerializedName(SERIALIZED_NAME_CACHE_BEHAVIORS)
  private List cacheBehaviors;

  public static final String SERIALIZED_NAME_ABLE_TO_UPDATE_BUNDLE = "ableToUpdateBundle";
  @SerializedName(SERIALIZED_NAME_ABLE_TO_UPDATE_BUNDLE)
  private Boolean ableToUpdateBundle;

  public static final String SERIALIZED_NAME_IP_ADDRESS_TYPE = "ipAddressType";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_TYPE)
  private IpAddressType ipAddressType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public LightsailDistribution() {
  }

  public LightsailDistribution name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LightsailDistribution arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public LightsailDistribution supportCode(String supportCode) {
    this.supportCode = supportCode;
    return this;
  }

  /**
   * Get supportCode
   * @return supportCode
   */
  @javax.annotation.Nullable
  public String getSupportCode() {
    return supportCode;
  }

  public void setSupportCode(String supportCode) {
    this.supportCode = supportCode;
  }


  public LightsailDistribution createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public LightsailDistribution location(LightsailDistributionLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public LightsailDistributionLocation getLocation() {
    return location;
  }

  public void setLocation(LightsailDistributionLocation location) {
    this.location = location;
  }


  public LightsailDistribution resourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public ResourceType getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceType resourceType) {
    this.resourceType = resourceType;
  }


  public LightsailDistribution alternativeDomainNames(List alternativeDomainNames) {
    this.alternativeDomainNames = alternativeDomainNames;
    return this;
  }

  /**
   * Get alternativeDomainNames
   * @return alternativeDomainNames
   */
  @javax.annotation.Nullable
  public List getAlternativeDomainNames() {
    return alternativeDomainNames;
  }

  public void setAlternativeDomainNames(List alternativeDomainNames) {
    this.alternativeDomainNames = alternativeDomainNames;
  }


  public LightsailDistribution status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public LightsailDistribution isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Get isEnabled
   * @return isEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public LightsailDistribution domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public LightsailDistribution bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Get bundleId
   * @return bundleId
   */
  @javax.annotation.Nullable
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }


  public LightsailDistribution certificateName(String certificateName) {
    this.certificateName = certificateName;
    return this;
  }

  /**
   * Get certificateName
   * @return certificateName
   */
  @javax.annotation.Nullable
  public String getCertificateName() {
    return certificateName;
  }

  public void setCertificateName(String certificateName) {
    this.certificateName = certificateName;
  }


  public LightsailDistribution origin(LightsailDistributionOrigin origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nullable
  public LightsailDistributionOrigin getOrigin() {
    return origin;
  }

  public void setOrigin(LightsailDistributionOrigin origin) {
    this.origin = origin;
  }


  public LightsailDistribution originPublicDNS(String originPublicDNS) {
    this.originPublicDNS = originPublicDNS;
    return this;
  }

  /**
   * Get originPublicDNS
   * @return originPublicDNS
   */
  @javax.annotation.Nullable
  public String getOriginPublicDNS() {
    return originPublicDNS;
  }

  public void setOriginPublicDNS(String originPublicDNS) {
    this.originPublicDNS = originPublicDNS;
  }


  public LightsailDistribution defaultCacheBehavior(LightsailDistributionDefaultCacheBehavior defaultCacheBehavior) {
    this.defaultCacheBehavior = defaultCacheBehavior;
    return this;
  }

  /**
   * Get defaultCacheBehavior
   * @return defaultCacheBehavior
   */
  @javax.annotation.Nullable
  public LightsailDistributionDefaultCacheBehavior getDefaultCacheBehavior() {
    return defaultCacheBehavior;
  }

  public void setDefaultCacheBehavior(LightsailDistributionDefaultCacheBehavior defaultCacheBehavior) {
    this.defaultCacheBehavior = defaultCacheBehavior;
  }


  public LightsailDistribution cacheBehaviorSettings(LightsailDistributionCacheBehaviorSettings cacheBehaviorSettings) {
    this.cacheBehaviorSettings = cacheBehaviorSettings;
    return this;
  }

  /**
   * Get cacheBehaviorSettings
   * @return cacheBehaviorSettings
   */
  @javax.annotation.Nullable
  public LightsailDistributionCacheBehaviorSettings getCacheBehaviorSettings() {
    return cacheBehaviorSettings;
  }

  public void setCacheBehaviorSettings(LightsailDistributionCacheBehaviorSettings cacheBehaviorSettings) {
    this.cacheBehaviorSettings = cacheBehaviorSettings;
  }


  public LightsailDistribution cacheBehaviors(List cacheBehaviors) {
    this.cacheBehaviors = cacheBehaviors;
    return this;
  }

  /**
   * Get cacheBehaviors
   * @return cacheBehaviors
   */
  @javax.annotation.Nullable
  public List getCacheBehaviors() {
    return cacheBehaviors;
  }

  public void setCacheBehaviors(List cacheBehaviors) {
    this.cacheBehaviors = cacheBehaviors;
  }


  public LightsailDistribution ableToUpdateBundle(Boolean ableToUpdateBundle) {
    this.ableToUpdateBundle = ableToUpdateBundle;
    return this;
  }

  /**
   * Get ableToUpdateBundle
   * @return ableToUpdateBundle
   */
  @javax.annotation.Nullable
  public Boolean getAbleToUpdateBundle() {
    return ableToUpdateBundle;
  }

  public void setAbleToUpdateBundle(Boolean ableToUpdateBundle) {
    this.ableToUpdateBundle = ableToUpdateBundle;
  }


  public LightsailDistribution ipAddressType(IpAddressType ipAddressType) {
    this.ipAddressType = ipAddressType;
    return this;
  }

  /**
   * Get ipAddressType
   * @return ipAddressType
   */
  @javax.annotation.Nullable
  public IpAddressType getIpAddressType() {
    return ipAddressType;
  }

  public void setIpAddressType(IpAddressType ipAddressType) {
    this.ipAddressType = ipAddressType;
  }


  public LightsailDistribution tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LightsailDistribution lightsailDistribution = (LightsailDistribution) o;
    return Objects.equals(this.name, lightsailDistribution.name) &&
        Objects.equals(this.arn, lightsailDistribution.arn) &&
        Objects.equals(this.supportCode, lightsailDistribution.supportCode) &&
        Objects.equals(this.createdAt, lightsailDistribution.createdAt) &&
        Objects.equals(this.location, lightsailDistribution.location) &&
        Objects.equals(this.resourceType, lightsailDistribution.resourceType) &&
        Objects.equals(this.alternativeDomainNames, lightsailDistribution.alternativeDomainNames) &&
        Objects.equals(this.status, lightsailDistribution.status) &&
        Objects.equals(this.isEnabled, lightsailDistribution.isEnabled) &&
        Objects.equals(this.domainName, lightsailDistribution.domainName) &&
        Objects.equals(this.bundleId, lightsailDistribution.bundleId) &&
        Objects.equals(this.certificateName, lightsailDistribution.certificateName) &&
        Objects.equals(this.origin, lightsailDistribution.origin) &&
        Objects.equals(this.originPublicDNS, lightsailDistribution.originPublicDNS) &&
        Objects.equals(this.defaultCacheBehavior, lightsailDistribution.defaultCacheBehavior) &&
        Objects.equals(this.cacheBehaviorSettings, lightsailDistribution.cacheBehaviorSettings) &&
        Objects.equals(this.cacheBehaviors, lightsailDistribution.cacheBehaviors) &&
        Objects.equals(this.ableToUpdateBundle, lightsailDistribution.ableToUpdateBundle) &&
        Objects.equals(this.ipAddressType, lightsailDistribution.ipAddressType) &&
        Objects.equals(this.tags, lightsailDistribution.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, arn, supportCode, createdAt, location, resourceType, alternativeDomainNames, status, isEnabled, domainName, bundleId, certificateName, origin, originPublicDNS, defaultCacheBehavior, cacheBehaviorSettings, cacheBehaviors, ableToUpdateBundle, ipAddressType, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LightsailDistribution {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    supportCode: ").append(toIndentedString(supportCode)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    alternativeDomainNames: ").append(toIndentedString(alternativeDomainNames)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    certificateName: ").append(toIndentedString(certificateName)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    originPublicDNS: ").append(toIndentedString(originPublicDNS)).append("\n");
    sb.append("    defaultCacheBehavior: ").append(toIndentedString(defaultCacheBehavior)).append("\n");
    sb.append("    cacheBehaviorSettings: ").append(toIndentedString(cacheBehaviorSettings)).append("\n");
    sb.append("    cacheBehaviors: ").append(toIndentedString(cacheBehaviors)).append("\n");
    sb.append("    ableToUpdateBundle: ").append(toIndentedString(ableToUpdateBundle)).append("\n");
    sb.append("    ipAddressType: ").append(toIndentedString(ipAddressType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("arn");
    openapiFields.add("supportCode");
    openapiFields.add("createdAt");
    openapiFields.add("location");
    openapiFields.add("resourceType");
    openapiFields.add("alternativeDomainNames");
    openapiFields.add("status");
    openapiFields.add("isEnabled");
    openapiFields.add("domainName");
    openapiFields.add("bundleId");
    openapiFields.add("certificateName");
    openapiFields.add("origin");
    openapiFields.add("originPublicDNS");
    openapiFields.add("defaultCacheBehavior");
    openapiFields.add("cacheBehaviorSettings");
    openapiFields.add("cacheBehaviors");
    openapiFields.add("ableToUpdateBundle");
    openapiFields.add("ipAddressType");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LightsailDistribution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LightsailDistribution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LightsailDistribution is not found in the empty JSON string", LightsailDistribution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LightsailDistribution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LightsailDistribution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `supportCode`
      if (jsonObj.get("supportCode") != null && !jsonObj.get("supportCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("supportCode"));
      }
      // validate the optional field `createdAt`
      if (jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("createdAt"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        LightsailDistributionLocation.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `resourceType`
      if (jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) {
        ResourceType.validateJsonElement(jsonObj.get("resourceType"));
      }
      // validate the optional field `alternativeDomainNames`
      if (jsonObj.get("alternativeDomainNames") != null && !jsonObj.get("alternativeDomainNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("alternativeDomainNames"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `isEnabled`
      if (jsonObj.get("isEnabled") != null && !jsonObj.get("isEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isEnabled"));
      }
      // validate the optional field `domainName`
      if (jsonObj.get("domainName") != null && !jsonObj.get("domainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("domainName"));
      }
      // validate the optional field `bundleId`
      if (jsonObj.get("bundleId") != null && !jsonObj.get("bundleId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("bundleId"));
      }
      // validate the optional field `certificateName`
      if (jsonObj.get("certificateName") != null && !jsonObj.get("certificateName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("certificateName"));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        LightsailDistributionOrigin.validateJsonElement(jsonObj.get("origin"));
      }
      // validate the optional field `originPublicDNS`
      if (jsonObj.get("originPublicDNS") != null && !jsonObj.get("originPublicDNS").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("originPublicDNS"));
      }
      // validate the optional field `defaultCacheBehavior`
      if (jsonObj.get("defaultCacheBehavior") != null && !jsonObj.get("defaultCacheBehavior").isJsonNull()) {
        LightsailDistributionDefaultCacheBehavior.validateJsonElement(jsonObj.get("defaultCacheBehavior"));
      }
      // validate the optional field `cacheBehaviorSettings`
      if (jsonObj.get("cacheBehaviorSettings") != null && !jsonObj.get("cacheBehaviorSettings").isJsonNull()) {
        LightsailDistributionCacheBehaviorSettings.validateJsonElement(jsonObj.get("cacheBehaviorSettings"));
      }
      // validate the optional field `cacheBehaviors`
      if (jsonObj.get("cacheBehaviors") != null && !jsonObj.get("cacheBehaviors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("cacheBehaviors"));
      }
      // validate the optional field `ableToUpdateBundle`
      if (jsonObj.get("ableToUpdateBundle") != null && !jsonObj.get("ableToUpdateBundle").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ableToUpdateBundle"));
      }
      // validate the optional field `ipAddressType`
      if (jsonObj.get("ipAddressType") != null && !jsonObj.get("ipAddressType").isJsonNull()) {
        IpAddressType.validateJsonElement(jsonObj.get("ipAddressType"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LightsailDistribution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LightsailDistribution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LightsailDistribution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LightsailDistribution.class));

       return (TypeAdapter<T>) new TypeAdapter<LightsailDistribution>() {
           @Override
           public void write(JsonWriter out, LightsailDistribution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LightsailDistribution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LightsailDistribution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LightsailDistribution
   * @throws IOException if the JSON string is invalid with respect to LightsailDistribution
   */
  public static LightsailDistribution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LightsailDistribution.class);
  }

  /**
   * Convert an instance of LightsailDistribution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

