/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RegionName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CopySnapshotRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:45.376997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CopySnapshotRequest {
  public static final String SERIALIZED_NAME_SOURCE_SNAPSHOT_NAME = "sourceSnapshotName";
  @SerializedName(SERIALIZED_NAME_SOURCE_SNAPSHOT_NAME)
  private String sourceSnapshotName;

  public static final String SERIALIZED_NAME_SOURCE_RESOURCE_NAME = "sourceResourceName";
  @SerializedName(SERIALIZED_NAME_SOURCE_RESOURCE_NAME)
  private String sourceResourceName;

  public static final String SERIALIZED_NAME_RESTORE_DATE = "restoreDate";
  @SerializedName(SERIALIZED_NAME_RESTORE_DATE)
  private String restoreDate;

  public static final String SERIALIZED_NAME_USE_LATEST_RESTORABLE_AUTO_SNAPSHOT = "useLatestRestorableAutoSnapshot";
  @SerializedName(SERIALIZED_NAME_USE_LATEST_RESTORABLE_AUTO_SNAPSHOT)
  private Boolean useLatestRestorableAutoSnapshot;

  public static final String SERIALIZED_NAME_TARGET_SNAPSHOT_NAME = "targetSnapshotName";
  @SerializedName(SERIALIZED_NAME_TARGET_SNAPSHOT_NAME)
  private String targetSnapshotName;

  public static final String SERIALIZED_NAME_SOURCE_REGION = "sourceRegion";
  @SerializedName(SERIALIZED_NAME_SOURCE_REGION)
  private RegionName sourceRegion;

  public CopySnapshotRequest() {
  }

  public CopySnapshotRequest sourceSnapshotName(String sourceSnapshotName) {
    this.sourceSnapshotName = sourceSnapshotName;
    return this;
  }

  /**
   * Get sourceSnapshotName
   * @return sourceSnapshotName
   */
  @javax.annotation.Nullable
  public String getSourceSnapshotName() {
    return sourceSnapshotName;
  }

  public void setSourceSnapshotName(String sourceSnapshotName) {
    this.sourceSnapshotName = sourceSnapshotName;
  }


  public CopySnapshotRequest sourceResourceName(String sourceResourceName) {
    this.sourceResourceName = sourceResourceName;
    return this;
  }

  /**
   * Get sourceResourceName
   * @return sourceResourceName
   */
  @javax.annotation.Nullable
  public String getSourceResourceName() {
    return sourceResourceName;
  }

  public void setSourceResourceName(String sourceResourceName) {
    this.sourceResourceName = sourceResourceName;
  }


  public CopySnapshotRequest restoreDate(String restoreDate) {
    this.restoreDate = restoreDate;
    return this;
  }

  /**
   * Get restoreDate
   * @return restoreDate
   */
  @javax.annotation.Nullable
  public String getRestoreDate() {
    return restoreDate;
  }

  public void setRestoreDate(String restoreDate) {
    this.restoreDate = restoreDate;
  }


  public CopySnapshotRequest useLatestRestorableAutoSnapshot(Boolean useLatestRestorableAutoSnapshot) {
    this.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot;
    return this;
  }

  /**
   * Get useLatestRestorableAutoSnapshot
   * @return useLatestRestorableAutoSnapshot
   */
  @javax.annotation.Nullable
  public Boolean getUseLatestRestorableAutoSnapshot() {
    return useLatestRestorableAutoSnapshot;
  }

  public void setUseLatestRestorableAutoSnapshot(Boolean useLatestRestorableAutoSnapshot) {
    this.useLatestRestorableAutoSnapshot = useLatestRestorableAutoSnapshot;
  }


  public CopySnapshotRequest targetSnapshotName(String targetSnapshotName) {
    this.targetSnapshotName = targetSnapshotName;
    return this;
  }

  /**
   * Get targetSnapshotName
   * @return targetSnapshotName
   */
  @javax.annotation.Nonnull
  public String getTargetSnapshotName() {
    return targetSnapshotName;
  }

  public void setTargetSnapshotName(String targetSnapshotName) {
    this.targetSnapshotName = targetSnapshotName;
  }


  public CopySnapshotRequest sourceRegion(RegionName sourceRegion) {
    this.sourceRegion = sourceRegion;
    return this;
  }

  /**
   * Get sourceRegion
   * @return sourceRegion
   */
  @javax.annotation.Nonnull
  public RegionName getSourceRegion() {
    return sourceRegion;
  }

  public void setSourceRegion(RegionName sourceRegion) {
    this.sourceRegion = sourceRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CopySnapshotRequest copySnapshotRequest = (CopySnapshotRequest) o;
    return Objects.equals(this.sourceSnapshotName, copySnapshotRequest.sourceSnapshotName) &&
        Objects.equals(this.sourceResourceName, copySnapshotRequest.sourceResourceName) &&
        Objects.equals(this.restoreDate, copySnapshotRequest.restoreDate) &&
        Objects.equals(this.useLatestRestorableAutoSnapshot, copySnapshotRequest.useLatestRestorableAutoSnapshot) &&
        Objects.equals(this.targetSnapshotName, copySnapshotRequest.targetSnapshotName) &&
        Objects.equals(this.sourceRegion, copySnapshotRequest.sourceRegion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceSnapshotName, sourceResourceName, restoreDate, useLatestRestorableAutoSnapshot, targetSnapshotName, sourceRegion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CopySnapshotRequest {\n");
    sb.append("    sourceSnapshotName: ").append(toIndentedString(sourceSnapshotName)).append("\n");
    sb.append("    sourceResourceName: ").append(toIndentedString(sourceResourceName)).append("\n");
    sb.append("    restoreDate: ").append(toIndentedString(restoreDate)).append("\n");
    sb.append("    useLatestRestorableAutoSnapshot: ").append(toIndentedString(useLatestRestorableAutoSnapshot)).append("\n");
    sb.append("    targetSnapshotName: ").append(toIndentedString(targetSnapshotName)).append("\n");
    sb.append("    sourceRegion: ").append(toIndentedString(sourceRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceSnapshotName");
    openapiFields.add("sourceResourceName");
    openapiFields.add("restoreDate");
    openapiFields.add("useLatestRestorableAutoSnapshot");
    openapiFields.add("targetSnapshotName");
    openapiFields.add("sourceRegion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("targetSnapshotName");
    openapiRequiredFields.add("sourceRegion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CopySnapshotRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CopySnapshotRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CopySnapshotRequest is not found in the empty JSON string", CopySnapshotRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CopySnapshotRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CopySnapshotRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CopySnapshotRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sourceSnapshotName`
      if (jsonObj.get("sourceSnapshotName") != null && !jsonObj.get("sourceSnapshotName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceSnapshotName"));
      }
      // validate the optional field `sourceResourceName`
      if (jsonObj.get("sourceResourceName") != null && !jsonObj.get("sourceResourceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceResourceName"));
      }
      // validate the optional field `restoreDate`
      if (jsonObj.get("restoreDate") != null && !jsonObj.get("restoreDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("restoreDate"));
      }
      // validate the optional field `useLatestRestorableAutoSnapshot`
      if (jsonObj.get("useLatestRestorableAutoSnapshot") != null && !jsonObj.get("useLatestRestorableAutoSnapshot").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("useLatestRestorableAutoSnapshot"));
      }
      // validate the required field `targetSnapshotName`
      String.validateJsonElement(jsonObj.get("targetSnapshotName"));
      // validate the required field `sourceRegion`
      RegionName.validateJsonElement(jsonObj.get("sourceRegion"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CopySnapshotRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CopySnapshotRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CopySnapshotRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CopySnapshotRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CopySnapshotRequest>() {
           @Override
           public void write(JsonWriter out, CopySnapshotRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CopySnapshotRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CopySnapshotRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CopySnapshotRequest
   * @throws IOException if the JSON string is invalid with respect to CopySnapshotRequest
   */
  public static CopySnapshotRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CopySnapshotRequest.class);
  }

  /**
   * Convert an instance of CopySnapshotRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

