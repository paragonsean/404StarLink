/*
 * Amazon ElastiCache
 * <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
 *
 * The version of the OpenAPI document: 2015-02-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateUserMessageAuthenticationMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateUserMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:03:41.807787-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateUserMessage {
  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_USER_NAME = "UserName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_PASSWORDS = "Passwords";
  @SerializedName(SERIALIZED_NAME_PASSWORDS)
  private List passwords;

  public static final String SERIALIZED_NAME_ACCESS_STRING = "AccessString";
  @SerializedName(SERIALIZED_NAME_ACCESS_STRING)
  private String accessString;

  public static final String SERIALIZED_NAME_NO_PASSWORD_REQUIRED = "NoPasswordRequired";
  @SerializedName(SERIALIZED_NAME_NO_PASSWORD_REQUIRED)
  private Boolean noPasswordRequired;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_AUTHENTICATION_MODE = "AuthenticationMode";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_MODE)
  private CreateUserMessageAuthenticationMode authenticationMode;

  public CreateUserMessage() {
  }

  public CreateUserMessage userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public CreateUserMessage userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Get userName
   * @return userName
   */
  @javax.annotation.Nonnull
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  public CreateUserMessage engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nonnull
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public CreateUserMessage passwords(List passwords) {
    this.passwords = passwords;
    return this;
  }

  /**
   * Get passwords
   * @return passwords
   */
  @javax.annotation.Nullable
  public List getPasswords() {
    return passwords;
  }

  public void setPasswords(List passwords) {
    this.passwords = passwords;
  }


  public CreateUserMessage accessString(String accessString) {
    this.accessString = accessString;
    return this;
  }

  /**
   * Get accessString
   * @return accessString
   */
  @javax.annotation.Nonnull
  public String getAccessString() {
    return accessString;
  }

  public void setAccessString(String accessString) {
    this.accessString = accessString;
  }


  public CreateUserMessage noPasswordRequired(Boolean noPasswordRequired) {
    this.noPasswordRequired = noPasswordRequired;
    return this;
  }

  /**
   * Get noPasswordRequired
   * @return noPasswordRequired
   */
  @javax.annotation.Nullable
  public Boolean getNoPasswordRequired() {
    return noPasswordRequired;
  }

  public void setNoPasswordRequired(Boolean noPasswordRequired) {
    this.noPasswordRequired = noPasswordRequired;
  }


  public CreateUserMessage tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateUserMessage authenticationMode(CreateUserMessageAuthenticationMode authenticationMode) {
    this.authenticationMode = authenticationMode;
    return this;
  }

  /**
   * Get authenticationMode
   * @return authenticationMode
   */
  @javax.annotation.Nullable
  public CreateUserMessageAuthenticationMode getAuthenticationMode() {
    return authenticationMode;
  }

  public void setAuthenticationMode(CreateUserMessageAuthenticationMode authenticationMode) {
    this.authenticationMode = authenticationMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUserMessage createUserMessage = (CreateUserMessage) o;
    return Objects.equals(this.userId, createUserMessage.userId) &&
        Objects.equals(this.userName, createUserMessage.userName) &&
        Objects.equals(this.engine, createUserMessage.engine) &&
        Objects.equals(this.passwords, createUserMessage.passwords) &&
        Objects.equals(this.accessString, createUserMessage.accessString) &&
        Objects.equals(this.noPasswordRequired, createUserMessage.noPasswordRequired) &&
        Objects.equals(this.tags, createUserMessage.tags) &&
        Objects.equals(this.authenticationMode, createUserMessage.authenticationMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, userName, engine, passwords, accessString, noPasswordRequired, tags, authenticationMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUserMessage {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    passwords: ").append(toIndentedString(passwords)).append("\n");
    sb.append("    accessString: ").append(toIndentedString(accessString)).append("\n");
    sb.append("    noPasswordRequired: ").append(toIndentedString(noPasswordRequired)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    authenticationMode: ").append(toIndentedString(authenticationMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UserId");
    openapiFields.add("UserName");
    openapiFields.add("Engine");
    openapiFields.add("Passwords");
    openapiFields.add("AccessString");
    openapiFields.add("NoPasswordRequired");
    openapiFields.add("Tags");
    openapiFields.add("AuthenticationMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("UserId");
    openapiRequiredFields.add("UserName");
    openapiRequiredFields.add("Engine");
    openapiRequiredFields.add("AccessString");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateUserMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUserMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUserMessage is not found in the empty JSON string", CreateUserMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateUserMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateUserMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUserMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `UserId`
      String.validateJsonElement(jsonObj.get("UserId"));
      // validate the required field `UserName`
      String.validateJsonElement(jsonObj.get("UserName"));
      // validate the required field `Engine`
      String.validateJsonElement(jsonObj.get("Engine"));
      // validate the optional field `Passwords`
      if (jsonObj.get("Passwords") != null && !jsonObj.get("Passwords").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Passwords"));
      }
      // validate the required field `AccessString`
      String.validateJsonElement(jsonObj.get("AccessString"));
      // validate the optional field `NoPasswordRequired`
      if (jsonObj.get("NoPasswordRequired") != null && !jsonObj.get("NoPasswordRequired").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("NoPasswordRequired"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `AuthenticationMode`
      if (jsonObj.get("AuthenticationMode") != null && !jsonObj.get("AuthenticationMode").isJsonNull()) {
        CreateUserMessageAuthenticationMode.validateJsonElement(jsonObj.get("AuthenticationMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUserMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUserMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUserMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUserMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUserMessage>() {
           @Override
           public void write(JsonWriter out, CreateUserMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUserMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateUserMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateUserMessage
   * @throws IOException if the JSON string is invalid with respect to CreateUserMessage
   */
  public static CreateUserMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUserMessage.class);
  }

  /**
   * Convert an instance of CreateUserMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

