# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class VendorProjectPair(BaseModel):
    """
    VendorProjectPair
    """ # noqa: E501
    currency: Optional[StrictStr] = 'usd'
    is_proofreader: Optional[StrictBool] = Field(default=None, description="Indicates if the vendor be able to proofred this pair")
    proofreader: Optional[User] = None
    proofreading_rate: Optional[Union[StrictFloat, StrictInt]] = None
    source_language: Optional[StrictStr] = Field(default=None, description="Source language code")
    target_language: Optional[StrictStr] = Field(default=None, description="Target language code")
    translation_rate: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["currency", "is_proofreader", "proofreader", "proofreading_rate", "source_language", "target_language", "translation_rate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VendorProjectPair from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of proofreader
        if self.proofreader:
            _dict['proofreader'] = self.proofreader.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VendorProjectPair from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currency": obj.get("currency") if obj.get("currency") is not None else 'usd',
            "is_proofreader": obj.get("is_proofreader"),
            "proofreader": User.from_dict(obj["proofreader"]) if obj.get("proofreader") is not None else None,
            "proofreading_rate": obj.get("proofreading_rate"),
            "source_language": obj.get("source_language"),
            "target_language": obj.get("target_language"),
            "translation_rate": obj.get("translation_rate")
        })
        return _obj


