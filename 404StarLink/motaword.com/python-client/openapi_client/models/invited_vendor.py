# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class InvitedVendor(BaseModel):
    """
    InvitedVendor
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Action to be taken")
    email_open_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Email opening rate of the vendor")
    is_entered: Optional[StrictBool] = Field(default=None, description="Did the vendor enter the given project")
    is_get_paid: Optional[StrictBool] = Field(default=None, description="Is vendor get ever paid?")
    is_worked: Optional[StrictBool] = Field(default=None, description="Did the vendor work on the given project")
    is_worked_in_any_project: Optional[StrictBool] = Field(default=None, description="Vendors working status in any project")
    last_project_date: Optional[date] = Field(default=None, description="Last project date")
    project_status_when_interacted: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Project translation percentage when interacted with the vendor")
    registration_date: Optional[date] = Field(default=None, description="Registration date")
    responsiveness: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Responsiveness of the vendor")
    user_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Id in the Users")
    vendor_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Id in the Vendors")
    vendor_name: Optional[StrictStr] = Field(default=None, description="The name of the vendor")
    vendor_type: Optional[StrictStr] = Field(default=None, description="Type of the vendor in the given project namely translator or proofreader")
    __properties: ClassVar[List[str]] = ["action", "email_open_rate", "is_entered", "is_get_paid", "is_worked", "is_worked_in_any_project", "last_project_date", "project_status_when_interacted", "registration_date", "responsiveness", "user_id", "vendor_id", "vendor_name", "vendor_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvitedVendor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvitedVendor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "email_open_rate": obj.get("email_open_rate"),
            "is_entered": obj.get("is_entered"),
            "is_get_paid": obj.get("is_get_paid"),
            "is_worked": obj.get("is_worked"),
            "is_worked_in_any_project": obj.get("is_worked_in_any_project"),
            "last_project_date": obj.get("last_project_date"),
            "project_status_when_interacted": obj.get("project_status_when_interacted"),
            "registration_date": obj.get("registration_date"),
            "responsiveness": obj.get("responsiveness"),
            "user_id": obj.get("user_id"),
            "vendor_id": obj.get("vendor_id"),
            "vendor_name": obj.get("vendor_name"),
            "vendor_type": obj.get("vendor_type")
        })
        return _obj


