# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.address import Address
from openapi_client.models.billing_address import BillingAddress
from openapi_client.models.language_pair import LanguagePair
from openapi_client.models.social_media import SocialMedia
from openapi_client.models.user_client import UserClient
from openapi_client.models.user_group import UserGroup
from openapi_client.models.user_links import UserLinks
from openapi_client.models.user_vendor import UserVendor
from typing import Optional, Set
from typing_extensions import Self

class User(BaseModel):
    """
    User
    """ # noqa: E501
    billing: Optional[BillingAddress] = None
    birthday: Optional[date] = None
    can_work_manual_files: Optional[StrictBool] = Field(default=None, description="\\@deprecated. use `vendor` key")
    city: Optional[StrictStr] = Field(default=None, description="\\@deprecated. use mailing or billing key.")
    client: Optional[UserClient] = None
    corporate_id: Optional[StrictInt] = None
    country: Optional[StrictStr] = Field(default=None, description="\\@deprecated. use mailing or billing key.")
    created_at: Optional[StrictInt] = Field(default=None, description="Unix epoch time")
    do_not_contact: Optional[StrictBool] = None
    email: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = None
    has_pwd: Optional[StrictBool] = None
    id: Optional[StrictInt] = None
    is_client: Optional[StrictBool] = None
    is_developer: Optional[StrictBool] = None
    is_proofreader: Optional[StrictBool] = Field(default=None, description="\\@deprecated. use `vendor` key")
    is_prospect: Optional[StrictBool] = None
    is_sales_person: Optional[StrictBool] = None
    is_vendor: Optional[StrictBool] = None
    language_pairs: Optional[List[LanguagePair]] = Field(default=None, description="\\@deprecated. use `vendor` key")
    last_name: Optional[StrictStr] = None
    last_seen_online_at: Optional[StrictInt] = Field(default=None, description="Unix epoch time")
    links: Optional[UserLinks] = None
    locale: Optional[StrictStr] = Field(default=None, description="User Locale")
    mailing: Optional[Address] = None
    name: Optional[StrictStr] = None
    native_language: Optional[StrictStr] = Field(default=None, description="\\@deprecated. Native language of user")
    nps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="\\@deprecated. use /stats endpoint for the current nps value.")
    phone_number: Optional[StrictStr] = None
    profile_picture_path: Optional[StrictStr] = None
    social_media: Optional[SocialMedia] = None
    state: Optional[StrictStr] = Field(default=None, description="\\@deprecated. use mailing or billing key.")
    status: Optional[StrictStr] = None
    street: Optional[StrictStr] = Field(default=None, description="\\@deprecated. use mailing or billing key.")
    timezone: Optional[StrictStr] = None
    tms_user_name: Optional[StrictStr] = Field(default=None, description="\\@deprecated. use `vendor` key")
    user_groups: Optional[List[UserGroup]] = None
    vendor: Optional[UserVendor] = None
    zip_code: Optional[StrictStr] = Field(default=None, description="\\@deprecated. use mailing or billing key. new key name is \"zip\".")
    __properties: ClassVar[List[str]] = ["billing", "birthday", "can_work_manual_files", "city", "client", "corporate_id", "country", "created_at", "do_not_contact", "email", "first_name", "has_pwd", "id", "is_client", "is_developer", "is_proofreader", "is_prospect", "is_sales_person", "is_vendor", "language_pairs", "last_name", "last_seen_online_at", "links", "locale", "mailing", "name", "native_language", "nps", "phone_number", "profile_picture_path", "social_media", "state", "status", "street", "timezone", "tms_user_name", "user_groups", "vendor", "zip_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in language_pairs (list)
        _items = []
        if self.language_pairs:
            for _item_language_pairs in self.language_pairs:
                if _item_language_pairs:
                    _items.append(_item_language_pairs.to_dict())
            _dict['language_pairs'] = _items
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mailing
        if self.mailing:
            _dict['mailing'] = self.mailing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of social_media
        if self.social_media:
            _dict['social_media'] = self.social_media.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in user_groups (list)
        _items = []
        if self.user_groups:
            for _item_user_groups in self.user_groups:
                if _item_user_groups:
                    _items.append(_item_user_groups.to_dict())
            _dict['user_groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of vendor
        if self.vendor:
            _dict['vendor'] = self.vendor.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing": BillingAddress.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "birthday": obj.get("birthday"),
            "can_work_manual_files": obj.get("can_work_manual_files"),
            "city": obj.get("city"),
            "client": UserClient.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "corporate_id": obj.get("corporate_id"),
            "country": obj.get("country"),
            "created_at": obj.get("created_at"),
            "do_not_contact": obj.get("do_not_contact"),
            "email": obj.get("email"),
            "first_name": obj.get("first_name"),
            "has_pwd": obj.get("has_pwd"),
            "id": obj.get("id"),
            "is_client": obj.get("is_client"),
            "is_developer": obj.get("is_developer"),
            "is_proofreader": obj.get("is_proofreader"),
            "is_prospect": obj.get("is_prospect"),
            "is_sales_person": obj.get("is_sales_person"),
            "is_vendor": obj.get("is_vendor"),
            "language_pairs": [LanguagePair.from_dict(_item) for _item in obj["language_pairs"]] if obj.get("language_pairs") is not None else None,
            "last_name": obj.get("last_name"),
            "last_seen_online_at": obj.get("last_seen_online_at"),
            "links": UserLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "locale": obj.get("locale"),
            "mailing": Address.from_dict(obj["mailing"]) if obj.get("mailing") is not None else None,
            "name": obj.get("name"),
            "native_language": obj.get("native_language"),
            "nps": obj.get("nps"),
            "phone_number": obj.get("phone_number"),
            "profile_picture_path": obj.get("profile_picture_path"),
            "social_media": SocialMedia.from_dict(obj["social_media"]) if obj.get("social_media") is not None else None,
            "state": obj.get("state"),
            "status": obj.get("status"),
            "street": obj.get("street"),
            "timezone": obj.get("timezone"),
            "tms_user_name": obj.get("tms_user_name"),
            "user_groups": [UserGroup.from_dict(_item) for _item in obj["user_groups"]] if obj.get("user_groups") is not None else None,
            "vendor": UserVendor.from_dict(obj["vendor"]) if obj.get("vendor") is not None else None,
            "zip_code": obj.get("zip_code")
        })
        return _obj


