# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.string_translation_state import StringTranslationState
from typing import Optional, Set
from typing_extensions import Self

class StringInSearch(BaseModel):
    """
    StringInSearch
    """ # noqa: E501
    file_id: Optional[StrictInt] = None
    internal_project_id: Optional[StrictInt] = None
    last_updated: Optional[datetime] = Field(default=None, description="the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z")
    project_id: Optional[StrictInt] = None
    search_score: Optional[Union[StrictFloat, StrictInt]] = None
    source: Optional[StrictStr] = None
    status: Optional[StringTranslationState] = None
    string_id: Optional[StrictInt] = None
    target: Optional[StrictStr] = None
    targets: Optional[List[StrictStr]] = None
    tm_name: Optional[StrictStr] = None
    type: Optional[StrictStr] = Field(default=None, description="String search result typ from ZNT. Options are LOCAL_PROJECT, IMPORTED_TM. Imported TM results should probably not be visible to end users.")
    __properties: ClassVar[List[str]] = ["file_id", "internal_project_id", "last_updated", "project_id", "search_score", "source", "status", "string_id", "target", "targets", "tm_name", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOCAL_PROJECT', 'IMPORTED_TM']):
            raise ValueError("must be one of enum values ('LOCAL_PROJECT', 'IMPORTED_TM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StringInSearch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StringInSearch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "file_id": obj.get("file_id"),
            "internal_project_id": obj.get("internal_project_id"),
            "last_updated": obj.get("last_updated"),
            "project_id": obj.get("project_id"),
            "search_score": obj.get("search_score"),
            "source": obj.get("source"),
            "status": obj.get("status"),
            "string_id": obj.get("string_id"),
            "target": obj.get("target"),
            "targets": obj.get("targets"),
            "tm_name": obj.get("tm_name"),
            "type": obj.get("type")
        })
        return _obj


