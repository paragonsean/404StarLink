# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.blog_article_links import BlogArticleLinks
from typing import Optional, Set
from typing_extensions import Self

class BlogArticle(BaseModel):
    """
    BlogArticle
    """ # noqa: E501
    announcement_type: Optional[StrictStr] = None
    author: Optional[StrictStr] = None
    content: Optional[StrictStr] = Field(default=None, description="Article content")
    created_at: Optional[datetime] = Field(default=None, description="the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z")
    excerpt: Optional[StrictStr] = Field(default=None, description="Article excerpt")
    id: Optional[StrictInt] = None
    language: Optional[StrictStr] = Field(default=None, description="language code")
    links: Optional[BlogArticleLinks] = None
    slug: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    topic: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["announcement_type", "author", "content", "created_at", "excerpt", "id", "language", "links", "slug", "title", "topic"]

    @field_validator('announcement_type')
    def announcement_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['article', 'case', 'famous-translators', 'sales']):
            raise ValueError("must be one of enum values ('article', 'case', 'famous-translators', 'sales')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlogArticle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlogArticle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "announcement_type": obj.get("announcement_type"),
            "author": obj.get("author"),
            "content": obj.get("content"),
            "created_at": obj.get("created_at"),
            "excerpt": obj.get("excerpt"),
            "id": obj.get("id"),
            "language": obj.get("language"),
            "links": BlogArticleLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "slug": obj.get("slug"),
            "title": obj.get("title"),
            "topic": obj.get("topic")
        })
        return _obj


