# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.billing_address import BillingAddress
from openapi_client.models.credit_card import CreditCard
from openapi_client.models.payment_info_corporate import PaymentInfoCorporate
from typing import Optional, Set
from typing_extensions import Self

class PaymentInfo(BaseModel):
    """
    PaymentInfo
    """ # noqa: E501
    billing: Optional[BillingAddress] = None
    card: Optional[CreditCard] = None
    cards: Optional[List[CreditCard]] = None
    corporate: Optional[PaymentInfoCorporate] = None
    shared_card: Optional[CreditCard] = None
    __properties: ClassVar[List[str]] = ["billing", "card", "cards", "corporate", "shared_card"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in cards (list)
        _items = []
        if self.cards:
            for _item_cards in self.cards:
                if _item_cards:
                    _items.append(_item_cards.to_dict())
            _dict['cards'] = _items
        # override the default output from pydantic by calling `to_dict()` of corporate
        if self.corporate:
            _dict['corporate'] = self.corporate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shared_card
        if self.shared_card:
            _dict['shared_card'] = self.shared_card.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing": BillingAddress.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "card": CreditCard.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "cards": [CreditCard.from_dict(_item) for _item in obj["cards"]] if obj.get("cards") is not None else None,
            "corporate": PaymentInfoCorporate.from_dict(obj["corporate"]) if obj.get("corporate") is not None else None,
            "shared_card": CreditCard.from_dict(obj["shared_card"]) if obj.get("shared_card") is not None else None
        })
        return _obj


