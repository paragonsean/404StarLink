# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.continuous_project_links import ContinuousProjectLinks
from openapi_client.models.subscription import Subscription
from typing import Optional, Set
from typing_extensions import Self

class ContinuousProject(BaseModel):
    """
    ContinuousProject
    """ # noqa: E501
    analytics_enabled: Optional[StrictBool] = Field(default=None, description="Should we collect analytics data from Active for this continuous project?")
    auto_start_postedit: Optional[StrictBool] = Field(default=None, description="Immediately start post-editing project for translation requests that are applied MT.")
    created_at: Optional[datetime] = Field(default=None, description="the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z")
    id: Optional[StrictInt] = None
    is_enabled: Optional[StrictBool] = None
    last_activity_at: Optional[datetime] = Field(default=None, description="the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z")
    links: Optional[ContinuousProjectLinks] = None
    mt_enabled: Optional[StrictBool] = Field(default=None, description="Immediately apply MT on translation requests if they are missing from TM.")
    mt_engine: Optional[StrictStr] = Field(default=None, description="One of \"MOTAWORD\", \"GOOGLE\", \"AMAZON\", \"MS\". Default is \"MOTAWORD\".")
    name: Optional[StrictStr] = None
    postedit_enabled: Optional[StrictBool] = Field(default=None, description="Get an instant quote for translation requests that are applied MT.")
    source_language: Optional[StrictStr] = None
    status: Optional[StrictStr] = Field(default=None, description="One of \"a => ACTIVE\", \"i => INACTIVE\", \"d => DELETED\", \"c => SCHEDULED CANCELLATION\", \"p => SCHEDULED CHANGE\"")
    subscription: Optional[Subscription] = None
    target_languages: Optional[List[StrictStr]] = None
    type: Optional[StrictStr] = Field(default=None, description="Continuous project type. We currently have only 2 types, NULL and \"active\".")
    word_count: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["analytics_enabled", "auto_start_postedit", "created_at", "id", "is_enabled", "last_activity_at", "links", "mt_enabled", "mt_engine", "name", "postedit_enabled", "source_language", "status", "subscription", "target_languages", "type", "word_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContinuousProject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription:
            _dict['subscription'] = self.subscription.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContinuousProject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analytics_enabled": obj.get("analytics_enabled"),
            "auto_start_postedit": obj.get("auto_start_postedit"),
            "created_at": obj.get("created_at"),
            "id": obj.get("id"),
            "is_enabled": obj.get("is_enabled"),
            "last_activity_at": obj.get("last_activity_at"),
            "links": ContinuousProjectLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "mt_enabled": obj.get("mt_enabled"),
            "mt_engine": obj.get("mt_engine"),
            "name": obj.get("name"),
            "postedit_enabled": obj.get("postedit_enabled"),
            "source_language": obj.get("source_language"),
            "status": obj.get("status"),
            "subscription": Subscription.from_dict(obj["subscription"]) if obj.get("subscription") is not None else None,
            "target_languages": obj.get("target_languages"),
            "type": obj.get("type"),
            "word_count": obj.get("word_count")
        })
        return _obj


