# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.document_links import DocumentLinks
from openapi_client.models.manual_file import ManualFile
from typing import Optional, Set
from typing_extensions import Self

class Document(BaseModel):
    """
    Document
    """ # noqa: E501
    file_type: Optional[StrictStr] = Field(default=None, description="Extension of the file")
    has_custom_package: Optional[StrictBool] = None
    id: Optional[StrictInt] = None
    links: Optional[DocumentLinks] = None
    manual_files: Optional[List[ManualFile]] = None
    name: Optional[StrictStr] = None
    project_id: Optional[StrictInt] = None
    review_in_manual_editor: Optional[StrictBool] = None
    scheme: Optional[Dict[str, Any]] = None
    search_score: Optional[Union[StrictFloat, StrictInt]] = None
    source_language: Optional[StrictStr] = None
    subject: Optional[StrictStr] = None
    target_languages: Optional[List[StrictStr]] = None
    uploaded_at: Optional[StrictInt] = Field(default=None, description="Unix epoch time")
    word_count: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["file_type", "has_custom_package", "id", "links", "manual_files", "name", "project_id", "review_in_manual_editor", "scheme", "search_score", "source_language", "subject", "target_languages", "uploaded_at", "word_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Document from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in manual_files (list)
        _items = []
        if self.manual_files:
            for _item_manual_files in self.manual_files:
                if _item_manual_files:
                    _items.append(_item_manual_files.to_dict())
            _dict['manual_files'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Document from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "file_type": obj.get("file_type"),
            "has_custom_package": obj.get("has_custom_package"),
            "id": obj.get("id"),
            "links": DocumentLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "manual_files": [ManualFile.from_dict(_item) for _item in obj["manual_files"]] if obj.get("manual_files") is not None else None,
            "name": obj.get("name"),
            "project_id": obj.get("project_id"),
            "review_in_manual_editor": obj.get("review_in_manual_editor"),
            "scheme": obj.get("scheme"),
            "search_score": obj.get("search_score"),
            "source_language": obj.get("source_language"),
            "subject": obj.get("subject"),
            "target_languages": obj.get("target_languages"),
            "uploaded_at": obj.get("uploaded_at"),
            "word_count": obj.get("word_count")
        })
        return _obj


