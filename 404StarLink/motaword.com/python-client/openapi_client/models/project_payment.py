# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProjectPayment(BaseModel):
    """
    ProjectPayment
    """ # noqa: E501
    bin: Optional[StrictStr] = Field(default=None, description="Last 4 digits of the credit card you are using one-time. This parameter is only required when stripe_token is provided.")
    budget_code: Optional[StrictStr] = Field(default=None, description="Optional with corporate accounts. Not available for others.")
    card_id: Optional[StrictInt] = Field(default=None, description="Optional. `client`, `app`, `corporate_card` methods require a credit card ID. `credit` method requires Stripe token and bin.")
    payment_code: Optional[StrictStr] = Field(default=None, description="Optional. `corporate` payment method requires this.s")
    payment_method: Optional[StrictStr] = Field(default=None, description="Optional. Determines which method to use for payment. `client`, `app`, `corporate_card` methods require a credit card ID. `credit` method requires Stripe token and bin. `corporate` method follows corporate account policy automatically, either follows invoicing flow or automatically charges corporate's primary card.")
    stripe_token: Optional[StrictStr] = Field(default=None, description="This is required if you are using a one-time credit card. This is the token generted from frontend via Stripe SDK. If you are using a one-time card with `stripe_token`, you must also provide `bin`, last 4 digits of the card.")
    __properties: ClassVar[List[str]] = ["bin", "budget_code", "card_id", "payment_code", "payment_method", "stripe_token"]

    @field_validator('payment_method')
    def payment_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['corporate', 'client', 'app', 'credit', 'corporate_card']):
            raise ValueError("must be one of enum values ('corporate', 'client', 'app', 'credit', 'corporate_card')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectPayment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectPayment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bin": obj.get("bin"),
            "budget_code": obj.get("budget_code"),
            "card_id": obj.get("card_id"),
            "payment_code": obj.get("payment_code"),
            "payment_method": obj.get("payment_method"),
            "stripe_token": obj.get("stripe_token")
        })
        return _obj


