# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class FilterVendorRequest(BaseModel):
    """
    FilterVendorRequest
    """ # noqa: E501
    clients: Optional[List[StrictInt]] = None
    communication_channel: Optional[List[StrictStr]] = None
    corporate_ids_for_auth: Optional[List[StrictInt]] = None
    corporates: Optional[List[StrictInt]] = None
    country: Optional[List[StrictStr]] = None
    created_at: Optional[StrictStr] = None
    current_services: Optional[List[StrictStr]] = None
    daily_proofreading_capacity: Optional[StrictInt] = None
    daily_translation_capacity: Optional[StrictInt] = None
    destination_languages: Optional[List[StrictInt]] = None
    dtp_software: Optional[List[StrictStr]] = None
    email_address: Optional[StrictStr] = None
    experience: Optional[List[StrictStr]] = None
    first_name: Optional[StrictStr] = None
    id: Optional[List[StrictInt]] = None
    is_certified_translator: Optional[StrictBool] = None
    is_sworn_translator: Optional[StrictBool] = None
    language_pairs: Optional[List[List[StrictInt]]] = None
    last_name: Optional[StrictStr] = None
    last_online: Optional[StrictStr] = None
    last_worked: Optional[StrictStr] = None
    memoq: Optional[StrictInt] = None
    memsource: Optional[StrictInt] = None
    min_tqs: Optional[Union[StrictFloat, StrictInt]] = None
    omegat: Optional[StrictInt] = None
    project_count: Optional[StrictInt] = None
    proofreader_experience: Optional[StrictInt] = None
    provides_creative_writing_service: Optional[StrictBool] = None
    provides_postedit_service: Optional[StrictBool] = None
    quote_file_subjects: Optional[List[StrictStr]] = None
    reference: Optional[StrictStr] = None
    sdl_trados: Optional[StrictInt] = None
    search: Optional[StrictStr] = None
    skype_id: Optional[StrictStr] = None
    smartcat: Optional[StrictInt] = None
    smartling: Optional[StrictInt] = None
    source_languages: Optional[List[StrictInt]] = None
    specialization: Optional[List[StrictStr]] = None
    status: Optional[List[StrictStr]] = None
    subtitle_edit: Optional[StrictInt] = None
    subtitle_workshop: Optional[StrictInt] = None
    translator_association: Optional[StrictStr] = None
    transsuite_2000: Optional[StrictInt] = None
    user_working_timezone: Optional[List[StrictStr]] = None
    vendor_profile_lsp: Optional[StrictStr] = None
    vendor_tags: Optional[List[StrictStr]] = None
    vendor_type: Optional[List[StrictStr]] = None
    vendor_working_timezone: Optional[List[StrictStr]] = None
    word_count: Optional[StrictInt] = None
    wordbee: Optional[StrictInt] = None
    wordfast: Optional[StrictInt] = None
    work_type: Optional[StrictStr] = None
    work_with: Optional[StrictStr] = None
    working_as: Optional[List[StrictStr]] = None
    xbench: Optional[StrictInt] = None
    xtm: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["clients", "communication_channel", "corporate_ids_for_auth", "corporates", "country", "created_at", "current_services", "daily_proofreading_capacity", "daily_translation_capacity", "destination_languages", "dtp_software", "email_address", "experience", "first_name", "id", "is_certified_translator", "is_sworn_translator", "language_pairs", "last_name", "last_online", "last_worked", "memoq", "memsource", "min_tqs", "omegat", "project_count", "proofreader_experience", "provides_creative_writing_service", "provides_postedit_service", "quote_file_subjects", "reference", "sdl_trados", "search", "skype_id", "smartcat", "smartling", "source_languages", "specialization", "status", "subtitle_edit", "subtitle_workshop", "translator_association", "transsuite_2000", "user_working_timezone", "vendor_profile_lsp", "vendor_tags", "vendor_type", "vendor_working_timezone", "word_count", "wordbee", "wordfast", "work_type", "work_with", "working_as", "xbench", "xtm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilterVendorRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilterVendorRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clients": obj.get("clients"),
            "communication_channel": obj.get("communication_channel"),
            "corporate_ids_for_auth": obj.get("corporate_ids_for_auth"),
            "corporates": obj.get("corporates"),
            "country": obj.get("country"),
            "created_at": obj.get("created_at"),
            "current_services": obj.get("current_services"),
            "daily_proofreading_capacity": obj.get("daily_proofreading_capacity"),
            "daily_translation_capacity": obj.get("daily_translation_capacity"),
            "destination_languages": obj.get("destination_languages"),
            "dtp_software": obj.get("dtp_software"),
            "email_address": obj.get("email_address"),
            "experience": obj.get("experience"),
            "first_name": obj.get("first_name"),
            "id": obj.get("id"),
            "is_certified_translator": obj.get("is_certified_translator"),
            "is_sworn_translator": obj.get("is_sworn_translator"),
            "language_pairs": obj.get("language_pairs"),
            "last_name": obj.get("last_name"),
            "last_online": obj.get("last_online"),
            "last_worked": obj.get("last_worked"),
            "memoq": obj.get("memoq"),
            "memsource": obj.get("memsource"),
            "min_tqs": obj.get("min_tqs"),
            "omegat": obj.get("omegat"),
            "project_count": obj.get("project_count"),
            "proofreader_experience": obj.get("proofreader_experience"),
            "provides_creative_writing_service": obj.get("provides_creative_writing_service"),
            "provides_postedit_service": obj.get("provides_postedit_service"),
            "quote_file_subjects": obj.get("quote_file_subjects"),
            "reference": obj.get("reference"),
            "sdl_trados": obj.get("sdl_trados"),
            "search": obj.get("search"),
            "skype_id": obj.get("skype_id"),
            "smartcat": obj.get("smartcat"),
            "smartling": obj.get("smartling"),
            "source_languages": obj.get("source_languages"),
            "specialization": obj.get("specialization"),
            "status": obj.get("status"),
            "subtitle_edit": obj.get("subtitle_edit"),
            "subtitle_workshop": obj.get("subtitle_workshop"),
            "translator_association": obj.get("translator_association"),
            "transsuite_2000": obj.get("transsuite_2000"),
            "user_working_timezone": obj.get("user_working_timezone"),
            "vendor_profile_lsp": obj.get("vendor_profile_lsp"),
            "vendor_tags": obj.get("vendor_tags"),
            "vendor_type": obj.get("vendor_type"),
            "vendor_working_timezone": obj.get("vendor_working_timezone"),
            "word_count": obj.get("word_count"),
            "wordbee": obj.get("wordbee"),
            "wordfast": obj.get("wordfast"),
            "work_type": obj.get("work_type"),
            "work_with": obj.get("work_with"),
            "working_as": obj.get("working_as"),
            "xbench": obj.get("xbench"),
            "xtm": obj.get("xtm")
        })
        return _obj


