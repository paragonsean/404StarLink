# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.progress_link import ProgressLink
from openapi_client.models.progress_sub import ProgressSub
from openapi_client.models.project_status import ProjectStatus
from typing import Optional, Set
from typing_extensions import Self

class Progress(BaseModel):
    """
    Progress
    """ # noqa: E501
    proofreading: Optional[Union[StrictFloat, StrictInt]] = None
    total: Optional[Union[StrictFloat, StrictInt]] = None
    translation: Optional[Union[StrictFloat, StrictInt]] = None
    word_count: Optional[StrictInt] = None
    languages: Optional[Dict[str, ProgressSub]] = None
    links: Optional[ProgressLink] = None
    project_status: Optional[ProjectStatus] = None
    __properties: ClassVar[List[str]] = ["proofreading", "total", "translation", "word_count", "languages", "links", "project_status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Progress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in languages (dict)
        _field_dict = {}
        if self.languages:
            for _key_languages in self.languages:
                if self.languages[_key_languages]:
                    _field_dict[_key_languages] = self.languages[_key_languages].to_dict()
            _dict['languages'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Progress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "proofreading": obj.get("proofreading"),
            "total": obj.get("total"),
            "translation": obj.get("translation"),
            "word_count": obj.get("word_count"),
            "languages": dict(
                (_k, ProgressSub.from_dict(_v))
                for _k, _v in obj["languages"].items()
            )
            if obj.get("languages") is not None
            else None,
            "links": ProgressLink.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "project_status": obj.get("project_status")
        })
        return _obj


