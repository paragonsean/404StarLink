# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.href import Href
from typing import Optional, Set
from typing_extensions import Self

class ProjectLinks(BaseModel):
    """
    ProjectLinks
    """ # noqa: E501
    var_self: Optional[Href] = Field(default=None, alias="self")
    documents: Optional[Href] = None
    glossaries: Optional[Href] = None
    payment: Optional[Href] = None
    quote_pdf: Optional[Href] = Field(default=None, alias="quote-pdf")
    styleguides: Optional[Href] = None
    __properties: ClassVar[List[str]] = ["self", "documents", "glossaries", "payment", "quote-pdf", "styleguides"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of documents
        if self.documents:
            _dict['documents'] = self.documents.to_dict()
        # override the default output from pydantic by calling `to_dict()` of glossaries
        if self.glossaries:
            _dict['glossaries'] = self.glossaries.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment
        if self.payment:
            _dict['payment'] = self.payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote_pdf
        if self.quote_pdf:
            _dict['quote-pdf'] = self.quote_pdf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of styleguides
        if self.styleguides:
            _dict['styleguides'] = self.styleguides.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "self": Href.from_dict(obj["self"]) if obj.get("self") is not None else None,
            "documents": Href.from_dict(obj["documents"]) if obj.get("documents") is not None else None,
            "glossaries": Href.from_dict(obj["glossaries"]) if obj.get("glossaries") is not None else None,
            "payment": Href.from_dict(obj["payment"]) if obj.get("payment") is not None else None,
            "quote-pdf": Href.from_dict(obj["quote-pdf"]) if obj.get("quote-pdf") is not None else None,
            "styleguides": Href.from_dict(obj["styleguides"]) if obj.get("styleguides") is not None else None
        })
        return _obj


