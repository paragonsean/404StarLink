# coding: utf-8

"""
    Color Name API

    An API that provides names for colors based on their hex value

    The version of the OpenAPI document: 1.0.0
    Contact: color-name-api@elastiq.click
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.color_base_swatch_img import ColorBaseSwatchImg
from openapi_client.models.color_hsl import ColorHsl
from openapi_client.models.color_lab import ColorLab
from openapi_client.models.color_rgb import ColorRgb
from typing import Optional, Set
from typing_extensions import Self

class ColorBase(BaseModel):
    """
    ColorBase
    """ # noqa: E501
    hex: Optional[StrictStr] = None
    hsl: Optional[ColorHsl] = None
    lab: Optional[ColorLab] = None
    luminance: Optional[Union[StrictFloat, StrictInt]] = None
    luminance_wcag: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="luminanceWCAG")
    name: Optional[StrictStr] = None
    rgb: Optional[ColorRgb] = None
    swatch_img: Optional[ColorBaseSwatchImg] = Field(default=None, alias="swatchImg")
    __properties: ClassVar[List[str]] = ["hex", "hsl", "lab", "luminance", "luminanceWCAG", "name", "rgb", "swatchImg"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ColorBase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hsl
        if self.hsl:
            _dict['hsl'] = self.hsl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lab
        if self.lab:
            _dict['lab'] = self.lab.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rgb
        if self.rgb:
            _dict['rgb'] = self.rgb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of swatch_img
        if self.swatch_img:
            _dict['swatchImg'] = self.swatch_img.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ColorBase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hex": obj.get("hex"),
            "hsl": ColorHsl.from_dict(obj["hsl"]) if obj.get("hsl") is not None else None,
            "lab": ColorLab.from_dict(obj["lab"]) if obj.get("lab") is not None else None,
            "luminance": obj.get("luminance"),
            "luminanceWCAG": obj.get("luminanceWCAG"),
            "name": obj.get("name"),
            "rgb": ColorRgb.from_dict(obj["rgb"]) if obj.get("rgb") is not None else None,
            "swatchImg": ColorBaseSwatchImg.from_dict(obj["swatchImg"]) if obj.get("swatchImg") is not None else None
        })
        return _obj


