# coding: utf-8

"""
    Color Name API

    An API that provides names for colors based on their hex value

    The version of the OpenAPI document: 1.0.0
    Contact: color-name-api@elastiq.click
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.list_description import ListDescription
from typing import Optional, Set
from typing_extensions import Self

class ListsGet200ResponseListDescriptions(BaseModel):
    """
    ListsGet200ResponseListDescriptions
    """ # noqa: E501
    basic: Optional[ListDescription] = None
    best_of: Optional[ListDescription] = Field(default=None, alias="bestOf")
    chinese_traditional: Optional[ListDescription] = Field(default=None, alias="chineseTraditional")
    default: Optional[ListDescription] = None
    french: Optional[ListDescription] = None
    html: Optional[ListDescription] = None
    japanese_traditional: Optional[ListDescription] = Field(default=None, alias="japaneseTraditional")
    le_corbusier: Optional[ListDescription] = Field(default=None, alias="leCorbusier")
    nbs_iscc: Optional[ListDescription] = Field(default=None, alias="nbsIscc")
    ntc: Optional[ListDescription] = None
    osxcrayons: Optional[ListDescription] = None
    ral: Optional[ListDescription] = None
    ridgway: Optional[ListDescription] = None
    risograph: Optional[ListDescription] = None
    sanzo_wada_i: Optional[ListDescription] = Field(default=None, alias="sanzoWadaI")
    thesaurus: Optional[ListDescription] = None
    werner: Optional[ListDescription] = None
    wikipedia: Optional[ListDescription] = None
    windows: Optional[ListDescription] = None
    x11: Optional[ListDescription] = None
    xkcd: Optional[ListDescription] = None
    __properties: ClassVar[List[str]] = ["basic", "bestOf", "chineseTraditional", "default", "french", "html", "japaneseTraditional", "leCorbusier", "nbsIscc", "ntc", "osxcrayons", "ral", "ridgway", "risograph", "sanzoWadaI", "thesaurus", "werner", "wikipedia", "windows", "x11", "xkcd"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListsGet200ResponseListDescriptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basic
        if self.basic:
            _dict['basic'] = self.basic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of best_of
        if self.best_of:
            _dict['bestOf'] = self.best_of.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chinese_traditional
        if self.chinese_traditional:
            _dict['chineseTraditional'] = self.chinese_traditional.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default
        if self.default:
            _dict['default'] = self.default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of french
        if self.french:
            _dict['french'] = self.french.to_dict()
        # override the default output from pydantic by calling `to_dict()` of html
        if self.html:
            _dict['html'] = self.html.to_dict()
        # override the default output from pydantic by calling `to_dict()` of japanese_traditional
        if self.japanese_traditional:
            _dict['japaneseTraditional'] = self.japanese_traditional.to_dict()
        # override the default output from pydantic by calling `to_dict()` of le_corbusier
        if self.le_corbusier:
            _dict['leCorbusier'] = self.le_corbusier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nbs_iscc
        if self.nbs_iscc:
            _dict['nbsIscc'] = self.nbs_iscc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ntc
        if self.ntc:
            _dict['ntc'] = self.ntc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of osxcrayons
        if self.osxcrayons:
            _dict['osxcrayons'] = self.osxcrayons.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ral
        if self.ral:
            _dict['ral'] = self.ral.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ridgway
        if self.ridgway:
            _dict['ridgway'] = self.ridgway.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risograph
        if self.risograph:
            _dict['risograph'] = self.risograph.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sanzo_wada_i
        if self.sanzo_wada_i:
            _dict['sanzoWadaI'] = self.sanzo_wada_i.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thesaurus
        if self.thesaurus:
            _dict['thesaurus'] = self.thesaurus.to_dict()
        # override the default output from pydantic by calling `to_dict()` of werner
        if self.werner:
            _dict['werner'] = self.werner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wikipedia
        if self.wikipedia:
            _dict['wikipedia'] = self.wikipedia.to_dict()
        # override the default output from pydantic by calling `to_dict()` of windows
        if self.windows:
            _dict['windows'] = self.windows.to_dict()
        # override the default output from pydantic by calling `to_dict()` of x11
        if self.x11:
            _dict['x11'] = self.x11.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xkcd
        if self.xkcd:
            _dict['xkcd'] = self.xkcd.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListsGet200ResponseListDescriptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basic": ListDescription.from_dict(obj["basic"]) if obj.get("basic") is not None else None,
            "bestOf": ListDescription.from_dict(obj["bestOf"]) if obj.get("bestOf") is not None else None,
            "chineseTraditional": ListDescription.from_dict(obj["chineseTraditional"]) if obj.get("chineseTraditional") is not None else None,
            "default": ListDescription.from_dict(obj["default"]) if obj.get("default") is not None else None,
            "french": ListDescription.from_dict(obj["french"]) if obj.get("french") is not None else None,
            "html": ListDescription.from_dict(obj["html"]) if obj.get("html") is not None else None,
            "japaneseTraditional": ListDescription.from_dict(obj["japaneseTraditional"]) if obj.get("japaneseTraditional") is not None else None,
            "leCorbusier": ListDescription.from_dict(obj["leCorbusier"]) if obj.get("leCorbusier") is not None else None,
            "nbsIscc": ListDescription.from_dict(obj["nbsIscc"]) if obj.get("nbsIscc") is not None else None,
            "ntc": ListDescription.from_dict(obj["ntc"]) if obj.get("ntc") is not None else None,
            "osxcrayons": ListDescription.from_dict(obj["osxcrayons"]) if obj.get("osxcrayons") is not None else None,
            "ral": ListDescription.from_dict(obj["ral"]) if obj.get("ral") is not None else None,
            "ridgway": ListDescription.from_dict(obj["ridgway"]) if obj.get("ridgway") is not None else None,
            "risograph": ListDescription.from_dict(obj["risograph"]) if obj.get("risograph") is not None else None,
            "sanzoWadaI": ListDescription.from_dict(obj["sanzoWadaI"]) if obj.get("sanzoWadaI") is not None else None,
            "thesaurus": ListDescription.from_dict(obj["thesaurus"]) if obj.get("thesaurus") is not None else None,
            "werner": ListDescription.from_dict(obj["werner"]) if obj.get("werner") is not None else None,
            "wikipedia": ListDescription.from_dict(obj["wikipedia"]) if obj.get("wikipedia") is not None else None,
            "windows": ListDescription.from_dict(obj["windows"]) if obj.get("windows") is not None else None,
            "x11": ListDescription.from_dict(obj["x11"]) if obj.get("x11") is not None else None,
            "xkcd": ListDescription.from_dict(obj["xkcd"]) if obj.get("xkcd") is not None else None
        })
        return _obj


