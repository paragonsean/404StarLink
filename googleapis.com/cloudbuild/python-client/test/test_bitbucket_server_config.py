# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.bitbucket_server_config import BitbucketServerConfig

class TestBitbucketServerConfig(unittest.TestCase):
    """BitbucketServerConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BitbucketServerConfig:
        """Test BitbucketServerConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BitbucketServerConfig`
        """
        model = BitbucketServerConfig()
        if include_optional:
            return BitbucketServerConfig(
                api_key = '',
                connected_repositories = [
                    openapi_client.models.bitbucket_server_repository_id.BitbucketServerRepositoryId(
                        project_key = '', 
                        repo_slug = '', 
                        webhook_id = 56, )
                    ],
                create_time = '',
                host_uri = '',
                name = '',
                peered_network = '',
                secrets = openapi_client.models.bitbucket_server_secrets.BitbucketServerSecrets(
                    admin_access_token_version_name = '', 
                    read_access_token_version_name = '', 
                    webhook_secret_version_name = '', ),
                ssl_ca = '',
                username = '',
                webhook_key = ''
            )
        else:
            return BitbucketServerConfig(
        )
        """

    def testBitbucketServerConfig(self):
        """Test BitbucketServerConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
