# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.git_hub_enterprise_config import GitHubEnterpriseConfig

class TestGitHubEnterpriseConfig(unittest.TestCase):
    """GitHubEnterpriseConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GitHubEnterpriseConfig:
        """Test GitHubEnterpriseConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GitHubEnterpriseConfig`
        """
        model = GitHubEnterpriseConfig()
        if include_optional:
            return GitHubEnterpriseConfig(
                app_id = '',
                create_time = '',
                display_name = '',
                host_url = '',
                name = '',
                peered_network = '',
                secrets = openapi_client.models.git_hub_enterprise_secrets.GitHubEnterpriseSecrets(
                    oauth_client_id_name = '', 
                    oauth_client_id_version_name = '', 
                    oauth_secret_name = '', 
                    oauth_secret_version_name = '', 
                    private_key_name = '', 
                    private_key_version_name = '', 
                    webhook_secret_name = '', 
                    webhook_secret_version_name = '', ),
                ssl_ca = '',
                webhook_key = ''
            )
        else:
            return GitHubEnterpriseConfig(
        )
        """

    def testGitHubEnterpriseConfig(self):
        """Test GitHubEnterpriseConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
