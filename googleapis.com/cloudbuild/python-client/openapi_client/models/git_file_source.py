# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GitFileSource(BaseModel):
    """
    GitFileSource describes a file within a (possibly remote) code repository.
    """ # noqa: E501
    bitbucket_server_config: Optional[StrictStr] = Field(default=None, description="The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.", alias="bitbucketServerConfig")
    github_enterprise_config: Optional[StrictStr] = Field(default=None, description="The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.", alias="githubEnterpriseConfig")
    path: Optional[StrictStr] = Field(default=None, description="The path of the file, with the repo root as the root of the path.")
    repo_type: Optional[StrictStr] = Field(default=None, description="See RepoType above.", alias="repoType")
    revision: Optional[StrictStr] = Field(default=None, description="The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.")
    uri: Optional[StrictStr] = Field(default=None, description="The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.")
    __properties: ClassVar[List[str]] = ["bitbucketServerConfig", "githubEnterpriseConfig", "path", "repoType", "revision", "uri"]

    @field_validator('repo_type')
    def repo_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'CLOUD_SOURCE_REPOSITORIES', 'GITHUB', 'BITBUCKET_SERVER', 'GITLAB']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'CLOUD_SOURCE_REPOSITORIES', 'GITHUB', 'BITBUCKET_SERVER', 'GITLAB')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GitFileSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GitFileSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bitbucketServerConfig": obj.get("bitbucketServerConfig"),
            "githubEnterpriseConfig": obj.get("githubEnterpriseConfig"),
            "path": obj.get("path"),
            "repoType": obj.get("repoType"),
            "revision": obj.get("revision"),
            "uri": obj.get("uri")
        })
        return _obj


