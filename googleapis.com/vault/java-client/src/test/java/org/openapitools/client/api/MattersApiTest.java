/*
 * Google Vault API
 * Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddHeldAccountsRequest;
import org.openapitools.client.model.AddHeldAccountsResponse;
import org.openapitools.client.model.AddMatterPermissionsRequest;
import org.openapitools.client.model.CloseMatterResponse;
import org.openapitools.client.model.CountArtifactsRequest;
import org.openapitools.client.model.Export;
import org.openapitools.client.model.HeldAccount;
import org.openapitools.client.model.Hold;
import org.openapitools.client.model.ListExportsResponse;
import org.openapitools.client.model.ListHeldAccountsResponse;
import org.openapitools.client.model.ListHoldsResponse;
import org.openapitools.client.model.ListMattersResponse;
import org.openapitools.client.model.ListSavedQueriesResponse;
import org.openapitools.client.model.Matter;
import org.openapitools.client.model.MatterPermission;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.RemoveHeldAccountsRequest;
import org.openapitools.client.model.RemoveHeldAccountsResponse;
import org.openapitools.client.model.RemoveMatterPermissionsRequest;
import org.openapitools.client.model.ReopenMatterResponse;
import org.openapitools.client.model.SavedQuery;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MattersApi
 */
@Disabled
public class MattersApiTest {

    private final MattersApi api = new MattersApi();

    /**
     * Adds an account as a matter collaborator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersAddPermissionsTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddMatterPermissionsRequest addMatterPermissionsRequest = null;
        MatterPermission response = api.vaultMattersAddPermissions(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addMatterPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Closes the specified matter. Returns the matter with updated state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersCloseTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        CloseMatterResponse response = api.vaultMattersClose(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Counts the accounts processed by the specified query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersCountTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CountArtifactsRequest countArtifactsRequest = null;
        Operation response = api.vaultMattersCount(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, countArtifactsRequest);
        // TODO: test validations
    }

    /**
     * Creates a matter with the given name and description. The initial state is open, and the owner is the method caller. Returns the created matter with default view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Matter matter = null;
        Matter response = api.vaultMattersCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, matter);
        // TODO: test validations
    }

    /**
     * Deletes the specified matter. Returns the matter with updated state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersDeleteTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Matter response = api.vaultMattersDelete(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates an export.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersExportsCreateTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Export export = null;
        Export response = api.vaultMattersExportsCreate(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, export);
        // TODO: test validations
    }

    /**
     * Deletes an export.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersExportsDeleteTest() throws ApiException {
        String matterId = null;
        String exportId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.vaultMattersExportsDelete(matterId, exportId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets an export.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersExportsGetTest() throws ApiException {
        String matterId = null;
        String exportId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Export response = api.vaultMattersExportsGet(matterId, exportId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists details about the exports in the specified matter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersExportsListTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListExportsResponse response = api.vaultMattersExportsList(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Gets the specified matter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersGetTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        Matter response = api.vaultMattersGet(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Adds an account to a hold. Accounts can be added only to a hold that does not have an organizational unit set. If you try to add an account to an organizational unit-based hold, an error is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersHoldsAccountsCreateTest() throws ApiException {
        String matterId = null;
        String holdId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        HeldAccount heldAccount = null;
        HeldAccount response = api.vaultMattersHoldsAccountsCreate(matterId, holdId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, heldAccount);
        // TODO: test validations
    }

    /**
     * Removes an account from a hold.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersHoldsAccountsDeleteTest() throws ApiException {
        String matterId = null;
        String holdId = null;
        String accountId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.vaultMattersHoldsAccountsDelete(matterId, holdId, accountId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the accounts covered by a hold. This can list only individually-specified accounts covered by the hold. If the hold covers an organizational unit, use the [Admin SDK](https://developers.google.com/admin-sdk/). to list the members of the organizational unit on hold.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersHoldsAccountsListTest() throws ApiException {
        String matterId = null;
        String holdId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListHeldAccountsResponse response = api.vaultMattersHoldsAccountsList(matterId, holdId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Adds accounts to a hold. Returns a list of accounts that have been successfully added. Accounts can be added only to an existing account-based hold.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersHoldsAddHeldAccountsTest() throws ApiException {
        String matterId = null;
        String holdId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddHeldAccountsRequest addHeldAccountsRequest = null;
        AddHeldAccountsResponse response = api.vaultMattersHoldsAddHeldAccounts(matterId, holdId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addHeldAccountsRequest);
        // TODO: test validations
    }

    /**
     * Creates a hold in the specified matter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersHoldsCreateTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Hold hold = null;
        Hold response = api.vaultMattersHoldsCreate(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, hold);
        // TODO: test validations
    }

    /**
     * Removes the specified hold and releases the accounts or organizational unit covered by the hold. If the data is not preserved by another hold or retention rule, it might be purged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersHoldsDeleteTest() throws ApiException {
        String matterId = null;
        String holdId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.vaultMattersHoldsDelete(matterId, holdId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the specified hold.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersHoldsGetTest() throws ApiException {
        String matterId = null;
        String holdId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        Hold response = api.vaultMattersHoldsGet(matterId, holdId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Lists the holds in a matter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersHoldsListTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListHoldsResponse response = api.vaultMattersHoldsList(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Removes the specified accounts from a hold. Returns a list of statuses in the same order as the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersHoldsRemoveHeldAccountsTest() throws ApiException {
        String matterId = null;
        String holdId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveHeldAccountsRequest removeHeldAccountsRequest = null;
        RemoveHeldAccountsResponse response = api.vaultMattersHoldsRemoveHeldAccounts(matterId, holdId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeHeldAccountsRequest);
        // TODO: test validations
    }

    /**
     * Updates the scope (organizational unit or accounts) and query parameters of a hold. You cannot add accounts to a hold that covers an organizational unit, nor can you add organizational units to a hold that covers individual accounts. If you try, the unsupported values are ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersHoldsUpdateTest() throws ApiException {
        String matterId = null;
        String holdId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Hold hold = null;
        Hold response = api.vaultMattersHoldsUpdate(matterId, holdId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, hold);
        // TODO: test validations
    }

    /**
     * Lists matters the requestor has access to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        String state = null;
        String view = null;
        ListMattersResponse response = api.vaultMattersList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken, state, view);
        // TODO: test validations
    }

    /**
     * Removes an account as a matter collaborator.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersRemovePermissionsTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveMatterPermissionsRequest removeMatterPermissionsRequest = null;
        Object response = api.vaultMattersRemovePermissions(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeMatterPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Reopens the specified matter. Returns the matter with updated state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersReopenTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        ReopenMatterResponse response = api.vaultMattersReopen(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a saved query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersSavedQueriesCreateTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SavedQuery savedQuery = null;
        SavedQuery response = api.vaultMattersSavedQueriesCreate(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, savedQuery);
        // TODO: test validations
    }

    /**
     * Deletes the specified saved query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersSavedQueriesDeleteTest() throws ApiException {
        String matterId = null;
        String savedQueryId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.vaultMattersSavedQueriesDelete(matterId, savedQueryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves the specified saved query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersSavedQueriesGetTest() throws ApiException {
        String matterId = null;
        String savedQueryId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SavedQuery response = api.vaultMattersSavedQueriesGet(matterId, savedQueryId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the saved queries in a matter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersSavedQueriesListTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSavedQueriesResponse response = api.vaultMattersSavedQueriesList(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Undeletes the specified matter. Returns the matter with updated state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersUndeleteTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Matter response = api.vaultMattersUndelete(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Updates the specified matter. This updates only the name and description of the matter, identified by matter ID. Changes to any other fields are ignored. Returns the default view of the matter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vaultMattersUpdateTest() throws ApiException {
        String matterId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Matter matter = null;
        Matter response = api.vaultMattersUpdate(matterId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, matter);
        // TODO: test validations
    }

}
