/*
 * Google Vault API
 * Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The shared drives to search
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:17:41.496021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SharedDriveInfo {
  public static final String SERIALIZED_NAME_SHARED_DRIVE_IDS = "sharedDriveIds";
  @SerializedName(SERIALIZED_NAME_SHARED_DRIVE_IDS)
  private List<String> sharedDriveIds = new ArrayList<>();

  public SharedDriveInfo() {
  }

  public SharedDriveInfo sharedDriveIds(List<String> sharedDriveIds) {
    this.sharedDriveIds = sharedDriveIds;
    return this;
  }

  public SharedDriveInfo addSharedDriveIdsItem(String sharedDriveIdsItem) {
    if (this.sharedDriveIds == null) {
      this.sharedDriveIds = new ArrayList<>();
    }
    this.sharedDriveIds.add(sharedDriveIdsItem);
    return this;
  }

  /**
   * A list of shared drive IDs, as provided by the [Drive API](https://developers.google.com/drive).
   * @return sharedDriveIds
   */
  @javax.annotation.Nullable
  public List<String> getSharedDriveIds() {
    return sharedDriveIds;
  }

  public void setSharedDriveIds(List<String> sharedDriveIds) {
    this.sharedDriveIds = sharedDriveIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedDriveInfo sharedDriveInfo = (SharedDriveInfo) o;
    return Objects.equals(this.sharedDriveIds, sharedDriveInfo.sharedDriveIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sharedDriveIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedDriveInfo {\n");
    sb.append("    sharedDriveIds: ").append(toIndentedString(sharedDriveIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sharedDriveIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SharedDriveInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SharedDriveInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SharedDriveInfo is not found in the empty JSON string", SharedDriveInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SharedDriveInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SharedDriveInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("sharedDriveIds") != null && !jsonObj.get("sharedDriveIds").isJsonNull() && !jsonObj.get("sharedDriveIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedDriveIds` to be an array in the JSON string but got `%s`", jsonObj.get("sharedDriveIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SharedDriveInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SharedDriveInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SharedDriveInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SharedDriveInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SharedDriveInfo>() {
           @Override
           public void write(JsonWriter out, SharedDriveInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SharedDriveInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SharedDriveInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SharedDriveInfo
   * @throws IOException if the JSON string is invalid with respect to SharedDriveInfo
   */
  public static SharedDriveInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SharedDriveInfo.class);
  }

  /**
   * Convert an instance of SharedDriveInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

