/*
 * Google Vault API
 * Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountInfo;
import org.openapitools.client.model.DriveOptions;
import org.openapitools.client.model.HangoutsChatInfo;
import org.openapitools.client.model.HangoutsChatOptions;
import org.openapitools.client.model.MailOptions;
import org.openapitools.client.model.OrgUnitInfo;
import org.openapitools.client.model.SharedDriveInfo;
import org.openapitools.client.model.SitesUrlInfo;
import org.openapitools.client.model.TeamDriveInfo;
import org.openapitools.client.model.VoiceOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The query definition used for search and export.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:17:41.496021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Query {
  public static final String SERIALIZED_NAME_ACCOUNT_INFO = "accountInfo";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_INFO)
  private AccountInfo accountInfo;

  /**
   * The Google Workspace service to search.
   */
  @JsonAdapter(CorpusEnum.Adapter.class)
  public enum CorpusEnum {
    CORPUS_TYPE_UNSPECIFIED("CORPUS_TYPE_UNSPECIFIED"),
    
    DRIVE("DRIVE"),
    
    MAIL("MAIL"),
    
    GROUPS("GROUPS"),
    
    HANGOUTS_CHAT("HANGOUTS_CHAT"),
    
    VOICE("VOICE");

    private String value;

    CorpusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CorpusEnum fromValue(String value) {
      for (CorpusEnum b : CorpusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CorpusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CorpusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CorpusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CorpusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CorpusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CORPUS = "corpus";
  @SerializedName(SERIALIZED_NAME_CORPUS)
  private CorpusEnum corpus;

  /**
   * The data source to search.
   */
  @JsonAdapter(DataScopeEnum.Adapter.class)
  public enum DataScopeEnum {
    DATA_SCOPE_UNSPECIFIED("DATA_SCOPE_UNSPECIFIED"),
    
    ALL_DATA("ALL_DATA"),
    
    HELD_DATA("HELD_DATA"),
    
    UNPROCESSED_DATA("UNPROCESSED_DATA");

    private String value;

    DataScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataScopeEnum fromValue(String value) {
      for (DataScopeEnum b : DataScopeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataScopeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataScopeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_SCOPE = "dataScope";
  @SerializedName(SERIALIZED_NAME_DATA_SCOPE)
  private DataScopeEnum dataScope;

  public static final String SERIALIZED_NAME_DRIVE_OPTIONS = "driveOptions";
  @SerializedName(SERIALIZED_NAME_DRIVE_OPTIONS)
  private DriveOptions driveOptions;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_HANGOUTS_CHAT_INFO = "hangoutsChatInfo";
  @SerializedName(SERIALIZED_NAME_HANGOUTS_CHAT_INFO)
  private HangoutsChatInfo hangoutsChatInfo;

  public static final String SERIALIZED_NAME_HANGOUTS_CHAT_OPTIONS = "hangoutsChatOptions";
  @SerializedName(SERIALIZED_NAME_HANGOUTS_CHAT_OPTIONS)
  private HangoutsChatOptions hangoutsChatOptions;

  public static final String SERIALIZED_NAME_MAIL_OPTIONS = "mailOptions";
  @SerializedName(SERIALIZED_NAME_MAIL_OPTIONS)
  private MailOptions mailOptions;

  /**
   * The entity to search. This field replaces **searchMethod** to support shared drives. When **searchMethod** is **TEAM_DRIVE**, the response of this field is **SHARED_DRIVE**.
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    SEARCH_METHOD_UNSPECIFIED("SEARCH_METHOD_UNSPECIFIED"),
    
    ACCOUNT("ACCOUNT"),
    
    ORG_UNIT("ORG_UNIT"),
    
    TEAM_DRIVE("TEAM_DRIVE"),
    
    ENTIRE_ORG("ENTIRE_ORG"),
    
    ROOM("ROOM"),
    
    SITES_URL("SITES_URL"),
    
    SHARED_DRIVE("SHARED_DRIVE");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;

  public static final String SERIALIZED_NAME_ORG_UNIT_INFO = "orgUnitInfo";
  @SerializedName(SERIALIZED_NAME_ORG_UNIT_INFO)
  private OrgUnitInfo orgUnitInfo;

  /**
   * The search method to use.
   */
  @JsonAdapter(SearchMethodEnum.Adapter.class)
  public enum SearchMethodEnum {
    SEARCH_METHOD_UNSPECIFIED("SEARCH_METHOD_UNSPECIFIED"),
    
    ACCOUNT("ACCOUNT"),
    
    ORG_UNIT("ORG_UNIT"),
    
    TEAM_DRIVE("TEAM_DRIVE"),
    
    ENTIRE_ORG("ENTIRE_ORG"),
    
    ROOM("ROOM"),
    
    SITES_URL("SITES_URL"),
    
    SHARED_DRIVE("SHARED_DRIVE");

    private String value;

    SearchMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchMethodEnum fromValue(String value) {
      for (SearchMethodEnum b : SearchMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SearchMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SearchMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SearchMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEARCH_METHOD = "searchMethod";
  @SerializedName(SERIALIZED_NAME_SEARCH_METHOD)
  private SearchMethodEnum searchMethod;

  public static final String SERIALIZED_NAME_SHARED_DRIVE_INFO = "sharedDriveInfo";
  @SerializedName(SERIALIZED_NAME_SHARED_DRIVE_INFO)
  private SharedDriveInfo sharedDriveInfo;

  public static final String SERIALIZED_NAME_SITES_URL_INFO = "sitesUrlInfo";
  @SerializedName(SERIALIZED_NAME_SITES_URL_INFO)
  private SitesUrlInfo sitesUrlInfo;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TEAM_DRIVE_INFO = "teamDriveInfo";
  @SerializedName(SERIALIZED_NAME_TEAM_DRIVE_INFO)
  private TeamDriveInfo teamDriveInfo;

  public static final String SERIALIZED_NAME_TERMS = "terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private String terms;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_VOICE_OPTIONS = "voiceOptions";
  @SerializedName(SERIALIZED_NAME_VOICE_OPTIONS)
  private VoiceOptions voiceOptions;

  public Query() {
  }

  public Query accountInfo(AccountInfo accountInfo) {
    this.accountInfo = accountInfo;
    return this;
  }

  /**
   * Get accountInfo
   * @return accountInfo
   */
  @javax.annotation.Nullable
  public AccountInfo getAccountInfo() {
    return accountInfo;
  }

  public void setAccountInfo(AccountInfo accountInfo) {
    this.accountInfo = accountInfo;
  }


  public Query corpus(CorpusEnum corpus) {
    this.corpus = corpus;
    return this;
  }

  /**
   * The Google Workspace service to search.
   * @return corpus
   */
  @javax.annotation.Nullable
  public CorpusEnum getCorpus() {
    return corpus;
  }

  public void setCorpus(CorpusEnum corpus) {
    this.corpus = corpus;
  }


  public Query dataScope(DataScopeEnum dataScope) {
    this.dataScope = dataScope;
    return this;
  }

  /**
   * The data source to search.
   * @return dataScope
   */
  @javax.annotation.Nullable
  public DataScopeEnum getDataScope() {
    return dataScope;
  }

  public void setDataScope(DataScopeEnum dataScope) {
    this.dataScope = dataScope;
  }


  public Query driveOptions(DriveOptions driveOptions) {
    this.driveOptions = driveOptions;
    return this;
  }

  /**
   * Get driveOptions
   * @return driveOptions
   */
  @javax.annotation.Nullable
  public DriveOptions getDriveOptions() {
    return driveOptions;
  }

  public void setDriveOptions(DriveOptions driveOptions) {
    this.driveOptions = driveOptions;
  }


  public Query endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time for the search query. Specify in GMT. The value is rounded to 12 AM on the specified date.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public Query hangoutsChatInfo(HangoutsChatInfo hangoutsChatInfo) {
    this.hangoutsChatInfo = hangoutsChatInfo;
    return this;
  }

  /**
   * Get hangoutsChatInfo
   * @return hangoutsChatInfo
   */
  @javax.annotation.Nullable
  public HangoutsChatInfo getHangoutsChatInfo() {
    return hangoutsChatInfo;
  }

  public void setHangoutsChatInfo(HangoutsChatInfo hangoutsChatInfo) {
    this.hangoutsChatInfo = hangoutsChatInfo;
  }


  public Query hangoutsChatOptions(HangoutsChatOptions hangoutsChatOptions) {
    this.hangoutsChatOptions = hangoutsChatOptions;
    return this;
  }

  /**
   * Get hangoutsChatOptions
   * @return hangoutsChatOptions
   */
  @javax.annotation.Nullable
  public HangoutsChatOptions getHangoutsChatOptions() {
    return hangoutsChatOptions;
  }

  public void setHangoutsChatOptions(HangoutsChatOptions hangoutsChatOptions) {
    this.hangoutsChatOptions = hangoutsChatOptions;
  }


  public Query mailOptions(MailOptions mailOptions) {
    this.mailOptions = mailOptions;
    return this;
  }

  /**
   * Get mailOptions
   * @return mailOptions
   */
  @javax.annotation.Nullable
  public MailOptions getMailOptions() {
    return mailOptions;
  }

  public void setMailOptions(MailOptions mailOptions) {
    this.mailOptions = mailOptions;
  }


  public Query method(MethodEnum method) {
    this.method = method;
    return this;
  }

  /**
   * The entity to search. This field replaces **searchMethod** to support shared drives. When **searchMethod** is **TEAM_DRIVE**, the response of this field is **SHARED_DRIVE**.
   * @return method
   */
  @javax.annotation.Nullable
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(MethodEnum method) {
    this.method = method;
  }


  public Query orgUnitInfo(OrgUnitInfo orgUnitInfo) {
    this.orgUnitInfo = orgUnitInfo;
    return this;
  }

  /**
   * Get orgUnitInfo
   * @return orgUnitInfo
   */
  @javax.annotation.Nullable
  public OrgUnitInfo getOrgUnitInfo() {
    return orgUnitInfo;
  }

  public void setOrgUnitInfo(OrgUnitInfo orgUnitInfo) {
    this.orgUnitInfo = orgUnitInfo;
  }


  public Query searchMethod(SearchMethodEnum searchMethod) {
    this.searchMethod = searchMethod;
    return this;
  }

  /**
   * The search method to use.
   * @return searchMethod
   */
  @javax.annotation.Nullable
  public SearchMethodEnum getSearchMethod() {
    return searchMethod;
  }

  public void setSearchMethod(SearchMethodEnum searchMethod) {
    this.searchMethod = searchMethod;
  }


  public Query sharedDriveInfo(SharedDriveInfo sharedDriveInfo) {
    this.sharedDriveInfo = sharedDriveInfo;
    return this;
  }

  /**
   * Get sharedDriveInfo
   * @return sharedDriveInfo
   */
  @javax.annotation.Nullable
  public SharedDriveInfo getSharedDriveInfo() {
    return sharedDriveInfo;
  }

  public void setSharedDriveInfo(SharedDriveInfo sharedDriveInfo) {
    this.sharedDriveInfo = sharedDriveInfo;
  }


  public Query sitesUrlInfo(SitesUrlInfo sitesUrlInfo) {
    this.sitesUrlInfo = sitesUrlInfo;
    return this;
  }

  /**
   * Get sitesUrlInfo
   * @return sitesUrlInfo
   */
  @javax.annotation.Nullable
  public SitesUrlInfo getSitesUrlInfo() {
    return sitesUrlInfo;
  }

  public void setSitesUrlInfo(SitesUrlInfo sitesUrlInfo) {
    this.sitesUrlInfo = sitesUrlInfo;
  }


  public Query startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time for the search query. Specify in GMT. The value is rounded to 12 AM on the specified date.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public Query teamDriveInfo(TeamDriveInfo teamDriveInfo) {
    this.teamDriveInfo = teamDriveInfo;
    return this;
  }

  /**
   * Get teamDriveInfo
   * @return teamDriveInfo
   */
  @javax.annotation.Nullable
  public TeamDriveInfo getTeamDriveInfo() {
    return teamDriveInfo;
  }

  public void setTeamDriveInfo(TeamDriveInfo teamDriveInfo) {
    this.teamDriveInfo = teamDriveInfo;
  }


  public Query terms(String terms) {
    this.terms = terms;
    return this;
  }

  /**
   * Service-specific [search operators](https://support.google.com/vault/answer/2474474) to filter search results.
   * @return terms
   */
  @javax.annotation.Nullable
  public String getTerms() {
    return terms;
  }

  public void setTerms(String terms) {
    this.terms = terms;
  }


  public Query timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * The time zone name. It should be an IANA TZ name, such as \&quot;America/Los_Angeles\&quot;. For a list of time zone names, see [Time Zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). For more information about how Vault uses time zones, see [the Vault help center](https://support.google.com/vault/answer/6092995#time).
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public Query voiceOptions(VoiceOptions voiceOptions) {
    this.voiceOptions = voiceOptions;
    return this;
  }

  /**
   * Get voiceOptions
   * @return voiceOptions
   */
  @javax.annotation.Nullable
  public VoiceOptions getVoiceOptions() {
    return voiceOptions;
  }

  public void setVoiceOptions(VoiceOptions voiceOptions) {
    this.voiceOptions = voiceOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Query query = (Query) o;
    return Objects.equals(this.accountInfo, query.accountInfo) &&
        Objects.equals(this.corpus, query.corpus) &&
        Objects.equals(this.dataScope, query.dataScope) &&
        Objects.equals(this.driveOptions, query.driveOptions) &&
        Objects.equals(this.endTime, query.endTime) &&
        Objects.equals(this.hangoutsChatInfo, query.hangoutsChatInfo) &&
        Objects.equals(this.hangoutsChatOptions, query.hangoutsChatOptions) &&
        Objects.equals(this.mailOptions, query.mailOptions) &&
        Objects.equals(this.method, query.method) &&
        Objects.equals(this.orgUnitInfo, query.orgUnitInfo) &&
        Objects.equals(this.searchMethod, query.searchMethod) &&
        Objects.equals(this.sharedDriveInfo, query.sharedDriveInfo) &&
        Objects.equals(this.sitesUrlInfo, query.sitesUrlInfo) &&
        Objects.equals(this.startTime, query.startTime) &&
        Objects.equals(this.teamDriveInfo, query.teamDriveInfo) &&
        Objects.equals(this.terms, query.terms) &&
        Objects.equals(this.timeZone, query.timeZone) &&
        Objects.equals(this.voiceOptions, query.voiceOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountInfo, corpus, dataScope, driveOptions, endTime, hangoutsChatInfo, hangoutsChatOptions, mailOptions, method, orgUnitInfo, searchMethod, sharedDriveInfo, sitesUrlInfo, startTime, teamDriveInfo, terms, timeZone, voiceOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query {\n");
    sb.append("    accountInfo: ").append(toIndentedString(accountInfo)).append("\n");
    sb.append("    corpus: ").append(toIndentedString(corpus)).append("\n");
    sb.append("    dataScope: ").append(toIndentedString(dataScope)).append("\n");
    sb.append("    driveOptions: ").append(toIndentedString(driveOptions)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    hangoutsChatInfo: ").append(toIndentedString(hangoutsChatInfo)).append("\n");
    sb.append("    hangoutsChatOptions: ").append(toIndentedString(hangoutsChatOptions)).append("\n");
    sb.append("    mailOptions: ").append(toIndentedString(mailOptions)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    orgUnitInfo: ").append(toIndentedString(orgUnitInfo)).append("\n");
    sb.append("    searchMethod: ").append(toIndentedString(searchMethod)).append("\n");
    sb.append("    sharedDriveInfo: ").append(toIndentedString(sharedDriveInfo)).append("\n");
    sb.append("    sitesUrlInfo: ").append(toIndentedString(sitesUrlInfo)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    teamDriveInfo: ").append(toIndentedString(teamDriveInfo)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    voiceOptions: ").append(toIndentedString(voiceOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountInfo");
    openapiFields.add("corpus");
    openapiFields.add("dataScope");
    openapiFields.add("driveOptions");
    openapiFields.add("endTime");
    openapiFields.add("hangoutsChatInfo");
    openapiFields.add("hangoutsChatOptions");
    openapiFields.add("mailOptions");
    openapiFields.add("method");
    openapiFields.add("orgUnitInfo");
    openapiFields.add("searchMethod");
    openapiFields.add("sharedDriveInfo");
    openapiFields.add("sitesUrlInfo");
    openapiFields.add("startTime");
    openapiFields.add("teamDriveInfo");
    openapiFields.add("terms");
    openapiFields.add("timeZone");
    openapiFields.add("voiceOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Query
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Query.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Query is not found in the empty JSON string", Query.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Query.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Query` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accountInfo`
      if (jsonObj.get("accountInfo") != null && !jsonObj.get("accountInfo").isJsonNull()) {
        AccountInfo.validateJsonElement(jsonObj.get("accountInfo"));
      }
      if ((jsonObj.get("corpus") != null && !jsonObj.get("corpus").isJsonNull()) && !jsonObj.get("corpus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `corpus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("corpus").toString()));
      }
      // validate the optional field `corpus`
      if (jsonObj.get("corpus") != null && !jsonObj.get("corpus").isJsonNull()) {
        CorpusEnum.validateJsonElement(jsonObj.get("corpus"));
      }
      if ((jsonObj.get("dataScope") != null && !jsonObj.get("dataScope").isJsonNull()) && !jsonObj.get("dataScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataScope").toString()));
      }
      // validate the optional field `dataScope`
      if (jsonObj.get("dataScope") != null && !jsonObj.get("dataScope").isJsonNull()) {
        DataScopeEnum.validateJsonElement(jsonObj.get("dataScope"));
      }
      // validate the optional field `driveOptions`
      if (jsonObj.get("driveOptions") != null && !jsonObj.get("driveOptions").isJsonNull()) {
        DriveOptions.validateJsonElement(jsonObj.get("driveOptions"));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // validate the optional field `hangoutsChatInfo`
      if (jsonObj.get("hangoutsChatInfo") != null && !jsonObj.get("hangoutsChatInfo").isJsonNull()) {
        HangoutsChatInfo.validateJsonElement(jsonObj.get("hangoutsChatInfo"));
      }
      // validate the optional field `hangoutsChatOptions`
      if (jsonObj.get("hangoutsChatOptions") != null && !jsonObj.get("hangoutsChatOptions").isJsonNull()) {
        HangoutsChatOptions.validateJsonElement(jsonObj.get("hangoutsChatOptions"));
      }
      // validate the optional field `mailOptions`
      if (jsonObj.get("mailOptions") != null && !jsonObj.get("mailOptions").isJsonNull()) {
        MailOptions.validateJsonElement(jsonObj.get("mailOptions"));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      // validate the optional field `method`
      if (jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) {
        MethodEnum.validateJsonElement(jsonObj.get("method"));
      }
      // validate the optional field `orgUnitInfo`
      if (jsonObj.get("orgUnitInfo") != null && !jsonObj.get("orgUnitInfo").isJsonNull()) {
        OrgUnitInfo.validateJsonElement(jsonObj.get("orgUnitInfo"));
      }
      if ((jsonObj.get("searchMethod") != null && !jsonObj.get("searchMethod").isJsonNull()) && !jsonObj.get("searchMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchMethod").toString()));
      }
      // validate the optional field `searchMethod`
      if (jsonObj.get("searchMethod") != null && !jsonObj.get("searchMethod").isJsonNull()) {
        SearchMethodEnum.validateJsonElement(jsonObj.get("searchMethod"));
      }
      // validate the optional field `sharedDriveInfo`
      if (jsonObj.get("sharedDriveInfo") != null && !jsonObj.get("sharedDriveInfo").isJsonNull()) {
        SharedDriveInfo.validateJsonElement(jsonObj.get("sharedDriveInfo"));
      }
      // validate the optional field `sitesUrlInfo`
      if (jsonObj.get("sitesUrlInfo") != null && !jsonObj.get("sitesUrlInfo").isJsonNull()) {
        SitesUrlInfo.validateJsonElement(jsonObj.get("sitesUrlInfo"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      // validate the optional field `teamDriveInfo`
      if (jsonObj.get("teamDriveInfo") != null && !jsonObj.get("teamDriveInfo").isJsonNull()) {
        TeamDriveInfo.validateJsonElement(jsonObj.get("teamDriveInfo"));
      }
      if ((jsonObj.get("terms") != null && !jsonObj.get("terms").isJsonNull()) && !jsonObj.get("terms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terms").toString()));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      // validate the optional field `voiceOptions`
      if (jsonObj.get("voiceOptions") != null && !jsonObj.get("voiceOptions").isJsonNull()) {
        VoiceOptions.validateJsonElement(jsonObj.get("voiceOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Query.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Query' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Query> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Query.class));

       return (TypeAdapter<T>) new TypeAdapter<Query>() {
           @Override
           public void write(JsonWriter out, Query value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Query read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Query given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Query
   * @throws IOException if the JSON string is invalid with respect to Query
   */
  public static Query fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Query.class);
  }

  /**
   * Convert an instance of Query to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

