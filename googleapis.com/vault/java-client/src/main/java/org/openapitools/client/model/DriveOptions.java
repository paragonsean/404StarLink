/*
 * Google Vault API
 * Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional options for Drive search
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:17:41.496021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DriveOptions {
  /**
   * Set whether the results include only content encrypted with [Google Workspace Client-side encryption](https://support.google.com/a?p&#x3D;cse_ov) content, only unencrypted content, or both. Defaults to both. Currently supported for Drive.
   */
  @JsonAdapter(ClientSideEncryptedOptionEnum.Adapter.class)
  public enum ClientSideEncryptedOptionEnum {
    UNSPECIFIED("CLIENT_SIDE_ENCRYPTED_OPTION_UNSPECIFIED"),
    
    ANY("CLIENT_SIDE_ENCRYPTED_OPTION_ANY"),
    
    ENCRYPTED("CLIENT_SIDE_ENCRYPTED_OPTION_ENCRYPTED"),
    
    UNENCRYPTED("CLIENT_SIDE_ENCRYPTED_OPTION_UNENCRYPTED");

    private String value;

    ClientSideEncryptedOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClientSideEncryptedOptionEnum fromValue(String value) {
      for (ClientSideEncryptedOptionEnum b : ClientSideEncryptedOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClientSideEncryptedOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientSideEncryptedOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClientSideEncryptedOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClientSideEncryptedOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClientSideEncryptedOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLIENT_SIDE_ENCRYPTED_OPTION = "clientSideEncryptedOption";
  @SerializedName(SERIALIZED_NAME_CLIENT_SIDE_ENCRYPTED_OPTION)
  private ClientSideEncryptedOptionEnum clientSideEncryptedOption;

  public static final String SERIALIZED_NAME_INCLUDE_SHARED_DRIVES = "includeSharedDrives";
  @SerializedName(SERIALIZED_NAME_INCLUDE_SHARED_DRIVES)
  private Boolean includeSharedDrives;

  public static final String SERIALIZED_NAME_INCLUDE_TEAM_DRIVES = "includeTeamDrives";
  @SerializedName(SERIALIZED_NAME_INCLUDE_TEAM_DRIVES)
  private Boolean includeTeamDrives;

  public static final String SERIALIZED_NAME_VERSION_DATE = "versionDate";
  @SerializedName(SERIALIZED_NAME_VERSION_DATE)
  private String versionDate;

  public DriveOptions() {
  }

  public DriveOptions clientSideEncryptedOption(ClientSideEncryptedOptionEnum clientSideEncryptedOption) {
    this.clientSideEncryptedOption = clientSideEncryptedOption;
    return this;
  }

  /**
   * Set whether the results include only content encrypted with [Google Workspace Client-side encryption](https://support.google.com/a?p&#x3D;cse_ov) content, only unencrypted content, or both. Defaults to both. Currently supported for Drive.
   * @return clientSideEncryptedOption
   */
  @javax.annotation.Nullable
  public ClientSideEncryptedOptionEnum getClientSideEncryptedOption() {
    return clientSideEncryptedOption;
  }

  public void setClientSideEncryptedOption(ClientSideEncryptedOptionEnum clientSideEncryptedOption) {
    this.clientSideEncryptedOption = clientSideEncryptedOption;
  }


  public DriveOptions includeSharedDrives(Boolean includeSharedDrives) {
    this.includeSharedDrives = includeSharedDrives;
    return this;
  }

  /**
   * Set to **true** to include shared drives.
   * @return includeSharedDrives
   */
  @javax.annotation.Nullable
  public Boolean getIncludeSharedDrives() {
    return includeSharedDrives;
  }

  public void setIncludeSharedDrives(Boolean includeSharedDrives) {
    this.includeSharedDrives = includeSharedDrives;
  }


  public DriveOptions includeTeamDrives(Boolean includeTeamDrives) {
    this.includeTeamDrives = includeTeamDrives;
    return this;
  }

  /**
   * Set to true to include Team Drive.
   * @return includeTeamDrives
   */
  @javax.annotation.Nullable
  public Boolean getIncludeTeamDrives() {
    return includeTeamDrives;
  }

  public void setIncludeTeamDrives(Boolean includeTeamDrives) {
    this.includeTeamDrives = includeTeamDrives;
  }


  public DriveOptions versionDate(String versionDate) {
    this.versionDate = versionDate;
    return this;
  }

  /**
   * Search the current version of the Drive file, but export the contents of the last version saved before 12:00 AM UTC on the specified date. Enter the date in UTC.
   * @return versionDate
   */
  @javax.annotation.Nullable
  public String getVersionDate() {
    return versionDate;
  }

  public void setVersionDate(String versionDate) {
    this.versionDate = versionDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DriveOptions driveOptions = (DriveOptions) o;
    return Objects.equals(this.clientSideEncryptedOption, driveOptions.clientSideEncryptedOption) &&
        Objects.equals(this.includeSharedDrives, driveOptions.includeSharedDrives) &&
        Objects.equals(this.includeTeamDrives, driveOptions.includeTeamDrives) &&
        Objects.equals(this.versionDate, driveOptions.versionDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientSideEncryptedOption, includeSharedDrives, includeTeamDrives, versionDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DriveOptions {\n");
    sb.append("    clientSideEncryptedOption: ").append(toIndentedString(clientSideEncryptedOption)).append("\n");
    sb.append("    includeSharedDrives: ").append(toIndentedString(includeSharedDrives)).append("\n");
    sb.append("    includeTeamDrives: ").append(toIndentedString(includeTeamDrives)).append("\n");
    sb.append("    versionDate: ").append(toIndentedString(versionDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientSideEncryptedOption");
    openapiFields.add("includeSharedDrives");
    openapiFields.add("includeTeamDrives");
    openapiFields.add("versionDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DriveOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DriveOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DriveOptions is not found in the empty JSON string", DriveOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DriveOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DriveOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientSideEncryptedOption") != null && !jsonObj.get("clientSideEncryptedOption").isJsonNull()) && !jsonObj.get("clientSideEncryptedOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSideEncryptedOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSideEncryptedOption").toString()));
      }
      // validate the optional field `clientSideEncryptedOption`
      if (jsonObj.get("clientSideEncryptedOption") != null && !jsonObj.get("clientSideEncryptedOption").isJsonNull()) {
        ClientSideEncryptedOptionEnum.validateJsonElement(jsonObj.get("clientSideEncryptedOption"));
      }
      if ((jsonObj.get("versionDate") != null && !jsonObj.get("versionDate").isJsonNull()) && !jsonObj.get("versionDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DriveOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DriveOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DriveOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DriveOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<DriveOptions>() {
           @Override
           public void write(JsonWriter out, DriveOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DriveOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DriveOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DriveOptions
   * @throws IOException if the JSON string is invalid with respect to DriveOptions
   */
  public static DriveOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DriveOptions.class);
  }

  /**
   * Convert an instance of DriveOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

