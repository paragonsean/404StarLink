/*
 * Google Vault API
 * Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DriveExportOptions;
import org.openapitools.client.model.GroupsExportOptions;
import org.openapitools.client.model.HangoutsChatExportOptions;
import org.openapitools.client.model.MailExportOptions;
import org.openapitools.client.model.VoiceExportOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Additional options for exports
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:17:41.496021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportOptions {
  public static final String SERIALIZED_NAME_DRIVE_OPTIONS = "driveOptions";
  @SerializedName(SERIALIZED_NAME_DRIVE_OPTIONS)
  private DriveExportOptions driveOptions;

  public static final String SERIALIZED_NAME_GROUPS_OPTIONS = "groupsOptions";
  @SerializedName(SERIALIZED_NAME_GROUPS_OPTIONS)
  private GroupsExportOptions groupsOptions;

  public static final String SERIALIZED_NAME_HANGOUTS_CHAT_OPTIONS = "hangoutsChatOptions";
  @SerializedName(SERIALIZED_NAME_HANGOUTS_CHAT_OPTIONS)
  private HangoutsChatExportOptions hangoutsChatOptions;

  public static final String SERIALIZED_NAME_MAIL_OPTIONS = "mailOptions";
  @SerializedName(SERIALIZED_NAME_MAIL_OPTIONS)
  private MailExportOptions mailOptions;

  /**
   * The requested data region for the export.
   */
  @JsonAdapter(RegionEnum.Adapter.class)
  public enum RegionEnum {
    EXPORT_REGION_UNSPECIFIED("EXPORT_REGION_UNSPECIFIED"),
    
    ANY("ANY"),
    
    US("US"),
    
    EUROPE("EUROPE");

    private String value;

    RegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegionEnum fromValue(String value) {
      for (RegionEnum b : RegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RegionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private RegionEnum region;

  public static final String SERIALIZED_NAME_VOICE_OPTIONS = "voiceOptions";
  @SerializedName(SERIALIZED_NAME_VOICE_OPTIONS)
  private VoiceExportOptions voiceOptions;

  public ExportOptions() {
  }

  public ExportOptions driveOptions(DriveExportOptions driveOptions) {
    this.driveOptions = driveOptions;
    return this;
  }

  /**
   * Get driveOptions
   * @return driveOptions
   */
  @javax.annotation.Nullable
  public DriveExportOptions getDriveOptions() {
    return driveOptions;
  }

  public void setDriveOptions(DriveExportOptions driveOptions) {
    this.driveOptions = driveOptions;
  }


  public ExportOptions groupsOptions(GroupsExportOptions groupsOptions) {
    this.groupsOptions = groupsOptions;
    return this;
  }

  /**
   * Get groupsOptions
   * @return groupsOptions
   */
  @javax.annotation.Nullable
  public GroupsExportOptions getGroupsOptions() {
    return groupsOptions;
  }

  public void setGroupsOptions(GroupsExportOptions groupsOptions) {
    this.groupsOptions = groupsOptions;
  }


  public ExportOptions hangoutsChatOptions(HangoutsChatExportOptions hangoutsChatOptions) {
    this.hangoutsChatOptions = hangoutsChatOptions;
    return this;
  }

  /**
   * Get hangoutsChatOptions
   * @return hangoutsChatOptions
   */
  @javax.annotation.Nullable
  public HangoutsChatExportOptions getHangoutsChatOptions() {
    return hangoutsChatOptions;
  }

  public void setHangoutsChatOptions(HangoutsChatExportOptions hangoutsChatOptions) {
    this.hangoutsChatOptions = hangoutsChatOptions;
  }


  public ExportOptions mailOptions(MailExportOptions mailOptions) {
    this.mailOptions = mailOptions;
    return this;
  }

  /**
   * Get mailOptions
   * @return mailOptions
   */
  @javax.annotation.Nullable
  public MailExportOptions getMailOptions() {
    return mailOptions;
  }

  public void setMailOptions(MailExportOptions mailOptions) {
    this.mailOptions = mailOptions;
  }


  public ExportOptions region(RegionEnum region) {
    this.region = region;
    return this;
  }

  /**
   * The requested data region for the export.
   * @return region
   */
  @javax.annotation.Nullable
  public RegionEnum getRegion() {
    return region;
  }

  public void setRegion(RegionEnum region) {
    this.region = region;
  }


  public ExportOptions voiceOptions(VoiceExportOptions voiceOptions) {
    this.voiceOptions = voiceOptions;
    return this;
  }

  /**
   * Get voiceOptions
   * @return voiceOptions
   */
  @javax.annotation.Nullable
  public VoiceExportOptions getVoiceOptions() {
    return voiceOptions;
  }

  public void setVoiceOptions(VoiceExportOptions voiceOptions) {
    this.voiceOptions = voiceOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportOptions exportOptions = (ExportOptions) o;
    return Objects.equals(this.driveOptions, exportOptions.driveOptions) &&
        Objects.equals(this.groupsOptions, exportOptions.groupsOptions) &&
        Objects.equals(this.hangoutsChatOptions, exportOptions.hangoutsChatOptions) &&
        Objects.equals(this.mailOptions, exportOptions.mailOptions) &&
        Objects.equals(this.region, exportOptions.region) &&
        Objects.equals(this.voiceOptions, exportOptions.voiceOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(driveOptions, groupsOptions, hangoutsChatOptions, mailOptions, region, voiceOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportOptions {\n");
    sb.append("    driveOptions: ").append(toIndentedString(driveOptions)).append("\n");
    sb.append("    groupsOptions: ").append(toIndentedString(groupsOptions)).append("\n");
    sb.append("    hangoutsChatOptions: ").append(toIndentedString(hangoutsChatOptions)).append("\n");
    sb.append("    mailOptions: ").append(toIndentedString(mailOptions)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    voiceOptions: ").append(toIndentedString(voiceOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("driveOptions");
    openapiFields.add("groupsOptions");
    openapiFields.add("hangoutsChatOptions");
    openapiFields.add("mailOptions");
    openapiFields.add("region");
    openapiFields.add("voiceOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportOptions is not found in the empty JSON string", ExportOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `driveOptions`
      if (jsonObj.get("driveOptions") != null && !jsonObj.get("driveOptions").isJsonNull()) {
        DriveExportOptions.validateJsonElement(jsonObj.get("driveOptions"));
      }
      // validate the optional field `groupsOptions`
      if (jsonObj.get("groupsOptions") != null && !jsonObj.get("groupsOptions").isJsonNull()) {
        GroupsExportOptions.validateJsonElement(jsonObj.get("groupsOptions"));
      }
      // validate the optional field `hangoutsChatOptions`
      if (jsonObj.get("hangoutsChatOptions") != null && !jsonObj.get("hangoutsChatOptions").isJsonNull()) {
        HangoutsChatExportOptions.validateJsonElement(jsonObj.get("hangoutsChatOptions"));
      }
      // validate the optional field `mailOptions`
      if (jsonObj.get("mailOptions") != null && !jsonObj.get("mailOptions").isJsonNull()) {
        MailExportOptions.validateJsonElement(jsonObj.get("mailOptions"));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // validate the optional field `region`
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) {
        RegionEnum.validateJsonElement(jsonObj.get("region"));
      }
      // validate the optional field `voiceOptions`
      if (jsonObj.get("voiceOptions") != null && !jsonObj.get("voiceOptions").isJsonNull()) {
        VoiceExportOptions.validateJsonElement(jsonObj.get("voiceOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportOptions>() {
           @Override
           public void write(JsonWriter out, ExportOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportOptions
   * @throws IOException if the JSON string is invalid with respect to ExportOptions
   */
  public static ExportOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportOptions.class);
  }

  /**
   * Convert an instance of ExportOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

