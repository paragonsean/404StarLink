# coding: utf-8

"""
    Migration Center API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_summary import ReportSummary

class TestReportSummary(unittest.TestCase):
    """ReportSummary unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportSummary:
        """Test ReportSummary
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportSummary`
        """
        model = ReportSummary()
        if include_optional:
            return ReportSummary(
                all_assets_stats = openapi_client.models.report_summary_asset_aggregate_stats.ReportSummaryAssetAggregateStats(
                    asset_age = openapi_client.models.report_summary_chart_data.ReportSummaryChartData(
                        data_points = [
                            openapi_client.models.report_summary_chart_data_data_point.ReportSummaryChartDataDataPoint(
                                label = '', 
                                value = 1.337, )
                            ], ), 
                    core_count_histogram = openapi_client.models.report_summary_histogram_chart_data.ReportSummaryHistogramChartData(
                        buckets = [
                            openapi_client.models.report_summary_histogram_chart_data_bucket.ReportSummaryHistogramChartDataBucket(
                                count = '', 
                                lower_bound = '', 
                                upper_bound = '', )
                            ], ), 
                    memory_bytes_histogram = openapi_client.models.report_summary_histogram_chart_data.ReportSummaryHistogramChartData(), 
                    memory_utilization = openapi_client.models.report_summary_chart_data.ReportSummaryChartData(), 
                    memory_utilization_chart = openapi_client.models.report_summary_utilization_chart_data.ReportSummaryUtilizationChartData(
                        free = '', 
                        used = '', ), 
                    operating_system = , 
                    storage_bytes_histogram = , 
                    storage_utilization = , 
                    storage_utilization_chart = openapi_client.models.report_summary_utilization_chart_data.ReportSummaryUtilizationChartData(
                        free = '', 
                        used = '', ), 
                    total_assets = '', 
                    total_cores = '', 
                    total_memory_bytes = '', 
                    total_storage_bytes = '', ),
                group_findings = [
                    openapi_client.models.report_summary_group_finding.ReportSummaryGroupFinding(
                        asset_aggregate_stats = openapi_client.models.report_summary_asset_aggregate_stats.ReportSummaryAssetAggregateStats(
                            asset_age = openapi_client.models.report_summary_chart_data.ReportSummaryChartData(
                                data_points = [
                                    openapi_client.models.report_summary_chart_data_data_point.ReportSummaryChartDataDataPoint(
                                        label = '', 
                                        value = 1.337, )
                                    ], ), 
                            core_count_histogram = openapi_client.models.report_summary_histogram_chart_data.ReportSummaryHistogramChartData(
                                buckets = [
                                    openapi_client.models.report_summary_histogram_chart_data_bucket.ReportSummaryHistogramChartDataBucket(
                                        count = '', 
                                        lower_bound = '', 
                                        upper_bound = '', )
                                    ], ), 
                            memory_bytes_histogram = openapi_client.models.report_summary_histogram_chart_data.ReportSummaryHistogramChartData(), 
                            memory_utilization = openapi_client.models.report_summary_chart_data.ReportSummaryChartData(), 
                            memory_utilization_chart = openapi_client.models.report_summary_utilization_chart_data.ReportSummaryUtilizationChartData(
                                free = '', 
                                used = '', ), 
                            operating_system = , 
                            storage_bytes_histogram = , 
                            storage_utilization = , 
                            storage_utilization_chart = openapi_client.models.report_summary_utilization_chart_data.ReportSummaryUtilizationChartData(
                                free = '', 
                                used = '', ), 
                            total_assets = '', 
                            total_cores = '', 
                            total_memory_bytes = '', 
                            total_storage_bytes = '', ), 
                        description = '', 
                        display_name = '', 
                        overlapping_asset_count = '', 
                        preference_set_findings = [
                            openapi_client.models.report_summary_group_preference_set_finding.ReportSummaryGroupPreferenceSetFinding(
                                description = '', 
                                display_name = '', 
                                machine_finding = openapi_client.models.report_summary_machine_finding.ReportSummaryMachineFinding(
                                    allocated_asset_count = '', 
                                    allocated_disk_types = [
                                        'PERSISTENT_DISK_TYPE_UNSPECIFIED'
                                        ], 
                                    allocated_regions = [
                                        ''
                                        ], 
                                    machine_series_allocations = [
                                        openapi_client.models.report_summary_machine_series_allocation.ReportSummaryMachineSeriesAllocation(
                                            allocated_asset_count = '', 
                                            machine_series = openapi_client.models.machine_series.MachineSeries(
                                                code = '', ), )
                                        ], ), 
                                machine_preferences = openapi_client.models.virtual_machine_preferences.VirtualMachinePreferences(
                                    commitment_plan = 'COMMITMENT_PLAN_UNSPECIFIED', 
                                    compute_engine_preferences = openapi_client.models.compute_engine_preferences.ComputeEnginePreferences(
                                        license_type = 'LICENSE_TYPE_UNSPECIFIED', 
                                        persistent_disk_type = 'PERSISTENT_DISK_TYPE_UNSPECIFIED', ), 
                                    region_preferences = openapi_client.models.region_preferences.RegionPreferences(
                                        preferred_regions = [
                                            ''
                                            ], ), 
                                    sizing_optimization_strategy = 'SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED', ), 
                                monthly_cost_compute = openapi_client.models.money.Money(
                                    currency_code = '', 
                                    nanos = 56, 
                                    units = '', ), 
                                monthly_cost_network_egress = openapi_client.models.money.Money(
                                    currency_code = '', 
                                    nanos = 56, 
                                    units = '', ), 
                                monthly_cost_os_license = , 
                                monthly_cost_other = , 
                                monthly_cost_storage = , 
                                monthly_cost_total = , 
                                preferred_region = '', 
                                pricing_track = '', 
                                top_priority = '', )
                            ], )
                    ]
            )
        else:
            return ReportSummary(
        )
        """

    def testReportSummary(self):
        """Test ReportSummary"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
