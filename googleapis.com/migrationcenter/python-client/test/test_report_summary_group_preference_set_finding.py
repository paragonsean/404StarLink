# coding: utf-8

"""
    Migration Center API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_summary_group_preference_set_finding import ReportSummaryGroupPreferenceSetFinding

class TestReportSummaryGroupPreferenceSetFinding(unittest.TestCase):
    """ReportSummaryGroupPreferenceSetFinding unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportSummaryGroupPreferenceSetFinding:
        """Test ReportSummaryGroupPreferenceSetFinding
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportSummaryGroupPreferenceSetFinding`
        """
        model = ReportSummaryGroupPreferenceSetFinding()
        if include_optional:
            return ReportSummaryGroupPreferenceSetFinding(
                description = '',
                display_name = '',
                machine_finding = openapi_client.models.report_summary_machine_finding.ReportSummaryMachineFinding(
                    allocated_asset_count = '', 
                    allocated_disk_types = [
                        'PERSISTENT_DISK_TYPE_UNSPECIFIED'
                        ], 
                    allocated_regions = [
                        ''
                        ], 
                    machine_series_allocations = [
                        openapi_client.models.report_summary_machine_series_allocation.ReportSummaryMachineSeriesAllocation(
                            allocated_asset_count = '', 
                            machine_series = openapi_client.models.machine_series.MachineSeries(
                                code = '', ), )
                        ], ),
                machine_preferences = openapi_client.models.virtual_machine_preferences.VirtualMachinePreferences(
                    commitment_plan = 'COMMITMENT_PLAN_UNSPECIFIED', 
                    compute_engine_preferences = openapi_client.models.compute_engine_preferences.ComputeEnginePreferences(
                        license_type = 'LICENSE_TYPE_UNSPECIFIED', 
                        persistent_disk_type = 'PERSISTENT_DISK_TYPE_UNSPECIFIED', ), 
                    region_preferences = openapi_client.models.region_preferences.RegionPreferences(
                        preferred_regions = [
                            ''
                            ], ), 
                    sizing_optimization_strategy = 'SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED', ),
                monthly_cost_compute = openapi_client.models.money.Money(
                    currency_code = '', 
                    nanos = 56, 
                    units = '', ),
                monthly_cost_network_egress = openapi_client.models.money.Money(
                    currency_code = '', 
                    nanos = 56, 
                    units = '', ),
                monthly_cost_os_license = openapi_client.models.money.Money(
                    currency_code = '', 
                    nanos = 56, 
                    units = '', ),
                monthly_cost_other = openapi_client.models.money.Money(
                    currency_code = '', 
                    nanos = 56, 
                    units = '', ),
                monthly_cost_storage = openapi_client.models.money.Money(
                    currency_code = '', 
                    nanos = 56, 
                    units = '', ),
                monthly_cost_total = openapi_client.models.money.Money(
                    currency_code = '', 
                    nanos = 56, 
                    units = '', ),
                preferred_region = '',
                pricing_track = '',
                top_priority = ''
            )
        else:
            return ReportSummaryGroupPreferenceSetFinding(
        )
        """

    def testReportSummaryGroupPreferenceSetFinding(self):
        """Test ReportSummaryGroupPreferenceSetFinding"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
