# coding: utf-8

"""
    Migration Center API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.preference_set import PreferenceSet

class TestPreferenceSet(unittest.TestCase):
    """PreferenceSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PreferenceSet:
        """Test PreferenceSet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PreferenceSet`
        """
        model = PreferenceSet()
        if include_optional:
            return PreferenceSet(
                create_time = '',
                description = '',
                display_name = '',
                name = '',
                update_time = '',
                virtual_machine_preferences = openapi_client.models.virtual_machine_preferences.VirtualMachinePreferences(
                    commitment_plan = 'COMMITMENT_PLAN_UNSPECIFIED', 
                    compute_engine_preferences = openapi_client.models.compute_engine_preferences.ComputeEnginePreferences(
                        license_type = 'LICENSE_TYPE_UNSPECIFIED', 
                        machine_preferences = openapi_client.models.machine_preferences.MachinePreferences(
                            allowed_machine_series = [
                                openapi_client.models.machine_series.MachineSeries(
                                    code = '', )
                                ], ), 
                        persistent_disk_type = 'PERSISTENT_DISK_TYPE_UNSPECIFIED', ), 
                    region_preferences = openapi_client.models.region_preferences.RegionPreferences(
                        preferred_regions = [
                            ''
                            ], ), 
                    sizing_optimization_strategy = 'SIZING_OPTIMIZATION_STRATEGY_UNSPECIFIED', )
            )
        else:
            return PreferenceSet(
        )
        """

    def testPreferenceSet(self):
        """Test PreferenceSet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
