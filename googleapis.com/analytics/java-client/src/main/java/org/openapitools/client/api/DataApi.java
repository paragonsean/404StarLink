/*
 * Google Analytics
 * Views and manages your Google Analytics data.
 *
 * The version of the OpenAPI document: v2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for analyticsDataGet
     * @param ids Unique table ID for retrieving report data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param startDate Start date for fetching report data. All requests should specify a start date formatted as YYYY-MM-DD. (required)
     * @param endDate End date for fetching report data. All requests should specify an end date formatted as YYYY-MM-DD. (required)
     * @param metrics A comma-separated list of Analytics metrics. E.g., &#39;ga:sessions,ga:pageviews&#39;. At least one metric must be specified to retrieve a valid Analytics report. (required)
     * @param alt Data format for the response. (optional, default to atom)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to false)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of Analytics dimensions. E.g., &#39;ga:browser,ga:city&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to the report data. (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param segment An Analytics advanced segment to be applied to the report data. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for the report data. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDataGetCall(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String segment, String sort, Integer startIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (userIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userIp", userIp));
        }

        if (ids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ids", ids));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end-date", endDate));
        }

        if (metrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metrics", metrics));
        }

        if (dimensions != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dimensions", dimensions));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (segment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("segment", segment));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start-index", startIndex));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call analyticsDataGetValidateBeforeCall(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String segment, String sort, Integer startIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling analyticsDataGet(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling analyticsDataGet(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling analyticsDataGet(Async)");
        }

        // verify the required parameter 'metrics' is set
        if (metrics == null) {
            throw new ApiException("Missing the required parameter 'metrics' when calling analyticsDataGet(Async)");
        }

        return analyticsDataGetCall(ids, startDate, endDate, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, maxResults, segment, sort, startIndex, _callback);

    }

    /**
     * 
     * Returns Analytics report data for a view (profile).
     * @param ids Unique table ID for retrieving report data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param startDate Start date for fetching report data. All requests should specify a start date formatted as YYYY-MM-DD. (required)
     * @param endDate End date for fetching report data. All requests should specify an end date formatted as YYYY-MM-DD. (required)
     * @param metrics A comma-separated list of Analytics metrics. E.g., &#39;ga:sessions,ga:pageviews&#39;. At least one metric must be specified to retrieve a valid Analytics report. (required)
     * @param alt Data format for the response. (optional, default to atom)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to false)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of Analytics dimensions. E.g., &#39;ga:browser,ga:city&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to the report data. (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param segment An Analytics advanced segment to be applied to the report data. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for the report data. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public void analyticsDataGet(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String segment, String sort, Integer startIndex) throws ApiException {
        analyticsDataGetWithHttpInfo(ids, startDate, endDate, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, maxResults, segment, sort, startIndex);
    }

    /**
     * 
     * Returns Analytics report data for a view (profile).
     * @param ids Unique table ID for retrieving report data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param startDate Start date for fetching report data. All requests should specify a start date formatted as YYYY-MM-DD. (required)
     * @param endDate End date for fetching report data. All requests should specify an end date formatted as YYYY-MM-DD. (required)
     * @param metrics A comma-separated list of Analytics metrics. E.g., &#39;ga:sessions,ga:pageviews&#39;. At least one metric must be specified to retrieve a valid Analytics report. (required)
     * @param alt Data format for the response. (optional, default to atom)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to false)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of Analytics dimensions. E.g., &#39;ga:browser,ga:city&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to the report data. (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param segment An Analytics advanced segment to be applied to the report data. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for the report data. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> analyticsDataGetWithHttpInfo(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String segment, String sort, Integer startIndex) throws ApiException {
        okhttp3.Call localVarCall = analyticsDataGetValidateBeforeCall(ids, startDate, endDate, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, maxResults, segment, sort, startIndex, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Returns Analytics report data for a view (profile).
     * @param ids Unique table ID for retrieving report data. Table ID is of the form ga:XXXX, where XXXX is the Analytics view (profile) ID. (required)
     * @param startDate Start date for fetching report data. All requests should specify a start date formatted as YYYY-MM-DD. (required)
     * @param endDate End date for fetching report data. All requests should specify an end date formatted as YYYY-MM-DD. (required)
     * @param metrics A comma-separated list of Analytics metrics. E.g., &#39;ga:sessions,ga:pageviews&#39;. At least one metric must be specified to retrieve a valid Analytics report. (required)
     * @param alt Data format for the response. (optional, default to atom)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to false)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param dimensions A comma-separated list of Analytics dimensions. E.g., &#39;ga:browser,ga:city&#39;. (optional)
     * @param filters A comma-separated list of dimension or metric filters to be applied to the report data. (optional)
     * @param maxResults The maximum number of entries to include in this feed. (optional)
     * @param segment An Analytics advanced segment to be applied to the report data. (optional)
     * @param sort A comma-separated list of dimensions or metrics that determine the sort order for the report data. (optional)
     * @param startIndex An index of the first entity to retrieve. Use this parameter as a pagination mechanism along with the max-results parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call analyticsDataGetAsync(String ids, String startDate, String endDate, String metrics, String alt, String fields, String key, String oauthToken, Boolean prettyPrint, String quotaUser, String userIp, String dimensions, String filters, Integer maxResults, String segment, String sort, Integer startIndex, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = analyticsDataGetValidateBeforeCall(ids, startDate, endDate, metrics, alt, fields, key, oauthToken, prettyPrint, quotaUser, userIp, dimensions, filters, maxResults, segment, sort, startIndex, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
