/*
 * reCAPTCHA Enterprise API
 * Help protect your website from fraudulent activity, spam, and abuse without creating friction.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Private password leak verification info.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:04:37.006704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification {
  public static final String SERIALIZED_NAME_ENCRYPTED_LEAK_MATCH_PREFIXES = "encryptedLeakMatchPrefixes";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_LEAK_MATCH_PREFIXES)
  private List<byte[]> encryptedLeakMatchPrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENCRYPTED_USER_CREDENTIALS_HASH = "encryptedUserCredentialsHash";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_USER_CREDENTIALS_HASH)
  private byte[] encryptedUserCredentialsHash;

  public static final String SERIALIZED_NAME_LOOKUP_HASH_PREFIX = "lookupHashPrefix";
  @SerializedName(SERIALIZED_NAME_LOOKUP_HASH_PREFIX)
  private byte[] lookupHashPrefix;

  public static final String SERIALIZED_NAME_REENCRYPTED_USER_CREDENTIALS_HASH = "reencryptedUserCredentialsHash";
  @SerializedName(SERIALIZED_NAME_REENCRYPTED_USER_CREDENTIALS_HASH)
  private byte[] reencryptedUserCredentialsHash;

  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification() {
  }

  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification(
     List<byte[]> encryptedLeakMatchPrefixes, 
     byte[] reencryptedUserCredentialsHash
  ) {
    this();
    this.encryptedLeakMatchPrefixes = encryptedLeakMatchPrefixes;
    this.reencryptedUserCredentialsHash = reencryptedUserCredentialsHash;
  }

  /**
   * Output only. List of prefixes of the encrypted potential password leaks that matched the given parameters. They must be compared with the client-side decryption prefix of &#x60;reencrypted_user_credentials_hash&#x60;
   * @return encryptedLeakMatchPrefixes
   */
  @javax.annotation.Nullable
  public List<byte[]> getEncryptedLeakMatchPrefixes() {
    return encryptedLeakMatchPrefixes;
  }



  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification encryptedUserCredentialsHash(byte[] encryptedUserCredentialsHash) {
    this.encryptedUserCredentialsHash = encryptedUserCredentialsHash;
    return this;
  }

  /**
   * Optional. Encrypted Scrypt hash of the canonicalized username+password. It is re-encrypted by the server and returned through &#x60;reencrypted_user_credentials_hash&#x60;.
   * @return encryptedUserCredentialsHash
   */
  @javax.annotation.Nullable
  public byte[] getEncryptedUserCredentialsHash() {
    return encryptedUserCredentialsHash;
  }

  public void setEncryptedUserCredentialsHash(byte[] encryptedUserCredentialsHash) {
    this.encryptedUserCredentialsHash = encryptedUserCredentialsHash;
  }


  public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification lookupHashPrefix(byte[] lookupHashPrefix) {
    this.lookupHashPrefix = lookupHashPrefix;
    return this;
  }

  /**
   * Optional. Exactly 26-bit prefix of the SHA-256 hash of the canonicalized username. It is used to look up password leaks associated with that hash prefix.
   * @return lookupHashPrefix
   */
  @javax.annotation.Nullable
  public byte[] getLookupHashPrefix() {
    return lookupHashPrefix;
  }

  public void setLookupHashPrefix(byte[] lookupHashPrefix) {
    this.lookupHashPrefix = lookupHashPrefix;
  }


  /**
   * Output only. Corresponds to the re-encryption of the &#x60;encrypted_user_credentials_hash&#x60; field. It is used to match potential password leaks within &#x60;encrypted_leak_match_prefixes&#x60;.
   * @return reencryptedUserCredentialsHash
   */
  @javax.annotation.Nullable
  public byte[] getReencryptedUserCredentialsHash() {
    return reencryptedUserCredentialsHash;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification googleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification = (GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification) o;
    return Objects.equals(this.encryptedLeakMatchPrefixes, googleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification.encryptedLeakMatchPrefixes) &&
        Arrays.equals(this.encryptedUserCredentialsHash, googleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification.encryptedUserCredentialsHash) &&
        Arrays.equals(this.lookupHashPrefix, googleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification.lookupHashPrefix) &&
        Arrays.equals(this.reencryptedUserCredentialsHash, googleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification.reencryptedUserCredentialsHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptedLeakMatchPrefixes, Arrays.hashCode(encryptedUserCredentialsHash), Arrays.hashCode(lookupHashPrefix), Arrays.hashCode(reencryptedUserCredentialsHash));
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification {\n");
    sb.append("    encryptedLeakMatchPrefixes: ").append(toIndentedString(encryptedLeakMatchPrefixes)).append("\n");
    sb.append("    encryptedUserCredentialsHash: ").append(toIndentedString(encryptedUserCredentialsHash)).append("\n");
    sb.append("    lookupHashPrefix: ").append(toIndentedString(lookupHashPrefix)).append("\n");
    sb.append("    reencryptedUserCredentialsHash: ").append(toIndentedString(reencryptedUserCredentialsHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptedLeakMatchPrefixes");
    openapiFields.add("encryptedUserCredentialsHash");
    openapiFields.add("lookupHashPrefix");
    openapiFields.add("reencryptedUserCredentialsHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification is not found in the empty JSON string", GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("encryptedLeakMatchPrefixes") != null && !jsonObj.get("encryptedLeakMatchPrefixes").isJsonNull() && !jsonObj.get("encryptedLeakMatchPrefixes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptedLeakMatchPrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("encryptedLeakMatchPrefixes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification
   */
  public static GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification.class);
  }

  /**
   * Convert an instance of GoogleCloudRecaptchaenterpriseV1PrivatePasswordLeakVerification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

