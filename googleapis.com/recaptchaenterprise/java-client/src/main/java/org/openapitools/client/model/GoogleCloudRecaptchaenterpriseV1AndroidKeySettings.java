/*
 * reCAPTCHA Enterprise API
 * Help protect your website from fraudulent activity, spam, and abuse without creating friction.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Settings specific to keys that can be used by Android apps.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:04:37.006704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecaptchaenterpriseV1AndroidKeySettings {
  public static final String SERIALIZED_NAME_ALLOW_ALL_PACKAGE_NAMES = "allowAllPackageNames";
  @SerializedName(SERIALIZED_NAME_ALLOW_ALL_PACKAGE_NAMES)
  private Boolean allowAllPackageNames;

  public static final String SERIALIZED_NAME_ALLOWED_PACKAGE_NAMES = "allowedPackageNames";
  @SerializedName(SERIALIZED_NAME_ALLOWED_PACKAGE_NAMES)
  private List<String> allowedPackageNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORT_NON_GOOGLE_APP_STORE_DISTRIBUTION = "supportNonGoogleAppStoreDistribution";
  @SerializedName(SERIALIZED_NAME_SUPPORT_NON_GOOGLE_APP_STORE_DISTRIBUTION)
  private Boolean supportNonGoogleAppStoreDistribution;

  public GoogleCloudRecaptchaenterpriseV1AndroidKeySettings() {
  }

  public GoogleCloudRecaptchaenterpriseV1AndroidKeySettings allowAllPackageNames(Boolean allowAllPackageNames) {
    this.allowAllPackageNames = allowAllPackageNames;
    return this;
  }

  /**
   * If set to true, allowed_package_names are not enforced.
   * @return allowAllPackageNames
   */
  @javax.annotation.Nullable
  public Boolean getAllowAllPackageNames() {
    return allowAllPackageNames;
  }

  public void setAllowAllPackageNames(Boolean allowAllPackageNames) {
    this.allowAllPackageNames = allowAllPackageNames;
  }


  public GoogleCloudRecaptchaenterpriseV1AndroidKeySettings allowedPackageNames(List<String> allowedPackageNames) {
    this.allowedPackageNames = allowedPackageNames;
    return this;
  }

  public GoogleCloudRecaptchaenterpriseV1AndroidKeySettings addAllowedPackageNamesItem(String allowedPackageNamesItem) {
    if (this.allowedPackageNames == null) {
      this.allowedPackageNames = new ArrayList<>();
    }
    this.allowedPackageNames.add(allowedPackageNamesItem);
    return this;
  }

  /**
   * Android package names of apps allowed to use the key. Example: &#39;com.companyname.appname&#39;
   * @return allowedPackageNames
   */
  @javax.annotation.Nullable
  public List<String> getAllowedPackageNames() {
    return allowedPackageNames;
  }

  public void setAllowedPackageNames(List<String> allowedPackageNames) {
    this.allowedPackageNames = allowedPackageNames;
  }


  public GoogleCloudRecaptchaenterpriseV1AndroidKeySettings supportNonGoogleAppStoreDistribution(Boolean supportNonGoogleAppStoreDistribution) {
    this.supportNonGoogleAppStoreDistribution = supportNonGoogleAppStoreDistribution;
    return this;
  }

  /**
   * Set to true for keys that are used in an Android application that is available for download in app stores in addition to the Google Play Store.
   * @return supportNonGoogleAppStoreDistribution
   */
  @javax.annotation.Nullable
  public Boolean getSupportNonGoogleAppStoreDistribution() {
    return supportNonGoogleAppStoreDistribution;
  }

  public void setSupportNonGoogleAppStoreDistribution(Boolean supportNonGoogleAppStoreDistribution) {
    this.supportNonGoogleAppStoreDistribution = supportNonGoogleAppStoreDistribution;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecaptchaenterpriseV1AndroidKeySettings googleCloudRecaptchaenterpriseV1AndroidKeySettings = (GoogleCloudRecaptchaenterpriseV1AndroidKeySettings) o;
    return Objects.equals(this.allowAllPackageNames, googleCloudRecaptchaenterpriseV1AndroidKeySettings.allowAllPackageNames) &&
        Objects.equals(this.allowedPackageNames, googleCloudRecaptchaenterpriseV1AndroidKeySettings.allowedPackageNames) &&
        Objects.equals(this.supportNonGoogleAppStoreDistribution, googleCloudRecaptchaenterpriseV1AndroidKeySettings.supportNonGoogleAppStoreDistribution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowAllPackageNames, allowedPackageNames, supportNonGoogleAppStoreDistribution);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecaptchaenterpriseV1AndroidKeySettings {\n");
    sb.append("    allowAllPackageNames: ").append(toIndentedString(allowAllPackageNames)).append("\n");
    sb.append("    allowedPackageNames: ").append(toIndentedString(allowedPackageNames)).append("\n");
    sb.append("    supportNonGoogleAppStoreDistribution: ").append(toIndentedString(supportNonGoogleAppStoreDistribution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowAllPackageNames");
    openapiFields.add("allowedPackageNames");
    openapiFields.add("supportNonGoogleAppStoreDistribution");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecaptchaenterpriseV1AndroidKeySettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecaptchaenterpriseV1AndroidKeySettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecaptchaenterpriseV1AndroidKeySettings is not found in the empty JSON string", GoogleCloudRecaptchaenterpriseV1AndroidKeySettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecaptchaenterpriseV1AndroidKeySettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecaptchaenterpriseV1AndroidKeySettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedPackageNames") != null && !jsonObj.get("allowedPackageNames").isJsonNull() && !jsonObj.get("allowedPackageNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedPackageNames` to be an array in the JSON string but got `%s`", jsonObj.get("allowedPackageNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecaptchaenterpriseV1AndroidKeySettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecaptchaenterpriseV1AndroidKeySettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecaptchaenterpriseV1AndroidKeySettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecaptchaenterpriseV1AndroidKeySettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecaptchaenterpriseV1AndroidKeySettings>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecaptchaenterpriseV1AndroidKeySettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecaptchaenterpriseV1AndroidKeySettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecaptchaenterpriseV1AndroidKeySettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecaptchaenterpriseV1AndroidKeySettings
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecaptchaenterpriseV1AndroidKeySettings
   */
  public static GoogleCloudRecaptchaenterpriseV1AndroidKeySettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecaptchaenterpriseV1AndroidKeySettings.class);
  }

  /**
   * Convert an instance of GoogleCloudRecaptchaenterpriseV1AndroidKeySettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

