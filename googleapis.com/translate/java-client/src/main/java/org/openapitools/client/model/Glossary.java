/*
 * Cloud Translation API
 * Integrates text translation into your website or application.
 *
 * The version of the OpenAPI document: v3beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GlossaryInputConfig;
import org.openapitools.client.model.LanguageCodePair;
import org.openapitools.client.model.LanguageCodesSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a glossary built from user provided data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:18:25.577525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Glossary {
  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_ENTRY_COUNT = "entryCount";
  @SerializedName(SERIALIZED_NAME_ENTRY_COUNT)
  private Integer entryCount;

  public static final String SERIALIZED_NAME_INPUT_CONFIG = "inputConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_CONFIG)
  private GlossaryInputConfig inputConfig;

  public static final String SERIALIZED_NAME_LANGUAGE_CODES_SET = "languageCodesSet";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODES_SET)
  private LanguageCodesSet languageCodesSet;

  public static final String SERIALIZED_NAME_LANGUAGE_PAIR = "languagePair";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_PAIR)
  private LanguageCodePair languagePair;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUBMIT_TIME = "submitTime";
  @SerializedName(SERIALIZED_NAME_SUBMIT_TIME)
  private String submitTime;

  public Glossary() {
  }

  public Glossary(
     String endTime, 
     Integer entryCount, 
     String submitTime
  ) {
    this();
    this.endTime = endTime;
    this.entryCount = entryCount;
    this.submitTime = submitTime;
  }

  /**
   * Output only. When the glossary creation was finished.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }



  /**
   * Output only. The number of entries defined in the glossary.
   * @return entryCount
   */
  @javax.annotation.Nullable
  public Integer getEntryCount() {
    return entryCount;
  }



  public Glossary inputConfig(GlossaryInputConfig inputConfig) {
    this.inputConfig = inputConfig;
    return this;
  }

  /**
   * Get inputConfig
   * @return inputConfig
   */
  @javax.annotation.Nullable
  public GlossaryInputConfig getInputConfig() {
    return inputConfig;
  }

  public void setInputConfig(GlossaryInputConfig inputConfig) {
    this.inputConfig = inputConfig;
  }


  public Glossary languageCodesSet(LanguageCodesSet languageCodesSet) {
    this.languageCodesSet = languageCodesSet;
    return this;
  }

  /**
   * Get languageCodesSet
   * @return languageCodesSet
   */
  @javax.annotation.Nullable
  public LanguageCodesSet getLanguageCodesSet() {
    return languageCodesSet;
  }

  public void setLanguageCodesSet(LanguageCodesSet languageCodesSet) {
    this.languageCodesSet = languageCodesSet;
  }


  public Glossary languagePair(LanguageCodePair languagePair) {
    this.languagePair = languagePair;
    return this;
  }

  /**
   * Get languagePair
   * @return languagePair
   */
  @javax.annotation.Nullable
  public LanguageCodePair getLanguagePair() {
    return languagePair;
  }

  public void setLanguagePair(LanguageCodePair languagePair) {
    this.languagePair = languagePair;
  }


  public Glossary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The resource name of the glossary. Glossary names have the form &#x60;projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}&#x60;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. When CreateGlossary was called.
   * @return submitTime
   */
  @javax.annotation.Nullable
  public String getSubmitTime() {
    return submitTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Glossary glossary = (Glossary) o;
    return Objects.equals(this.endTime, glossary.endTime) &&
        Objects.equals(this.entryCount, glossary.entryCount) &&
        Objects.equals(this.inputConfig, glossary.inputConfig) &&
        Objects.equals(this.languageCodesSet, glossary.languageCodesSet) &&
        Objects.equals(this.languagePair, glossary.languagePair) &&
        Objects.equals(this.name, glossary.name) &&
        Objects.equals(this.submitTime, glossary.submitTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, entryCount, inputConfig, languageCodesSet, languagePair, name, submitTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Glossary {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    entryCount: ").append(toIndentedString(entryCount)).append("\n");
    sb.append("    inputConfig: ").append(toIndentedString(inputConfig)).append("\n");
    sb.append("    languageCodesSet: ").append(toIndentedString(languageCodesSet)).append("\n");
    sb.append("    languagePair: ").append(toIndentedString(languagePair)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    submitTime: ").append(toIndentedString(submitTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTime");
    openapiFields.add("entryCount");
    openapiFields.add("inputConfig");
    openapiFields.add("languageCodesSet");
    openapiFields.add("languagePair");
    openapiFields.add("name");
    openapiFields.add("submitTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Glossary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Glossary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Glossary is not found in the empty JSON string", Glossary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Glossary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Glossary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // validate the optional field `inputConfig`
      if (jsonObj.get("inputConfig") != null && !jsonObj.get("inputConfig").isJsonNull()) {
        GlossaryInputConfig.validateJsonElement(jsonObj.get("inputConfig"));
      }
      // validate the optional field `languageCodesSet`
      if (jsonObj.get("languageCodesSet") != null && !jsonObj.get("languageCodesSet").isJsonNull()) {
        LanguageCodesSet.validateJsonElement(jsonObj.get("languageCodesSet"));
      }
      // validate the optional field `languagePair`
      if (jsonObj.get("languagePair") != null && !jsonObj.get("languagePair").isJsonNull()) {
        LanguageCodePair.validateJsonElement(jsonObj.get("languagePair"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("submitTime") != null && !jsonObj.get("submitTime").isJsonNull()) && !jsonObj.get("submitTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submitTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submitTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Glossary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Glossary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Glossary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Glossary.class));

       return (TypeAdapter<T>) new TypeAdapter<Glossary>() {
           @Override
           public void write(JsonWriter out, Glossary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Glossary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Glossary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Glossary
   * @throws IOException if the JSON string is invalid with respect to Glossary
   */
  public static Glossary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Glossary.class);
  }

  /**
   * Convert an instance of Glossary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

