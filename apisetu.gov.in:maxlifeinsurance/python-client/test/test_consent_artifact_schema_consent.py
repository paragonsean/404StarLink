# coding: utf-8

"""
    Max Life Insurance Co. Ltd.

    Life Insurance policies issued by Max Life Insurance on or after April 1st,2008 are available to be pulled in citizen's DigiLocker account.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.consent_artifact_schema_consent import ConsentArtifactSchemaConsent

class TestConsentArtifactSchemaConsent(unittest.TestCase):
    """ConsentArtifactSchemaConsent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConsentArtifactSchemaConsent:
        """Test ConsentArtifactSchemaConsent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConsentArtifactSchemaConsent`
        """
        model = ConsentArtifactSchemaConsent()
        if include_optional:
            return ConsentArtifactSchemaConsent(
                consent_id = 'ea9c43aa-7f5a-4bf3-a0be-e1caa24737ba',
                data = openapi_client.models.consent_artifact_schema_consent_data.ConsentArtifactSchema_consent_data(
                    id = '0', ),
                data_consumer = openapi_client.models.consent_artifact_schema_consent_data.ConsentArtifactSchema_consent_data(
                    id = '0', ),
                data_provider = openapi_client.models.consent_artifact_schema_consent_data.ConsentArtifactSchema_consent_data(
                    id = '0', ),
                permission = openapi_client.models.consent_artifact_schema_consent_permission.ConsentArtifactSchema_consent_permission(
                    access = '0', 
                    date_range = openapi_client.models.consent_artifact_schema_consent_permission_date_range.ConsentArtifactSchema_consent_permission_dateRange(
                        from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    frequency = openapi_client.models.consent_artifact_schema_consent_permission_frequency.ConsentArtifactSchema_consent_permission_frequency(
                        repeats = 1.337, 
                        unit = '0', 
                        value = 1.337, ), ),
                purpose = openapi_client.models.consent_artifact_schema_consent_purpose.ConsentArtifactSchema_consent_purpose(
                    description = '0', ),
                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user = openapi_client.models.consent_artifact_schema_consent_user.ConsentArtifactSchema_consent_user(
                    email = '0', 
                    id_number = '0', 
                    id_type = '0', 
                    mobile = '0', )
            )
        else:
            return ConsentArtifactSchemaConsent(
                consent_id = 'ea9c43aa-7f5a-4bf3-a0be-e1caa24737ba',
                data = openapi_client.models.consent_artifact_schema_consent_data.ConsentArtifactSchema_consent_data(
                    id = '0', ),
                data_consumer = openapi_client.models.consent_artifact_schema_consent_data.ConsentArtifactSchema_consent_data(
                    id = '0', ),
                data_provider = openapi_client.models.consent_artifact_schema_consent_data.ConsentArtifactSchema_consent_data(
                    id = '0', ),
                permission = openapi_client.models.consent_artifact_schema_consent_permission.ConsentArtifactSchema_consent_permission(
                    access = '0', 
                    date_range = openapi_client.models.consent_artifact_schema_consent_permission_date_range.ConsentArtifactSchema_consent_permission_dateRange(
                        from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        to = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    frequency = openapi_client.models.consent_artifact_schema_consent_permission_frequency.ConsentArtifactSchema_consent_permission_frequency(
                        repeats = 1.337, 
                        unit = '0', 
                        value = 1.337, ), ),
                purpose = openapi_client.models.consent_artifact_schema_consent_purpose.ConsentArtifactSchema_consent_purpose(
                    description = '0', ),
                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user = openapi_client.models.consent_artifact_schema_consent_user.ConsentArtifactSchema_consent_user(
                    email = '0', 
                    id_number = '0', 
                    id_type = '0', 
                    mobile = '0', ),
        )
        """

    def testConsentArtifactSchemaConsent(self):
        """Test ConsentArtifactSchemaConsent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
