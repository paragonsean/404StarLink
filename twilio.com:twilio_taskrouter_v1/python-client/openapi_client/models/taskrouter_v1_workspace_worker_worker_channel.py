# coding: utf-8

"""
    Twilio - Taskrouter

    This is the public Twilio REST API.

    The version of the OpenAPI document: 1.42.0
    Contact: support@twilio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TaskrouterV1WorkspaceWorkerWorkerChannel(BaseModel):
    """
    TaskrouterV1WorkspaceWorkerWorkerChannel
    """ # noqa: E501
    account_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Worker resource.")
    assigned_tasks: Optional[StrictInt] = Field(default=None, description="The total number of Tasks assigned to Worker for the TaskChannel type.")
    available: Optional[StrictBool] = Field(default=None, description="Whether the Worker should receive Tasks of the TaskChannel type.")
    available_capacity_percentage: Optional[StrictInt] = Field(default=None, description="The current percentage of capacity the TaskChannel has available. Can be a number between `0` and `100`. A value of `0` indicates that TaskChannel has no capacity available and a value of `100` means the  Worker is available to receive any Tasks of this TaskChannel type.")
    configured_capacity: Optional[StrictInt] = Field(default=None, description="The current configured capacity for the WorkerChannel. TaskRouter will not create any reservations after the assigned Tasks for the Worker reaches the value.")
    date_created: Optional[datetime] = Field(default=None, description="The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.")
    date_updated: Optional[datetime] = Field(default=None, description="The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.")
    sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The unique string that we created to identify the WorkerChannel resource.")
    task_channel_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the TaskChannel.")
    task_channel_unique_name: Optional[StrictStr] = Field(default=None, description="The unique name of the TaskChannel, such as `voice` or `sms`.")
    url: Optional[StrictStr] = Field(default=None, description="The absolute URL of the WorkerChannel resource.")
    worker_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the Worker that contains the WorkerChannel.")
    workspace_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the Workspace that contains the WorkerChannel.")
    __properties: ClassVar[List[str]] = ["account_sid", "assigned_tasks", "available", "available_capacity_percentage", "configured_capacity", "date_created", "date_updated", "sid", "task_channel_sid", "task_channel_unique_name", "url", "worker_sid", "workspace_sid"]

    @field_validator('account_sid')
    def account_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^AC[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^AC[0-9a-fA-F]{32}$/")
        return value

    @field_validator('sid')
    def sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WC[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WC[0-9a-fA-F]{32}$/")
        return value

    @field_validator('task_channel_sid')
    def task_channel_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^TC[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^TC[0-9a-fA-F]{32}$/")
        return value

    @field_validator('worker_sid')
    def worker_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WK[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WK[0-9a-fA-F]{32}$/")
        return value

    @field_validator('workspace_sid')
    def workspace_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WS[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WS[0-9a-fA-F]{32}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskrouterV1WorkspaceWorkerWorkerChannel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_sid (nullable) is None
        # and model_fields_set contains the field
        if self.account_sid is None and "account_sid" in self.model_fields_set:
            _dict['account_sid'] = None

        # set to None if assigned_tasks (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_tasks is None and "assigned_tasks" in self.model_fields_set:
            _dict['assigned_tasks'] = None

        # set to None if available (nullable) is None
        # and model_fields_set contains the field
        if self.available is None and "available" in self.model_fields_set:
            _dict['available'] = None

        # set to None if available_capacity_percentage (nullable) is None
        # and model_fields_set contains the field
        if self.available_capacity_percentage is None and "available_capacity_percentage" in self.model_fields_set:
            _dict['available_capacity_percentage'] = None

        # set to None if configured_capacity (nullable) is None
        # and model_fields_set contains the field
        if self.configured_capacity is None and "configured_capacity" in self.model_fields_set:
            _dict['configured_capacity'] = None

        # set to None if date_created (nullable) is None
        # and model_fields_set contains the field
        if self.date_created is None and "date_created" in self.model_fields_set:
            _dict['date_created'] = None

        # set to None if date_updated (nullable) is None
        # and model_fields_set contains the field
        if self.date_updated is None and "date_updated" in self.model_fields_set:
            _dict['date_updated'] = None

        # set to None if sid (nullable) is None
        # and model_fields_set contains the field
        if self.sid is None and "sid" in self.model_fields_set:
            _dict['sid'] = None

        # set to None if task_channel_sid (nullable) is None
        # and model_fields_set contains the field
        if self.task_channel_sid is None and "task_channel_sid" in self.model_fields_set:
            _dict['task_channel_sid'] = None

        # set to None if task_channel_unique_name (nullable) is None
        # and model_fields_set contains the field
        if self.task_channel_unique_name is None and "task_channel_unique_name" in self.model_fields_set:
            _dict['task_channel_unique_name'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if worker_sid (nullable) is None
        # and model_fields_set contains the field
        if self.worker_sid is None and "worker_sid" in self.model_fields_set:
            _dict['worker_sid'] = None

        # set to None if workspace_sid (nullable) is None
        # and model_fields_set contains the field
        if self.workspace_sid is None and "workspace_sid" in self.model_fields_set:
            _dict['workspace_sid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskrouterV1WorkspaceWorkerWorkerChannel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_sid": obj.get("account_sid"),
            "assigned_tasks": obj.get("assigned_tasks"),
            "available": obj.get("available"),
            "available_capacity_percentage": obj.get("available_capacity_percentage"),
            "configured_capacity": obj.get("configured_capacity"),
            "date_created": obj.get("date_created"),
            "date_updated": obj.get("date_updated"),
            "sid": obj.get("sid"),
            "task_channel_sid": obj.get("task_channel_sid"),
            "task_channel_unique_name": obj.get("task_channel_unique_name"),
            "url": obj.get("url"),
            "worker_sid": obj.get("worker_sid"),
            "workspace_sid": obj.get("workspace_sid")
        })
        return _obj


