# coding: utf-8

"""
    Dataflow Kit Web Scraper

    Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class InitialCookie(BaseModel):
    """
    InitialCookie structure keep cookies that optionally can be passed to the new fetcher crawl a website that requires a login. Generate Cookies array with EditThisCookie chrome extension.
    """ # noqa: E501
    domain: Optional[StrictStr] = None
    expiration_date: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="expirationDate")
    host_only: Optional[StrictBool] = Field(default=None, alias="hostOnly")
    http_only: Optional[StrictBool] = Field(default=None, alias="httpOnly")
    id: Optional[Union[StrictFloat, StrictInt]] = None
    name: Optional[StrictStr] = None
    path: Optional[StrictStr] = None
    same_site: Optional[StrictStr] = Field(default=None, alias="sameSite")
    secure: Optional[StrictBool] = None
    session: Optional[StrictBool] = None
    store_id: Optional[StrictStr] = Field(default=None, alias="storeID")
    value: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["domain", "expirationDate", "hostOnly", "httpOnly", "id", "name", "path", "sameSite", "secure", "session", "storeID", "value"]

    @field_validator('same_site')
    def same_site_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unspecified', 'strict', 'lax', 'no_restriction']):
            raise ValueError("must be one of enum values ('unspecified', 'strict', 'lax', 'no_restriction')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InitialCookie from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InitialCookie from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "domain": obj.get("domain"),
            "expirationDate": obj.get("expirationDate"),
            "hostOnly": obj.get("hostOnly"),
            "httpOnly": obj.get("httpOnly"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "path": obj.get("path"),
            "sameSite": obj.get("sameSite"),
            "secure": obj.get("secure"),
            "session": obj.get("session"),
            "storeID": obj.get("storeID"),
            "value": obj.get("value")
        })
        return _obj


