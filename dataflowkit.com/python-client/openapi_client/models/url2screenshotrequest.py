# coding: utf-8

"""
    Dataflow Kit Web Scraper

    Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.action import Action
from openapi_client.models.initial_cookie import InitialCookie
from typing import Optional, Set
from typing_extensions import Self

class Url2screenshotrequest(BaseModel):
    """
    Url2screenshotrequest
    """ # noqa: E501
    actions: Optional[List[Action]] = Field(default=None, description="Use actions to automate manual workflows while rendering web pages. They simulate real-world human interaction with pages.")
    clip_selector: Optional[StrictStr] = Field(default=None, description="Captures a screenshot of specified CSS element on a web page.", alias="clipSelector")
    format: Optional[StrictStr] = Field(default='png', description="Sets the Format of output image")
    full_page: Optional[StrictBool] = Field(default=False, description="takes a screenshot of a full web page. It ignores offsetX, offsety, width and height argument values.", alias="fullPage")
    height: Optional[StrictInt] = Field(default=600, description="Rectangle height in device independent pixels (dip).")
    ignore_http_status_err_codes: Optional[StrictBool] = Field(default=None, description="The HTTP 200 OK success status response code indicates that the request has succeeded. Sometimes a server returns normal HTML content even with an erroneous Non-200 HTTP response status code. The IgnoreHTTPStatusCode option is useful when you need to force the return of HTML content. Defaults to \"false.\"", alias="ignoreHTTPStatusErrCodes")
    initial_cookies: Optional[List[InitialCookie]] = Field(default=None, description="The \"Initial Cookies\" option is useful for crawling websites that require a login. The simplest solution to get an array of cookies for specific websites is to use a web browser \"EditThisCookie\" extension. Copy a cookie array with \"EditThisCookie\" and paste it into the \"Initial cookie\" field.", alias="initialCookies")
    offsetx: Optional[StrictInt] = Field(default=0, description="X offset in device independent pixels (dip).")
    offsety: Optional[StrictInt] = Field(default=0, description="Y offset in device independent pixels (dip).")
    output: Optional[StrictStr] = Field(default='buffer', description="If set to _file_, the resulted screenshot is uploaded to Dataflow Kit Storage first. Then the link to this file is returned. Overwise, web site screenshot is returned in the response body.")
    print_background: Optional[StrictBool] = Field(default=False, description="Print background graphics in the PDF.", alias="printBackground")
    proxy: Optional[StrictStr] = Field(default=None, description="Specify proxy by adding [country ISO code](https://en.wikipedia.org/wiki/ISO_3166-2) to `country-` value to send requests through a proxy in the specified country. Use `country-any` to use random geo-targets.")
    quality: Optional[StrictInt] = Field(default=80, description="Sets the Quality of output image. Compression quality from range [0..100] (jpeg only).")
    scale: Optional[Union[StrictFloat, StrictInt]] = Field(default=1, description="Image scale factor. range [0.1 .. 3]")
    url: StrictStr = Field(description="The full URL address (including HTTP/HTTPS) of a web page that you want to capture")
    wait_delay: Optional[Union[StrictFloat, StrictInt]] = Field(default=0.5, description="Specify a wait delay (in seconds). This may be useful if certain elements of the web site need to be rendered after the initial page load.", alias="waitDelay")
    width: Optional[StrictInt] = Field(default=800, description="Rectangle width in device independent pixels (dip).")
    __properties: ClassVar[List[str]] = ["actions", "clipSelector", "format", "fullPage", "height", "ignoreHTTPStatusErrCodes", "initialCookies", "offsetx", "offsety", "output", "printBackground", "proxy", "quality", "scale", "url", "waitDelay", "width"]

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['png', 'jpeg']):
            raise ValueError("must be one of enum values ('png', 'jpeg')")
        return value

    @field_validator('output')
    def output_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['buffer', 'file']):
            raise ValueError("must be one of enum values ('buffer', 'file')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Url2screenshotrequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in initial_cookies (list)
        _items = []
        if self.initial_cookies:
            for _item_initial_cookies in self.initial_cookies:
                if _item_initial_cookies:
                    _items.append(_item_initial_cookies.to_dict())
            _dict['initialCookies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Url2screenshotrequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [Action.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "clipSelector": obj.get("clipSelector"),
            "format": obj.get("format") if obj.get("format") is not None else 'png',
            "fullPage": obj.get("fullPage") if obj.get("fullPage") is not None else False,
            "height": obj.get("height") if obj.get("height") is not None else 600,
            "ignoreHTTPStatusErrCodes": obj.get("ignoreHTTPStatusErrCodes"),
            "initialCookies": [InitialCookie.from_dict(_item) for _item in obj["initialCookies"]] if obj.get("initialCookies") is not None else None,
            "offsetx": obj.get("offsetx") if obj.get("offsetx") is not None else 0,
            "offsety": obj.get("offsety") if obj.get("offsety") is not None else 0,
            "output": obj.get("output") if obj.get("output") is not None else 'buffer',
            "printBackground": obj.get("printBackground") if obj.get("printBackground") is not None else False,
            "proxy": obj.get("proxy"),
            "quality": obj.get("quality") if obj.get("quality") is not None else 80,
            "scale": obj.get("scale") if obj.get("scale") is not None else 1,
            "url": obj.get("url"),
            "waitDelay": obj.get("waitDelay") if obj.get("waitDelay") is not None else 0.5,
            "width": obj.get("width") if obj.get("width") is not None else 800
        })
        return _obj


