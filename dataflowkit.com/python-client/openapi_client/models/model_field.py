# coding: utf-8

"""
    Dataflow Kit Web Scraper

    Render Javascript driven pages, while we internally manage Headless Chrome and proxies for you.   - Build a custom web scraper with our Visual point-and-click toolkit. - Scrape the most popular Search engines result pages (SERP). - Convert web pages to PDF and capture screenshots. *** ### Authentication Dataflow Kit API require you to sign up for an API key in order to use the API.   The API key can be found in the [DFK Dashboard](https://account.dataflowkit.com) after _free registration_.  Pass a secret API Key to all API requests to the server as the `api_key` query parameter.  

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.field_filters_inner import FieldFiltersInner
from typing import Optional, Set
from typing_extensions import Self

class ModelField(BaseModel):
    """
    ModelField
    """ # noqa: E501
    attrs: List[StrictStr] = Field(description="A set of attributes to extract from a Field. Find more information about attributes")
    details: Optional[Parserequest] = Field(default=None, description="Details themself represent independent Parse request that extracts data from linked pages.")
    filters: Optional[List[FieldFiltersInner]] = Field(default=None, description="Filters are used to pre-processing of text data when extracting.")
    name: StrictStr = Field(description="Field name is used to aggregate results.")
    selector: StrictStr = Field(description="Selector represents a CSS selector for data extraction within the given block.")
    type: StrictInt = Field(description="Selector type. ( 0 - image, 1 - text, 2 - link)")
    __properties: ClassVar[List[str]] = ["attrs", "details", "filters", "name", "selector", "type"]

    @field_validator('attrs')
    def attrs_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in set(['text', 'href', 'src', 'alt']):
                raise ValueError("each list item must be one of ('text', 'href', 'src', 'alt')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([0, 1, 2]):
            raise ValueError("must be one of enum values (0, 1, 2)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attrs": obj.get("attrs"),
            "details": Parserequest.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "filters": [FieldFiltersInner.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "name": obj.get("name"),
            "selector": obj.get("selector"),
            "type": obj.get("type")
        })
        return _obj

from openapi_client.models.parserequest import Parserequest
# TODO: Rewrite to not use raise_errors
ModelField.model_rebuild(raise_errors=False)

