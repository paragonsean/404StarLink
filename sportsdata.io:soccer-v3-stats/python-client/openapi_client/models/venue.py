# coding: utf-8

"""
    Soccer v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Venue(BaseModel):
    """
    Venue
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, alias="Address")
    capacity: Optional[StrictInt] = Field(default=None, alias="Capacity")
    city: Optional[StrictStr] = Field(default=None, alias="City")
    country: Optional[StrictStr] = Field(default=None, alias="Country")
    geo_lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GeoLat")
    geo_long: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GeoLong")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    nickname1: Optional[StrictStr] = Field(default=None, alias="Nickname1")
    nickname2: Optional[StrictStr] = Field(default=None, alias="Nickname2")
    open: Optional[StrictBool] = Field(default=None, alias="Open")
    opened: Optional[StrictInt] = Field(default=None, alias="Opened")
    surface: Optional[StrictStr] = Field(default=None, alias="Surface")
    venue_id: Optional[StrictInt] = Field(default=None, alias="VenueId")
    zip: Optional[StrictStr] = Field(default=None, alias="Zip")
    __properties: ClassVar[List[str]] = ["Address", "Capacity", "City", "Country", "GeoLat", "GeoLong", "Name", "Nickname1", "Nickname2", "Open", "Opened", "Surface", "VenueId", "Zip"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Venue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['Address'] = None

        # set to None if capacity (nullable) is None
        # and model_fields_set contains the field
        if self.capacity is None and "capacity" in self.model_fields_set:
            _dict['Capacity'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['City'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['Country'] = None

        # set to None if geo_lat (nullable) is None
        # and model_fields_set contains the field
        if self.geo_lat is None and "geo_lat" in self.model_fields_set:
            _dict['GeoLat'] = None

        # set to None if geo_long (nullable) is None
        # and model_fields_set contains the field
        if self.geo_long is None and "geo_long" in self.model_fields_set:
            _dict['GeoLong'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if nickname1 (nullable) is None
        # and model_fields_set contains the field
        if self.nickname1 is None and "nickname1" in self.model_fields_set:
            _dict['Nickname1'] = None

        # set to None if nickname2 (nullable) is None
        # and model_fields_set contains the field
        if self.nickname2 is None and "nickname2" in self.model_fields_set:
            _dict['Nickname2'] = None

        # set to None if opened (nullable) is None
        # and model_fields_set contains the field
        if self.opened is None and "opened" in self.model_fields_set:
            _dict['Opened'] = None

        # set to None if surface (nullable) is None
        # and model_fields_set contains the field
        if self.surface is None and "surface" in self.model_fields_set:
            _dict['Surface'] = None

        # set to None if zip (nullable) is None
        # and model_fields_set contains the field
        if self.zip is None and "zip" in self.model_fields_set:
            _dict['Zip'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Venue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Address": obj.get("Address"),
            "Capacity": obj.get("Capacity"),
            "City": obj.get("City"),
            "Country": obj.get("Country"),
            "GeoLat": obj.get("GeoLat"),
            "GeoLong": obj.get("GeoLong"),
            "Name": obj.get("Name"),
            "Nickname1": obj.get("Nickname1"),
            "Nickname2": obj.get("Nickname2"),
            "Open": obj.get("Open"),
            "Opened": obj.get("Opened"),
            "Surface": obj.get("Surface"),
            "VenueId": obj.get("VenueId"),
            "Zip": obj.get("Zip")
        })
        return _obj


