# coding: utf-8

"""
    Soccer v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.season import Season
from typing import Optional, Set
from typing_extensions import Self

class Competition(BaseModel):
    """
    Competition
    """ # noqa: E501
    area_id: Optional[StrictInt] = Field(default=None, alias="AreaId")
    area_name: Optional[StrictStr] = Field(default=None, alias="AreaName")
    competition_id: Optional[StrictInt] = Field(default=None, alias="CompetitionId")
    format: Optional[StrictStr] = Field(default=None, alias="Format")
    gender: Optional[StrictStr] = Field(default=None, alias="Gender")
    key: Optional[StrictStr] = Field(default=None, alias="Key")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    seasons: Optional[List[Season]] = Field(default=None, alias="Seasons")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    __properties: ClassVar[List[str]] = ["AreaId", "AreaName", "CompetitionId", "Format", "Gender", "Key", "Name", "Seasons", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Competition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in seasons (list)
        _items = []
        if self.seasons:
            for _item_seasons in self.seasons:
                if _item_seasons:
                    _items.append(_item_seasons.to_dict())
            _dict['Seasons'] = _items
        # set to None if area_name (nullable) is None
        # and model_fields_set contains the field
        if self.area_name is None and "area_name" in self.model_fields_set:
            _dict['AreaName'] = None

        # set to None if format (nullable) is None
        # and model_fields_set contains the field
        if self.format is None and "format" in self.model_fields_set:
            _dict['Format'] = None

        # set to None if gender (nullable) is None
        # and model_fields_set contains the field
        if self.gender is None and "gender" in self.model_fields_set:
            _dict['Gender'] = None

        # set to None if key (nullable) is None
        # and model_fields_set contains the field
        if self.key is None and "key" in self.model_fields_set:
            _dict['Key'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['Type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Competition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AreaId": obj.get("AreaId"),
            "AreaName": obj.get("AreaName"),
            "CompetitionId": obj.get("CompetitionId"),
            "Format": obj.get("Format"),
            "Gender": obj.get("Gender"),
            "Key": obj.get("Key"),
            "Name": obj.get("Name"),
            "Seasons": [Season.from_dict(_item) for _item in obj["Seasons"]] if obj.get("Seasons") is not None else None,
            "Type": obj.get("Type")
        })
        return _obj


