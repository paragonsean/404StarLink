# coding: utf-8

"""
    Soccer v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.game import Game
from openapi_client.models.player_season import PlayerSeason
from openapi_client.models.standing import Standing
from openapi_client.models.team_season import TeamSeason
from typing import Optional, Set
from typing_extensions import Self

class Round(BaseModel):
    """
    Round
    """ # noqa: E501
    current_round: Optional[StrictBool] = Field(default=None, alias="CurrentRound")
    current_week: Optional[StrictInt] = Field(default=None, alias="CurrentWeek")
    end_date: Optional[StrictStr] = Field(default=None, alias="EndDate")
    games: Optional[List[Game]] = Field(default=None, alias="Games")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    player_seasons: Optional[List[PlayerSeason]] = Field(default=None, alias="PlayerSeasons")
    round_id: Optional[StrictInt] = Field(default=None, alias="RoundId")
    season: Optional[StrictInt] = Field(default=None, alias="Season")
    season_id: Optional[StrictInt] = Field(default=None, alias="SeasonId")
    season_type: Optional[StrictInt] = Field(default=None, alias="SeasonType")
    standings: Optional[List[Standing]] = Field(default=None, alias="Standings")
    start_date: Optional[StrictStr] = Field(default=None, alias="StartDate")
    team_seasons: Optional[List[TeamSeason]] = Field(default=None, alias="TeamSeasons")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    __properties: ClassVar[List[str]] = ["CurrentRound", "CurrentWeek", "EndDate", "Games", "Name", "PlayerSeasons", "RoundId", "Season", "SeasonId", "SeasonType", "Standings", "StartDate", "TeamSeasons", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Round from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in games (list)
        _items = []
        if self.games:
            for _item_games in self.games:
                if _item_games:
                    _items.append(_item_games.to_dict())
            _dict['Games'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in player_seasons (list)
        _items = []
        if self.player_seasons:
            for _item_player_seasons in self.player_seasons:
                if _item_player_seasons:
                    _items.append(_item_player_seasons.to_dict())
            _dict['PlayerSeasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in standings (list)
        _items = []
        if self.standings:
            for _item_standings in self.standings:
                if _item_standings:
                    _items.append(_item_standings.to_dict())
            _dict['Standings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in team_seasons (list)
        _items = []
        if self.team_seasons:
            for _item_team_seasons in self.team_seasons:
                if _item_team_seasons:
                    _items.append(_item_team_seasons.to_dict())
            _dict['TeamSeasons'] = _items
        # set to None if current_week (nullable) is None
        # and model_fields_set contains the field
        if self.current_week is None and "current_week" in self.model_fields_set:
            _dict['CurrentWeek'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['EndDate'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['StartDate'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['Type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Round from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CurrentRound": obj.get("CurrentRound"),
            "CurrentWeek": obj.get("CurrentWeek"),
            "EndDate": obj.get("EndDate"),
            "Games": [Game.from_dict(_item) for _item in obj["Games"]] if obj.get("Games") is not None else None,
            "Name": obj.get("Name"),
            "PlayerSeasons": [PlayerSeason.from_dict(_item) for _item in obj["PlayerSeasons"]] if obj.get("PlayerSeasons") is not None else None,
            "RoundId": obj.get("RoundId"),
            "Season": obj.get("Season"),
            "SeasonId": obj.get("SeasonId"),
            "SeasonType": obj.get("SeasonType"),
            "Standings": [Standing.from_dict(_item) for _item in obj["Standings"]] if obj.get("Standings") is not None else None,
            "StartDate": obj.get("StartDate"),
            "TeamSeasons": [TeamSeason.from_dict(_item) for _item in obj["TeamSeasons"]] if obj.get("TeamSeasons") is not None else None,
            "Type": obj.get("Type")
        })
        return _obj


