# coding: utf-8

"""
    Soccer v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Membership(BaseModel):
    """
    Membership
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, alias="Active")
    end_date: Optional[StrictStr] = Field(default=None, alias="EndDate")
    jersey: Optional[StrictInt] = Field(default=None, alias="Jersey")
    membership_id: Optional[StrictInt] = Field(default=None, alias="MembershipId")
    player_id: Optional[StrictInt] = Field(default=None, alias="PlayerId")
    player_name: Optional[StrictStr] = Field(default=None, alias="PlayerName")
    start_date: Optional[StrictStr] = Field(default=None, alias="StartDate")
    team_area: Optional[StrictStr] = Field(default=None, alias="TeamArea")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamId")
    team_name: Optional[StrictStr] = Field(default=None, alias="TeamName")
    updated: Optional[StrictStr] = Field(default=None, alias="Updated")
    __properties: ClassVar[List[str]] = ["Active", "EndDate", "Jersey", "MembershipId", "PlayerId", "PlayerName", "StartDate", "TeamArea", "TeamId", "TeamName", "Updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Membership from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['EndDate'] = None

        # set to None if jersey (nullable) is None
        # and model_fields_set contains the field
        if self.jersey is None and "jersey" in self.model_fields_set:
            _dict['Jersey'] = None

        # set to None if player_name (nullable) is None
        # and model_fields_set contains the field
        if self.player_name is None and "player_name" in self.model_fields_set:
            _dict['PlayerName'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['StartDate'] = None

        # set to None if team_area (nullable) is None
        # and model_fields_set contains the field
        if self.team_area is None and "team_area" in self.model_fields_set:
            _dict['TeamArea'] = None

        # set to None if team_name (nullable) is None
        # and model_fields_set contains the field
        if self.team_name is None and "team_name" in self.model_fields_set:
            _dict['TeamName'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['Updated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Membership from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Active": obj.get("Active"),
            "EndDate": obj.get("EndDate"),
            "Jersey": obj.get("Jersey"),
            "MembershipId": obj.get("MembershipId"),
            "PlayerId": obj.get("PlayerId"),
            "PlayerName": obj.get("PlayerName"),
            "StartDate": obj.get("StartDate"),
            "TeamArea": obj.get("TeamArea"),
            "TeamId": obj.get("TeamId"),
            "TeamName": obj.get("TeamName"),
            "Updated": obj.get("Updated")
        })
        return _obj


