# coding: utf-8

"""
    Soccer v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Standing(BaseModel):
    """
    Standing
    """ # noqa: E501
    draws: Optional[StrictInt] = Field(default=None, alias="Draws")
    games: Optional[StrictInt] = Field(default=None, alias="Games")
    global_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalTeamID")
    goals_against: Optional[StrictInt] = Field(default=None, alias="GoalsAgainst")
    goals_differential: Optional[StrictInt] = Field(default=None, alias="GoalsDifferential")
    goals_scored: Optional[StrictInt] = Field(default=None, alias="GoalsScored")
    group: Optional[StrictStr] = Field(default=None, alias="Group")
    losses: Optional[StrictInt] = Field(default=None, alias="Losses")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    order: Optional[StrictInt] = Field(default=None, alias="Order")
    points: Optional[StrictInt] = Field(default=None, alias="Points")
    round_id: Optional[StrictInt] = Field(default=None, alias="RoundId")
    scope: Optional[StrictStr] = Field(default=None, alias="Scope")
    short_name: Optional[StrictStr] = Field(default=None, alias="ShortName")
    standing_id: Optional[StrictInt] = Field(default=None, alias="StandingId")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamId")
    wins: Optional[StrictInt] = Field(default=None, alias="Wins")
    __properties: ClassVar[List[str]] = ["Draws", "Games", "GlobalTeamID", "GoalsAgainst", "GoalsDifferential", "GoalsScored", "Group", "Losses", "Name", "Order", "Points", "RoundId", "Scope", "ShortName", "StandingId", "TeamId", "Wins"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Standing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if draws (nullable) is None
        # and model_fields_set contains the field
        if self.draws is None and "draws" in self.model_fields_set:
            _dict['Draws'] = None

        # set to None if games (nullable) is None
        # and model_fields_set contains the field
        if self.games is None and "games" in self.model_fields_set:
            _dict['Games'] = None

        # set to None if global_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_team_id is None and "global_team_id" in self.model_fields_set:
            _dict['GlobalTeamID'] = None

        # set to None if goals_against (nullable) is None
        # and model_fields_set contains the field
        if self.goals_against is None and "goals_against" in self.model_fields_set:
            _dict['GoalsAgainst'] = None

        # set to None if goals_differential (nullable) is None
        # and model_fields_set contains the field
        if self.goals_differential is None and "goals_differential" in self.model_fields_set:
            _dict['GoalsDifferential'] = None

        # set to None if goals_scored (nullable) is None
        # and model_fields_set contains the field
        if self.goals_scored is None and "goals_scored" in self.model_fields_set:
            _dict['GoalsScored'] = None

        # set to None if group (nullable) is None
        # and model_fields_set contains the field
        if self.group is None and "group" in self.model_fields_set:
            _dict['Group'] = None

        # set to None if losses (nullable) is None
        # and model_fields_set contains the field
        if self.losses is None and "losses" in self.model_fields_set:
            _dict['Losses'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict['Order'] = None

        # set to None if points (nullable) is None
        # and model_fields_set contains the field
        if self.points is None and "points" in self.model_fields_set:
            _dict['Points'] = None

        # set to None if scope (nullable) is None
        # and model_fields_set contains the field
        if self.scope is None and "scope" in self.model_fields_set:
            _dict['Scope'] = None

        # set to None if short_name (nullable) is None
        # and model_fields_set contains the field
        if self.short_name is None and "short_name" in self.model_fields_set:
            _dict['ShortName'] = None

        # set to None if wins (nullable) is None
        # and model_fields_set contains the field
        if self.wins is None and "wins" in self.model_fields_set:
            _dict['Wins'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Standing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Draws": obj.get("Draws"),
            "Games": obj.get("Games"),
            "GlobalTeamID": obj.get("GlobalTeamID"),
            "GoalsAgainst": obj.get("GoalsAgainst"),
            "GoalsDifferential": obj.get("GoalsDifferential"),
            "GoalsScored": obj.get("GoalsScored"),
            "Group": obj.get("Group"),
            "Losses": obj.get("Losses"),
            "Name": obj.get("Name"),
            "Order": obj.get("Order"),
            "Points": obj.get("Points"),
            "RoundId": obj.get("RoundId"),
            "Scope": obj.get("Scope"),
            "ShortName": obj.get("ShortName"),
            "StandingId": obj.get("StandingId"),
            "TeamId": obj.get("TeamId"),
            "Wins": obj.get("Wins")
        })
        return _obj


