# coding: utf-8

"""
    Soccer v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.booking import Booking
from openapi_client.models.coach import Coach
from openapi_client.models.game import Game
from openapi_client.models.goal import Goal
from openapi_client.models.lineup import Lineup
from openapi_client.models.penalty_shootout import PenaltyShootout
from openapi_client.models.player_game import PlayerGame
from openapi_client.models.referee import Referee
from openapi_client.models.team_game import TeamGame
from typing import Optional, Set
from typing_extensions import Self

class BoxScore(BaseModel):
    """
    BoxScore
    """ # noqa: E501
    additional_assistant_referee1: Optional[Referee] = Field(default=None, alias="AdditionalAssistantReferee1")
    additional_assistant_referee2: Optional[Referee] = Field(default=None, alias="AdditionalAssistantReferee2")
    assistant_referee1: Optional[Referee] = Field(default=None, alias="AssistantReferee1")
    assistant_referee2: Optional[Referee] = Field(default=None, alias="AssistantReferee2")
    away_team_coach: Optional[Coach] = Field(default=None, alias="AwayTeamCoach")
    bookings: Optional[List[Booking]] = Field(default=None, alias="Bookings")
    fourth_referee: Optional[Referee] = Field(default=None, alias="FourthReferee")
    game: Optional[Game] = Field(default=None, alias="Game")
    goals: Optional[List[Goal]] = Field(default=None, alias="Goals")
    home_team_coach: Optional[Coach] = Field(default=None, alias="HomeTeamCoach")
    lineups: Optional[List[Lineup]] = Field(default=None, alias="Lineups")
    main_referee: Optional[Referee] = Field(default=None, alias="MainReferee")
    penalty_shootouts: Optional[List[PenaltyShootout]] = Field(default=None, alias="PenaltyShootouts")
    player_games: Optional[List[PlayerGame]] = Field(default=None, alias="PlayerGames")
    team_games: Optional[List[TeamGame]] = Field(default=None, alias="TeamGames")
    video_assistant_referee: Optional[Referee] = Field(default=None, alias="VideoAssistantReferee")
    __properties: ClassVar[List[str]] = ["AdditionalAssistantReferee1", "AdditionalAssistantReferee2", "AssistantReferee1", "AssistantReferee2", "AwayTeamCoach", "Bookings", "FourthReferee", "Game", "Goals", "HomeTeamCoach", "Lineups", "MainReferee", "PenaltyShootouts", "PlayerGames", "TeamGames", "VideoAssistantReferee"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoxScore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_assistant_referee1
        if self.additional_assistant_referee1:
            _dict['AdditionalAssistantReferee1'] = self.additional_assistant_referee1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of additional_assistant_referee2
        if self.additional_assistant_referee2:
            _dict['AdditionalAssistantReferee2'] = self.additional_assistant_referee2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assistant_referee1
        if self.assistant_referee1:
            _dict['AssistantReferee1'] = self.assistant_referee1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assistant_referee2
        if self.assistant_referee2:
            _dict['AssistantReferee2'] = self.assistant_referee2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of away_team_coach
        if self.away_team_coach:
            _dict['AwayTeamCoach'] = self.away_team_coach.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in bookings (list)
        _items = []
        if self.bookings:
            for _item_bookings in self.bookings:
                if _item_bookings:
                    _items.append(_item_bookings.to_dict())
            _dict['Bookings'] = _items
        # override the default output from pydantic by calling `to_dict()` of fourth_referee
        if self.fourth_referee:
            _dict['FourthReferee'] = self.fourth_referee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of game
        if self.game:
            _dict['Game'] = self.game.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in goals (list)
        _items = []
        if self.goals:
            for _item_goals in self.goals:
                if _item_goals:
                    _items.append(_item_goals.to_dict())
            _dict['Goals'] = _items
        # override the default output from pydantic by calling `to_dict()` of home_team_coach
        if self.home_team_coach:
            _dict['HomeTeamCoach'] = self.home_team_coach.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lineups (list)
        _items = []
        if self.lineups:
            for _item_lineups in self.lineups:
                if _item_lineups:
                    _items.append(_item_lineups.to_dict())
            _dict['Lineups'] = _items
        # override the default output from pydantic by calling `to_dict()` of main_referee
        if self.main_referee:
            _dict['MainReferee'] = self.main_referee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in penalty_shootouts (list)
        _items = []
        if self.penalty_shootouts:
            for _item_penalty_shootouts in self.penalty_shootouts:
                if _item_penalty_shootouts:
                    _items.append(_item_penalty_shootouts.to_dict())
            _dict['PenaltyShootouts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in player_games (list)
        _items = []
        if self.player_games:
            for _item_player_games in self.player_games:
                if _item_player_games:
                    _items.append(_item_player_games.to_dict())
            _dict['PlayerGames'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in team_games (list)
        _items = []
        if self.team_games:
            for _item_team_games in self.team_games:
                if _item_team_games:
                    _items.append(_item_team_games.to_dict())
            _dict['TeamGames'] = _items
        # override the default output from pydantic by calling `to_dict()` of video_assistant_referee
        if self.video_assistant_referee:
            _dict['VideoAssistantReferee'] = self.video_assistant_referee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoxScore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AdditionalAssistantReferee1": Referee.from_dict(obj["AdditionalAssistantReferee1"]) if obj.get("AdditionalAssistantReferee1") is not None else None,
            "AdditionalAssistantReferee2": Referee.from_dict(obj["AdditionalAssistantReferee2"]) if obj.get("AdditionalAssistantReferee2") is not None else None,
            "AssistantReferee1": Referee.from_dict(obj["AssistantReferee1"]) if obj.get("AssistantReferee1") is not None else None,
            "AssistantReferee2": Referee.from_dict(obj["AssistantReferee2"]) if obj.get("AssistantReferee2") is not None else None,
            "AwayTeamCoach": Coach.from_dict(obj["AwayTeamCoach"]) if obj.get("AwayTeamCoach") is not None else None,
            "Bookings": [Booking.from_dict(_item) for _item in obj["Bookings"]] if obj.get("Bookings") is not None else None,
            "FourthReferee": Referee.from_dict(obj["FourthReferee"]) if obj.get("FourthReferee") is not None else None,
            "Game": Game.from_dict(obj["Game"]) if obj.get("Game") is not None else None,
            "Goals": [Goal.from_dict(_item) for _item in obj["Goals"]] if obj.get("Goals") is not None else None,
            "HomeTeamCoach": Coach.from_dict(obj["HomeTeamCoach"]) if obj.get("HomeTeamCoach") is not None else None,
            "Lineups": [Lineup.from_dict(_item) for _item in obj["Lineups"]] if obj.get("Lineups") is not None else None,
            "MainReferee": Referee.from_dict(obj["MainReferee"]) if obj.get("MainReferee") is not None else None,
            "PenaltyShootouts": [PenaltyShootout.from_dict(_item) for _item in obj["PenaltyShootouts"]] if obj.get("PenaltyShootouts") is not None else None,
            "PlayerGames": [PlayerGame.from_dict(_item) for _item in obj["PlayerGames"]] if obj.get("PlayerGames") is not None else None,
            "TeamGames": [TeamGame.from_dict(_item) for _item in obj["TeamGames"]] if obj.get("TeamGames") is not None else None,
            "VideoAssistantReferee": Referee.from_dict(obj["VideoAssistantReferee"]) if obj.get("VideoAssistantReferee") is not None else None
        })
        return _obj


