# coding: utf-8

"""
    Soccer v3 Stats

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.playoff_aggregate_score import PlayoffAggregateScore
from typing import Optional, Set
from typing_extensions import Self

class Game(BaseModel):
    """
    Game
    """ # noqa: E501
    attendance: Optional[StrictInt] = Field(default=None, alias="Attendance")
    away_team_country_code: Optional[StrictStr] = Field(default=None, alias="AwayTeamCountryCode")
    away_team_formation: Optional[StrictStr] = Field(default=None, alias="AwayTeamFormation")
    away_team_id: Optional[StrictInt] = Field(default=None, alias="AwayTeamId")
    away_team_key: Optional[StrictStr] = Field(default=None, alias="AwayTeamKey")
    away_team_money_line: Optional[StrictInt] = Field(default=None, alias="AwayTeamMoneyLine")
    away_team_name: Optional[StrictStr] = Field(default=None, alias="AwayTeamName")
    away_team_point_spread_payout: Optional[StrictInt] = Field(default=None, alias="AwayTeamPointSpreadPayout")
    away_team_score: Optional[StrictInt] = Field(default=None, alias="AwayTeamScore")
    away_team_score_extra_time: Optional[StrictInt] = Field(default=None, alias="AwayTeamScoreExtraTime")
    away_team_score_penalty: Optional[StrictInt] = Field(default=None, alias="AwayTeamScorePenalty")
    away_team_score_period1: Optional[StrictInt] = Field(default=None, alias="AwayTeamScorePeriod1")
    away_team_score_period2: Optional[StrictInt] = Field(default=None, alias="AwayTeamScorePeriod2")
    clock: Optional[StrictInt] = Field(default=None, alias="Clock")
    clock_display: Optional[StrictStr] = Field(default=None, alias="ClockDisplay")
    clock_extra: Optional[StrictInt] = Field(default=None, alias="ClockExtra")
    date_time: Optional[StrictStr] = Field(default=None, alias="DateTime")
    day: Optional[StrictStr] = Field(default=None, alias="Day")
    draw_money_line: Optional[StrictInt] = Field(default=None, alias="DrawMoneyLine")
    game_id: Optional[StrictInt] = Field(default=None, alias="GameId")
    global_away_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalAwayTeamId")
    global_game_id: Optional[StrictInt] = Field(default=None, alias="GlobalGameId")
    global_home_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalHomeTeamId")
    group: Optional[StrictStr] = Field(default=None, alias="Group")
    home_team_country_code: Optional[StrictStr] = Field(default=None, alias="HomeTeamCountryCode")
    home_team_formation: Optional[StrictStr] = Field(default=None, alias="HomeTeamFormation")
    home_team_id: Optional[StrictInt] = Field(default=None, alias="HomeTeamId")
    home_team_key: Optional[StrictStr] = Field(default=None, alias="HomeTeamKey")
    home_team_money_line: Optional[StrictInt] = Field(default=None, alias="HomeTeamMoneyLine")
    home_team_name: Optional[StrictStr] = Field(default=None, alias="HomeTeamName")
    home_team_point_spread_payout: Optional[StrictInt] = Field(default=None, alias="HomeTeamPointSpreadPayout")
    home_team_score: Optional[StrictInt] = Field(default=None, alias="HomeTeamScore")
    home_team_score_extra_time: Optional[StrictInt] = Field(default=None, alias="HomeTeamScoreExtraTime")
    home_team_score_penalty: Optional[StrictInt] = Field(default=None, alias="HomeTeamScorePenalty")
    home_team_score_period1: Optional[StrictInt] = Field(default=None, alias="HomeTeamScorePeriod1")
    home_team_score_period2: Optional[StrictInt] = Field(default=None, alias="HomeTeamScorePeriod2")
    is_closed: Optional[StrictBool] = Field(default=None, alias="IsClosed")
    over_payout: Optional[StrictInt] = Field(default=None, alias="OverPayout")
    over_under: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="OverUnder")
    period: Optional[StrictStr] = Field(default=None, alias="Period")
    playoff_aggregate_score: Optional[PlayoffAggregateScore] = Field(default=None, alias="PlayoffAggregateScore")
    point_spread: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PointSpread")
    round_id: Optional[StrictInt] = Field(default=None, alias="RoundId")
    season: Optional[StrictInt] = Field(default=None, alias="Season")
    season_type: Optional[StrictInt] = Field(default=None, alias="SeasonType")
    status: Optional[StrictStr] = Field(default=None, alias="Status")
    under_payout: Optional[StrictInt] = Field(default=None, alias="UnderPayout")
    updated: Optional[StrictStr] = Field(default=None, alias="Updated")
    updated_utc: Optional[StrictStr] = Field(default=None, alias="UpdatedUtc")
    venue_id: Optional[StrictInt] = Field(default=None, alias="VenueId")
    venue_type: Optional[StrictStr] = Field(default=None, alias="VenueType")
    week: Optional[StrictInt] = Field(default=None, alias="Week")
    winner: Optional[StrictStr] = Field(default=None, alias="Winner")
    __properties: ClassVar[List[str]] = ["Attendance", "AwayTeamCountryCode", "AwayTeamFormation", "AwayTeamId", "AwayTeamKey", "AwayTeamMoneyLine", "AwayTeamName", "AwayTeamPointSpreadPayout", "AwayTeamScore", "AwayTeamScoreExtraTime", "AwayTeamScorePenalty", "AwayTeamScorePeriod1", "AwayTeamScorePeriod2", "Clock", "ClockDisplay", "ClockExtra", "DateTime", "Day", "DrawMoneyLine", "GameId", "GlobalAwayTeamId", "GlobalGameId", "GlobalHomeTeamId", "Group", "HomeTeamCountryCode", "HomeTeamFormation", "HomeTeamId", "HomeTeamKey", "HomeTeamMoneyLine", "HomeTeamName", "HomeTeamPointSpreadPayout", "HomeTeamScore", "HomeTeamScoreExtraTime", "HomeTeamScorePenalty", "HomeTeamScorePeriod1", "HomeTeamScorePeriod2", "IsClosed", "OverPayout", "OverUnder", "Period", "PlayoffAggregateScore", "PointSpread", "RoundId", "Season", "SeasonType", "Status", "UnderPayout", "Updated", "UpdatedUtc", "VenueId", "VenueType", "Week", "Winner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Game from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of playoff_aggregate_score
        if self.playoff_aggregate_score:
            _dict['PlayoffAggregateScore'] = self.playoff_aggregate_score.to_dict()
        # set to None if attendance (nullable) is None
        # and model_fields_set contains the field
        if self.attendance is None and "attendance" in self.model_fields_set:
            _dict['Attendance'] = None

        # set to None if away_team_country_code (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_country_code is None and "away_team_country_code" in self.model_fields_set:
            _dict['AwayTeamCountryCode'] = None

        # set to None if away_team_formation (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_formation is None and "away_team_formation" in self.model_fields_set:
            _dict['AwayTeamFormation'] = None

        # set to None if away_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_id is None and "away_team_id" in self.model_fields_set:
            _dict['AwayTeamId'] = None

        # set to None if away_team_key (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_key is None and "away_team_key" in self.model_fields_set:
            _dict['AwayTeamKey'] = None

        # set to None if away_team_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_money_line is None and "away_team_money_line" in self.model_fields_set:
            _dict['AwayTeamMoneyLine'] = None

        # set to None if away_team_name (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_name is None and "away_team_name" in self.model_fields_set:
            _dict['AwayTeamName'] = None

        # set to None if away_team_point_spread_payout (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_point_spread_payout is None and "away_team_point_spread_payout" in self.model_fields_set:
            _dict['AwayTeamPointSpreadPayout'] = None

        # set to None if away_team_score (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_score is None and "away_team_score" in self.model_fields_set:
            _dict['AwayTeamScore'] = None

        # set to None if away_team_score_extra_time (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_score_extra_time is None and "away_team_score_extra_time" in self.model_fields_set:
            _dict['AwayTeamScoreExtraTime'] = None

        # set to None if away_team_score_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_score_penalty is None and "away_team_score_penalty" in self.model_fields_set:
            _dict['AwayTeamScorePenalty'] = None

        # set to None if away_team_score_period1 (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_score_period1 is None and "away_team_score_period1" in self.model_fields_set:
            _dict['AwayTeamScorePeriod1'] = None

        # set to None if away_team_score_period2 (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_score_period2 is None and "away_team_score_period2" in self.model_fields_set:
            _dict['AwayTeamScorePeriod2'] = None

        # set to None if clock (nullable) is None
        # and model_fields_set contains the field
        if self.clock is None and "clock" in self.model_fields_set:
            _dict['Clock'] = None

        # set to None if clock_display (nullable) is None
        # and model_fields_set contains the field
        if self.clock_display is None and "clock_display" in self.model_fields_set:
            _dict['ClockDisplay'] = None

        # set to None if clock_extra (nullable) is None
        # and model_fields_set contains the field
        if self.clock_extra is None and "clock_extra" in self.model_fields_set:
            _dict['ClockExtra'] = None

        # set to None if date_time (nullable) is None
        # and model_fields_set contains the field
        if self.date_time is None and "date_time" in self.model_fields_set:
            _dict['DateTime'] = None

        # set to None if day (nullable) is None
        # and model_fields_set contains the field
        if self.day is None and "day" in self.model_fields_set:
            _dict['Day'] = None

        # set to None if draw_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.draw_money_line is None and "draw_money_line" in self.model_fields_set:
            _dict['DrawMoneyLine'] = None

        # set to None if global_away_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_away_team_id is None and "global_away_team_id" in self.model_fields_set:
            _dict['GlobalAwayTeamId'] = None

        # set to None if global_home_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_home_team_id is None and "global_home_team_id" in self.model_fields_set:
            _dict['GlobalHomeTeamId'] = None

        # set to None if group (nullable) is None
        # and model_fields_set contains the field
        if self.group is None and "group" in self.model_fields_set:
            _dict['Group'] = None

        # set to None if home_team_country_code (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_country_code is None and "home_team_country_code" in self.model_fields_set:
            _dict['HomeTeamCountryCode'] = None

        # set to None if home_team_formation (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_formation is None and "home_team_formation" in self.model_fields_set:
            _dict['HomeTeamFormation'] = None

        # set to None if home_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_id is None and "home_team_id" in self.model_fields_set:
            _dict['HomeTeamId'] = None

        # set to None if home_team_key (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_key is None and "home_team_key" in self.model_fields_set:
            _dict['HomeTeamKey'] = None

        # set to None if home_team_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_money_line is None and "home_team_money_line" in self.model_fields_set:
            _dict['HomeTeamMoneyLine'] = None

        # set to None if home_team_name (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_name is None and "home_team_name" in self.model_fields_set:
            _dict['HomeTeamName'] = None

        # set to None if home_team_point_spread_payout (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_point_spread_payout is None and "home_team_point_spread_payout" in self.model_fields_set:
            _dict['HomeTeamPointSpreadPayout'] = None

        # set to None if home_team_score (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_score is None and "home_team_score" in self.model_fields_set:
            _dict['HomeTeamScore'] = None

        # set to None if home_team_score_extra_time (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_score_extra_time is None and "home_team_score_extra_time" in self.model_fields_set:
            _dict['HomeTeamScoreExtraTime'] = None

        # set to None if home_team_score_penalty (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_score_penalty is None and "home_team_score_penalty" in self.model_fields_set:
            _dict['HomeTeamScorePenalty'] = None

        # set to None if home_team_score_period1 (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_score_period1 is None and "home_team_score_period1" in self.model_fields_set:
            _dict['HomeTeamScorePeriod1'] = None

        # set to None if home_team_score_period2 (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_score_period2 is None and "home_team_score_period2" in self.model_fields_set:
            _dict['HomeTeamScorePeriod2'] = None

        # set to None if is_closed (nullable) is None
        # and model_fields_set contains the field
        if self.is_closed is None and "is_closed" in self.model_fields_set:
            _dict['IsClosed'] = None

        # set to None if over_payout (nullable) is None
        # and model_fields_set contains the field
        if self.over_payout is None and "over_payout" in self.model_fields_set:
            _dict['OverPayout'] = None

        # set to None if over_under (nullable) is None
        # and model_fields_set contains the field
        if self.over_under is None and "over_under" in self.model_fields_set:
            _dict['OverUnder'] = None

        # set to None if period (nullable) is None
        # and model_fields_set contains the field
        if self.period is None and "period" in self.model_fields_set:
            _dict['Period'] = None

        # set to None if point_spread (nullable) is None
        # and model_fields_set contains the field
        if self.point_spread is None and "point_spread" in self.model_fields_set:
            _dict['PointSpread'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['Status'] = None

        # set to None if under_payout (nullable) is None
        # and model_fields_set contains the field
        if self.under_payout is None and "under_payout" in self.model_fields_set:
            _dict['UnderPayout'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['Updated'] = None

        # set to None if updated_utc (nullable) is None
        # and model_fields_set contains the field
        if self.updated_utc is None and "updated_utc" in self.model_fields_set:
            _dict['UpdatedUtc'] = None

        # set to None if venue_id (nullable) is None
        # and model_fields_set contains the field
        if self.venue_id is None and "venue_id" in self.model_fields_set:
            _dict['VenueId'] = None

        # set to None if venue_type (nullable) is None
        # and model_fields_set contains the field
        if self.venue_type is None and "venue_type" in self.model_fields_set:
            _dict['VenueType'] = None

        # set to None if week (nullable) is None
        # and model_fields_set contains the field
        if self.week is None and "week" in self.model_fields_set:
            _dict['Week'] = None

        # set to None if winner (nullable) is None
        # and model_fields_set contains the field
        if self.winner is None and "winner" in self.model_fields_set:
            _dict['Winner'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Game from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Attendance": obj.get("Attendance"),
            "AwayTeamCountryCode": obj.get("AwayTeamCountryCode"),
            "AwayTeamFormation": obj.get("AwayTeamFormation"),
            "AwayTeamId": obj.get("AwayTeamId"),
            "AwayTeamKey": obj.get("AwayTeamKey"),
            "AwayTeamMoneyLine": obj.get("AwayTeamMoneyLine"),
            "AwayTeamName": obj.get("AwayTeamName"),
            "AwayTeamPointSpreadPayout": obj.get("AwayTeamPointSpreadPayout"),
            "AwayTeamScore": obj.get("AwayTeamScore"),
            "AwayTeamScoreExtraTime": obj.get("AwayTeamScoreExtraTime"),
            "AwayTeamScorePenalty": obj.get("AwayTeamScorePenalty"),
            "AwayTeamScorePeriod1": obj.get("AwayTeamScorePeriod1"),
            "AwayTeamScorePeriod2": obj.get("AwayTeamScorePeriod2"),
            "Clock": obj.get("Clock"),
            "ClockDisplay": obj.get("ClockDisplay"),
            "ClockExtra": obj.get("ClockExtra"),
            "DateTime": obj.get("DateTime"),
            "Day": obj.get("Day"),
            "DrawMoneyLine": obj.get("DrawMoneyLine"),
            "GameId": obj.get("GameId"),
            "GlobalAwayTeamId": obj.get("GlobalAwayTeamId"),
            "GlobalGameId": obj.get("GlobalGameId"),
            "GlobalHomeTeamId": obj.get("GlobalHomeTeamId"),
            "Group": obj.get("Group"),
            "HomeTeamCountryCode": obj.get("HomeTeamCountryCode"),
            "HomeTeamFormation": obj.get("HomeTeamFormation"),
            "HomeTeamId": obj.get("HomeTeamId"),
            "HomeTeamKey": obj.get("HomeTeamKey"),
            "HomeTeamMoneyLine": obj.get("HomeTeamMoneyLine"),
            "HomeTeamName": obj.get("HomeTeamName"),
            "HomeTeamPointSpreadPayout": obj.get("HomeTeamPointSpreadPayout"),
            "HomeTeamScore": obj.get("HomeTeamScore"),
            "HomeTeamScoreExtraTime": obj.get("HomeTeamScoreExtraTime"),
            "HomeTeamScorePenalty": obj.get("HomeTeamScorePenalty"),
            "HomeTeamScorePeriod1": obj.get("HomeTeamScorePeriod1"),
            "HomeTeamScorePeriod2": obj.get("HomeTeamScorePeriod2"),
            "IsClosed": obj.get("IsClosed"),
            "OverPayout": obj.get("OverPayout"),
            "OverUnder": obj.get("OverUnder"),
            "Period": obj.get("Period"),
            "PlayoffAggregateScore": PlayoffAggregateScore.from_dict(obj["PlayoffAggregateScore"]) if obj.get("PlayoffAggregateScore") is not None else None,
            "PointSpread": obj.get("PointSpread"),
            "RoundId": obj.get("RoundId"),
            "Season": obj.get("Season"),
            "SeasonType": obj.get("SeasonType"),
            "Status": obj.get("Status"),
            "UnderPayout": obj.get("UnderPayout"),
            "Updated": obj.get("Updated"),
            "UpdatedUtc": obj.get("UpdatedUtc"),
            "VenueId": obj.get("VenueId"),
            "VenueType": obj.get("VenueType"),
            "Week": obj.get("Week"),
            "Winner": obj.get("Winner")
        })
        return _obj


