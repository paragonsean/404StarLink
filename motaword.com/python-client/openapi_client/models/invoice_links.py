# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.href import Href
from typing import Optional, Set
from typing_extensions import Self

class InvoiceLinks(BaseModel):
    """
    InvoiceLinks
    """ # noqa: E501
    var_self: Optional[Href] = Field(default=None, alias="self")
    corporate: Optional[Href] = None
    html: Optional[Href] = None
    var_json: Optional[Href] = Field(default=None, alias="json")
    pdf: Optional[Href] = None
    project: Optional[Href] = None
    view: Optional[Href] = None
    __properties: ClassVar[List[str]] = ["self", "corporate", "html", "json", "pdf", "project", "view"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of corporate
        if self.corporate:
            _dict['corporate'] = self.corporate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of html
        if self.html:
            _dict['html'] = self.html.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_json
        if self.var_json:
            _dict['json'] = self.var_json.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pdf
        if self.pdf:
            _dict['pdf'] = self.pdf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of project
        if self.project:
            _dict['project'] = self.project.to_dict()
        # override the default output from pydantic by calling `to_dict()` of view
        if self.view:
            _dict['view'] = self.view.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "self": Href.from_dict(obj["self"]) if obj.get("self") is not None else None,
            "corporate": Href.from_dict(obj["corporate"]) if obj.get("corporate") is not None else None,
            "html": Href.from_dict(obj["html"]) if obj.get("html") is not None else None,
            "json": Href.from_dict(obj["json"]) if obj.get("json") is not None else None,
            "pdf": Href.from_dict(obj["pdf"]) if obj.get("pdf") is not None else None,
            "project": Href.from_dict(obj["project"]) if obj.get("project") is not None else None,
            "view": Href.from_dict(obj["view"]) if obj.get("view") is not None else None
        })
        return _obj


