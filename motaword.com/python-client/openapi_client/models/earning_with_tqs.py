# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EarningWithTQS(BaseModel):
    """
    EarningWithTQS
    """ # noqa: E501
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[StrictStr] = 'usd'
    due_date: Optional[datetime] = Field(default=None, description="the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z")
    status: Optional[StrictStr] = None
    words: Optional[StrictInt] = None
    words_approved: Optional[StrictInt] = None
    words_translated: Optional[StrictInt] = None
    is_above_average: Optional[StrictBool] = Field(default=None, description="Is this score above or below the average among other vendors in the same project?")
    score: Optional[Union[StrictFloat, StrictInt]] = None
    strings_edited: Optional[StrictInt] = Field(default=None, description="The number of translated strings by this translator which was edited by a proofreader.")
    strings_translated: Optional[StrictInt] = Field(default=None, description="The number of translated strings by this translator.")
    project_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["amount", "currency", "due_date", "status", "words", "words_approved", "words_translated", "is_above_average", "score", "strings_edited", "strings_translated", "project_id"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['paid', 'pending', 'failed']):
            raise ValueError("must be one of enum values ('paid', 'pending', 'failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EarningWithTQS from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EarningWithTQS from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "currency": obj.get("currency") if obj.get("currency") is not None else 'usd',
            "due_date": obj.get("due_date"),
            "status": obj.get("status"),
            "words": obj.get("words"),
            "words_approved": obj.get("words_approved"),
            "words_translated": obj.get("words_translated"),
            "is_above_average": obj.get("is_above_average"),
            "score": obj.get("score"),
            "strings_edited": obj.get("strings_edited"),
            "strings_translated": obj.get("strings_translated"),
            "project_id": obj.get("project_id")
        })
        return _obj


