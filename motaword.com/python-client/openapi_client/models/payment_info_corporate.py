# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.billing_address import BillingAddress
from openapi_client.models.credit_card import CreditCard
from typing import Optional, Set
from typing_extensions import Self

class PaymentInfoCorporate(BaseModel):
    """
    PaymentInfoCorporate
    """ # noqa: E501
    allow_api_invoicing: Optional[StrictBool] = None
    allow_payment_code: Optional[StrictBool] = None
    auto_charge: Optional[StrictBool] = None
    billing: Optional[BillingAddress] = None
    card: Optional[CreditCard] = None
    contact_email_address: Optional[StrictStr] = None
    payment_code: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["allow_api_invoicing", "allow_payment_code", "auto_charge", "billing", "card", "contact_email_address", "payment_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentInfoCorporate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentInfoCorporate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_api_invoicing": obj.get("allow_api_invoicing"),
            "allow_payment_code": obj.get("allow_payment_code"),
            "auto_charge": obj.get("auto_charge"),
            "billing": BillingAddress.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "card": CreditCard.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "contact_email_address": obj.get("contact_email_address"),
            "payment_code": obj.get("payment_code")
        })
        return _obj


