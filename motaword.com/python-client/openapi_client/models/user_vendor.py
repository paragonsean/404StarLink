# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.language_pair import LanguagePair
from typing import Optional, Set
from typing_extensions import Self

class UserVendor(BaseModel):
    """
    UserVendor
    """ # noqa: E501
    can_work_manual_files: Optional[StrictBool] = None
    email_open_rate: Optional[Union[StrictFloat, StrictInt]] = None
    is_frozen: Optional[StrictBool] = None
    is_proofreader: Optional[StrictBool] = None
    language_pairs: Optional[List[LanguagePair]] = None
    native_language: Optional[StrictStr] = Field(default=None, description="Native language of user")
    pam_tqs: Optional[Union[StrictFloat, StrictInt]] = None
    paypal_email: Optional[StrictStr] = None
    profile_survey: Optional[Dict[str, Any]] = None
    require_1099: Optional[StrictBool] = None
    tags: Optional[List[StrictStr]] = None
    tms_user_name: Optional[StrictStr] = None
    vendor_type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["can_work_manual_files", "email_open_rate", "is_frozen", "is_proofreader", "language_pairs", "native_language", "pam_tqs", "paypal_email", "profile_survey", "require_1099", "tags", "tms_user_name", "vendor_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserVendor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in language_pairs (list)
        _items = []
        if self.language_pairs:
            for _item_language_pairs in self.language_pairs:
                if _item_language_pairs:
                    _items.append(_item_language_pairs.to_dict())
            _dict['language_pairs'] = _items
        # override the default output from pydantic by calling `to_dict()` of profile_survey
        if self.profile_survey:
            _dict['profile_survey'] = self.profile_survey.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserVendor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "can_work_manual_files": obj.get("can_work_manual_files"),
            "email_open_rate": obj.get("email_open_rate"),
            "is_frozen": obj.get("is_frozen"),
            "is_proofreader": obj.get("is_proofreader"),
            "language_pairs": [LanguagePair.from_dict(_item) for _item in obj["language_pairs"]] if obj.get("language_pairs") is not None else None,
            "native_language": obj.get("native_language"),
            "pam_tqs": obj.get("pam_tqs"),
            "paypal_email": obj.get("paypal_email"),
            "profile_survey": ProfileSurvey.from_dict(obj["profile_survey"]) if obj.get("profile_survey") is not None else None,
            "require_1099": obj.get("require_1099"),
            "tags": obj.get("tags"),
            "tms_user_name": obj.get("tms_user_name"),
            "vendor_type": obj.get("vendor_type")
        })
        return _obj


