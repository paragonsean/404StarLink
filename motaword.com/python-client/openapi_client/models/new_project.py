# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Tuple, Union
from typing import Optional, Set
from typing_extensions import Self

class NewProject(BaseModel):
    """
    NewProject
    """ # noqa: E501
    callback_url: Optional[StrictStr] = Field(default=None, description="Optional. If you provide a callback URL, we will send POST callbacks when the status of the current project is changed. Possible status changes are, 'translated', 'proofread', 'completed'.")
    coupon_code: Optional[StrictStr] = Field(default=None, description="Coupon code to redeem")
    custom: Optional[List[StrictStr]] = Field(default=None, description="Optional. This is a consistent custom data parameter that will be given to you in the response across every request of this project model. Values should be provided like this, custom[my_key] = my_value.")
    documents: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="Optional. You can add as many files as you want in documents[] parameter. Or you add your documents later in separate calls.", alias="documents[]")
    glossaries: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="Optional. Only one glossary is supported at the moment.", alias="glossaries[]")
    source_language: Optional[StrictStr] = None
    styleguides: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = Field(default=None, description="Optional. You can add as many files as you want in styleguides[] parameter. Or you add your style guides later in separate calls.", alias="styleguides[]")
    target_languages: Optional[List[StrictStr]] = Field(default=None, alias="target_languages[]")
    __properties: ClassVar[List[str]] = ["callback_url", "coupon_code", "custom", "documents[]", "glossaries[]", "source_language", "styleguides[]", "target_languages[]"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewProject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewProject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callback_url": obj.get("callback_url"),
            "coupon_code": obj.get("coupon_code"),
            "custom": obj.get("custom"),
            "documents[]": obj.get("documents[]"),
            "glossaries[]": obj.get("glossaries[]"),
            "source_language": obj.get("source_language"),
            "styleguides[]": obj.get("styleguides[]"),
            "target_languages[]": obj.get("target_languages[]")
        })
        return _obj


