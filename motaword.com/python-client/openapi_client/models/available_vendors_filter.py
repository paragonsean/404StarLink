# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AvailableVendorsFilter(BaseModel):
    """
    AvailableVendorsFilter
    """ # noqa: E501
    corporate_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Corporate account ID to filter for vendor authorization", alias="corporateId")
    manual_work_permission: Optional[StrictBool] = Field(default=None, description="Filter vendors for manual work permission", alias="manualWorkPermission")
    source_language: Optional[StrictStr] = Field(default=None, description="Source language code", alias="sourceLanguage")
    target_languages: Optional[List[StrictStr]] = Field(default=None, description="List of target language codes.", alias="targetLanguages")
    types: Optional[List[StrictStr]] = Field(default=None, description="List of vendor types")
    __properties: ClassVar[List[str]] = ["corporateId", "manualWorkPermission", "sourceLanguage", "targetLanguages", "types"]

    @field_validator('types')
    def types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['translator', 'proofreader', 'both']):
                raise ValueError("each list item must be one of ('translator', 'proofreader', 'both')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AvailableVendorsFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AvailableVendorsFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "corporateId": obj.get("corporateId"),
            "manualWorkPermission": obj.get("manualWorkPermission"),
            "sourceLanguage": obj.get("sourceLanguage"),
            "targetLanguages": obj.get("targetLanguages"),
            "types": obj.get("types")
        })
        return _obj


