# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.billing_address import BillingAddress
from openapi_client.models.invoice_links import InvoiceLinks
from typing import Optional, Set
from typing_extensions import Self

class Invoice(BaseModel):
    """
    Invoice
    """ # noqa: E501
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monetary amount")
    base_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Monetary amount")
    base_currency: Optional[StrictStr] = 'usd'
    billing: Optional[BillingAddress] = None
    currency: Optional[StrictStr] = 'usd'
    id: Optional[StrictInt] = None
    invoice_no: Optional[StrictInt] = None
    invoiced_at: Optional[datetime] = Field(default=None, description="the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z")
    links: Optional[InvoiceLinks] = None
    status: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["amount", "base_amount", "base_currency", "billing", "currency", "id", "invoice_no", "invoiced_at", "links", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Invoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Invoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "base_amount": obj.get("base_amount"),
            "base_currency": obj.get("base_currency") if obj.get("base_currency") is not None else 'usd',
            "billing": BillingAddress.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "currency": obj.get("currency") if obj.get("currency") is not None else 'usd',
            "id": obj.get("id"),
            "invoice_no": obj.get("invoice_no"),
            "invoiced_at": obj.get("invoiced_at"),
            "links": InvoiceLinks.from_dict(obj["links"]) if obj.get("links") is not None else None,
            "status": obj.get("status")
        })
        return _obj


