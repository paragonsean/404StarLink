# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.monetary import Monetary
from typing import Optional, Set
from typing_extensions import Self

class CommissionStats(BaseModel):
    """
    CommissionStats
    """ # noqa: E501
    balance: Optional[Monetary] = None
    paid: Optional[Monetary] = None
    quote_total: Optional[Monetary] = None
    total: Optional[Monetary] = None
    __properties: ClassVar[List[str]] = ["balance", "paid", "quote_total", "total"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommissionStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of balance
        if self.balance:
            _dict['balance'] = self.balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of paid
        if self.paid:
            _dict['paid'] = self.paid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote_total
        if self.quote_total:
            _dict['quote_total'] = self.quote_total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict['total'] = self.total.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommissionStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "balance": Monetary.from_dict(obj["balance"]) if obj.get("balance") is not None else None,
            "paid": Monetary.from_dict(obj["paid"]) if obj.get("paid") is not None else None,
            "quote_total": Monetary.from_dict(obj["quote_total"]) if obj.get("quote_total") is not None else None,
            "total": Monetary.from_dict(obj["total"]) if obj.get("total") is not None else None
        })
        return _obj


