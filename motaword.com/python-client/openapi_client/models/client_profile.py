# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.client_profile_nps import ClientProfileNps
from openapi_client.models.proofreader_with_language import ProofreaderWithLanguage
from typing import Optional, Set
from typing_extensions import Self

class ClientProfile(BaseModel):
    """
    ClientProfile
    """ # noqa: E501
    account_creation_date: Optional[datetime] = Field(default=None, description="the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z")
    client_project_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total project count that this client sent")
    corporate: Optional[StrictStr] = Field(default=None, description="corporate name")
    corporate_id: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="corporate id")
    corporate_user_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total user count in a corporation")
    frequent_file_extension: Optional[StrictStr] = Field(default=None, description="the file extension for the files that usually this client sent")
    frequent_language_pairs: Optional[List[StrictStr]] = Field(default=None, description="frequent language pairs")
    full_name: Optional[StrictStr] = Field(default=None, description="full name of the client")
    growth: Optional[StrictBool] = Field(default=None, description="The answer for the question \"Is there any growth for this corporate's spending\". The values can be true, false or null if the corporate is oour client for less than 6 months")
    is_complex: Optional[StrictBool] = Field(default=None, description="the answer for the question \"Is this client usually sent complex projects?\"")
    last_12_months_spending: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="corporate's spending in twelve months")
    last_project: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="the quote number for the last project of this client")
    last_project_time: Optional[datetime] = Field(default=None, description="the creation date of the last project that is sent by this client")
    last_proofreaders: Optional[List[ProofreaderWithLanguage]] = Field(default=None, description="list of prooofreaders for the target languages of last project")
    notes: Optional[List[StrictStr]] = Field(default=None, description="notes that is submited for this client and/or with her projects")
    nps: Optional[ClientProfileNps] = None
    user_rank_in_project_count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="rank of the user in all corporate users for project count. If the user is the most active user foor sending projects her rank is 1")
    user_rank_in_spending: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="rank of the user in all corporate users for total spending. If the user is the most active user for spending her rank is 1")
    __properties: ClassVar[List[str]] = ["account_creation_date", "client_project_count", "corporate", "corporate_id", "corporate_user_count", "frequent_file_extension", "frequent_language_pairs", "full_name", "growth", "is_complex", "last_12_months_spending", "last_project", "last_project_time", "last_proofreaders", "notes", "nps", "user_rank_in_project_count", "user_rank_in_spending"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in last_proofreaders (list)
        _items = []
        if self.last_proofreaders:
            for _item_last_proofreaders in self.last_proofreaders:
                if _item_last_proofreaders:
                    _items.append(_item_last_proofreaders.to_dict())
            _dict['last_proofreaders'] = _items
        # override the default output from pydantic by calling `to_dict()` of nps
        if self.nps:
            _dict['nps'] = self.nps.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_creation_date": obj.get("account_creation_date"),
            "client_project_count": obj.get("client_project_count"),
            "corporate": obj.get("corporate"),
            "corporate_id": obj.get("corporate_id"),
            "corporate_user_count": obj.get("corporate_user_count"),
            "frequent_file_extension": obj.get("frequent_file_extension"),
            "frequent_language_pairs": obj.get("frequent_language_pairs"),
            "full_name": obj.get("full_name"),
            "growth": obj.get("growth"),
            "is_complex": obj.get("is_complex"),
            "last_12_months_spending": obj.get("last_12_months_spending"),
            "last_project": obj.get("last_project"),
            "last_project_time": obj.get("last_project_time"),
            "last_proofreaders": [ProofreaderWithLanguage.from_dict(_item) for _item in obj["last_proofreaders"]] if obj.get("last_proofreaders") is not None else None,
            "notes": obj.get("notes"),
            "nps": ClientProfileNps.from_dict(obj["nps"]) if obj.get("nps") is not None else None,
            "user_rank_in_project_count": obj.get("user_rank_in_project_count"),
            "user_rank_in_spending": obj.get("user_rank_in_spending")
        })
        return _obj


