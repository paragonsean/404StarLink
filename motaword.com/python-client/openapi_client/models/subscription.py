# coding: utf-8

"""
    MotaWord API

    Use MotaWord API to post and track your translation projects.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Subscription(BaseModel):
    """
    Subscription
    """ # noqa: E501
    downgrade: Optional[List[StrictStr]] = Field(default=None, description="Stripe downgradable plan")
    payment_method: Optional[StrictInt] = Field(default=None, description="Stripe subscription plan payment card internal id")
    period_end: Optional[datetime] = Field(default=None, description="Stripe plan period end")
    plan_id: Optional[StrictStr] = Field(default=None, description="Stripe subscription plan id")
    plan_name: Optional[StrictStr] = Field(default=None, description="Stripe subscription plan name")
    price: Optional[StrictStr] = Field(default=None, description="Stripe plan price")
    products: Optional[List[Any]] = None
    schedule_name: Optional[StrictStr] = Field(default=None, description="Stripe Scheduled plan period end")
    schedule_start: Optional[datetime] = Field(default=None, description="Stripe Scheduled start date")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Stripe subscription id for this project")
    upgrade: Optional[List[StrictStr]] = Field(default=None, description="Stripe upgradable plan")
    with_trial: Optional[Any] = Field(default=None, description="Stripe plan trial", alias="withTrial")
    __properties: ClassVar[List[str]] = ["downgrade", "payment_method", "period_end", "plan_id", "plan_name", "price", "products", "schedule_name", "schedule_start", "subscription_id", "upgrade", "withTrial"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if with_trial (nullable) is None
        # and model_fields_set contains the field
        if self.with_trial is None and "with_trial" in self.model_fields_set:
            _dict['withTrial'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "downgrade": obj.get("downgrade"),
            "payment_method": obj.get("payment_method"),
            "period_end": obj.get("period_end"),
            "plan_id": obj.get("plan_id"),
            "plan_name": obj.get("plan_name"),
            "price": obj.get("price"),
            "products": obj.get("products"),
            "schedule_name": obj.get("schedule_name"),
            "schedule_start": obj.get("schedule_start"),
            "subscription_id": obj.get("subscription_id"),
            "upgrade": obj.get("upgrade"),
            "withTrial": obj.get("withTrial")
        })
        return _obj


