# coding: utf-8

"""
    Legal Entity Management API

    The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws_123456@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  

    The version of the OpenAPI document: 3
    Contact: developer-experience@adyen.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from openapi_client.models.au_local_account_identification import AULocalAccountIdentification
from openapi_client.models.ca_local_account_identification import CALocalAccountIdentification
from openapi_client.models.cz_local_account_identification import CZLocalAccountIdentification
from openapi_client.models.dk_local_account_identification import DKLocalAccountIdentification
from openapi_client.models.hu_local_account_identification import HULocalAccountIdentification
from openapi_client.models.iban_account_identification import IbanAccountIdentification
from openapi_client.models.no_local_account_identification import NOLocalAccountIdentification
from openapi_client.models.number_and_bic_account_identification import NumberAndBicAccountIdentification
from openapi_client.models.pl_local_account_identification import PLLocalAccountIdentification
from openapi_client.models.se_local_account_identification import SELocalAccountIdentification
from openapi_client.models.uk_local_account_identification import UKLocalAccountIdentification
from openapi_client.models.us_local_account_identification import USLocalAccountIdentification
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

BANKACCOUNTINFOACCOUNTIDENTIFICATION_ONE_OF_SCHEMAS = ["AULocalAccountIdentification", "CALocalAccountIdentification", "CZLocalAccountIdentification", "DKLocalAccountIdentification", "HULocalAccountIdentification", "IbanAccountIdentification", "NOLocalAccountIdentification", "NumberAndBicAccountIdentification", "PLLocalAccountIdentification", "SELocalAccountIdentification", "UKLocalAccountIdentification", "USLocalAccountIdentification"]

class BankAccountInfoAccountIdentification(BaseModel):
    """
    Identification of the bank account.
    """
    # data type: AULocalAccountIdentification
    oneof_schema_1_validator: Optional[AULocalAccountIdentification] = None
    # data type: CALocalAccountIdentification
    oneof_schema_2_validator: Optional[CALocalAccountIdentification] = None
    # data type: CZLocalAccountIdentification
    oneof_schema_3_validator: Optional[CZLocalAccountIdentification] = None
    # data type: DKLocalAccountIdentification
    oneof_schema_4_validator: Optional[DKLocalAccountIdentification] = None
    # data type: HULocalAccountIdentification
    oneof_schema_5_validator: Optional[HULocalAccountIdentification] = None
    # data type: IbanAccountIdentification
    oneof_schema_6_validator: Optional[IbanAccountIdentification] = None
    # data type: NOLocalAccountIdentification
    oneof_schema_7_validator: Optional[NOLocalAccountIdentification] = None
    # data type: NumberAndBicAccountIdentification
    oneof_schema_8_validator: Optional[NumberAndBicAccountIdentification] = None
    # data type: PLLocalAccountIdentification
    oneof_schema_9_validator: Optional[PLLocalAccountIdentification] = None
    # data type: SELocalAccountIdentification
    oneof_schema_10_validator: Optional[SELocalAccountIdentification] = None
    # data type: UKLocalAccountIdentification
    oneof_schema_11_validator: Optional[UKLocalAccountIdentification] = None
    # data type: USLocalAccountIdentification
    oneof_schema_12_validator: Optional[USLocalAccountIdentification] = None
    actual_instance: Optional[Union[AULocalAccountIdentification, CALocalAccountIdentification, CZLocalAccountIdentification, DKLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification]] = None
    one_of_schemas: Set[str] = { "AULocalAccountIdentification", "CALocalAccountIdentification", "CZLocalAccountIdentification", "DKLocalAccountIdentification", "HULocalAccountIdentification", "IbanAccountIdentification", "NOLocalAccountIdentification", "NumberAndBicAccountIdentification", "PLLocalAccountIdentification", "SELocalAccountIdentification", "UKLocalAccountIdentification", "USLocalAccountIdentification" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BankAccountInfoAccountIdentification.model_construct()
        error_messages = []
        match = 0
        # validate data type: AULocalAccountIdentification
        if not isinstance(v, AULocalAccountIdentification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AULocalAccountIdentification`")
        else:
            match += 1
        # validate data type: CALocalAccountIdentification
        if not isinstance(v, CALocalAccountIdentification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CALocalAccountIdentification`")
        else:
            match += 1
        # validate data type: CZLocalAccountIdentification
        if not isinstance(v, CZLocalAccountIdentification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CZLocalAccountIdentification`")
        else:
            match += 1
        # validate data type: DKLocalAccountIdentification
        if not isinstance(v, DKLocalAccountIdentification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DKLocalAccountIdentification`")
        else:
            match += 1
        # validate data type: HULocalAccountIdentification
        if not isinstance(v, HULocalAccountIdentification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `HULocalAccountIdentification`")
        else:
            match += 1
        # validate data type: IbanAccountIdentification
        if not isinstance(v, IbanAccountIdentification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IbanAccountIdentification`")
        else:
            match += 1
        # validate data type: NOLocalAccountIdentification
        if not isinstance(v, NOLocalAccountIdentification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NOLocalAccountIdentification`")
        else:
            match += 1
        # validate data type: NumberAndBicAccountIdentification
        if not isinstance(v, NumberAndBicAccountIdentification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NumberAndBicAccountIdentification`")
        else:
            match += 1
        # validate data type: PLLocalAccountIdentification
        if not isinstance(v, PLLocalAccountIdentification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PLLocalAccountIdentification`")
        else:
            match += 1
        # validate data type: SELocalAccountIdentification
        if not isinstance(v, SELocalAccountIdentification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SELocalAccountIdentification`")
        else:
            match += 1
        # validate data type: UKLocalAccountIdentification
        if not isinstance(v, UKLocalAccountIdentification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UKLocalAccountIdentification`")
        else:
            match += 1
        # validate data type: USLocalAccountIdentification
        if not isinstance(v, USLocalAccountIdentification):
            error_messages.append(f"Error! Input type `{type(v)}` is not `USLocalAccountIdentification`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BankAccountInfoAccountIdentification with oneOf schemas: AULocalAccountIdentification, CALocalAccountIdentification, CZLocalAccountIdentification, DKLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BankAccountInfoAccountIdentification with oneOf schemas: AULocalAccountIdentification, CALocalAccountIdentification, CZLocalAccountIdentification, DKLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AULocalAccountIdentification
        try:
            instance.actual_instance = AULocalAccountIdentification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CALocalAccountIdentification
        try:
            instance.actual_instance = CALocalAccountIdentification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CZLocalAccountIdentification
        try:
            instance.actual_instance = CZLocalAccountIdentification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DKLocalAccountIdentification
        try:
            instance.actual_instance = DKLocalAccountIdentification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into HULocalAccountIdentification
        try:
            instance.actual_instance = HULocalAccountIdentification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IbanAccountIdentification
        try:
            instance.actual_instance = IbanAccountIdentification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NOLocalAccountIdentification
        try:
            instance.actual_instance = NOLocalAccountIdentification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NumberAndBicAccountIdentification
        try:
            instance.actual_instance = NumberAndBicAccountIdentification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PLLocalAccountIdentification
        try:
            instance.actual_instance = PLLocalAccountIdentification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SELocalAccountIdentification
        try:
            instance.actual_instance = SELocalAccountIdentification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UKLocalAccountIdentification
        try:
            instance.actual_instance = UKLocalAccountIdentification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into USLocalAccountIdentification
        try:
            instance.actual_instance = USLocalAccountIdentification.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BankAccountInfoAccountIdentification with oneOf schemas: AULocalAccountIdentification, CALocalAccountIdentification, CZLocalAccountIdentification, DKLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BankAccountInfoAccountIdentification with oneOf schemas: AULocalAccountIdentification, CALocalAccountIdentification, CZLocalAccountIdentification, DKLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AULocalAccountIdentification, CALocalAccountIdentification, CZLocalAccountIdentification, DKLocalAccountIdentification, HULocalAccountIdentification, IbanAccountIdentification, NOLocalAccountIdentification, NumberAndBicAccountIdentification, PLLocalAccountIdentification, SELocalAccountIdentification, UKLocalAccountIdentification, USLocalAccountIdentification]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


