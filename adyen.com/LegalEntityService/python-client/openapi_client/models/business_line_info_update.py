# coding: utf-8

"""
    Legal Entity Management API

    The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws_123456@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  

    The version of the OpenAPI document: 3
    Contact: developer-experience@adyen.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.source_of_funds import SourceOfFunds
from openapi_client.models.web_data import WebData
from openapi_client.models.web_data_exemption import WebDataExemption
from typing import Optional, Set
from typing_extensions import Self

class BusinessLineInfoUpdate(BaseModel):
    """
    BusinessLineInfoUpdate
    """ # noqa: E501
    capability: Optional[StrictStr] = Field(default=None, description="The capability for which you are creating the business line. For example, **receivePayments**.")
    industry_code: Optional[StrictStr] = Field(default=None, description="A code that represents the industry of your legal entity. For example, **4431A** for computer software stores.", alias="industryCode")
    legal_entity_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities__resParam_id) that owns the business line.", alias="legalEntityId")
    sales_channels: Optional[List[StrictStr]] = Field(default=None, description="A list of channels where goods or services are sold.  Possible values: **pos**, **posMoto**, **eCommerce**, **ecomMoto**, **payByLink**.  Required only in combination with the `service` **paymentProcessing**.", alias="salesChannels")
    service: StrictStr = Field(description="The service for which you are creating the business line.  Possible values:**paymentProcessing**, **issuing**, **banking**")
    source_of_funds: Optional[SourceOfFunds] = Field(default=None, description="Contains information about the source of your user's funds. Required only for the `service` **banking**.", alias="sourceOfFunds")
    web_data: Optional[List[WebData]] = Field(default=None, description="List of website URLs where your user's goods or services are sold. When this is required for a service but your user does not have an online presence, provide the reason in the `webDataExemption` object.", alias="webData")
    web_data_exemption: Optional[WebDataExemption] = Field(default=None, description="The reason why the web data is not provided.", alias="webDataExemption")
    __properties: ClassVar[List[str]] = ["capability", "industryCode", "legalEntityId", "salesChannels", "service", "sourceOfFunds", "webData", "webDataExemption"]

    @field_validator('service')
    def service_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['paymentProcessing', 'issuing', 'banking']):
            raise ValueError("must be one of enum values ('paymentProcessing', 'issuing', 'banking')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BusinessLineInfoUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_of_funds
        if self.source_of_funds:
            _dict['sourceOfFunds'] = self.source_of_funds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in web_data (list)
        _items = []
        if self.web_data:
            for _item_web_data in self.web_data:
                if _item_web_data:
                    _items.append(_item_web_data.to_dict())
            _dict['webData'] = _items
        # override the default output from pydantic by calling `to_dict()` of web_data_exemption
        if self.web_data_exemption:
            _dict['webDataExemption'] = self.web_data_exemption.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BusinessLineInfoUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capability": obj.get("capability"),
            "industryCode": obj.get("industryCode"),
            "legalEntityId": obj.get("legalEntityId"),
            "salesChannels": obj.get("salesChannels"),
            "service": obj.get("service"),
            "sourceOfFunds": SourceOfFunds.from_dict(obj["sourceOfFunds"]) if obj.get("sourceOfFunds") is not None else None,
            "webData": [WebData.from_dict(_item) for _item in obj["webData"]] if obj.get("webData") is not None else None,
            "webDataExemption": WebDataExemption.from_dict(obj["webDataExemption"]) if obj.get("webDataExemption") is not None else None
        })
        return _obj


