# coding: utf-8

"""
    Legal Entity Management API

    The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws_123456@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  

    The version of the OpenAPI document: 3
    Contact: developer-experience@adyen.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.individual import Individual
from openapi_client.models.legal_entity_association import LegalEntityAssociation
from openapi_client.models.legal_entity_capability import LegalEntityCapability
from openapi_client.models.organization import Organization
from openapi_client.models.sole_proprietorship import SoleProprietorship
from typing import Optional, Set
from typing_extensions import Self

class LegalEntityInfoRequiredType(BaseModel):
    """
    LegalEntityInfoRequiredType
    """ # noqa: E501
    capabilities: Optional[Dict[str, LegalEntityCapability]] = Field(default=None, description="Contains key-value pairs that specify the actions that the legal entity can do in your platform.The key is a capability required for your integration. For example, **issueCard** for Issuing.The value is an object containing the settings for the capability.")
    entity_associations: Optional[List[LegalEntityAssociation]] = Field(default=None, description="List of legal entities associated with the current legal entity. For example, ultimate beneficial owners associated with an organization through ownership or control, or as signatories.", alias="entityAssociations")
    individual: Optional[Individual] = Field(default=None, description="Information about the individual. Required if `type` is **individual**.")
    organization: Optional[Organization] = Field(default=None, description="Information about the organization. Required if `type` is **organization**.")
    reference: Optional[Annotated[str, Field(strict=True, max_length=150)]] = Field(default=None, description="Your reference for the legal entity, maximum 150 characters.")
    sole_proprietorship: Optional[SoleProprietorship] = Field(default=None, description="Information about the sole proprietorship. Required if `type` is **soleProprietorship**.", alias="soleProprietorship")
    type: StrictStr = Field(description="The type of legal entity.   Possible values: **individual**, **organization**, or **soleProprietorship**.")
    __properties: ClassVar[List[str]] = ["capabilities", "entityAssociations", "individual", "organization", "reference", "soleProprietorship", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['individual', 'organization', 'soleProprietorship', 'trust', 'unincorporatedPartnership']):
            raise ValueError("must be one of enum values ('individual', 'organization', 'soleProprietorship', 'trust', 'unincorporatedPartnership')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LegalEntityInfoRequiredType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "capabilities",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in capabilities (dict)
        _field_dict = {}
        if self.capabilities:
            for _key_capabilities in self.capabilities:
                if self.capabilities[_key_capabilities]:
                    _field_dict[_key_capabilities] = self.capabilities[_key_capabilities].to_dict()
            _dict['capabilities'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in entity_associations (list)
        _items = []
        if self.entity_associations:
            for _item_entity_associations in self.entity_associations:
                if _item_entity_associations:
                    _items.append(_item_entity_associations.to_dict())
            _dict['entityAssociations'] = _items
        # override the default output from pydantic by calling `to_dict()` of individual
        if self.individual:
            _dict['individual'] = self.individual.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sole_proprietorship
        if self.sole_proprietorship:
            _dict['soleProprietorship'] = self.sole_proprietorship.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LegalEntityInfoRequiredType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilities": dict(
                (_k, LegalEntityCapability.from_dict(_v))
                for _k, _v in obj["capabilities"].items()
            )
            if obj.get("capabilities") is not None
            else None,
            "entityAssociations": [LegalEntityAssociation.from_dict(_item) for _item in obj["entityAssociations"]] if obj.get("entityAssociations") is not None else None,
            "individual": Individual.from_dict(obj["individual"]) if obj.get("individual") is not None else None,
            "organization": Organization.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "reference": obj.get("reference"),
            "soleProprietorship": SoleProprietorship.from_dict(obj["soleProprietorship"]) if obj.get("soleProprietorship") is not None else None,
            "type": obj.get("type")
        })
        return _obj


