# coding: utf-8

"""
    Legal Entity Management API

    The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws_123456@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  

    The version of the OpenAPI document: 3
    Contact: developer-experience@adyen.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.birth_data import BirthData
from openapi_client.models.identification_data import IdentificationData
from openapi_client.models.name import Name
from openapi_client.models.phone_number import PhoneNumber
from openapi_client.models.tax_information import TaxInformation
from openapi_client.models.web_data import WebData
from typing import Optional, Set
from typing_extensions import Self

class Individual(BaseModel):
    """
    Individual
    """ # noqa: E501
    birth_data: Optional[BirthData] = Field(default=None, description="The individual's birth information.", alias="birthData")
    email: Optional[StrictStr] = Field(default=None, description="The email address of the legal entity.")
    identification_data: Optional[IdentificationData] = Field(default=None, description="Information about the individual's identification document.", alias="identificationData")
    name: Name = Field(description="The individual's name.")
    nationality: Optional[StrictStr] = Field(default=None, description="The individual's nationality.")
    phone: Optional[PhoneNumber] = Field(default=None, description="The phone number of the legal entity.")
    residential_address: Address = Field(description="The residential address of the individual.", alias="residentialAddress")
    tax_information: Optional[List[TaxInformation]] = Field(default=None, description="The tax information of the individual.", alias="taxInformation")
    web_data: Optional[WebData] = Field(default=None, description="The website and app URL of the legal entity.", alias="webData")
    __properties: ClassVar[List[str]] = ["birthData", "email", "identificationData", "name", "nationality", "phone", "residentialAddress", "taxInformation", "webData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Individual from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of birth_data
        if self.birth_data:
            _dict['birthData'] = self.birth_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identification_data
        if self.identification_data:
            _dict['identificationData'] = self.identification_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone
        if self.phone:
            _dict['phone'] = self.phone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of residential_address
        if self.residential_address:
            _dict['residentialAddress'] = self.residential_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tax_information (list)
        _items = []
        if self.tax_information:
            for _item_tax_information in self.tax_information:
                if _item_tax_information:
                    _items.append(_item_tax_information.to_dict())
            _dict['taxInformation'] = _items
        # override the default output from pydantic by calling `to_dict()` of web_data
        if self.web_data:
            _dict['webData'] = self.web_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Individual from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "birthData": BirthData.from_dict(obj["birthData"]) if obj.get("birthData") is not None else None,
            "email": obj.get("email"),
            "identificationData": IdentificationData.from_dict(obj["identificationData"]) if obj.get("identificationData") is not None else None,
            "name": Name.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "nationality": obj.get("nationality"),
            "phone": PhoneNumber.from_dict(obj["phone"]) if obj.get("phone") is not None else None,
            "residentialAddress": Address.from_dict(obj["residentialAddress"]) if obj.get("residentialAddress") is not None else None,
            "taxInformation": [TaxInformation.from_dict(_item) for _item in obj["taxInformation"]] if obj.get("taxInformation") is not None else None,
            "webData": WebData.from_dict(obj["webData"]) if obj.get("webData") is not None else None
        })
        return _obj


