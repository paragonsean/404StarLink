/*
 * Configuration API
 * The Configuration API enables you to create a platform where you can onboard your users as account holders and create balance accounts, cards, and business accounts.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Versioning The Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/bcl/v1/accountHolders ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v1`.
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ServiceError;
import org.openapitools.client.model.TransferInstrument;
import org.openapitools.client.model.TransferInstrumentInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransferInstrumentsApi
 */
@Disabled
public class TransferInstrumentsApiTest {

    private final TransferInstrumentsApi api = new TransferInstrumentsApi();

    /**
     * Delete a transfer instrument
     *
     * Deletes a transfer instrument.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTransferInstrumentsIdTest() throws ApiException {
        String id = null;
        api.deleteTransferInstrumentsId(id);
        // TODO: test validations
    }

    /**
     * Get a transfer instrument
     *
     * Returns the details of a transfer instrument.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransferInstrumentsIdTest() throws ApiException {
        String id = null;
        TransferInstrument response = api.getTransferInstrumentsId(id);
        // TODO: test validations
    }

    /**
     * Update a transfer instrument
     *
     * Updates a transfer instrument.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchTransferInstrumentsIdTest() throws ApiException {
        String id = null;
        TransferInstrumentInfo transferInstrumentInfo = null;
        TransferInstrument response = api.patchTransferInstrumentsId(id, transferInstrumentInfo);
        // TODO: test validations
    }

    /**
     * Create a transfer instrument
     *
     * Creates a transfer instrument.   A transfer instrument is a bank account that a legal entity owns. Adyen performs verification checks on the transfer instrument as required by payment industry regulations. We inform you of the verification results through webhooks or API responses.  When the transfer instrument passes the verification checks, you can start sending funds from the balance platform to the transfer instrument (such as payouts).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTransferInstrumentsTest() throws ApiException {
        TransferInstrumentInfo transferInstrumentInfo = null;
        TransferInstrument response = api.postTransferInstruments(transferInstrumentInfo);
        // TODO: test validations
    }

}
