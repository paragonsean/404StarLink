# coding: utf-8

"""
    Master Data API - v2

    # ATTENTION: **This version isn't compliant with data entities of old version (e.g. CL and AD). It's possible to use this configuration only to new data entities.**      ## Welcome!    VTEX Master Data is an easy-to-use, secure, fast, scalable and extensible repository. On it you can create your own Entities, store data and consult directly from the storefront or use it to store info for some external integration.    There are internal VTEX modules that use VTEX Master Data as data repository. We have the VTEX Customer Service, VTEX Profile System and VTEX InStore, for example. It is also used by other internal services.    There are two ways to use Master Data:    1. Directly from the storefront  2. External integration    ### Directly from the storefront    If your scenario is to be used inside the storefront, be aware of the following observations:    1. Use the storefront host to query or store information to avoid **CORS**;  2. Configure which information should be public and which shouldn't, inside the JSON Schema of the Data Entity;  3. Do not create query loops (the storefront may be affected with Throttling and apis may be turned off as a security protection);  4. Never add via JS any type of authentication key (x-vtex-api-appkey or x-vtex-api-apptoken);    **It's important to avoid CORS using the relative path**    ### External Integration    If your scenario is to perform external integration, such as migrating client data from another service, be aware of the following observations:    1. Use the host ```{{accountName}}.vtexcommercestable.com.br```;  2. Use the authentication keys (x-vtex-api-appkey ou x-vtex-api-apptoken);    ### Most used attributes listed here    | Name | Description |  | -------- | -------- |  | accountName | Account name in VTEX License Manager |  | name | Data Entity name |  | schema | JSON Schema of a Data Entity |  | id | Identifier of a document |  | x-vtex-api-appKey | User key |  | x-vtex-api-appToken | User token |

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Dict, Optional
from typing_extensions import Annotated
from openapi_client.models.document_response import DocumentResponse
from openapi_client.models.using_fields_all import UsingFieldsAll

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DocumentsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def createnewdocument(
        self,
        content_type: Annotated[StrictStr, Field(description="Type of the content being sent.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        request_body: Dict[str, StrictStr],
        var_schema: Annotated[Optional[StrictStr], Field(description="Name of the schema the document to be created needs to be compliant with.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DocumentResponse:
        """Create new document

        This request allows you to create a new document corresponding to a given data entity. For example, you can create a new customer profile or address.    > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to create.    ## Example use cases    ### Client profile    In order to create a new customer profile, choose the `CL` data entity and send a request similar to this:    POST  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  ```    Request body  ```json  {      \"email\": \"clark.kent@examplemail.com\",      \"firstName\": \"Clark\",      \"lastName\": \"Kent\",      \"phone\": \"+12025550195\",      \"documentType\": \"CPF\",      \"document\": \"12345678900\"      \"isCorporate\": false,      \"isNewsletterOptIn\": false,      \"localeDefault\": \"en-US\"   }  ```    ### Client address    For a new address, the data entity is `AD` and the request would look like this:    POST  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  ```    Request body  ```json  {      \"addressName\": \"My House\",      \"addressType\": \"residential\",      \"city\": \"Metropolis\",      \"complement\": \"\",      \"country\": \"USA\",      \"postalCode\": \"11375\",      \"receiverName\": \"Clark Kent\",      \"reference\": null,      \"state\": \"MP\",      \"street\": \"Baker Street\",      \"neighborhood\": \"Upper east side\",      \"number\": \"21\",      \"userId\": \"7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\"  }  ```

        :param content_type: Type of the content being sent. (required)
        :type content_type: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param request_body: (required)
        :type request_body: Dict[str, str]
        :param var_schema: Name of the schema the document to be created needs to be compliant with.
        :type var_schema: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._createnewdocument_serialize(
            content_type=content_type,
            accept=accept,
            data_entity_name=data_entity_name,
            request_body=request_body,
            var_schema=var_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def createnewdocument_with_http_info(
        self,
        content_type: Annotated[StrictStr, Field(description="Type of the content being sent.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        request_body: Dict[str, StrictStr],
        var_schema: Annotated[Optional[StrictStr], Field(description="Name of the schema the document to be created needs to be compliant with.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DocumentResponse]:
        """Create new document

        This request allows you to create a new document corresponding to a given data entity. For example, you can create a new customer profile or address.    > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to create.    ## Example use cases    ### Client profile    In order to create a new customer profile, choose the `CL` data entity and send a request similar to this:    POST  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  ```    Request body  ```json  {      \"email\": \"clark.kent@examplemail.com\",      \"firstName\": \"Clark\",      \"lastName\": \"Kent\",      \"phone\": \"+12025550195\",      \"documentType\": \"CPF\",      \"document\": \"12345678900\"      \"isCorporate\": false,      \"isNewsletterOptIn\": false,      \"localeDefault\": \"en-US\"   }  ```    ### Client address    For a new address, the data entity is `AD` and the request would look like this:    POST  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  ```    Request body  ```json  {      \"addressName\": \"My House\",      \"addressType\": \"residential\",      \"city\": \"Metropolis\",      \"complement\": \"\",      \"country\": \"USA\",      \"postalCode\": \"11375\",      \"receiverName\": \"Clark Kent\",      \"reference\": null,      \"state\": \"MP\",      \"street\": \"Baker Street\",      \"neighborhood\": \"Upper east side\",      \"number\": \"21\",      \"userId\": \"7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\"  }  ```

        :param content_type: Type of the content being sent. (required)
        :type content_type: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param request_body: (required)
        :type request_body: Dict[str, str]
        :param var_schema: Name of the schema the document to be created needs to be compliant with.
        :type var_schema: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._createnewdocument_serialize(
            content_type=content_type,
            accept=accept,
            data_entity_name=data_entity_name,
            request_body=request_body,
            var_schema=var_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def createnewdocument_without_preload_content(
        self,
        content_type: Annotated[StrictStr, Field(description="Type of the content being sent.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        request_body: Dict[str, StrictStr],
        var_schema: Annotated[Optional[StrictStr], Field(description="Name of the schema the document to be created needs to be compliant with.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create new document

        This request allows you to create a new document corresponding to a given data entity. For example, you can create a new customer profile or address.    > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to create.    ## Example use cases    ### Client profile    In order to create a new customer profile, choose the `CL` data entity and send a request similar to this:    POST  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  ```    Request body  ```json  {      \"email\": \"clark.kent@examplemail.com\",      \"firstName\": \"Clark\",      \"lastName\": \"Kent\",      \"phone\": \"+12025550195\",      \"documentType\": \"CPF\",      \"document\": \"12345678900\"      \"isCorporate\": false,      \"isNewsletterOptIn\": false,      \"localeDefault\": \"en-US\"   }  ```    ### Client address    For a new address, the data entity is `AD` and the request would look like this:    POST  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  ```    Request body  ```json  {      \"addressName\": \"My House\",      \"addressType\": \"residential\",      \"city\": \"Metropolis\",      \"complement\": \"\",      \"country\": \"USA\",      \"postalCode\": \"11375\",      \"receiverName\": \"Clark Kent\",      \"reference\": null,      \"state\": \"MP\",      \"street\": \"Baker Street\",      \"neighborhood\": \"Upper east side\",      \"number\": \"21\",      \"userId\": \"7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\"  }  ```

        :param content_type: Type of the content being sent. (required)
        :type content_type: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param request_body: (required)
        :type request_body: Dict[str, str]
        :param var_schema: Name of the schema the document to be created needs to be compliant with.
        :type var_schema: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._createnewdocument_serialize(
            content_type=content_type,
            accept=accept,
            data_entity_name=data_entity_name,
            request_body=request_body,
            var_schema=var_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _createnewdocument_serialize(
        self,
        content_type,
        accept,
        data_entity_name,
        request_body,
        var_schema,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if data_entity_name is not None:
            _path_params['dataEntityName'] = data_entity_name
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('_schema', var_schema))
            
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'appToken', 
            'appKey'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/dataentities/{dataEntityName}/documents',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def createorupdatepartialdocument(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        content_type: Annotated[StrictStr, Field(description="Type of the content being sent.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        request_body: Annotated[Dict[str, StrictStr], Field(description="JSON with the fields to be updated.")],
        var_schema: Annotated[Optional[StrictStr], Field(description="Name of the schema the document to be created needs to be compliant with.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DocumentResponse:
        """Create partial document

        This request allows you to partially update a document corresponding to a given data entity.    > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to create a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  ```    Request body  ```json  {      \"phone\": \"+12025550195\",      \"isNewsletterOptIn\": false   }  ```    ### Client address    In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  ```    Request body  ```json  {      \"receiverName\": \"Lois Lane\"  }  ```

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param content_type: Type of the content being sent. (required)
        :type content_type: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param request_body: JSON with the fields to be updated. (required)
        :type request_body: Dict[str, str]
        :param var_schema: Name of the schema the document to be created needs to be compliant with.
        :type var_schema: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._createorupdatepartialdocument_serialize(
            data_entity_name=data_entity_name,
            content_type=content_type,
            accept=accept,
            request_body=request_body,
            var_schema=var_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def createorupdatepartialdocument_with_http_info(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        content_type: Annotated[StrictStr, Field(description="Type of the content being sent.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        request_body: Annotated[Dict[str, StrictStr], Field(description="JSON with the fields to be updated.")],
        var_schema: Annotated[Optional[StrictStr], Field(description="Name of the schema the document to be created needs to be compliant with.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DocumentResponse]:
        """Create partial document

        This request allows you to partially update a document corresponding to a given data entity.    > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to create a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  ```    Request body  ```json  {      \"phone\": \"+12025550195\",      \"isNewsletterOptIn\": false   }  ```    ### Client address    In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  ```    Request body  ```json  {      \"receiverName\": \"Lois Lane\"  }  ```

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param content_type: Type of the content being sent. (required)
        :type content_type: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param request_body: JSON with the fields to be updated. (required)
        :type request_body: Dict[str, str]
        :param var_schema: Name of the schema the document to be created needs to be compliant with.
        :type var_schema: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._createorupdatepartialdocument_serialize(
            data_entity_name=data_entity_name,
            content_type=content_type,
            accept=accept,
            request_body=request_body,
            var_schema=var_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def createorupdatepartialdocument_without_preload_content(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        content_type: Annotated[StrictStr, Field(description="Type of the content being sent.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        request_body: Annotated[Dict[str, StrictStr], Field(description="JSON with the fields to be updated.")],
        var_schema: Annotated[Optional[StrictStr], Field(description="Name of the schema the document to be created needs to be compliant with.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create partial document

        This request allows you to partially update a document corresponding to a given data entity.    > You can use this request to create documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to create a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents  ```    Request body  ```json  {      \"phone\": \"+12025550195\",      \"isNewsletterOptIn\": false   }  ```    ### Client address    In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents  ```    Request body  ```json  {      \"receiverName\": \"Lois Lane\"  }  ```

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param content_type: Type of the content being sent. (required)
        :type content_type: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param request_body: JSON with the fields to be updated. (required)
        :type request_body: Dict[str, str]
        :param var_schema: Name of the schema the document to be created needs to be compliant with.
        :type var_schema: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._createorupdatepartialdocument_serialize(
            data_entity_name=data_entity_name,
            content_type=content_type,
            accept=accept,
            request_body=request_body,
            var_schema=var_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _createorupdatepartialdocument_serialize(
        self,
        data_entity_name,
        content_type,
        accept,
        request_body,
        var_schema,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if data_entity_name is not None:
            _path_params['dataEntityName'] = data_entity_name
        # process the query parameters
        if var_schema is not None:
            
            _query_params.append(('_schema', var_schema))
            
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'appToken', 
            'appKey'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/dataentities/{dataEntityName}/documents',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def deletedocument(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        content_type: Annotated[StrictStr, Field(description="Type of the content being sent.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        id: Annotated[StrictStr, Field(description="ID of the Document.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete document

        It allows to delete a document.

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param content_type: Type of the content being sent. (required)
        :type content_type: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param id: ID of the Document. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletedocument_serialize(
            data_entity_name=data_entity_name,
            content_type=content_type,
            accept=accept,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def deletedocument_with_http_info(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        content_type: Annotated[StrictStr, Field(description="Type of the content being sent.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        id: Annotated[StrictStr, Field(description="ID of the Document.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete document

        It allows to delete a document.

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param content_type: Type of the content being sent. (required)
        :type content_type: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param id: ID of the Document. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletedocument_serialize(
            data_entity_name=data_entity_name,
            content_type=content_type,
            accept=accept,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def deletedocument_without_preload_content(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        content_type: Annotated[StrictStr, Field(description="Type of the content being sent.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        id: Annotated[StrictStr, Field(description="ID of the Document.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete document

        It allows to delete a document.

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param content_type: Type of the content being sent. (required)
        :type content_type: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param id: ID of the Document. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._deletedocument_serialize(
            data_entity_name=data_entity_name,
            content_type=content_type,
            accept=accept,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _deletedocument_serialize(
        self,
        data_entity_name,
        content_type,
        accept,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if data_entity_name is not None:
            _path_params['dataEntityName'] = data_entity_name
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'appToken', 
            'appKey'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/dataentities/{dataEntityName}/documents/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def getdocument(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        content_type: Annotated[StrictStr, Field(description="Type of the content being sent.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        id: Annotated[StrictStr, Field(description="ID of the Document.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UsingFieldsAll:
        """Get document

        Gets document by ID.    > Assign the `_fields` parameter in the query string to retrieve the desired fields. If you want to return all the fields use `_fields=_all`.

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param content_type: Type of the content being sent. (required)
        :type content_type: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param id: ID of the Document. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._getdocument_serialize(
            data_entity_name=data_entity_name,
            content_type=content_type,
            accept=accept,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsingFieldsAll",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def getdocument_with_http_info(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        content_type: Annotated[StrictStr, Field(description="Type of the content being sent.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        id: Annotated[StrictStr, Field(description="ID of the Document.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UsingFieldsAll]:
        """Get document

        Gets document by ID.    > Assign the `_fields` parameter in the query string to retrieve the desired fields. If you want to return all the fields use `_fields=_all`.

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param content_type: Type of the content being sent. (required)
        :type content_type: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param id: ID of the Document. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._getdocument_serialize(
            data_entity_name=data_entity_name,
            content_type=content_type,
            accept=accept,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsingFieldsAll",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def getdocument_without_preload_content(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        content_type: Annotated[StrictStr, Field(description="Type of the content being sent.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        id: Annotated[StrictStr, Field(description="ID of the Document.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get document

        Gets document by ID.    > Assign the `_fields` parameter in the query string to retrieve the desired fields. If you want to return all the fields use `_fields=_all`.

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param content_type: Type of the content being sent. (required)
        :type content_type: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param id: ID of the Document. (required)
        :type id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._getdocument_serialize(
            data_entity_name=data_entity_name,
            content_type=content_type,
            accept=accept,
            id=id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UsingFieldsAll",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _getdocument_serialize(
        self,
        data_entity_name,
        content_type,
        accept,
        id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if data_entity_name is not None:
            _path_params['dataEntityName'] = data_entity_name
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        # process the header parameters
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'appToken', 
            'appKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/dataentities/{dataEntityName}/documents/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def updateentiredocument(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        id: Annotated[StrictStr, Field(description="ID of the Document.")],
        request_body: Dict[str, StrictStr],
        where: Annotated[Optional[StrictStr], Field(description="Filter specification.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="Name of the schema the document to be created needs to be compliant with.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DocumentResponse:
        """Update entire document

        Update an existing document corresponding to a given data entity. For example, you can update a customer profile or address.    > You can use this request to update documents in any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update an existing customer profile, choose the `CL` data entity and send a request similar to this:    PUT  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  ```    Request body  ```json  {      \"email\": \"clark.kent@examplemail.com\",      \"firstName\": \"Clark\",      \"lastName\": \"Kent\",      \"phone\": \"+12025550195\",      \"documentType\": \"CPF\",      \"document\": \"12345678900\"      \"isCorporate\": false,      \"isNewsletterOptIn\": false,      \"localeDefault\": \"en-US\"   }  ```    ### Client address    To update an address, the data entity is `AD` and the request would look like this:    PUT  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  ```    Request body  ```json  {      \"addressName\": \"My House\",      \"addressType\": \"residential\",      \"city\": \"Metropolis\",      \"complement\": \"\",      \"country\": \"USA\",      \"postalCode\": \"11375\",      \"receiverName\": \"Clark Kent\",      \"reference\": null,      \"state\": \"MP\",      \"street\": \"Baker Street\",      \"neighborhood\": \"Upper east side\",      \"number\": \"21\",      \"userId\": \"7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\"  }  ```

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param id: ID of the Document. (required)
        :type id: str
        :param request_body: (required)
        :type request_body: Dict[str, str]
        :param where: Filter specification.
        :type where: str
        :param var_schema: Name of the schema the document to be created needs to be compliant with.
        :type var_schema: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._updateentiredocument_serialize(
            data_entity_name=data_entity_name,
            accept=accept,
            id=id,
            request_body=request_body,
            where=where,
            var_schema=var_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def updateentiredocument_with_http_info(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        id: Annotated[StrictStr, Field(description="ID of the Document.")],
        request_body: Dict[str, StrictStr],
        where: Annotated[Optional[StrictStr], Field(description="Filter specification.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="Name of the schema the document to be created needs to be compliant with.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DocumentResponse]:
        """Update entire document

        Update an existing document corresponding to a given data entity. For example, you can update a customer profile or address.    > You can use this request to update documents in any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update an existing customer profile, choose the `CL` data entity and send a request similar to this:    PUT  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  ```    Request body  ```json  {      \"email\": \"clark.kent@examplemail.com\",      \"firstName\": \"Clark\",      \"lastName\": \"Kent\",      \"phone\": \"+12025550195\",      \"documentType\": \"CPF\",      \"document\": \"12345678900\"      \"isCorporate\": false,      \"isNewsletterOptIn\": false,      \"localeDefault\": \"en-US\"   }  ```    ### Client address    To update an address, the data entity is `AD` and the request would look like this:    PUT  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  ```    Request body  ```json  {      \"addressName\": \"My House\",      \"addressType\": \"residential\",      \"city\": \"Metropolis\",      \"complement\": \"\",      \"country\": \"USA\",      \"postalCode\": \"11375\",      \"receiverName\": \"Clark Kent\",      \"reference\": null,      \"state\": \"MP\",      \"street\": \"Baker Street\",      \"neighborhood\": \"Upper east side\",      \"number\": \"21\",      \"userId\": \"7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\"  }  ```

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param id: ID of the Document. (required)
        :type id: str
        :param request_body: (required)
        :type request_body: Dict[str, str]
        :param where: Filter specification.
        :type where: str
        :param var_schema: Name of the schema the document to be created needs to be compliant with.
        :type var_schema: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._updateentiredocument_serialize(
            data_entity_name=data_entity_name,
            accept=accept,
            id=id,
            request_body=request_body,
            where=where,
            var_schema=var_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def updateentiredocument_without_preload_content(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        id: Annotated[StrictStr, Field(description="ID of the Document.")],
        request_body: Dict[str, StrictStr],
        where: Annotated[Optional[StrictStr], Field(description="Filter specification.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="Name of the schema the document to be created needs to be compliant with.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update entire document

        Update an existing document corresponding to a given data entity. For example, you can update a customer profile or address.    > You can use this request to update documents in any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update an existing customer profile, choose the `CL` data entity and send a request similar to this:    PUT  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  ```    Request body  ```json  {      \"email\": \"clark.kent@examplemail.com\",      \"firstName\": \"Clark\",      \"lastName\": \"Kent\",      \"phone\": \"+12025550195\",      \"documentType\": \"CPF\",      \"document\": \"12345678900\"      \"isCorporate\": false,      \"isNewsletterOptIn\": false,      \"localeDefault\": \"en-US\"   }  ```    ### Client address    To update an address, the data entity is `AD` and the request would look like this:    PUT  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  ```    Request body  ```json  {      \"addressName\": \"My House\",      \"addressType\": \"residential\",      \"city\": \"Metropolis\",      \"complement\": \"\",      \"country\": \"USA\",      \"postalCode\": \"11375\",      \"receiverName\": \"Clark Kent\",      \"reference\": null,      \"state\": \"MP\",      \"street\": \"Baker Street\",      \"neighborhood\": \"Upper east side\",      \"number\": \"21\",      \"userId\": \"7e03m794-a33a-11e9-84rt6-0adfa64s5a8e\"  }  ```

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param id: ID of the Document. (required)
        :type id: str
        :param request_body: (required)
        :type request_body: Dict[str, str]
        :param where: Filter specification.
        :type where: str
        :param var_schema: Name of the schema the document to be created needs to be compliant with.
        :type var_schema: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._updateentiredocument_serialize(
            data_entity_name=data_entity_name,
            accept=accept,
            id=id,
            request_body=request_body,
            where=where,
            var_schema=var_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _updateentiredocument_serialize(
        self,
        data_entity_name,
        accept,
        id,
        request_body,
        where,
        var_schema,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if data_entity_name is not None:
            _path_params['dataEntityName'] = data_entity_name
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if where is not None:
            
            _query_params.append(('_where', where))
            
        if var_schema is not None:
            
            _query_params.append(('_schema', var_schema))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'appToken', 
            'appKey'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/dataentities/{dataEntityName}/documents/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def updatepartialdocument(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        id: Annotated[StrictStr, Field(description="ID of the Document.")],
        request_body: Dict[str, StrictStr],
        where: Annotated[Optional[StrictStr], Field(description="Filter specification.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="Name of the schema the document to be created needs to be compliant with.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DocumentResponse:
        """Update partial document

        This request allows you to partially update a document corresponding to a given data entity. For example, you can update some fields of a customer profile or address.    > You can use this request to update documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  ```    Request body  ```json  {      \"phone\": \"+12025550195\",      \"isNewsletterOptIn\": false   }  ```    ### Client address    In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  ```    Request body  ```json  {      \"receiverName\": \"Lois Lane\"  }  ```

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param id: ID of the Document. (required)
        :type id: str
        :param request_body: (required)
        :type request_body: Dict[str, str]
        :param where: Filter specification.
        :type where: str
        :param var_schema: Name of the schema the document to be created needs to be compliant with.
        :type var_schema: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._updatepartialdocument_serialize(
            data_entity_name=data_entity_name,
            accept=accept,
            id=id,
            request_body=request_body,
            where=where,
            var_schema=var_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def updatepartialdocument_with_http_info(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        id: Annotated[StrictStr, Field(description="ID of the Document.")],
        request_body: Dict[str, StrictStr],
        where: Annotated[Optional[StrictStr], Field(description="Filter specification.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="Name of the schema the document to be created needs to be compliant with.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DocumentResponse]:
        """Update partial document

        This request allows you to partially update a document corresponding to a given data entity. For example, you can update some fields of a customer profile or address.    > You can use this request to update documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  ```    Request body  ```json  {      \"phone\": \"+12025550195\",      \"isNewsletterOptIn\": false   }  ```    ### Client address    In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  ```    Request body  ```json  {      \"receiverName\": \"Lois Lane\"  }  ```

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param id: ID of the Document. (required)
        :type id: str
        :param request_body: (required)
        :type request_body: Dict[str, str]
        :param where: Filter specification.
        :type where: str
        :param var_schema: Name of the schema the document to be created needs to be compliant with.
        :type var_schema: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._updatepartialdocument_serialize(
            data_entity_name=data_entity_name,
            accept=accept,
            id=id,
            request_body=request_body,
            where=where,
            var_schema=var_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def updatepartialdocument_without_preload_content(
        self,
        data_entity_name: Annotated[StrictStr, Field(description="Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses.")],
        accept: Annotated[StrictStr, Field(description="HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand.")],
        id: Annotated[StrictStr, Field(description="ID of the Document.")],
        request_body: Dict[str, StrictStr],
        where: Annotated[Optional[StrictStr], Field(description="Filter specification.")] = None,
        var_schema: Annotated[Optional[StrictStr], Field(description="Name of the schema the document to be created needs to be compliant with.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update partial document

        This request allows you to partially update a document corresponding to a given data entity. For example, you can update some fields of a customer profile or address.    > You can use this request to update documents for any given data entity. Because of this, you are not restricted to using the fields exemplified below in your requests. But you should be aware of the fields allowed or required for each document you wish to update.    ## Example use cases    ### Client profile    In order to update a customer profile's `phone` and `isNewsletterOptIn` fields, choose the `CL` data entity and send a request similar to this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Client/documents/123456789abc  ```    Request body  ```json  {      \"phone\": \"+12025550195\",      \"isNewsletterOptIn\": false   }  ```    ### Client address    In order to update the `receiverName` of an existing address, the data entity is `AD` and the request would look like this:    PATCH  ```  https://examplestore.vtexcommercestable.com.br/api/dataentities/Address/documents/123456789abc  ```    Request body  ```json  {      \"receiverName\": \"Lois Lane\"  }  ```

        :param data_entity_name: Name of the data entity. Defined by the api. Examples of native data entities you can use are `CL` for client profiles and `AD` for client addresses. (required)
        :type data_entity_name: str
        :param accept: HTTP Client Negotiation _Accept_ Header. Indicates the types of responses the client can understand. (required)
        :type accept: str
        :param id: ID of the Document. (required)
        :type id: str
        :param request_body: (required)
        :type request_body: Dict[str, str]
        :param where: Filter specification.
        :type where: str
        :param var_schema: Name of the schema the document to be created needs to be compliant with.
        :type var_schema: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._updatepartialdocument_serialize(
            data_entity_name=data_entity_name,
            accept=accept,
            id=id,
            request_body=request_body,
            where=where,
            var_schema=var_schema,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DocumentResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _updatepartialdocument_serialize(
        self,
        data_entity_name,
        accept,
        id,
        request_body,
        where,
        var_schema,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if data_entity_name is not None:
            _path_params['dataEntityName'] = data_entity_name
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if where is not None:
            
            _query_params.append(('_where', where))
            
        if var_schema is not None:
            
            _query_params.append(('_schema', var_schema))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter
        if request_body is not None:
            _body_params = request_body


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'appToken', 
            'appKey'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/dataentities/{dataEntityName}/documents/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


