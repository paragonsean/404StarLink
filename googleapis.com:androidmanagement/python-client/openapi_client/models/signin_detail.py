# coding: utf-8

"""
    Android Management API

    The Android Management API provides remote enterprise management of Android devices and apps.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SigninDetail(BaseModel):
    """
    A resource containing sign in details for an enterprise.
    """ # noqa: E501
    allow_personal_usage: Optional[StrictStr] = Field(default=None, description="Controls whether personal usage is allowed on a device provisioned with this enrollment token.For company-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage requires the user provision the device as a fully managed device.For personally-owned devices: Enabling personal usage allows the user to set up a work profile on the device. Disabling personal usage will prevent the device from provisioning. Personal usage cannot be disabled on personally-owned device.", alias="allowPersonalUsage")
    qr_code: Optional[StrictStr] = Field(default=None, description="A JSON string whose UTF-8 representation can be used to generate a QR code to enroll a device with this enrollment token. To enroll a device using NFC, the NFC record must contain a serialized java.util.Properties representation of the properties in the JSON. This is a read-only field generated by the server.", alias="qrCode")
    signin_enrollment_token: Optional[StrictStr] = Field(default=None, description="An enterprise wide enrollment token used to trigger custom sign-in flow. This is a read-only field generated by the server.", alias="signinEnrollmentToken")
    signin_url: Optional[StrictStr] = Field(default=None, description="Sign-in URL for authentication when device is provisioned with a sign-in enrollment token. The sign-in endpoint should finish authentication flow with a URL in the form of https://enterprise.google.com/android/enroll?et= for a successful login, or https://enterprise.google.com/android/enroll/invalid for a failed login.", alias="signinUrl")
    __properties: ClassVar[List[str]] = ["allowPersonalUsage", "qrCode", "signinEnrollmentToken", "signinUrl"]

    @field_validator('allow_personal_usage')
    def allow_personal_usage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALLOW_PERSONAL_USAGE_UNSPECIFIED', 'PERSONAL_USAGE_ALLOWED', 'PERSONAL_USAGE_DISALLOWED']):
            raise ValueError("must be one of enum values ('ALLOW_PERSONAL_USAGE_UNSPECIFIED', 'PERSONAL_USAGE_ALLOWED', 'PERSONAL_USAGE_DISALLOWED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SigninDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SigninDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowPersonalUsage": obj.get("allowPersonalUsage"),
            "qrCode": obj.get("qrCode"),
            "signinEnrollmentToken": obj.get("signinEnrollmentToken"),
            "signinUrl": obj.get("signinUrl")
        })
        return _obj


