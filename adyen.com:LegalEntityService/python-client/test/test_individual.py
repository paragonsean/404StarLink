# coding: utf-8

"""
    Legal Entity Management API

    The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws_123456@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  

    The version of the OpenAPI document: 3
    Contact: developer-experience@adyen.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.individual import Individual

class TestIndividual(unittest.TestCase):
    """Individual unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Individual:
        """Test Individual
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Individual`
        """
        model = Individual()
        if include_optional:
            return Individual(
                birth_data = openapi_client.models.birth_data.BirthData(
                    date_of_birth = '', ),
                email = '',
                identification_data = openapi_client.models.identification_data.IdentificationData(
                    card_number = '', 
                    expiry_date = '', 
                    issuer_country = '', 
                    issuer_state = '', 
                    national_id_exempt = True, 
                    number = '', 
                    type = 'bankStatement', ),
                name = openapi_client.models.name.Name(
                    first_name = '', 
                    infix = '', 
                    last_name = '', ),
                nationality = '',
                phone = openapi_client.models.phone_number.PhoneNumber(
                    number = '', 
                    type = '', ),
                residential_address = openapi_client.models.address.Address(
                    city = '', 
                    country = '', 
                    postal_code = '', 
                    state_or_province = '', 
                    street = '', 
                    street2 = '', ),
                tax_information = [
                    openapi_client.models.tax_information.TaxInformation(
                        country = '01', 
                        number = '', 
                        type = '', )
                    ],
                web_data = openapi_client.models.web_data.WebData(
                    web_address = '', 
                    web_address_id = '', )
            )
        else:
            return Individual(
                name = openapi_client.models.name.Name(
                    first_name = '', 
                    infix = '', 
                    last_name = '', ),
                residential_address = openapi_client.models.address.Address(
                    city = '', 
                    country = '', 
                    postal_code = '', 
                    state_or_province = '', 
                    street = '', 
                    street2 = '', ),
        )
        """

    def testIndividual(self):
        """Test Individual"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
