# coding: utf-8

"""
    Legal Entity Management API

    The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws_123456@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  

    The version of the OpenAPI document: 3
    Contact: developer-experience@adyen.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.legal_entity_capability import LegalEntityCapability

class TestLegalEntityCapability(unittest.TestCase):
    """LegalEntityCapability unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LegalEntityCapability:
        """Test LegalEntityCapability
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LegalEntityCapability`
        """
        model = LegalEntityCapability()
        if include_optional:
            return LegalEntityCapability(
                allowed = True,
                allowed_level = 'high',
                allowed_settings = openapi_client.models.capability_settings.CapabilitySettings(
                    amount_per_industry = {
                        'key' : openapi_client.models.amount.Amount(
                            currency = '', 
                            value = 56, )
                        }, 
                    authorized_card_users = True, 
                    funding_source = [
                        'credit'
                        ], 
                    interval = 'daily', 
                    max_amount = openapi_client.models.amount.Amount(
                        currency = '', 
                        value = 56, ), ),
                requested = True,
                requested_level = 'high',
                requested_settings = openapi_client.models.capability_settings.CapabilitySettings(
                    amount_per_industry = {
                        'key' : openapi_client.models.amount.Amount(
                            currency = '', 
                            value = 56, )
                        }, 
                    authorized_card_users = True, 
                    funding_source = [
                        'credit'
                        ], 
                    interval = 'daily', 
                    max_amount = openapi_client.models.amount.Amount(
                        currency = '', 
                        value = 56, ), ),
                transfer_instruments = [
                    openapi_client.models.supporting_entity_capability.SupportingEntityCapability(
                        allowed = True, 
                        id = '', 
                        requested = True, 
                        verification_status = '', )
                    ],
                verification_status = ''
            )
        else:
            return LegalEntityCapability(
        )
        """

    def testLegalEntityCapability(self):
        """Test LegalEntityCapability"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
