# coding: utf-8

"""
    Legal Entity Management API

    The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws_123456@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  

    The version of the OpenAPI document: 3
    Contact: developer-experience@adyen.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.legal_entity_info_required_type import LegalEntityInfoRequiredType

class TestLegalEntityInfoRequiredType(unittest.TestCase):
    """LegalEntityInfoRequiredType unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LegalEntityInfoRequiredType:
        """Test LegalEntityInfoRequiredType
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LegalEntityInfoRequiredType`
        """
        model = LegalEntityInfoRequiredType()
        if include_optional:
            return LegalEntityInfoRequiredType(
                capabilities = {
                    'key' : openapi_client.models.legal_entity_capability.LegalEntityCapability(
                        allowed = True, 
                        allowed_level = 'high', 
                        allowed_settings = openapi_client.models.capability_settings.CapabilitySettings(
                            amount_per_industry = {
                                'key' : openapi_client.models.amount.Amount(
                                    currency = '', 
                                    value = 56, )
                                }, 
                            authorized_card_users = True, 
                            funding_source = [
                                'credit'
                                ], 
                            interval = 'daily', 
                            max_amount = openapi_client.models.amount.Amount(
                                currency = '', 
                                value = 56, ), ), 
                        requested = True, 
                        requested_level = 'high', 
                        requested_settings = openapi_client.models.capability_settings.CapabilitySettings(
                            authorized_card_users = True, 
                            interval = 'daily', ), 
                        transfer_instruments = [
                            openapi_client.models.supporting_entity_capability.SupportingEntityCapability(
                                allowed = True, 
                                id = '', 
                                requested = True, 
                                verification_status = '', )
                            ], 
                        verification_status = '', )
                    },
                entity_associations = [
                    openapi_client.models.legal_entity_association.LegalEntityAssociation(
                        associator_id = '', 
                        entity_type = '', 
                        job_title = '', 
                        legal_entity_id = '', 
                        name = '', 
                        type = 'pciSignatory', )
                    ],
                individual = openapi_client.models.individual.Individual(
                    birth_data = openapi_client.models.birth_data.BirthData(
                        date_of_birth = '', ), 
                    email = '', 
                    identification_data = openapi_client.models.identification_data.IdentificationData(
                        card_number = '', 
                        expiry_date = '', 
                        issuer_country = '', 
                        issuer_state = '', 
                        national_id_exempt = True, 
                        number = '', 
                        type = 'bankStatement', ), 
                    name = openapi_client.models.name.Name(
                        first_name = '', 
                        infix = '', 
                        last_name = '', ), 
                    nationality = '', 
                    phone = openapi_client.models.phone_number.PhoneNumber(
                        number = '', 
                        type = '', ), 
                    residential_address = openapi_client.models.address.Address(
                        city = '', 
                        country = '', 
                        postal_code = '', 
                        state_or_province = '', 
                        street = '', 
                        street2 = '', ), 
                    tax_information = [
                        openapi_client.models.tax_information.TaxInformation(
                            country = '01', 
                            number = '', 
                            type = '', )
                        ], 
                    web_data = openapi_client.models.web_data.WebData(
                        web_address = '', 
                        web_address_id = '', ), ),
                organization = openapi_client.models.organization.Organization(
                    date_of_incorporation = '', 
                    description = '', 
                    doing_business_as = '', 
                    email = '', 
                    legal_name = '', 
                    phone = openapi_client.models.phone_number.PhoneNumber(
                        number = '', 
                        type = '', ), 
                    principal_place_of_business = openapi_client.models.address.Address(
                        city = '', 
                        country = '', 
                        postal_code = '', 
                        state_or_province = '', 
                        street = '', 
                        street2 = '', ), 
                    registered_address = openapi_client.models.address.Address(
                        city = '', 
                        country = '', 
                        postal_code = '', 
                        state_or_province = '', 
                        street = '', 
                        street2 = '', ), 
                    registration_number = '', 
                    stock_data = openapi_client.models.stock_data.StockData(
                        market_identifier = '', 
                        stock_number = '', 
                        ticker_symbol = '', ), 
                    tax_information = [
                        openapi_client.models.tax_information.TaxInformation(
                            country = '01', 
                            number = '', 
                            type = '', )
                        ], 
                    tax_reporting_classification = openapi_client.models.tax_reporting_classification.TaxReportingClassification(
                        business_type = 'other', 
                        financial_institution_number = '', 
                        main_source_of_income = 'businessOperation', 
                        type = 'nonFinancialNonReportable', ), 
                    type = 'associationIncorporated', 
                    vat_absence_reason = 'industryExemption', 
                    vat_number = '', 
                    web_data = openapi_client.models.web_data.WebData(
                        web_address = '', 
                        web_address_id = '', ), ),
                reference = '',
                sole_proprietorship = openapi_client.models.sole_proprietorship.SoleProprietorship(
                    country_of_governing_law = '', 
                    date_of_incorporation = '', 
                    doing_business_as = '', 
                    name = '', 
                    principal_place_of_business = openapi_client.models.address.Address(
                        city = '', 
                        country = '', 
                        postal_code = '', 
                        state_or_province = '', 
                        street = '', 
                        street2 = '', ), 
                    registered_address = openapi_client.models.address.Address(
                        city = '', 
                        country = '', 
                        postal_code = '', 
                        state_or_province = '', 
                        street = '', 
                        street2 = '', ), 
                    registration_number = '', 
                    vat_absence_reason = 'industryExemption', 
                    vat_number = '', ),
                type = 'individual'
            )
        else:
            return LegalEntityInfoRequiredType(
                type = 'individual',
        )
        """

    def testLegalEntityInfoRequiredType(self):
        """Test LegalEntityInfoRequiredType"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
