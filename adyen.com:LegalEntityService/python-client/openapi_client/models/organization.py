# coding: utf-8

"""
    Legal Entity Management API

    The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws_123456@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  

    The version of the OpenAPI document: 3
    Contact: developer-experience@adyen.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.phone_number import PhoneNumber
from openapi_client.models.stock_data import StockData
from openapi_client.models.tax_information import TaxInformation
from openapi_client.models.tax_reporting_classification import TaxReportingClassification
from openapi_client.models.web_data import WebData
from typing import Optional, Set
from typing_extensions import Self

class Organization(BaseModel):
    """
    Organization
    """ # noqa: E501
    date_of_incorporation: Optional[StrictStr] = Field(default=None, description="The date when the organization was incorporated in YYYY-MM-DD format.", alias="dateOfIncorporation")
    description: Optional[StrictStr] = Field(default=None, description="Your description for the organization.")
    doing_business_as: Optional[StrictStr] = Field(default=None, description="The organization's trading name, if different from the registered legal name.", alias="doingBusinessAs")
    email: Optional[StrictStr] = Field(default=None, description="The email address of the legal entity.")
    legal_name: StrictStr = Field(description="The organization's legal name.", alias="legalName")
    phone: Optional[PhoneNumber] = Field(default=None, description="The phone number of the legal entity.")
    principal_place_of_business: Optional[Address] = Field(default=None, description="The address where the organization operates from. Provide this if the principal place of business is different from the `registeredAddress`.", alias="principalPlaceOfBusiness")
    registered_address: Address = Field(description="The address of the organization registered at their registrar (such as the Chamber of Commerce).", alias="registeredAddress")
    registration_number: Optional[StrictStr] = Field(default=None, description="The organization's registration number.", alias="registrationNumber")
    stock_data: Optional[StockData] = Field(default=None, description="Information about the organization's publicly traded stock. Provide this object only if `type` is **listedPublicCompany**.", alias="stockData")
    tax_information: Optional[List[TaxInformation]] = Field(default=None, description="The tax information of the organization.", alias="taxInformation")
    tax_reporting_classification: Optional[TaxReportingClassification] = Field(default=None, description="The tax reporting classification (FATCA/CRS self-certification) of the organization.", alias="taxReportingClassification")
    type: Optional[StrictStr] = Field(default=None, description="Type of organization.   Possible values: **associationIncorporated**, **governmentalOrganization**, **listedPublicCompany**, **nonProfit**, **partnershipIncorporated**, **privateCompany**.")
    vat_absence_reason: Optional[StrictStr] = Field(default=None, description="The reason the organization has not provided a VAT number.  Possible values: **industryExemption**, **belowTaxThreshold**.", alias="vatAbsenceReason")
    vat_number: Optional[StrictStr] = Field(default=None, description="The organization's VAT number.", alias="vatNumber")
    web_data: Optional[WebData] = Field(default=None, description="The website and app URL of the legal entity.", alias="webData")
    __properties: ClassVar[List[str]] = ["dateOfIncorporation", "description", "doingBusinessAs", "email", "legalName", "phone", "principalPlaceOfBusiness", "registeredAddress", "registrationNumber", "stockData", "taxInformation", "taxReportingClassification", "type", "vatAbsenceReason", "vatNumber", "webData"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['associationIncorporated', 'governmentalOrganization', 'listedPublicCompany', 'nonProfit', 'partnershipIncorporated', 'privateCompany']):
            raise ValueError("must be one of enum values ('associationIncorporated', 'governmentalOrganization', 'listedPublicCompany', 'nonProfit', 'partnershipIncorporated', 'privateCompany')")
        return value

    @field_validator('vat_absence_reason')
    def vat_absence_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['industryExemption', 'belowTaxThreshold']):
            raise ValueError("must be one of enum values ('industryExemption', 'belowTaxThreshold')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Organization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of phone
        if self.phone:
            _dict['phone'] = self.phone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of principal_place_of_business
        if self.principal_place_of_business:
            _dict['principalPlaceOfBusiness'] = self.principal_place_of_business.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registered_address
        if self.registered_address:
            _dict['registeredAddress'] = self.registered_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stock_data
        if self.stock_data:
            _dict['stockData'] = self.stock_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tax_information (list)
        _items = []
        if self.tax_information:
            for _item_tax_information in self.tax_information:
                if _item_tax_information:
                    _items.append(_item_tax_information.to_dict())
            _dict['taxInformation'] = _items
        # override the default output from pydantic by calling `to_dict()` of tax_reporting_classification
        if self.tax_reporting_classification:
            _dict['taxReportingClassification'] = self.tax_reporting_classification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_data
        if self.web_data:
            _dict['webData'] = self.web_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Organization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateOfIncorporation": obj.get("dateOfIncorporation"),
            "description": obj.get("description"),
            "doingBusinessAs": obj.get("doingBusinessAs"),
            "email": obj.get("email"),
            "legalName": obj.get("legalName"),
            "phone": PhoneNumber.from_dict(obj["phone"]) if obj.get("phone") is not None else None,
            "principalPlaceOfBusiness": Address.from_dict(obj["principalPlaceOfBusiness"]) if obj.get("principalPlaceOfBusiness") is not None else None,
            "registeredAddress": Address.from_dict(obj["registeredAddress"]) if obj.get("registeredAddress") is not None else None,
            "registrationNumber": obj.get("registrationNumber"),
            "stockData": StockData.from_dict(obj["stockData"]) if obj.get("stockData") is not None else None,
            "taxInformation": [TaxInformation.from_dict(_item) for _item in obj["taxInformation"]] if obj.get("taxInformation") is not None else None,
            "taxReportingClassification": TaxReportingClassification.from_dict(obj["taxReportingClassification"]) if obj.get("taxReportingClassification") is not None else None,
            "type": obj.get("type"),
            "vatAbsenceReason": obj.get("vatAbsenceReason"),
            "vatNumber": obj.get("vatNumber"),
            "webData": WebData.from_dict(obj["webData"]) if obj.get("webData") is not None else None
        })
        return _obj


