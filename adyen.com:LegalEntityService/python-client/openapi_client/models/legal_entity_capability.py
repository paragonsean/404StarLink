# coding: utf-8

"""
    Legal Entity Management API

    The Legal Entity Management API enables you to manage legal entities that contain information required for verification.  ## Authentication To connect to the Legal Entity Management API, you must use the basic authentication credentials of your web service user. If you don't have one, contact the [Adyen Support Team](https://www.adyen.help/hc/en-us/requests/new). Use the web service user credentials to authenticate your request, for example:  ``` curl -U \"ws_123456@Scope.BalancePlatform_YourBalancePlatform\":\"YourWsPassword\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Legal Entity Management API supports versioning of its endpoints through a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://kyc-test.adyen.com/lem/v3/legalEntities ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://kyc-live.adyen.com/lem/v3`.  

    The version of the OpenAPI document: 3
    Contact: developer-experience@adyen.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.capability_settings import CapabilitySettings
from openapi_client.models.supporting_entity_capability import SupportingEntityCapability
from typing import Optional, Set
from typing_extensions import Self

class LegalEntityCapability(BaseModel):
    """
    LegalEntityCapability
    """ # noqa: E501
    allowed: Optional[StrictBool] = Field(default=None, description="Indicates whether the capability is allowed. Adyen sets this to **true** if the verification is successful ")
    allowed_level: Optional[StrictStr] = Field(default=None, description="The capability level that is allowed for the legal entity.  Possible values: **notApplicable**, **low**, **medium**, **high**.", alias="allowedLevel")
    allowed_settings: Optional[CapabilitySettings] = Field(default=None, description="The settings that were allowed for the Legal Entity.", alias="allowedSettings")
    requested: Optional[StrictBool] = Field(default=None, description="Indicates whether the capability is requested. To check whether the Legal Entity is permitted to use the capability, ")
    requested_level: Optional[StrictStr] = Field(default=None, description="The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.  Possible values: **notApplicable**, **low**, **medium**, **high**.", alias="requestedLevel")
    requested_settings: Optional[CapabilitySettings] = Field(default=None, description="The settings that are requested for the Legal Entity.", alias="requestedSettings")
    transfer_instruments: Optional[List[SupportingEntityCapability]] = Field(default=None, description="Capability status for transfer instruments associated with legal entity", alias="transferInstruments")
    verification_status: Optional[StrictStr] = Field(default=None, description="The status of the verification checks for the capability.  Possible values:  * **pending**: Adyen is running the verification.  * **invalid**: The verification failed. Check if the `errors` array contains more information.  * **valid**: The verification has been successfully completed.  * **rejected**: Adyen has verified the information, but found reasons to not allow the capability. ", alias="verificationStatus")
    __properties: ClassVar[List[str]] = ["allowed", "allowedLevel", "allowedSettings", "requested", "requestedLevel", "requestedSettings", "transferInstruments", "verificationStatus"]

    @field_validator('allowed_level')
    def allowed_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['high', 'low', 'medium', 'notApplicable']):
            raise ValueError("must be one of enum values ('high', 'low', 'medium', 'notApplicable')")
        return value

    @field_validator('requested_level')
    def requested_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['high', 'low', 'medium', 'notApplicable']):
            raise ValueError("must be one of enum values ('high', 'low', 'medium', 'notApplicable')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LegalEntityCapability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "allowed",
            "allowed_level",
            "allowed_settings",
            "requested",
            "requested_level",
            "requested_settings",
            "verification_status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allowed_settings
        if self.allowed_settings:
            _dict['allowedSettings'] = self.allowed_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requested_settings
        if self.requested_settings:
            _dict['requestedSettings'] = self.requested_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in transfer_instruments (list)
        _items = []
        if self.transfer_instruments:
            for _item_transfer_instruments in self.transfer_instruments:
                if _item_transfer_instruments:
                    _items.append(_item_transfer_instruments.to_dict())
            _dict['transferInstruments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LegalEntityCapability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed": obj.get("allowed"),
            "allowedLevel": obj.get("allowedLevel"),
            "allowedSettings": CapabilitySettings.from_dict(obj["allowedSettings"]) if obj.get("allowedSettings") is not None else None,
            "requested": obj.get("requested"),
            "requestedLevel": obj.get("requestedLevel"),
            "requestedSettings": CapabilitySettings.from_dict(obj["requestedSettings"]) if obj.get("requestedSettings") is not None else None,
            "transferInstruments": [SupportingEntityCapability.from_dict(_item) for _item in obj["transferInstruments"]] if obj.get("transferInstruments") is not None else None,
            "verificationStatus": obj.get("verificationStatus")
        })
        return _obj


