# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.branch_protection_allow_deletions import BranchProtectionAllowDeletions
from openapi_client.models.branch_protection_required_signatures import BranchProtectionRequiredSignatures
from openapi_client.models.branch_restriction_policy import BranchRestrictionPolicy
from openapi_client.models.protected_branch_admin_enforced import ProtectedBranchAdminEnforced
from openapi_client.models.protected_branch_pull_request_review import ProtectedBranchPullRequestReview
from openapi_client.models.protected_branch_required_status_check import ProtectedBranchRequiredStatusCheck
from typing import Optional, Set
from typing_extensions import Self

class BranchProtection(BaseModel):
    """
    Branch Protection
    """ # noqa: E501
    allow_deletions: Optional[BranchProtectionAllowDeletions] = None
    allow_force_pushes: Optional[BranchProtectionAllowDeletions] = None
    block_creations: Optional[BranchProtectionAllowDeletions] = None
    enabled: Optional[StrictBool] = None
    enforce_admins: Optional[ProtectedBranchAdminEnforced] = None
    name: Optional[StrictStr] = None
    protection_url: Optional[StrictStr] = None
    required_conversation_resolution: Optional[BranchProtectionAllowDeletions] = None
    required_linear_history: Optional[BranchProtectionAllowDeletions] = None
    required_pull_request_reviews: Optional[ProtectedBranchPullRequestReview] = None
    required_signatures: Optional[BranchProtectionRequiredSignatures] = None
    required_status_checks: Optional[ProtectedBranchRequiredStatusCheck] = None
    restrictions: Optional[BranchRestrictionPolicy] = None
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["allow_deletions", "allow_force_pushes", "block_creations", "enabled", "enforce_admins", "name", "protection_url", "required_conversation_resolution", "required_linear_history", "required_pull_request_reviews", "required_signatures", "required_status_checks", "restrictions", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BranchProtection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allow_deletions
        if self.allow_deletions:
            _dict['allow_deletions'] = self.allow_deletions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allow_force_pushes
        if self.allow_force_pushes:
            _dict['allow_force_pushes'] = self.allow_force_pushes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of block_creations
        if self.block_creations:
            _dict['block_creations'] = self.block_creations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enforce_admins
        if self.enforce_admins:
            _dict['enforce_admins'] = self.enforce_admins.to_dict()
        # override the default output from pydantic by calling `to_dict()` of required_conversation_resolution
        if self.required_conversation_resolution:
            _dict['required_conversation_resolution'] = self.required_conversation_resolution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of required_linear_history
        if self.required_linear_history:
            _dict['required_linear_history'] = self.required_linear_history.to_dict()
        # override the default output from pydantic by calling `to_dict()` of required_pull_request_reviews
        if self.required_pull_request_reviews:
            _dict['required_pull_request_reviews'] = self.required_pull_request_reviews.to_dict()
        # override the default output from pydantic by calling `to_dict()` of required_signatures
        if self.required_signatures:
            _dict['required_signatures'] = self.required_signatures.to_dict()
        # override the default output from pydantic by calling `to_dict()` of required_status_checks
        if self.required_status_checks:
            _dict['required_status_checks'] = self.required_status_checks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restrictions
        if self.restrictions:
            _dict['restrictions'] = self.restrictions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BranchProtection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow_deletions": BranchProtectionAllowDeletions.from_dict(obj["allow_deletions"]) if obj.get("allow_deletions") is not None else None,
            "allow_force_pushes": BranchProtectionAllowDeletions.from_dict(obj["allow_force_pushes"]) if obj.get("allow_force_pushes") is not None else None,
            "block_creations": BranchProtectionAllowDeletions.from_dict(obj["block_creations"]) if obj.get("block_creations") is not None else None,
            "enabled": obj.get("enabled"),
            "enforce_admins": ProtectedBranchAdminEnforced.from_dict(obj["enforce_admins"]) if obj.get("enforce_admins") is not None else None,
            "name": obj.get("name"),
            "protection_url": obj.get("protection_url"),
            "required_conversation_resolution": BranchProtectionAllowDeletions.from_dict(obj["required_conversation_resolution"]) if obj.get("required_conversation_resolution") is not None else None,
            "required_linear_history": BranchProtectionAllowDeletions.from_dict(obj["required_linear_history"]) if obj.get("required_linear_history") is not None else None,
            "required_pull_request_reviews": ProtectedBranchPullRequestReview.from_dict(obj["required_pull_request_reviews"]) if obj.get("required_pull_request_reviews") is not None else None,
            "required_signatures": BranchProtectionRequiredSignatures.from_dict(obj["required_signatures"]) if obj.get("required_signatures") is not None else None,
            "required_status_checks": ProtectedBranchRequiredStatusCheck.from_dict(obj["required_status_checks"]) if obj.get("required_status_checks") is not None else None,
            "restrictions": BranchRestrictionPolicy.from_dict(obj["restrictions"]) if obj.get("restrictions") is not None else None,
            "url": obj.get("url")
        })
        return _obj


