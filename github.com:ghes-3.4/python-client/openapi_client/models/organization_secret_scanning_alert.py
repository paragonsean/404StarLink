# coding: utf-8

"""
    GitHub v3 REST API

    GitHub's v3 REST API.

    The version of the OpenAPI document: 1.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.nullable_simple_user import NullableSimpleUser
from openapi_client.models.secret_scanning_alert_resolution import SecretScanningAlertResolution
from openapi_client.models.secret_scanning_alert_state import SecretScanningAlertState
from openapi_client.models.simple_repository import SimpleRepository
from typing import Optional, Set
from typing_extensions import Self

class OrganizationSecretScanningAlert(BaseModel):
    """
    OrganizationSecretScanningAlert
    """ # noqa: E501
    created_at: Optional[datetime] = Field(default=None, description="The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.")
    html_url: Optional[StrictStr] = Field(default=None, description="The GitHub URL of the alert resource.")
    locations_url: Optional[StrictStr] = Field(default=None, description="The REST API URL of the code locations for this alert.")
    number: Optional[StrictInt] = Field(default=None, description="The security alert number.")
    repository: Optional[SimpleRepository] = None
    resolution: Optional[SecretScanningAlertResolution] = None
    resolved_at: Optional[datetime] = Field(default=None, description="The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.")
    resolved_by: Optional[NullableSimpleUser] = None
    secret: Optional[StrictStr] = Field(default=None, description="The secret that was detected.")
    secret_type: Optional[StrictStr] = Field(default=None, description="The type of secret that secret scanning detected.")
    state: Optional[SecretScanningAlertState] = None
    updated_at: Optional[datetime] = Field(default=None, description="The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.")
    url: Optional[StrictStr] = Field(default=None, description="The REST API URL of the alert resource.")
    __properties: ClassVar[List[str]] = ["created_at", "html_url", "locations_url", "number", "repository", "resolution", "resolved_at", "resolved_by", "secret", "secret_type", "state", "updated_at", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationSecretScanningAlert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "created_at",
            "html_url",
            "number",
            "updated_at",
            "url",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of repository
        if self.repository:
            _dict['repository'] = self.repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resolved_by
        if self.resolved_by:
            _dict['resolved_by'] = self.resolved_by.to_dict()
        # set to None if resolution (nullable) is None
        # and model_fields_set contains the field
        if self.resolution is None and "resolution" in self.model_fields_set:
            _dict['resolution'] = None

        # set to None if resolved_at (nullable) is None
        # and model_fields_set contains the field
        if self.resolved_at is None and "resolved_at" in self.model_fields_set:
            _dict['resolved_at'] = None

        # set to None if resolved_by (nullable) is None
        # and model_fields_set contains the field
        if self.resolved_by is None and "resolved_by" in self.model_fields_set:
            _dict['resolved_by'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationSecretScanningAlert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "html_url": obj.get("html_url"),
            "locations_url": obj.get("locations_url"),
            "number": obj.get("number"),
            "repository": SimpleRepository.from_dict(obj["repository"]) if obj.get("repository") is not None else None,
            "resolution": obj.get("resolution"),
            "resolved_at": obj.get("resolved_at"),
            "resolved_by": NullableSimpleUser.from_dict(obj["resolved_by"]) if obj.get("resolved_by") is not None else None,
            "secret": obj.get("secret"),
            "secret_type": obj.get("secret_type"),
            "state": obj.get("state"),
            "updated_at": obj.get("updated_at"),
            "url": obj.get("url")
        })
        return _obj


