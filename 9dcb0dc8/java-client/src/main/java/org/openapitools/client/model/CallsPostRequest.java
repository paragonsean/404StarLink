/*
 * The SureVoIP RESTful API
 * # Introduction Welcome to the SureVoIP RESTful hypermedia API (sometimes known as a VoIP REST API, Telecom REST API, SIP API, Hypermedia API or just VoIP API.)  The SureVoIP API is a way for you to automate your interaction with the SureVoIP platforms. With the API, you can create your own scripts, applications or mashups which can: * List calls * create customers * search numbers * provision numbers * send SMS texts * create outbound calls * schedule announcements * schedule call hangups with an announcement * subscribe to events/alerts * track calls * retrieve invoices * grab your SIP details * check your IP address * be 100% self-sufficient * and much more! 
 *
 * The version of the OpenAPI document: 9dcb0dc8
 * Contact: support@surevoip.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CallsPostRequestOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CallsPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:53:24.569656-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CallsPostRequest {
  public static final String SERIALIZED_NAME_ANNOUNCEMENT_AT = "announcement_at";
  @SerializedName(SERIALIZED_NAME_ANNOUNCEMENT_AT)
  private String announcementAt;

  public static final String SERIALIZED_NAME_ANNOUNCEMENT_ID = "announcement_id";
  @SerializedName(SERIALIZED_NAME_ANNOUNCEMENT_ID)
  private String announcementId;

  public static final String SERIALIZED_NAME_CALLER_ID = "caller_id";
  @SerializedName(SERIALIZED_NAME_CALLER_ID)
  private String callerId;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_HANGUP_ANNOUNCEMENT_ID = "hangup_announcement_id";
  @SerializedName(SERIALIZED_NAME_HANGUP_ANNOUNCEMENT_ID)
  private String hangupAnnouncementId;

  public static final String SERIALIZED_NAME_HANGUP_AT = "hangup_at";
  @SerializedName(SERIALIZED_NAME_HANGUP_AT)
  private String hangupAt;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private CallsPostRequestOptions options;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public CallsPostRequest() {
  }

  public CallsPostRequest announcementAt(String announcementAt) {
    this.announcementAt = announcementAt;
    return this;
  }

  /**
   * is in seconds. Just take 120 secs away from the hangup_at time for a announcement to be played 2 mins before the end of the call. If provided announcement_id is required 
   * @return announcementAt
   */
  @javax.annotation.Nullable
  public String getAnnouncementAt() {
    return announcementAt;
  }

  public void setAnnouncementAt(String announcementAt) {
    this.announcementAt = announcementAt;
  }


  public CallsPostRequest announcementId(String announcementId) {
    this.announcementId = announcementId;
    return this;
  }

  /**
   * is the announcement id (from https://api.surevoip.co.uk/customers/{customer}/announcements/{announcement_id}) to play for example “your call is about to end in 2 mins”. We only allow a wav file, but we may allow \&quot;words\&quot;, which will use SureVoIP provided text to speech. If provided announcement_at is required 
   * @return announcementId
   */
  @javax.annotation.Nullable
  public String getAnnouncementId() {
    return announcementId;
  }

  public void setAnnouncementId(String announcementId) {
    this.announcementId = announcementId;
  }


  public CallsPostRequest callerId(String callerId) {
    this.callerId = callerId;
    return this;
  }

  /**
   * The caller ID to show the b leg (to).
   * @return callerId
   */
  @javax.annotation.Nonnull
  public String getCallerId() {
    return callerId;
  }

  public void setCallerId(String callerId) {
    this.callerId = callerId;
  }


  public CallsPostRequest from(String from) {
    this.from = from;
    return this;
  }

  /**
   * The person making the call, i.e the a leg. This person must answer in order for the b leg to be rung
   * @return from
   */
  @javax.annotation.Nonnull
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public CallsPostRequest hangupAnnouncementId(String hangupAnnouncementId) {
    this.hangupAnnouncementId = hangupAnnouncementId;
    return this;
  }

  /**
   * the id of a thank you announcement or similar. You can manage these as you would with any RESTful resource at https://api.surevoip.co.uk/announcements and https://api.surevoip.co.uk/customers/{customer}/announcements/{announcement_id}. It will be played at the end of the call at hangup. If provided hangup_at is required. 
   * @return hangupAnnouncementId
   */
  @javax.annotation.Nullable
  public String getHangupAnnouncementId() {
    return hangupAnnouncementId;
  }

  public void setHangupAnnouncementId(String hangupAnnouncementId) {
    this.hangupAnnouncementId = hangupAnnouncementId;
  }


  public CallsPostRequest hangupAt(String hangupAt) {
    this.hangupAt = hangupAt;
    return this;
  }

  /**
   * length in seconds from when the call is *answered* to when the system hangs up. If \&quot;hangup_announcement_id\&quot; is present, this will be played at hangup 
   * @return hangupAt
   */
  @javax.annotation.Nullable
  public String getHangupAt() {
    return hangupAt;
  }

  public void setHangupAt(String hangupAt) {
    this.hangupAt = hangupAt;
  }


  public CallsPostRequest options(CallsPostRequestOptions options) {
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  public CallsPostRequestOptions getOptions() {
    return options;
  }

  public void setOptions(CallsPostRequestOptions options) {
    this.options = options;
  }


  public CallsPostRequest to(String to) {
    this.to = to;
    return this;
  }

  /**
   * The b leg of the call, i.e. the person you are calling
   * @return to
   */
  @javax.annotation.Nonnull
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallsPostRequest callsPostRequest = (CallsPostRequest) o;
    return Objects.equals(this.announcementAt, callsPostRequest.announcementAt) &&
        Objects.equals(this.announcementId, callsPostRequest.announcementId) &&
        Objects.equals(this.callerId, callsPostRequest.callerId) &&
        Objects.equals(this.from, callsPostRequest.from) &&
        Objects.equals(this.hangupAnnouncementId, callsPostRequest.hangupAnnouncementId) &&
        Objects.equals(this.hangupAt, callsPostRequest.hangupAt) &&
        Objects.equals(this.options, callsPostRequest.options) &&
        Objects.equals(this.to, callsPostRequest.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(announcementAt, announcementId, callerId, from, hangupAnnouncementId, hangupAt, options, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallsPostRequest {\n");
    sb.append("    announcementAt: ").append(toIndentedString(announcementAt)).append("\n");
    sb.append("    announcementId: ").append(toIndentedString(announcementId)).append("\n");
    sb.append("    callerId: ").append(toIndentedString(callerId)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    hangupAnnouncementId: ").append(toIndentedString(hangupAnnouncementId)).append("\n");
    sb.append("    hangupAt: ").append(toIndentedString(hangupAt)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("announcement_at");
    openapiFields.add("announcement_id");
    openapiFields.add("caller_id");
    openapiFields.add("from");
    openapiFields.add("hangup_announcement_id");
    openapiFields.add("hangup_at");
    openapiFields.add("options");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("caller_id");
    openapiRequiredFields.add("from");
    openapiRequiredFields.add("to");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CallsPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CallsPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallsPostRequest is not found in the empty JSON string", CallsPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CallsPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CallsPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CallsPostRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("announcement_at") != null && !jsonObj.get("announcement_at").isJsonNull()) && !jsonObj.get("announcement_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `announcement_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("announcement_at").toString()));
      }
      if ((jsonObj.get("announcement_id") != null && !jsonObj.get("announcement_id").isJsonNull()) && !jsonObj.get("announcement_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `announcement_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("announcement_id").toString()));
      }
      if (!jsonObj.get("caller_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caller_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caller_id").toString()));
      }
      if (!jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("hangup_announcement_id") != null && !jsonObj.get("hangup_announcement_id").isJsonNull()) && !jsonObj.get("hangup_announcement_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hangup_announcement_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hangup_announcement_id").toString()));
      }
      if ((jsonObj.get("hangup_at") != null && !jsonObj.get("hangup_at").isJsonNull()) && !jsonObj.get("hangup_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hangup_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hangup_at").toString()));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        CallsPostRequestOptions.validateJsonElement(jsonObj.get("options"));
      }
      if (!jsonObj.get("to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallsPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallsPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallsPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallsPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CallsPostRequest>() {
           @Override
           public void write(JsonWriter out, CallsPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CallsPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CallsPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CallsPostRequest
   * @throws IOException if the JSON string is invalid with respect to CallsPostRequest
   */
  public static CallsPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallsPostRequest.class);
  }

  /**
   * Convert an instance of CallsPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

