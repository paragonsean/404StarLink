# coding: utf-8

"""
    Twilio - Taskrouter

    This is the public Twilio REST API.

    The version of the OpenAPI document: 1.42.0
    Contact: support@twilio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics(BaseModel):
    """
    TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics
    """ # noqa: E501
    account_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workflow resource.")
    avg_task_acceptance_time: Optional[StrictInt] = Field(default=None, description="The average time in seconds between Task creation and acceptance.")
    end_time: Optional[datetime] = Field(default=None, description="The end of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.")
    reservations_accepted: Optional[StrictInt] = Field(default=None, description="The total number of Reservations accepted by Workers.")
    reservations_canceled: Optional[StrictInt] = Field(default=None, description="The total number of Reservations that were canceled.")
    reservations_created: Optional[StrictInt] = Field(default=None, description="The total number of Reservations that were created for Workers.")
    reservations_rejected: Optional[StrictInt] = Field(default=None, description="The total number of Reservations that were rejected.")
    reservations_rescinded: Optional[StrictInt] = Field(default=None, description="The total number of Reservations that were rescinded.")
    reservations_timed_out: Optional[StrictInt] = Field(default=None, description="The total number of Reservations that were timed out.")
    split_by_wait_time: Optional[Any] = Field(default=None, description="A list of objects that describe the number of Tasks canceled and reservations accepted above and below the thresholds specified in seconds.")
    start_time: Optional[datetime] = Field(default=None, description="The beginning of the interval during which these statistics were calculated, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.")
    tasks_canceled: Optional[StrictInt] = Field(default=None, description="The total number of Tasks that were canceled.")
    tasks_completed: Optional[StrictInt] = Field(default=None, description="The total number of Tasks that were completed.")
    tasks_deleted: Optional[StrictInt] = Field(default=None, description="The total number of Tasks that were deleted.")
    tasks_entered: Optional[StrictInt] = Field(default=None, description="The total number of Tasks that entered the Workflow.")
    tasks_moved: Optional[StrictInt] = Field(default=None, description="The total number of Tasks that were moved from one queue to another.")
    tasks_timed_out_in_workflow: Optional[StrictInt] = Field(default=None, description="The total number of Tasks that were timed out of their Workflows (and deleted).")
    url: Optional[StrictStr] = Field(default=None, description="The absolute URL of the Workflow statistics resource.")
    wait_duration_until_accepted: Optional[Any] = Field(default=None, description="The wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks that were accepted.")
    wait_duration_until_canceled: Optional[Any] = Field(default=None, description="The wait duration statistics (`avg`, `min`, `max`, `total`) for Tasks that were canceled.")
    workflow_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="Returns the list of Tasks that are being controlled by the Workflow with the specified Sid value.")
    workspace_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the Workspace that contains the Workflow.")
    __properties: ClassVar[List[str]] = ["account_sid", "avg_task_acceptance_time", "end_time", "reservations_accepted", "reservations_canceled", "reservations_created", "reservations_rejected", "reservations_rescinded", "reservations_timed_out", "split_by_wait_time", "start_time", "tasks_canceled", "tasks_completed", "tasks_deleted", "tasks_entered", "tasks_moved", "tasks_timed_out_in_workflow", "url", "wait_duration_until_accepted", "wait_duration_until_canceled", "workflow_sid", "workspace_sid"]

    @field_validator('account_sid')
    def account_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^AC[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^AC[0-9a-fA-F]{32}$/")
        return value

    @field_validator('workflow_sid')
    def workflow_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WW[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WW[0-9a-fA-F]{32}$/")
        return value

    @field_validator('workspace_sid')
    def workspace_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WS[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WS[0-9a-fA-F]{32}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_sid (nullable) is None
        # and model_fields_set contains the field
        if self.account_sid is None and "account_sid" in self.model_fields_set:
            _dict['account_sid'] = None

        # set to None if avg_task_acceptance_time (nullable) is None
        # and model_fields_set contains the field
        if self.avg_task_acceptance_time is None and "avg_task_acceptance_time" in self.model_fields_set:
            _dict['avg_task_acceptance_time'] = None

        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['end_time'] = None

        # set to None if reservations_accepted (nullable) is None
        # and model_fields_set contains the field
        if self.reservations_accepted is None and "reservations_accepted" in self.model_fields_set:
            _dict['reservations_accepted'] = None

        # set to None if reservations_canceled (nullable) is None
        # and model_fields_set contains the field
        if self.reservations_canceled is None and "reservations_canceled" in self.model_fields_set:
            _dict['reservations_canceled'] = None

        # set to None if reservations_created (nullable) is None
        # and model_fields_set contains the field
        if self.reservations_created is None and "reservations_created" in self.model_fields_set:
            _dict['reservations_created'] = None

        # set to None if reservations_rejected (nullable) is None
        # and model_fields_set contains the field
        if self.reservations_rejected is None and "reservations_rejected" in self.model_fields_set:
            _dict['reservations_rejected'] = None

        # set to None if reservations_rescinded (nullable) is None
        # and model_fields_set contains the field
        if self.reservations_rescinded is None and "reservations_rescinded" in self.model_fields_set:
            _dict['reservations_rescinded'] = None

        # set to None if reservations_timed_out (nullable) is None
        # and model_fields_set contains the field
        if self.reservations_timed_out is None and "reservations_timed_out" in self.model_fields_set:
            _dict['reservations_timed_out'] = None

        # set to None if split_by_wait_time (nullable) is None
        # and model_fields_set contains the field
        if self.split_by_wait_time is None and "split_by_wait_time" in self.model_fields_set:
            _dict['split_by_wait_time'] = None

        # set to None if start_time (nullable) is None
        # and model_fields_set contains the field
        if self.start_time is None and "start_time" in self.model_fields_set:
            _dict['start_time'] = None

        # set to None if tasks_canceled (nullable) is None
        # and model_fields_set contains the field
        if self.tasks_canceled is None and "tasks_canceled" in self.model_fields_set:
            _dict['tasks_canceled'] = None

        # set to None if tasks_completed (nullable) is None
        # and model_fields_set contains the field
        if self.tasks_completed is None and "tasks_completed" in self.model_fields_set:
            _dict['tasks_completed'] = None

        # set to None if tasks_deleted (nullable) is None
        # and model_fields_set contains the field
        if self.tasks_deleted is None and "tasks_deleted" in self.model_fields_set:
            _dict['tasks_deleted'] = None

        # set to None if tasks_entered (nullable) is None
        # and model_fields_set contains the field
        if self.tasks_entered is None and "tasks_entered" in self.model_fields_set:
            _dict['tasks_entered'] = None

        # set to None if tasks_moved (nullable) is None
        # and model_fields_set contains the field
        if self.tasks_moved is None and "tasks_moved" in self.model_fields_set:
            _dict['tasks_moved'] = None

        # set to None if tasks_timed_out_in_workflow (nullable) is None
        # and model_fields_set contains the field
        if self.tasks_timed_out_in_workflow is None and "tasks_timed_out_in_workflow" in self.model_fields_set:
            _dict['tasks_timed_out_in_workflow'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if wait_duration_until_accepted (nullable) is None
        # and model_fields_set contains the field
        if self.wait_duration_until_accepted is None and "wait_duration_until_accepted" in self.model_fields_set:
            _dict['wait_duration_until_accepted'] = None

        # set to None if wait_duration_until_canceled (nullable) is None
        # and model_fields_set contains the field
        if self.wait_duration_until_canceled is None and "wait_duration_until_canceled" in self.model_fields_set:
            _dict['wait_duration_until_canceled'] = None

        # set to None if workflow_sid (nullable) is None
        # and model_fields_set contains the field
        if self.workflow_sid is None and "workflow_sid" in self.model_fields_set:
            _dict['workflow_sid'] = None

        # set to None if workspace_sid (nullable) is None
        # and model_fields_set contains the field
        if self.workspace_sid is None and "workspace_sid" in self.model_fields_set:
            _dict['workspace_sid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskrouterV1WorkspaceWorkflowWorkflowCumulativeStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_sid": obj.get("account_sid"),
            "avg_task_acceptance_time": obj.get("avg_task_acceptance_time"),
            "end_time": obj.get("end_time"),
            "reservations_accepted": obj.get("reservations_accepted"),
            "reservations_canceled": obj.get("reservations_canceled"),
            "reservations_created": obj.get("reservations_created"),
            "reservations_rejected": obj.get("reservations_rejected"),
            "reservations_rescinded": obj.get("reservations_rescinded"),
            "reservations_timed_out": obj.get("reservations_timed_out"),
            "split_by_wait_time": obj.get("split_by_wait_time"),
            "start_time": obj.get("start_time"),
            "tasks_canceled": obj.get("tasks_canceled"),
            "tasks_completed": obj.get("tasks_completed"),
            "tasks_deleted": obj.get("tasks_deleted"),
            "tasks_entered": obj.get("tasks_entered"),
            "tasks_moved": obj.get("tasks_moved"),
            "tasks_timed_out_in_workflow": obj.get("tasks_timed_out_in_workflow"),
            "url": obj.get("url"),
            "wait_duration_until_accepted": obj.get("wait_duration_until_accepted"),
            "wait_duration_until_canceled": obj.get("wait_duration_until_canceled"),
            "workflow_sid": obj.get("workflow_sid"),
            "workspace_sid": obj.get("workspace_sid")
        })
        return _obj


