# coding: utf-8

"""
    Twilio - Taskrouter

    This is the public Twilio REST API.

    The version of the OpenAPI document: 1.42.0
    Contact: support@twilio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TaskrouterV1WorkspaceEvent(BaseModel):
    """
    TaskrouterV1WorkspaceEvent
    """ # noqa: E501
    account_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Event resource.")
    actor_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the resource that triggered the event.")
    actor_type: Optional[StrictStr] = Field(default=None, description="The type of resource that triggered the event.")
    actor_url: Optional[StrictStr] = Field(default=None, description="The absolute URL of the resource that triggered the event.")
    description: Optional[StrictStr] = Field(default=None, description="A description of the event.")
    event_data: Optional[Any] = Field(default=None, description="Data about the event. For more information, see [Event types](https://www.twilio.com/docs/taskrouter/api/event#event-types).")
    event_date: Optional[datetime] = Field(default=None, description="The time the event was sent, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.")
    event_date_ms: Optional[StrictInt] = Field(default=None, description="The time the event was sent in milliseconds.")
    event_type: Optional[StrictStr] = Field(default=None, description="The identifier for the event.")
    resource_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the object the event is most relevant to, such as a TaskSid, ReservationSid, or a  WorkerSid.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The type of object the event is most relevant to, such as a Task, Reservation, or a Worker).")
    resource_url: Optional[StrictStr] = Field(default=None, description="The URL of the resource the event is most relevant to.")
    sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The unique string that we created to identify the Event resource.")
    source: Optional[StrictStr] = Field(default=None, description="Where the Event originated.")
    source_ip_address: Optional[StrictStr] = Field(default=None, description="The IP from which the Event originated.")
    url: Optional[StrictStr] = Field(default=None, description="The absolute URL of the Event resource.")
    workspace_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the Workspace that contains the Event.")
    __properties: ClassVar[List[str]] = ["account_sid", "actor_sid", "actor_type", "actor_url", "description", "event_data", "event_date", "event_date_ms", "event_type", "resource_sid", "resource_type", "resource_url", "sid", "source", "source_ip_address", "url", "workspace_sid"]

    @field_validator('account_sid')
    def account_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^AC[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^AC[0-9a-fA-F]{32}$/")
        return value

    @field_validator('actor_sid')
    def actor_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z]{2}[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z]{2}[0-9a-fA-F]{32}$/")
        return value

    @field_validator('resource_sid')
    def resource_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z]{2}[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z]{2}[0-9a-fA-F]{32}$/")
        return value

    @field_validator('sid')
    def sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^EV[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^EV[0-9a-fA-F]{32}$/")
        return value

    @field_validator('workspace_sid')
    def workspace_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WS[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WS[0-9a-fA-F]{32}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskrouterV1WorkspaceEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_sid (nullable) is None
        # and model_fields_set contains the field
        if self.account_sid is None and "account_sid" in self.model_fields_set:
            _dict['account_sid'] = None

        # set to None if actor_sid (nullable) is None
        # and model_fields_set contains the field
        if self.actor_sid is None and "actor_sid" in self.model_fields_set:
            _dict['actor_sid'] = None

        # set to None if actor_type (nullable) is None
        # and model_fields_set contains the field
        if self.actor_type is None and "actor_type" in self.model_fields_set:
            _dict['actor_type'] = None

        # set to None if actor_url (nullable) is None
        # and model_fields_set contains the field
        if self.actor_url is None and "actor_url" in self.model_fields_set:
            _dict['actor_url'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if event_data (nullable) is None
        # and model_fields_set contains the field
        if self.event_data is None and "event_data" in self.model_fields_set:
            _dict['event_data'] = None

        # set to None if event_date (nullable) is None
        # and model_fields_set contains the field
        if self.event_date is None and "event_date" in self.model_fields_set:
            _dict['event_date'] = None

        # set to None if event_date_ms (nullable) is None
        # and model_fields_set contains the field
        if self.event_date_ms is None and "event_date_ms" in self.model_fields_set:
            _dict['event_date_ms'] = None

        # set to None if event_type (nullable) is None
        # and model_fields_set contains the field
        if self.event_type is None and "event_type" in self.model_fields_set:
            _dict['event_type'] = None

        # set to None if resource_sid (nullable) is None
        # and model_fields_set contains the field
        if self.resource_sid is None and "resource_sid" in self.model_fields_set:
            _dict['resource_sid'] = None

        # set to None if resource_type (nullable) is None
        # and model_fields_set contains the field
        if self.resource_type is None and "resource_type" in self.model_fields_set:
            _dict['resource_type'] = None

        # set to None if resource_url (nullable) is None
        # and model_fields_set contains the field
        if self.resource_url is None and "resource_url" in self.model_fields_set:
            _dict['resource_url'] = None

        # set to None if sid (nullable) is None
        # and model_fields_set contains the field
        if self.sid is None and "sid" in self.model_fields_set:
            _dict['sid'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if source_ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.source_ip_address is None and "source_ip_address" in self.model_fields_set:
            _dict['source_ip_address'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if workspace_sid (nullable) is None
        # and model_fields_set contains the field
        if self.workspace_sid is None and "workspace_sid" in self.model_fields_set:
            _dict['workspace_sid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskrouterV1WorkspaceEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_sid": obj.get("account_sid"),
            "actor_sid": obj.get("actor_sid"),
            "actor_type": obj.get("actor_type"),
            "actor_url": obj.get("actor_url"),
            "description": obj.get("description"),
            "event_data": obj.get("event_data"),
            "event_date": obj.get("event_date"),
            "event_date_ms": obj.get("event_date_ms"),
            "event_type": obj.get("event_type"),
            "resource_sid": obj.get("resource_sid"),
            "resource_type": obj.get("resource_type"),
            "resource_url": obj.get("resource_url"),
            "sid": obj.get("sid"),
            "source": obj.get("source"),
            "source_ip_address": obj.get("source_ip_address"),
            "url": obj.get("url"),
            "workspace_sid": obj.get("workspace_sid")
        })
        return _obj


