# coding: utf-8

"""
    Twilio - Taskrouter

    This is the public Twilio REST API.

    The version of the OpenAPI document: 1.42.0
    Contact: support@twilio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TaskrouterV1WorkspaceTaskTaskReservation(BaseModel):
    """
    TaskrouterV1WorkspaceTaskTaskReservation
    """ # noqa: E501
    account_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the TaskReservation resource.")
    date_created: Optional[datetime] = Field(default=None, description="The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.")
    date_updated: Optional[datetime] = Field(default=None, description="The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.")
    links: Optional[Dict[str, Any]] = Field(default=None, description="The URLs of related resources.")
    reservation_status: Optional[StrictStr] = None
    sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The unique string that we created to identify the TaskReservation resource.")
    task_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the reserved Task resource.")
    url: Optional[StrictStr] = Field(default=None, description="The absolute URL of the TaskReservation reservation.")
    worker_name: Optional[StrictStr] = Field(default=None, description="The `friendly_name` of the Worker that is reserved.")
    worker_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the reserved Worker resource.")
    workspace_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the Workspace that this task is contained within.")
    __properties: ClassVar[List[str]] = ["account_sid", "date_created", "date_updated", "links", "reservation_status", "sid", "task_sid", "url", "worker_name", "worker_sid", "workspace_sid"]

    @field_validator('account_sid')
    def account_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^AC[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^AC[0-9a-fA-F]{32}$/")
        return value

    @field_validator('sid')
    def sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WR[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WR[0-9a-fA-F]{32}$/")
        return value

    @field_validator('task_sid')
    def task_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WT[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WT[0-9a-fA-F]{32}$/")
        return value

    @field_validator('worker_sid')
    def worker_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WK[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WK[0-9a-fA-F]{32}$/")
        return value

    @field_validator('workspace_sid')
    def workspace_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WS[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WS[0-9a-fA-F]{32}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskrouterV1WorkspaceTaskTaskReservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_sid (nullable) is None
        # and model_fields_set contains the field
        if self.account_sid is None and "account_sid" in self.model_fields_set:
            _dict['account_sid'] = None

        # set to None if date_created (nullable) is None
        # and model_fields_set contains the field
        if self.date_created is None and "date_created" in self.model_fields_set:
            _dict['date_created'] = None

        # set to None if date_updated (nullable) is None
        # and model_fields_set contains the field
        if self.date_updated is None and "date_updated" in self.model_fields_set:
            _dict['date_updated'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        # set to None if sid (nullable) is None
        # and model_fields_set contains the field
        if self.sid is None and "sid" in self.model_fields_set:
            _dict['sid'] = None

        # set to None if task_sid (nullable) is None
        # and model_fields_set contains the field
        if self.task_sid is None and "task_sid" in self.model_fields_set:
            _dict['task_sid'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if worker_name (nullable) is None
        # and model_fields_set contains the field
        if self.worker_name is None and "worker_name" in self.model_fields_set:
            _dict['worker_name'] = None

        # set to None if worker_sid (nullable) is None
        # and model_fields_set contains the field
        if self.worker_sid is None and "worker_sid" in self.model_fields_set:
            _dict['worker_sid'] = None

        # set to None if workspace_sid (nullable) is None
        # and model_fields_set contains the field
        if self.workspace_sid is None and "workspace_sid" in self.model_fields_set:
            _dict['workspace_sid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskrouterV1WorkspaceTaskTaskReservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_sid": obj.get("account_sid"),
            "date_created": obj.get("date_created"),
            "date_updated": obj.get("date_updated"),
            "links": obj.get("links"),
            "reservation_status": obj.get("reservation_status"),
            "sid": obj.get("sid"),
            "task_sid": obj.get("task_sid"),
            "url": obj.get("url"),
            "worker_name": obj.get("worker_name"),
            "worker_sid": obj.get("worker_sid"),
            "workspace_sid": obj.get("workspace_sid")
        })
        return _obj


