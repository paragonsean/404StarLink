# coding: utf-8

"""
    Twilio - Taskrouter

    This is the public Twilio REST API.

    The version of the OpenAPI document: 1.42.0
    Contact: support@twilio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TaskrouterV1Workspace(BaseModel):
    """
    TaskrouterV1Workspace
    """ # noqa: E501
    account_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workspace resource.")
    date_created: Optional[datetime] = Field(default=None, description="The date and time in GMT when the resource was created specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.")
    date_updated: Optional[datetime] = Field(default=None, description="The date and time in GMT when the resource was last updated specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.")
    default_activity_name: Optional[StrictStr] = Field(default=None, description="The name of the default activity.")
    default_activity_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the Activity that will be used when new Workers are created in the Workspace.")
    event_callback_url: Optional[StrictStr] = Field(default=None, description="The URL we call when an event occurs. If provided, the Workspace will publish events to this URL, for example, to collect data for reporting. See [Workspace Events](https://www.twilio.com/docs/taskrouter/api/event) for more information. This parameter supports Twilio's [Webhooks (HTTP callbacks) Connection Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-connection-overrides).")
    events_filter: Optional[StrictStr] = Field(default=None, description="The list of Workspace events for which to call `event_callback_url`. For example, if `EventsFilter=task.created, task.canceled, worker.activity.update`, then TaskRouter will call event_callback_url only when a task is created, canceled, or a Worker activity is updated.")
    friendly_name: Optional[StrictStr] = Field(default=None, description="The string that you assigned to describe the Workspace resource. For example `Customer Support` or `2014 Election Campaign`.")
    links: Optional[Dict[str, Any]] = Field(default=None, description="The URLs of related resources.")
    multi_task_enabled: Optional[StrictBool] = Field(default=None, description="Whether multi-tasking is enabled. The default is `true`, which enables multi-tasking. Multi-tasking allows Workers to handle multiple Tasks simultaneously. When enabled (`true`), each Worker can receive parallel reservations up to the per-channel maximums defined in the Workers section. In single-tasking each Worker would only receive a new reservation when the previous task is completed. Learn more at [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).")
    prioritize_queue_order: Optional[StrictStr] = None
    sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The unique string that we created to identify the Workspace resource.")
    timeout_activity_name: Optional[StrictStr] = Field(default=None, description="The name of the timeout activity.")
    timeout_activity_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the Activity that will be assigned to a Worker when a Task reservation times out without a response.")
    url: Optional[StrictStr] = Field(default=None, description="The absolute URL of the Workspace resource.")
    __properties: ClassVar[List[str]] = ["account_sid", "date_created", "date_updated", "default_activity_name", "default_activity_sid", "event_callback_url", "events_filter", "friendly_name", "links", "multi_task_enabled", "prioritize_queue_order", "sid", "timeout_activity_name", "timeout_activity_sid", "url"]

    @field_validator('account_sid')
    def account_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^AC[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^AC[0-9a-fA-F]{32}$/")
        return value

    @field_validator('default_activity_sid')
    def default_activity_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WA[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WA[0-9a-fA-F]{32}$/")
        return value

    @field_validator('sid')
    def sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WS[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WS[0-9a-fA-F]{32}$/")
        return value

    @field_validator('timeout_activity_sid')
    def timeout_activity_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WA[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WA[0-9a-fA-F]{32}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskrouterV1Workspace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_sid (nullable) is None
        # and model_fields_set contains the field
        if self.account_sid is None and "account_sid" in self.model_fields_set:
            _dict['account_sid'] = None

        # set to None if date_created (nullable) is None
        # and model_fields_set contains the field
        if self.date_created is None and "date_created" in self.model_fields_set:
            _dict['date_created'] = None

        # set to None if date_updated (nullable) is None
        # and model_fields_set contains the field
        if self.date_updated is None and "date_updated" in self.model_fields_set:
            _dict['date_updated'] = None

        # set to None if default_activity_name (nullable) is None
        # and model_fields_set contains the field
        if self.default_activity_name is None and "default_activity_name" in self.model_fields_set:
            _dict['default_activity_name'] = None

        # set to None if default_activity_sid (nullable) is None
        # and model_fields_set contains the field
        if self.default_activity_sid is None and "default_activity_sid" in self.model_fields_set:
            _dict['default_activity_sid'] = None

        # set to None if event_callback_url (nullable) is None
        # and model_fields_set contains the field
        if self.event_callback_url is None and "event_callback_url" in self.model_fields_set:
            _dict['event_callback_url'] = None

        # set to None if events_filter (nullable) is None
        # and model_fields_set contains the field
        if self.events_filter is None and "events_filter" in self.model_fields_set:
            _dict['events_filter'] = None

        # set to None if friendly_name (nullable) is None
        # and model_fields_set contains the field
        if self.friendly_name is None and "friendly_name" in self.model_fields_set:
            _dict['friendly_name'] = None

        # set to None if links (nullable) is None
        # and model_fields_set contains the field
        if self.links is None and "links" in self.model_fields_set:
            _dict['links'] = None

        # set to None if multi_task_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.multi_task_enabled is None and "multi_task_enabled" in self.model_fields_set:
            _dict['multi_task_enabled'] = None

        # set to None if sid (nullable) is None
        # and model_fields_set contains the field
        if self.sid is None and "sid" in self.model_fields_set:
            _dict['sid'] = None

        # set to None if timeout_activity_name (nullable) is None
        # and model_fields_set contains the field
        if self.timeout_activity_name is None and "timeout_activity_name" in self.model_fields_set:
            _dict['timeout_activity_name'] = None

        # set to None if timeout_activity_sid (nullable) is None
        # and model_fields_set contains the field
        if self.timeout_activity_sid is None and "timeout_activity_sid" in self.model_fields_set:
            _dict['timeout_activity_sid'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskrouterV1Workspace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_sid": obj.get("account_sid"),
            "date_created": obj.get("date_created"),
            "date_updated": obj.get("date_updated"),
            "default_activity_name": obj.get("default_activity_name"),
            "default_activity_sid": obj.get("default_activity_sid"),
            "event_callback_url": obj.get("event_callback_url"),
            "events_filter": obj.get("events_filter"),
            "friendly_name": obj.get("friendly_name"),
            "links": obj.get("links"),
            "multi_task_enabled": obj.get("multi_task_enabled"),
            "prioritize_queue_order": obj.get("prioritize_queue_order"),
            "sid": obj.get("sid"),
            "timeout_activity_name": obj.get("timeout_activity_name"),
            "timeout_activity_sid": obj.get("timeout_activity_sid"),
            "url": obj.get("url")
        })
        return _obj


