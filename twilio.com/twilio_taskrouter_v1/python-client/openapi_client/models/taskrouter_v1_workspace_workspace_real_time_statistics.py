# coding: utf-8

"""
    Twilio - Taskrouter

    This is the public Twilio REST API.

    The version of the OpenAPI document: 1.42.0
    Contact: support@twilio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TaskrouterV1WorkspaceWorkspaceRealTimeStatistics(BaseModel):
    """
    TaskrouterV1WorkspaceWorkspaceRealTimeStatistics
    """ # noqa: E501
    account_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Workspace resource.")
    activity_statistics: Optional[List[Any]] = Field(default=None, description="The number of current Workers by Activity.")
    longest_task_waiting_age: Optional[StrictInt] = Field(default=None, description="The age of the longest waiting Task.")
    longest_task_waiting_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the longest waiting Task.")
    tasks_by_priority: Optional[Any] = Field(default=None, description="The number of Tasks by priority. For example: `{\"0\": \"10\", \"99\": \"5\"}` shows 10 Tasks at priority 0 and 5 at priority 99.")
    tasks_by_status: Optional[Any] = Field(default=None, description="The number of Tasks by their current status. For example: `{\"pending\": \"1\", \"reserved\": \"3\", \"assigned\": \"2\", \"completed\": \"5\"}`.")
    total_tasks: Optional[StrictInt] = Field(default=None, description="The total number of Tasks.")
    total_workers: Optional[StrictInt] = Field(default=None, description="The total number of Workers in the Workspace.")
    url: Optional[StrictStr] = Field(default=None, description="The absolute URL of the Workspace statistics resource.")
    workspace_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The SID of the Workspace.")
    __properties: ClassVar[List[str]] = ["account_sid", "activity_statistics", "longest_task_waiting_age", "longest_task_waiting_sid", "tasks_by_priority", "tasks_by_status", "total_tasks", "total_workers", "url", "workspace_sid"]

    @field_validator('account_sid')
    def account_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^AC[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^AC[0-9a-fA-F]{32}$/")
        return value

    @field_validator('longest_task_waiting_sid')
    def longest_task_waiting_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WT[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WT[0-9a-fA-F]{32}$/")
        return value

    @field_validator('workspace_sid')
    def workspace_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^WS[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^WS[0-9a-fA-F]{32}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TaskrouterV1WorkspaceWorkspaceRealTimeStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_sid (nullable) is None
        # and model_fields_set contains the field
        if self.account_sid is None and "account_sid" in self.model_fields_set:
            _dict['account_sid'] = None

        # set to None if activity_statistics (nullable) is None
        # and model_fields_set contains the field
        if self.activity_statistics is None and "activity_statistics" in self.model_fields_set:
            _dict['activity_statistics'] = None

        # set to None if longest_task_waiting_age (nullable) is None
        # and model_fields_set contains the field
        if self.longest_task_waiting_age is None and "longest_task_waiting_age" in self.model_fields_set:
            _dict['longest_task_waiting_age'] = None

        # set to None if longest_task_waiting_sid (nullable) is None
        # and model_fields_set contains the field
        if self.longest_task_waiting_sid is None and "longest_task_waiting_sid" in self.model_fields_set:
            _dict['longest_task_waiting_sid'] = None

        # set to None if tasks_by_priority (nullable) is None
        # and model_fields_set contains the field
        if self.tasks_by_priority is None and "tasks_by_priority" in self.model_fields_set:
            _dict['tasks_by_priority'] = None

        # set to None if tasks_by_status (nullable) is None
        # and model_fields_set contains the field
        if self.tasks_by_status is None and "tasks_by_status" in self.model_fields_set:
            _dict['tasks_by_status'] = None

        # set to None if total_tasks (nullable) is None
        # and model_fields_set contains the field
        if self.total_tasks is None and "total_tasks" in self.model_fields_set:
            _dict['total_tasks'] = None

        # set to None if total_workers (nullable) is None
        # and model_fields_set contains the field
        if self.total_workers is None and "total_workers" in self.model_fields_set:
            _dict['total_workers'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if workspace_sid (nullable) is None
        # and model_fields_set contains the field
        if self.workspace_sid is None and "workspace_sid" in self.model_fields_set:
            _dict['workspace_sid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TaskrouterV1WorkspaceWorkspaceRealTimeStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_sid": obj.get("account_sid"),
            "activity_statistics": obj.get("activity_statistics"),
            "longest_task_waiting_age": obj.get("longest_task_waiting_age"),
            "longest_task_waiting_sid": obj.get("longest_task_waiting_sid"),
            "tasks_by_priority": obj.get("tasks_by_priority"),
            "tasks_by_status": obj.get("tasks_by_status"),
            "total_tasks": obj.get("total_tasks"),
            "total_workers": obj.get("total_workers"),
            "url": obj.get("url"),
            "workspace_sid": obj.get("workspace_sid")
        })
        return _obj


