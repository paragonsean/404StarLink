/*
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.42.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChannelEnumChannelType;
import org.openapitools.client.model.CredentialEnumPushService;
import org.openapitools.client.model.IpMessagingV1Credential;
import org.openapitools.client.model.IpMessagingV1Service;
import org.openapitools.client.model.IpMessagingV1ServiceChannel;
import org.openapitools.client.model.IpMessagingV1ServiceChannelInvite;
import org.openapitools.client.model.IpMessagingV1ServiceChannelMember;
import org.openapitools.client.model.IpMessagingV1ServiceChannelMessage;
import org.openapitools.client.model.IpMessagingV1ServiceRole;
import org.openapitools.client.model.IpMessagingV1ServiceUser;
import org.openapitools.client.model.ListChannelResponse;
import org.openapitools.client.model.ListCredentialResponse;
import org.openapitools.client.model.ListInviteResponse;
import org.openapitools.client.model.ListMemberResponse;
import org.openapitools.client.model.ListMessageResponse;
import org.openapitools.client.model.ListRoleResponse;
import org.openapitools.client.model.ListServiceResponse;
import org.openapitools.client.model.ListUserChannelResponse;
import org.openapitools.client.model.ListUserResponse;
import org.openapitools.client.model.MessageEnumOrderType;
import org.openapitools.client.model.RoleEnumRoleType;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelTest() throws ApiException {
        String serviceSid = null;
        String attributes = null;
        String friendlyName = null;
        ChannelEnumChannelType type = null;
        String uniqueName = null;
        IpMessagingV1ServiceChannel response = api.createChannel(serviceSid, attributes, friendlyName, type, uniqueName);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCredentialTest() throws ApiException {
        CredentialEnumPushService type = null;
        String apiKey = null;
        String certificate = null;
        String friendlyName = null;
        String privateKey = null;
        Boolean sandbox = null;
        String secret = null;
        IpMessagingV1Credential response = api.createCredential(type, apiKey, certificate, friendlyName, privateKey, sandbox, secret);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInviteTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        String identity = null;
        String roleSid = null;
        IpMessagingV1ServiceChannelInvite response = api.createInvite(serviceSid, channelSid, identity, roleSid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMemberTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        String identity = null;
        String roleSid = null;
        IpMessagingV1ServiceChannelMember response = api.createMember(serviceSid, channelSid, identity, roleSid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMessageTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        String body = null;
        String attributes = null;
        String from = null;
        IpMessagingV1ServiceChannelMessage response = api.createMessage(serviceSid, channelSid, body, attributes, from);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRoleTest() throws ApiException {
        String serviceSid = null;
        String friendlyName = null;
        List<String> permission = null;
        RoleEnumRoleType type = null;
        IpMessagingV1ServiceRole response = api.createRole(serviceSid, friendlyName, permission, type);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServiceTest() throws ApiException {
        String friendlyName = null;
        IpMessagingV1Service response = api.createService(friendlyName);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String serviceSid = null;
        String identity = null;
        String attributes = null;
        String friendlyName = null;
        String roleSid = null;
        IpMessagingV1ServiceUser response = api.createUser(serviceSid, identity, attributes, friendlyName, roleSid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelTest() throws ApiException {
        String serviceSid = null;
        String sid = null;
        api.deleteChannel(serviceSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCredentialTest() throws ApiException {
        String sid = null;
        api.deleteCredential(sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInviteTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        String sid = null;
        api.deleteInvite(serviceSid, channelSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMemberTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        String sid = null;
        api.deleteMember(serviceSid, channelSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMessageTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        String sid = null;
        api.deleteMessage(serviceSid, channelSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRoleTest() throws ApiException {
        String serviceSid = null;
        String sid = null;
        api.deleteRole(serviceSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServiceTest() throws ApiException {
        String sid = null;
        api.deleteService(sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String serviceSid = null;
        String sid = null;
        api.deleteUser(serviceSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchChannelTest() throws ApiException {
        String serviceSid = null;
        String sid = null;
        IpMessagingV1ServiceChannel response = api.fetchChannel(serviceSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchCredentialTest() throws ApiException {
        String sid = null;
        IpMessagingV1Credential response = api.fetchCredential(sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchInviteTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        String sid = null;
        IpMessagingV1ServiceChannelInvite response = api.fetchInvite(serviceSid, channelSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchMemberTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        String sid = null;
        IpMessagingV1ServiceChannelMember response = api.fetchMember(serviceSid, channelSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchMessageTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        String sid = null;
        IpMessagingV1ServiceChannelMessage response = api.fetchMessage(serviceSid, channelSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchRoleTest() throws ApiException {
        String serviceSid = null;
        String sid = null;
        IpMessagingV1ServiceRole response = api.fetchRole(serviceSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchServiceTest() throws ApiException {
        String sid = null;
        IpMessagingV1Service response = api.fetchService(sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchUserTest() throws ApiException {
        String serviceSid = null;
        String sid = null;
        IpMessagingV1ServiceUser response = api.fetchUser(serviceSid, sid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelTest() throws ApiException {
        String serviceSid = null;
        List<ChannelEnumChannelType> type = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListChannelResponse response = api.listChannel(serviceSid, type, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCredentialTest() throws ApiException {
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListCredentialResponse response = api.listCredential(pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInviteTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        List<String> identity = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListInviteResponse response = api.listInvite(serviceSid, channelSid, identity, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMemberTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        List<String> identity = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListMemberResponse response = api.listMember(serviceSid, channelSid, identity, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMessageTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        MessageEnumOrderType order = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListMessageResponse response = api.listMessage(serviceSid, channelSid, order, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRoleTest() throws ApiException {
        String serviceSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListRoleResponse response = api.listRole(serviceSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceTest() throws ApiException {
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListServiceResponse response = api.listService(pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserTest() throws ApiException {
        String serviceSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListUserResponse response = api.listUser(serviceSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserChannelTest() throws ApiException {
        String serviceSid = null;
        String userSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListUserChannelResponse response = api.listUserChannel(serviceSid, userSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelTest() throws ApiException {
        String serviceSid = null;
        String sid = null;
        String attributes = null;
        String friendlyName = null;
        String uniqueName = null;
        IpMessagingV1ServiceChannel response = api.updateChannel(serviceSid, sid, attributes, friendlyName, uniqueName);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCredentialTest() throws ApiException {
        String sid = null;
        String apiKey = null;
        String certificate = null;
        String friendlyName = null;
        String privateKey = null;
        Boolean sandbox = null;
        String secret = null;
        IpMessagingV1Credential response = api.updateCredential(sid, apiKey, certificate, friendlyName, privateKey, sandbox, secret);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMemberTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        String sid = null;
        Integer lastConsumedMessageIndex = null;
        String roleSid = null;
        IpMessagingV1ServiceChannelMember response = api.updateMember(serviceSid, channelSid, sid, lastConsumedMessageIndex, roleSid);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMessageTest() throws ApiException {
        String serviceSid = null;
        String channelSid = null;
        String sid = null;
        String attributes = null;
        String body = null;
        IpMessagingV1ServiceChannelMessage response = api.updateMessage(serviceSid, channelSid, sid, attributes, body);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRoleTest() throws ApiException {
        String serviceSid = null;
        String sid = null;
        List<String> permission = null;
        IpMessagingV1ServiceRole response = api.updateRole(serviceSid, sid, permission);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServiceTest() throws ApiException {
        String sid = null;
        Integer consumptionReportInterval = null;
        String defaultChannelCreatorRoleSid = null;
        String defaultChannelRoleSid = null;
        String defaultServiceRoleSid = null;
        String friendlyName = null;
        Integer limitsChannelMembers = null;
        Integer limitsUserChannels = null;
        Boolean notificationsAddedToChannelEnabled = null;
        String notificationsAddedToChannelTemplate = null;
        Boolean notificationsInvitedToChannelEnabled = null;
        String notificationsInvitedToChannelTemplate = null;
        Boolean notificationsNewMessageEnabled = null;
        String notificationsNewMessageTemplate = null;
        Boolean notificationsRemovedFromChannelEnabled = null;
        String notificationsRemovedFromChannelTemplate = null;
        URI postWebhookUrl = null;
        URI preWebhookUrl = null;
        Boolean reachabilityEnabled = null;
        Boolean readStatusEnabled = null;
        Integer typingIndicatorTimeout = null;
        List<String> webhookFilters = null;
        String webhookMethod = null;
        String webhooksOnChannelAddMethod = null;
        URI webhooksOnChannelAddUrl = null;
        String webhooksOnChannelAddedMethod = null;
        URI webhooksOnChannelAddedUrl = null;
        String webhooksOnChannelDestroyMethod = null;
        URI webhooksOnChannelDestroyUrl = null;
        String webhooksOnChannelDestroyedMethod = null;
        URI webhooksOnChannelDestroyedUrl = null;
        String webhooksOnChannelUpdateMethod = null;
        URI webhooksOnChannelUpdateUrl = null;
        String webhooksOnChannelUpdatedMethod = null;
        URI webhooksOnChannelUpdatedUrl = null;
        String webhooksOnMemberAddMethod = null;
        URI webhooksOnMemberAddUrl = null;
        String webhooksOnMemberAddedMethod = null;
        URI webhooksOnMemberAddedUrl = null;
        String webhooksOnMemberRemoveMethod = null;
        URI webhooksOnMemberRemoveUrl = null;
        String webhooksOnMemberRemovedMethod = null;
        URI webhooksOnMemberRemovedUrl = null;
        String webhooksOnMessageRemoveMethod = null;
        URI webhooksOnMessageRemoveUrl = null;
        String webhooksOnMessageRemovedMethod = null;
        URI webhooksOnMessageRemovedUrl = null;
        String webhooksOnMessageSendMethod = null;
        URI webhooksOnMessageSendUrl = null;
        String webhooksOnMessageSentMethod = null;
        URI webhooksOnMessageSentUrl = null;
        String webhooksOnMessageUpdateMethod = null;
        URI webhooksOnMessageUpdateUrl = null;
        String webhooksOnMessageUpdatedMethod = null;
        URI webhooksOnMessageUpdatedUrl = null;
        IpMessagingV1Service response = api.updateService(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, notificationsAddedToChannelEnabled, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelTemplate, notificationsNewMessageEnabled, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelTemplate, postWebhookUrl, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod, webhooksOnChannelAddMethod, webhooksOnChannelAddUrl, webhooksOnChannelAddedMethod, webhooksOnChannelAddedUrl, webhooksOnChannelDestroyMethod, webhooksOnChannelDestroyUrl, webhooksOnChannelDestroyedMethod, webhooksOnChannelDestroyedUrl, webhooksOnChannelUpdateMethod, webhooksOnChannelUpdateUrl, webhooksOnChannelUpdatedMethod, webhooksOnChannelUpdatedUrl, webhooksOnMemberAddMethod, webhooksOnMemberAddUrl, webhooksOnMemberAddedMethod, webhooksOnMemberAddedUrl, webhooksOnMemberRemoveMethod, webhooksOnMemberRemoveUrl, webhooksOnMemberRemovedMethod, webhooksOnMemberRemovedUrl, webhooksOnMessageRemoveMethod, webhooksOnMessageRemoveUrl, webhooksOnMessageRemovedMethod, webhooksOnMessageRemovedUrl, webhooksOnMessageSendMethod, webhooksOnMessageSendUrl, webhooksOnMessageSentMethod, webhooksOnMessageSentUrl, webhooksOnMessageUpdateMethod, webhooksOnMessageUpdateUrl, webhooksOnMessageUpdatedMethod, webhooksOnMessageUpdatedUrl);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        String serviceSid = null;
        String sid = null;
        String attributes = null;
        String friendlyName = null;
        String roleSid = null;
        IpMessagingV1ServiceUser response = api.updateUser(serviceSid, sid, attributes, friendlyName, roleSid);
        // TODO: test validations
    }

}
