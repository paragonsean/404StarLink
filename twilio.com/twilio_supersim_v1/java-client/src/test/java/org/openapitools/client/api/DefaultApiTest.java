/*
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.42.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EsimProfileEnumStatus;
import org.openapitools.client.model.IpCommandEnumDirection;
import org.openapitools.client.model.IpCommandEnumPayloadType;
import org.openapitools.client.model.IpCommandEnumStatus;
import org.openapitools.client.model.ListBillingPeriodResponse;
import org.openapitools.client.model.ListEsimProfileResponse;
import org.openapitools.client.model.ListFleetResponse;
import org.openapitools.client.model.ListIpCommandResponse;
import org.openapitools.client.model.ListNetworkAccessProfileNetworkResponse;
import org.openapitools.client.model.ListNetworkAccessProfileResponse;
import org.openapitools.client.model.ListNetworkResponse;
import org.openapitools.client.model.ListSettingsUpdateResponse;
import org.openapitools.client.model.ListSimIpAddressResponse;
import org.openapitools.client.model.ListSimResponse;
import org.openapitools.client.model.ListSmsCommandResponse;
import org.openapitools.client.model.ListUsageRecordResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SettingsUpdateEnumStatus;
import org.openapitools.client.model.SimEnumStatus;
import org.openapitools.client.model.SimEnumStatusUpdate;
import org.openapitools.client.model.SmsCommandEnumDirection;
import org.openapitools.client.model.SmsCommandEnumStatus;
import org.openapitools.client.model.SupersimV1EsimProfile;
import org.openapitools.client.model.SupersimV1Fleet;
import org.openapitools.client.model.SupersimV1IpCommand;
import org.openapitools.client.model.SupersimV1Network;
import org.openapitools.client.model.SupersimV1NetworkAccessProfile;
import org.openapitools.client.model.SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork;
import org.openapitools.client.model.SupersimV1Sim;
import org.openapitools.client.model.SupersimV1SmsCommand;
import java.net.URI;
import org.openapitools.client.model.UsageRecordEnumGranularity;
import org.openapitools.client.model.UsageRecordEnumGroup;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Order an eSIM Profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEsimProfileTest() throws ApiException {
        String callbackMethod = null;
        String callbackUrl = null;
        String eid = null;
        Boolean generateMatchingId = null;
        SupersimV1EsimProfile response = api.createEsimProfile(callbackMethod, callbackUrl, eid, generateMatchingId);
        // TODO: test validations
    }

    /**
     * Create a Fleet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFleetTest() throws ApiException {
        String networkAccessProfile = null;
        Boolean dataEnabled = null;
        Integer dataLimit = null;
        String ipCommandsMethod = null;
        URI ipCommandsUrl = null;
        Boolean smsCommandsEnabled = null;
        String smsCommandsMethod = null;
        URI smsCommandsUrl = null;
        String uniqueName = null;
        SupersimV1Fleet response = api.createFleet(networkAccessProfile, dataEnabled, dataLimit, ipCommandsMethod, ipCommandsUrl, smsCommandsEnabled, smsCommandsMethod, smsCommandsUrl, uniqueName);
        // TODO: test validations
    }

    /**
     * Send an IP Command to a Super SIM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIpCommandTest() throws ApiException {
        Integer devicePort = null;
        String payload = null;
        String sim = null;
        String callbackMethod = null;
        URI callbackUrl = null;
        IpCommandEnumPayloadType payloadType = null;
        SupersimV1IpCommand response = api.createIpCommand(devicePort, payload, sim, callbackMethod, callbackUrl, payloadType);
        // TODO: test validations
    }

    /**
     * Create a new Network Access Profile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkAccessProfileTest() throws ApiException {
        List<String> networks = null;
        String uniqueName = null;
        SupersimV1NetworkAccessProfile response = api.createNetworkAccessProfile(networks, uniqueName);
        // TODO: test validations
    }

    /**
     * Add a Network resource to the Network Access Profile resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkAccessProfileNetworkTest() throws ApiException {
        String networkAccessProfileSid = null;
        String network = null;
        SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork response = api.createNetworkAccessProfileNetwork(networkAccessProfileSid, network);
        // TODO: test validations
    }

    /**
     * Register a Super SIM to your Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSimTest() throws ApiException {
        String iccid = null;
        String registrationCode = null;
        SupersimV1Sim response = api.createSim(iccid, registrationCode);
        // TODO: test validations
    }

    /**
     * Send SMS Command to a Sim.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSmsCommandTest() throws ApiException {
        String payload = null;
        String sim = null;
        String callbackMethod = null;
        URI callbackUrl = null;
        SupersimV1SmsCommand response = api.createSmsCommand(payload, sim, callbackMethod, callbackUrl);
        // TODO: test validations
    }

    /**
     * Remove a Network resource from the Network Access Profile resource&#39;s.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkAccessProfileNetworkTest() throws ApiException {
        String networkAccessProfileSid = null;
        String sid = null;
        api.deleteNetworkAccessProfileNetwork(networkAccessProfileSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch an eSIM Profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchEsimProfileTest() throws ApiException {
        String sid = null;
        SupersimV1EsimProfile response = api.fetchEsimProfile(sid);
        // TODO: test validations
    }

    /**
     * Fetch a Fleet instance from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchFleetTest() throws ApiException {
        String sid = null;
        SupersimV1Fleet response = api.fetchFleet(sid);
        // TODO: test validations
    }

    /**
     * Fetch IP Command instance from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchIpCommandTest() throws ApiException {
        String sid = null;
        SupersimV1IpCommand response = api.fetchIpCommand(sid);
        // TODO: test validations
    }

    /**
     * Fetch a Network resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchNetworkTest() throws ApiException {
        String sid = null;
        SupersimV1Network response = api.fetchNetwork(sid);
        // TODO: test validations
    }

    /**
     * Fetch a Network Access Profile instance from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchNetworkAccessProfileTest() throws ApiException {
        String sid = null;
        SupersimV1NetworkAccessProfile response = api.fetchNetworkAccessProfile(sid);
        // TODO: test validations
    }

    /**
     * Fetch a Network Access Profile resource&#39;s Network resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchNetworkAccessProfileNetworkTest() throws ApiException {
        String networkAccessProfileSid = null;
        String sid = null;
        SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork response = api.fetchNetworkAccessProfileNetwork(networkAccessProfileSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch a Super SIM instance from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchSimTest() throws ApiException {
        String sid = null;
        SupersimV1Sim response = api.fetchSim(sid);
        // TODO: test validations
    }

    /**
     * Fetch SMS Command instance from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchSmsCommandTest() throws ApiException {
        String sid = null;
        SupersimV1SmsCommand response = api.fetchSmsCommand(sid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of Billing Periods for a Super SIM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBillingPeriodTest() throws ApiException {
        String simSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListBillingPeriodResponse response = api.listBillingPeriod(simSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of eSIM Profiles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEsimProfileTest() throws ApiException {
        String eid = null;
        String simSid = null;
        EsimProfileEnumStatus status = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListEsimProfileResponse response = api.listEsimProfile(eid, simSid, status, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of Fleets from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFleetTest() throws ApiException {
        String networkAccessProfile = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListFleetResponse response = api.listFleet(networkAccessProfile, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of IP Commands from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIpCommandTest() throws ApiException {
        String sim = null;
        String simIccid = null;
        IpCommandEnumStatus status = null;
        IpCommandEnumDirection direction = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListIpCommandResponse response = api.listIpCommand(sim, simIccid, status, direction, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of Network resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkTest() throws ApiException {
        String isoCountry = null;
        String mcc = null;
        String mnc = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListNetworkResponse response = api.listNetwork(isoCountry, mcc, mnc, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of Network Access Profiles from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkAccessProfileTest() throws ApiException {
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListNetworkAccessProfileResponse response = api.listNetworkAccessProfile(pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of Network Access Profile resource&#39;s Network resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkAccessProfileNetworkTest() throws ApiException {
        String networkAccessProfileSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListNetworkAccessProfileNetworkResponse response = api.listNetworkAccessProfileNetwork(networkAccessProfileSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of Settings Updates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSettingsUpdateTest() throws ApiException {
        String sim = null;
        SettingsUpdateEnumStatus status = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListSettingsUpdateResponse response = api.listSettingsUpdate(sim, status, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of Super SIMs from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSimTest() throws ApiException {
        SimEnumStatus status = null;
        String fleet = null;
        String iccid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListSimResponse response = api.listSim(status, fleet, iccid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of IP Addresses for the given Super SIM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSimIpAddressTest() throws ApiException {
        String simSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListSimIpAddressResponse response = api.listSimIpAddress(simSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of SMS Commands from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSmsCommandTest() throws ApiException {
        String sim = null;
        SmsCommandEnumStatus status = null;
        SmsCommandEnumDirection direction = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListSmsCommandResponse response = api.listSmsCommand(sim, status, direction, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * List UsageRecords
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsageRecordTest() throws ApiException {
        String sim = null;
        String fleet = null;
        String network = null;
        String isoCountry = null;
        UsageRecordEnumGroup group = null;
        UsageRecordEnumGranularity granularity = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListUsageRecordResponse response = api.listUsageRecord(sim, fleet, network, isoCountry, group, granularity, startTime, endTime, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the given properties of a Super SIM Fleet instance from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFleetTest() throws ApiException {
        String sid = null;
        Integer dataLimit = null;
        String ipCommandsMethod = null;
        URI ipCommandsUrl = null;
        String networkAccessProfile = null;
        String smsCommandsMethod = null;
        URI smsCommandsUrl = null;
        String uniqueName = null;
        SupersimV1Fleet response = api.updateFleet(sid, dataLimit, ipCommandsMethod, ipCommandsUrl, networkAccessProfile, smsCommandsMethod, smsCommandsUrl, uniqueName);
        // TODO: test validations
    }

    /**
     * Updates the given properties of a Network Access Profile in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkAccessProfileTest() throws ApiException {
        String sid = null;
        String uniqueName = null;
        SupersimV1NetworkAccessProfile response = api.updateNetworkAccessProfile(sid, uniqueName);
        // TODO: test validations
    }

    /**
     * Updates the given properties of a Super SIM instance from your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSimTest() throws ApiException {
        String sid = null;
        String accountSid = null;
        String callbackMethod = null;
        URI callbackUrl = null;
        String fleet = null;
        SimEnumStatusUpdate status = null;
        String uniqueName = null;
        SupersimV1Sim response = api.updateSim(sid, accountSid, callbackMethod, callbackUrl, fleet, status, uniqueName);
        // TODO: test validations
    }

}
