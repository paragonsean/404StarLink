/*
 * Twilio - Supersim
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.42.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EsimProfileEnumStatus;
import org.openapitools.client.model.IpCommandEnumDirection;
import org.openapitools.client.model.IpCommandEnumPayloadType;
import org.openapitools.client.model.IpCommandEnumStatus;
import org.openapitools.client.model.ListBillingPeriodResponse;
import org.openapitools.client.model.ListEsimProfileResponse;
import org.openapitools.client.model.ListFleetResponse;
import org.openapitools.client.model.ListIpCommandResponse;
import org.openapitools.client.model.ListNetworkAccessProfileNetworkResponse;
import org.openapitools.client.model.ListNetworkAccessProfileResponse;
import org.openapitools.client.model.ListNetworkResponse;
import org.openapitools.client.model.ListSettingsUpdateResponse;
import org.openapitools.client.model.ListSimIpAddressResponse;
import org.openapitools.client.model.ListSimResponse;
import org.openapitools.client.model.ListSmsCommandResponse;
import org.openapitools.client.model.ListUsageRecordResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SettingsUpdateEnumStatus;
import org.openapitools.client.model.SimEnumStatus;
import org.openapitools.client.model.SimEnumStatusUpdate;
import org.openapitools.client.model.SmsCommandEnumDirection;
import org.openapitools.client.model.SmsCommandEnumStatus;
import org.openapitools.client.model.SupersimV1EsimProfile;
import org.openapitools.client.model.SupersimV1Fleet;
import org.openapitools.client.model.SupersimV1IpCommand;
import org.openapitools.client.model.SupersimV1Network;
import org.openapitools.client.model.SupersimV1NetworkAccessProfile;
import org.openapitools.client.model.SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork;
import org.openapitools.client.model.SupersimV1Sim;
import org.openapitools.client.model.SupersimV1SmsCommand;
import java.net.URI;
import org.openapitools.client.model.UsageRecordEnumGranularity;
import org.openapitools.client.model.UsageRecordEnumGroup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createEsimProfile
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is POST. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; when the status of the eSIM Profile changes. At this stage of the eSIM Profile pilot, the a request to the URL will only be called when the ESimProfile resource changes from &#x60;reserving&#x60; to &#x60;available&#x60;. (optional)
     * @param eid Identifier of the eUICC that will claim the eSIM Profile. (optional)
     * @param generateMatchingId When set to &#x60;true&#x60;, a value for &#x60;Eid&#x60; does not need to be provided. Instead, when the eSIM profile is reserved, a matching ID will be generated and returned via the &#x60;matching_id&#x60; property. This identifies the specific eSIM profile that can be used by any capable device to claim and download the profile. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEsimProfileCall(String callbackMethod, String callbackUrl, String eid, Boolean generateMatchingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ESimProfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackMethod != null) {
            localVarFormParams.put("CallbackMethod", callbackMethod);
        }

        if (callbackUrl != null) {
            localVarFormParams.put("CallbackUrl", callbackUrl);
        }

        if (eid != null) {
            localVarFormParams.put("Eid", eid);
        }

        if (generateMatchingId != null) {
            localVarFormParams.put("GenerateMatchingId", generateMatchingId);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEsimProfileValidateBeforeCall(String callbackMethod, String callbackUrl, String eid, Boolean generateMatchingId, final ApiCallback _callback) throws ApiException {
        return createEsimProfileCall(callbackMethod, callbackUrl, eid, generateMatchingId, _callback);

    }

    /**
     * 
     * Order an eSIM Profile.
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is POST. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; when the status of the eSIM Profile changes. At this stage of the eSIM Profile pilot, the a request to the URL will only be called when the ESimProfile resource changes from &#x60;reserving&#x60; to &#x60;available&#x60;. (optional)
     * @param eid Identifier of the eUICC that will claim the eSIM Profile. (optional)
     * @param generateMatchingId When set to &#x60;true&#x60;, a value for &#x60;Eid&#x60; does not need to be provided. Instead, when the eSIM profile is reserved, a matching ID will be generated and returned via the &#x60;matching_id&#x60; property. This identifies the specific eSIM profile that can be used by any capable device to claim and download the profile. (optional)
     * @return SupersimV1EsimProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1EsimProfile createEsimProfile(String callbackMethod, String callbackUrl, String eid, Boolean generateMatchingId) throws ApiException {
        ApiResponse<SupersimV1EsimProfile> localVarResp = createEsimProfileWithHttpInfo(callbackMethod, callbackUrl, eid, generateMatchingId);
        return localVarResp.getData();
    }

    /**
     * 
     * Order an eSIM Profile.
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is POST. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; when the status of the eSIM Profile changes. At this stage of the eSIM Profile pilot, the a request to the URL will only be called when the ESimProfile resource changes from &#x60;reserving&#x60; to &#x60;available&#x60;. (optional)
     * @param eid Identifier of the eUICC that will claim the eSIM Profile. (optional)
     * @param generateMatchingId When set to &#x60;true&#x60;, a value for &#x60;Eid&#x60; does not need to be provided. Instead, when the eSIM profile is reserved, a matching ID will be generated and returned via the &#x60;matching_id&#x60; property. This identifies the specific eSIM profile that can be used by any capable device to claim and download the profile. (optional)
     * @return ApiResponse&lt;SupersimV1EsimProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1EsimProfile> createEsimProfileWithHttpInfo(String callbackMethod, String callbackUrl, String eid, Boolean generateMatchingId) throws ApiException {
        okhttp3.Call localVarCall = createEsimProfileValidateBeforeCall(callbackMethod, callbackUrl, eid, generateMatchingId, null);
        Type localVarReturnType = new TypeToken<SupersimV1EsimProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Order an eSIM Profile.
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is POST. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; when the status of the eSIM Profile changes. At this stage of the eSIM Profile pilot, the a request to the URL will only be called when the ESimProfile resource changes from &#x60;reserving&#x60; to &#x60;available&#x60;. (optional)
     * @param eid Identifier of the eUICC that will claim the eSIM Profile. (optional)
     * @param generateMatchingId When set to &#x60;true&#x60;, a value for &#x60;Eid&#x60; does not need to be provided. Instead, when the eSIM profile is reserved, a matching ID will be generated and returned via the &#x60;matching_id&#x60; property. This identifies the specific eSIM profile that can be used by any capable device to claim and download the profile. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEsimProfileAsync(String callbackMethod, String callbackUrl, String eid, Boolean generateMatchingId, final ApiCallback<SupersimV1EsimProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEsimProfileValidateBeforeCall(callbackMethod, callbackUrl, eid, generateMatchingId, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1EsimProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFleet
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (required)
     * @param dataEnabled Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to &#x60;true&#x60;. (optional)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param smsCommandsEnabled Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to &#x60;true&#x60;. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFleetCall(String networkAccessProfile, Boolean dataEnabled, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, Boolean smsCommandsEnabled, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Fleets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dataEnabled != null) {
            localVarFormParams.put("DataEnabled", dataEnabled);
        }

        if (dataLimit != null) {
            localVarFormParams.put("DataLimit", dataLimit);
        }

        if (ipCommandsMethod != null) {
            localVarFormParams.put("IpCommandsMethod", ipCommandsMethod);
        }

        if (ipCommandsUrl != null) {
            localVarFormParams.put("IpCommandsUrl", ipCommandsUrl);
        }

        if (networkAccessProfile != null) {
            localVarFormParams.put("NetworkAccessProfile", networkAccessProfile);
        }

        if (smsCommandsEnabled != null) {
            localVarFormParams.put("SmsCommandsEnabled", smsCommandsEnabled);
        }

        if (smsCommandsMethod != null) {
            localVarFormParams.put("SmsCommandsMethod", smsCommandsMethod);
        }

        if (smsCommandsUrl != null) {
            localVarFormParams.put("SmsCommandsUrl", smsCommandsUrl);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFleetValidateBeforeCall(String networkAccessProfile, Boolean dataEnabled, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, Boolean smsCommandsEnabled, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkAccessProfile' is set
        if (networkAccessProfile == null) {
            throw new ApiException("Missing the required parameter 'networkAccessProfile' when calling createFleet(Async)");
        }

        return createFleetCall(networkAccessProfile, dataEnabled, dataLimit, ipCommandsMethod, ipCommandsUrl, smsCommandsEnabled, smsCommandsMethod, smsCommandsUrl, uniqueName, _callback);

    }

    /**
     * 
     * Create a Fleet
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (required)
     * @param dataEnabled Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to &#x60;true&#x60;. (optional)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param smsCommandsEnabled Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to &#x60;true&#x60;. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @return SupersimV1Fleet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1Fleet createFleet(String networkAccessProfile, Boolean dataEnabled, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, Boolean smsCommandsEnabled, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName) throws ApiException {
        ApiResponse<SupersimV1Fleet> localVarResp = createFleetWithHttpInfo(networkAccessProfile, dataEnabled, dataLimit, ipCommandsMethod, ipCommandsUrl, smsCommandsEnabled, smsCommandsMethod, smsCommandsUrl, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a Fleet
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (required)
     * @param dataEnabled Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to &#x60;true&#x60;. (optional)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param smsCommandsEnabled Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to &#x60;true&#x60;. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @return ApiResponse&lt;SupersimV1Fleet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1Fleet> createFleetWithHttpInfo(String networkAccessProfile, Boolean dataEnabled, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, Boolean smsCommandsEnabled, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = createFleetValidateBeforeCall(networkAccessProfile, dataEnabled, dataLimit, ipCommandsMethod, ipCommandsUrl, smsCommandsEnabled, smsCommandsMethod, smsCommandsUrl, uniqueName, null);
        Type localVarReturnType = new TypeToken<SupersimV1Fleet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a Fleet
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (required)
     * @param dataEnabled Defines whether SIMs in the Fleet are capable of using 2G/3G/4G/LTE/CAT-M data connectivity. Defaults to &#x60;true&#x60;. (optional)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param smsCommandsEnabled Defines whether SIMs in the Fleet are capable of sending and receiving machine-to-machine SMS via Commands. Defaults to &#x60;true&#x60;. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFleetAsync(String networkAccessProfile, Boolean dataEnabled, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, Boolean smsCommandsEnabled, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName, final ApiCallback<SupersimV1Fleet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFleetValidateBeforeCall(networkAccessProfile, dataEnabled, dataLimit, ipCommandsMethod, ipCommandsUrl, smsCommandsEnabled, smsCommandsMethod, smsCommandsUrl, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1Fleet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createIpCommand
     * @param devicePort The device port to which the IP Command will be sent. (required)
     * @param payload The data that will be sent to the device. The payload cannot exceed 1300 bytes. If the PayloadType is set to text, the payload is encoded in UTF-8. If PayloadType is set to binary, the payload is encoded in Base64. (required)
     * @param sim The &#x60;sid&#x60; or &#x60;unique_name&#x60; of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the IP Command to. (required)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60;, and the default is &#x60;POST&#x60;. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after we have sent the IP Command. (optional)
     * @param payloadType  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIpCommandCall(Integer devicePort, String payload, String sim, String callbackMethod, URI callbackUrl, IpCommandEnumPayloadType payloadType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/IpCommands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackMethod != null) {
            localVarFormParams.put("CallbackMethod", callbackMethod);
        }

        if (callbackUrl != null) {
            localVarFormParams.put("CallbackUrl", callbackUrl);
        }

        if (devicePort != null) {
            localVarFormParams.put("DevicePort", devicePort);
        }

        if (payload != null) {
            localVarFormParams.put("Payload", payload);
        }

        if (payloadType != null) {
            localVarFormParams.put("PayloadType", payloadType);
        }

        if (sim != null) {
            localVarFormParams.put("Sim", sim);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIpCommandValidateBeforeCall(Integer devicePort, String payload, String sim, String callbackMethod, URI callbackUrl, IpCommandEnumPayloadType payloadType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'devicePort' is set
        if (devicePort == null) {
            throw new ApiException("Missing the required parameter 'devicePort' when calling createIpCommand(Async)");
        }

        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling createIpCommand(Async)");
        }

        // verify the required parameter 'sim' is set
        if (sim == null) {
            throw new ApiException("Missing the required parameter 'sim' when calling createIpCommand(Async)");
        }

        return createIpCommandCall(devicePort, payload, sim, callbackMethod, callbackUrl, payloadType, _callback);

    }

    /**
     * 
     * Send an IP Command to a Super SIM.
     * @param devicePort The device port to which the IP Command will be sent. (required)
     * @param payload The data that will be sent to the device. The payload cannot exceed 1300 bytes. If the PayloadType is set to text, the payload is encoded in UTF-8. If PayloadType is set to binary, the payload is encoded in Base64. (required)
     * @param sim The &#x60;sid&#x60; or &#x60;unique_name&#x60; of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the IP Command to. (required)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60;, and the default is &#x60;POST&#x60;. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after we have sent the IP Command. (optional)
     * @param payloadType  (optional)
     * @return SupersimV1IpCommand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1IpCommand createIpCommand(Integer devicePort, String payload, String sim, String callbackMethod, URI callbackUrl, IpCommandEnumPayloadType payloadType) throws ApiException {
        ApiResponse<SupersimV1IpCommand> localVarResp = createIpCommandWithHttpInfo(devicePort, payload, sim, callbackMethod, callbackUrl, payloadType);
        return localVarResp.getData();
    }

    /**
     * 
     * Send an IP Command to a Super SIM.
     * @param devicePort The device port to which the IP Command will be sent. (required)
     * @param payload The data that will be sent to the device. The payload cannot exceed 1300 bytes. If the PayloadType is set to text, the payload is encoded in UTF-8. If PayloadType is set to binary, the payload is encoded in Base64. (required)
     * @param sim The &#x60;sid&#x60; or &#x60;unique_name&#x60; of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the IP Command to. (required)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60;, and the default is &#x60;POST&#x60;. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after we have sent the IP Command. (optional)
     * @param payloadType  (optional)
     * @return ApiResponse&lt;SupersimV1IpCommand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1IpCommand> createIpCommandWithHttpInfo(Integer devicePort, String payload, String sim, String callbackMethod, URI callbackUrl, IpCommandEnumPayloadType payloadType) throws ApiException {
        okhttp3.Call localVarCall = createIpCommandValidateBeforeCall(devicePort, payload, sim, callbackMethod, callbackUrl, payloadType, null);
        Type localVarReturnType = new TypeToken<SupersimV1IpCommand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send an IP Command to a Super SIM.
     * @param devicePort The device port to which the IP Command will be sent. (required)
     * @param payload The data that will be sent to the device. The payload cannot exceed 1300 bytes. If the PayloadType is set to text, the payload is encoded in UTF-8. If PayloadType is set to binary, the payload is encoded in Base64. (required)
     * @param sim The &#x60;sid&#x60; or &#x60;unique_name&#x60; of the [Super SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the IP Command to. (required)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be &#x60;GET&#x60; or &#x60;POST&#x60;, and the default is &#x60;POST&#x60;. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after we have sent the IP Command. (optional)
     * @param payloadType  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIpCommandAsync(Integer devicePort, String payload, String sim, String callbackMethod, URI callbackUrl, IpCommandEnumPayloadType payloadType, final ApiCallback<SupersimV1IpCommand> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIpCommandValidateBeforeCall(devicePort, payload, sim, callbackMethod, callbackUrl, payloadType, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1IpCommand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkAccessProfile
     * @param networks List of Network SIDs that this Network Access Profile will allow connections to. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkAccessProfileCall(List<String> networks, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/NetworkAccessProfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (networks != null) {
            localVarFormParams.put("Networks", networks);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkAccessProfileValidateBeforeCall(List<String> networks, String uniqueName, final ApiCallback _callback) throws ApiException {
        return createNetworkAccessProfileCall(networks, uniqueName, _callback);

    }

    /**
     * 
     * Create a new Network Access Profile
     * @param networks List of Network SIDs that this Network Access Profile will allow connections to. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @return SupersimV1NetworkAccessProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1NetworkAccessProfile createNetworkAccessProfile(List<String> networks, String uniqueName) throws ApiException {
        ApiResponse<SupersimV1NetworkAccessProfile> localVarResp = createNetworkAccessProfileWithHttpInfo(networks, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Network Access Profile
     * @param networks List of Network SIDs that this Network Access Profile will allow connections to. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @return ApiResponse&lt;SupersimV1NetworkAccessProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1NetworkAccessProfile> createNetworkAccessProfileWithHttpInfo(List<String> networks, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = createNetworkAccessProfileValidateBeforeCall(networks, uniqueName, null);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Network Access Profile
     * @param networks List of Network SIDs that this Network Access Profile will allow connections to. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkAccessProfileAsync(List<String> networks, String uniqueName, final ApiCallback<SupersimV1NetworkAccessProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkAccessProfileValidateBeforeCall(networks, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNetworkAccessProfileNetwork
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param network The SID of the Network resource to be added to the Network Access Profile resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkAccessProfileNetworkCall(String networkAccessProfileSid, String network, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks"
            .replace("{" + "NetworkAccessProfileSid" + "}", localVarApiClient.escapeString(networkAccessProfileSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (network != null) {
            localVarFormParams.put("Network", network);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNetworkAccessProfileNetworkValidateBeforeCall(String networkAccessProfileSid, String network, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkAccessProfileSid' is set
        if (networkAccessProfileSid == null) {
            throw new ApiException("Missing the required parameter 'networkAccessProfileSid' when calling createNetworkAccessProfileNetwork(Async)");
        }

        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling createNetworkAccessProfileNetwork(Async)");
        }

        return createNetworkAccessProfileNetworkCall(networkAccessProfileSid, network, _callback);

    }

    /**
     * 
     * Add a Network resource to the Network Access Profile resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param network The SID of the Network resource to be added to the Network Access Profile resource. (required)
     * @return SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork createNetworkAccessProfileNetwork(String networkAccessProfileSid, String network) throws ApiException {
        ApiResponse<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork> localVarResp = createNetworkAccessProfileNetworkWithHttpInfo(networkAccessProfileSid, network);
        return localVarResp.getData();
    }

    /**
     * 
     * Add a Network resource to the Network Access Profile resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param network The SID of the Network resource to be added to the Network Access Profile resource. (required)
     * @return ApiResponse&lt;SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork> createNetworkAccessProfileNetworkWithHttpInfo(String networkAccessProfileSid, String network) throws ApiException {
        okhttp3.Call localVarCall = createNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, network, null);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add a Network resource to the Network Access Profile resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param network The SID of the Network resource to be added to the Network Access Profile resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNetworkAccessProfileNetworkAsync(String networkAccessProfileSid, String network, final ApiCallback<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, network, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSim
     * @param iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) of the Super SIM to be added to your Account. (required)
     * @param registrationCode The 10-digit code required to claim the Super SIM for your Account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSimCall(String iccid, String registrationCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Sims";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iccid != null) {
            localVarFormParams.put("Iccid", iccid);
        }

        if (registrationCode != null) {
            localVarFormParams.put("RegistrationCode", registrationCode);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSimValidateBeforeCall(String iccid, String registrationCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iccid' is set
        if (iccid == null) {
            throw new ApiException("Missing the required parameter 'iccid' when calling createSim(Async)");
        }

        // verify the required parameter 'registrationCode' is set
        if (registrationCode == null) {
            throw new ApiException("Missing the required parameter 'registrationCode' when calling createSim(Async)");
        }

        return createSimCall(iccid, registrationCode, _callback);

    }

    /**
     * 
     * Register a Super SIM to your Account
     * @param iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) of the Super SIM to be added to your Account. (required)
     * @param registrationCode The 10-digit code required to claim the Super SIM for your Account. (required)
     * @return SupersimV1Sim
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1Sim createSim(String iccid, String registrationCode) throws ApiException {
        ApiResponse<SupersimV1Sim> localVarResp = createSimWithHttpInfo(iccid, registrationCode);
        return localVarResp.getData();
    }

    /**
     * 
     * Register a Super SIM to your Account
     * @param iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) of the Super SIM to be added to your Account. (required)
     * @param registrationCode The 10-digit code required to claim the Super SIM for your Account. (required)
     * @return ApiResponse&lt;SupersimV1Sim&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1Sim> createSimWithHttpInfo(String iccid, String registrationCode) throws ApiException {
        okhttp3.Call localVarCall = createSimValidateBeforeCall(iccid, registrationCode, null);
        Type localVarReturnType = new TypeToken<SupersimV1Sim>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Register a Super SIM to your Account
     * @param iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) of the Super SIM to be added to your Account. (required)
     * @param registrationCode The 10-digit code required to claim the Super SIM for your Account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSimAsync(String iccid, String registrationCode, final ApiCallback<SupersimV1Sim> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSimValidateBeforeCall(iccid, registrationCode, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1Sim>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSmsCommand
     * @param payload The message body of the SMS Command. (required)
     * @param sim The &#x60;sid&#x60; or &#x60;unique_name&#x60; of the [SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the SMS Command to. (required)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is POST. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after we have sent the command. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSmsCommandCall(String payload, String sim, String callbackMethod, URI callbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SmsCommands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (callbackMethod != null) {
            localVarFormParams.put("CallbackMethod", callbackMethod);
        }

        if (callbackUrl != null) {
            localVarFormParams.put("CallbackUrl", callbackUrl);
        }

        if (payload != null) {
            localVarFormParams.put("Payload", payload);
        }

        if (sim != null) {
            localVarFormParams.put("Sim", sim);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSmsCommandValidateBeforeCall(String payload, String sim, String callbackMethod, URI callbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payload' is set
        if (payload == null) {
            throw new ApiException("Missing the required parameter 'payload' when calling createSmsCommand(Async)");
        }

        // verify the required parameter 'sim' is set
        if (sim == null) {
            throw new ApiException("Missing the required parameter 'sim' when calling createSmsCommand(Async)");
        }

        return createSmsCommandCall(payload, sim, callbackMethod, callbackUrl, _callback);

    }

    /**
     * 
     * Send SMS Command to a Sim.
     * @param payload The message body of the SMS Command. (required)
     * @param sim The &#x60;sid&#x60; or &#x60;unique_name&#x60; of the [SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the SMS Command to. (required)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is POST. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after we have sent the command. (optional)
     * @return SupersimV1SmsCommand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1SmsCommand createSmsCommand(String payload, String sim, String callbackMethod, URI callbackUrl) throws ApiException {
        ApiResponse<SupersimV1SmsCommand> localVarResp = createSmsCommandWithHttpInfo(payload, sim, callbackMethod, callbackUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Send SMS Command to a Sim.
     * @param payload The message body of the SMS Command. (required)
     * @param sim The &#x60;sid&#x60; or &#x60;unique_name&#x60; of the [SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the SMS Command to. (required)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is POST. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after we have sent the command. (optional)
     * @return ApiResponse&lt;SupersimV1SmsCommand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1SmsCommand> createSmsCommandWithHttpInfo(String payload, String sim, String callbackMethod, URI callbackUrl) throws ApiException {
        okhttp3.Call localVarCall = createSmsCommandValidateBeforeCall(payload, sim, callbackMethod, callbackUrl, null);
        Type localVarReturnType = new TypeToken<SupersimV1SmsCommand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Send SMS Command to a Sim.
     * @param payload The message body of the SMS Command. (required)
     * @param sim The &#x60;sid&#x60; or &#x60;unique_name&#x60; of the [SIM](https://www.twilio.com/docs/iot/supersim/api/sim-resource) to send the SMS Command to. (required)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is POST. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after we have sent the command. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSmsCommandAsync(String payload, String sim, String callbackMethod, URI callbackUrl, final ApiCallback<SupersimV1SmsCommand> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSmsCommandValidateBeforeCall(payload, sim, callbackMethod, callbackUrl, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1SmsCommand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteNetworkAccessProfileNetwork
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to be removed from the Network Access Profile resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkAccessProfileNetworkCall(String networkAccessProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks/{Sid}"
            .replace("{" + "NetworkAccessProfileSid" + "}", localVarApiClient.escapeString(networkAccessProfileSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworkAccessProfileNetworkValidateBeforeCall(String networkAccessProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkAccessProfileSid' is set
        if (networkAccessProfileSid == null) {
            throw new ApiException("Missing the required parameter 'networkAccessProfileSid' when calling deleteNetworkAccessProfileNetwork(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteNetworkAccessProfileNetwork(Async)");
        }

        return deleteNetworkAccessProfileNetworkCall(networkAccessProfileSid, sid, _callback);

    }

    /**
     * 
     * Remove a Network resource from the Network Access Profile resource&#39;s.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to be removed from the Network Access Profile resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteNetworkAccessProfileNetwork(String networkAccessProfileSid, String sid) throws ApiException {
        deleteNetworkAccessProfileNetworkWithHttpInfo(networkAccessProfileSid, sid);
    }

    /**
     * 
     * Remove a Network resource from the Network Access Profile resource&#39;s.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to be removed from the Network Access Profile resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteNetworkAccessProfileNetworkWithHttpInfo(String networkAccessProfileSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a Network resource from the Network Access Profile resource&#39;s.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to be removed from the Network Access Profile resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworkAccessProfileNetworkAsync(String networkAccessProfileSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchEsimProfile
     * @param sid The SID of the eSIM Profile resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEsimProfileCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ESimProfiles/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchEsimProfileValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchEsimProfile(Async)");
        }

        return fetchEsimProfileCall(sid, _callback);

    }

    /**
     * 
     * Fetch an eSIM Profile.
     * @param sid The SID of the eSIM Profile resource to fetch. (required)
     * @return SupersimV1EsimProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1EsimProfile fetchEsimProfile(String sid) throws ApiException {
        ApiResponse<SupersimV1EsimProfile> localVarResp = fetchEsimProfileWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch an eSIM Profile.
     * @param sid The SID of the eSIM Profile resource to fetch. (required)
     * @return ApiResponse&lt;SupersimV1EsimProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1EsimProfile> fetchEsimProfileWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchEsimProfileValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<SupersimV1EsimProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch an eSIM Profile.
     * @param sid The SID of the eSIM Profile resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEsimProfileAsync(String sid, final ApiCallback<SupersimV1EsimProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchEsimProfileValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1EsimProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchFleet
     * @param sid The SID of the Fleet resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchFleetCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Fleets/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchFleetValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchFleet(Async)");
        }

        return fetchFleetCall(sid, _callback);

    }

    /**
     * 
     * Fetch a Fleet instance from your account.
     * @param sid The SID of the Fleet resource to fetch. (required)
     * @return SupersimV1Fleet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1Fleet fetchFleet(String sid) throws ApiException {
        ApiResponse<SupersimV1Fleet> localVarResp = fetchFleetWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a Fleet instance from your account.
     * @param sid The SID of the Fleet resource to fetch. (required)
     * @return ApiResponse&lt;SupersimV1Fleet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1Fleet> fetchFleetWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchFleetValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<SupersimV1Fleet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a Fleet instance from your account.
     * @param sid The SID of the Fleet resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchFleetAsync(String sid, final ApiCallback<SupersimV1Fleet> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchFleetValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1Fleet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchIpCommand
     * @param sid The SID of the IP Command resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchIpCommandCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/IpCommands/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchIpCommandValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchIpCommand(Async)");
        }

        return fetchIpCommandCall(sid, _callback);

    }

    /**
     * 
     * Fetch IP Command instance from your account.
     * @param sid The SID of the IP Command resource to fetch. (required)
     * @return SupersimV1IpCommand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1IpCommand fetchIpCommand(String sid) throws ApiException {
        ApiResponse<SupersimV1IpCommand> localVarResp = fetchIpCommandWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch IP Command instance from your account.
     * @param sid The SID of the IP Command resource to fetch. (required)
     * @return ApiResponse&lt;SupersimV1IpCommand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1IpCommand> fetchIpCommandWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchIpCommandValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<SupersimV1IpCommand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch IP Command instance from your account.
     * @param sid The SID of the IP Command resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchIpCommandAsync(String sid, final ApiCallback<SupersimV1IpCommand> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchIpCommandValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1IpCommand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchNetwork
     * @param sid The SID of the Network resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchNetworkCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Networks/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchNetworkValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchNetwork(Async)");
        }

        return fetchNetworkCall(sid, _callback);

    }

    /**
     * 
     * Fetch a Network resource.
     * @param sid The SID of the Network resource to fetch. (required)
     * @return SupersimV1Network
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1Network fetchNetwork(String sid) throws ApiException {
        ApiResponse<SupersimV1Network> localVarResp = fetchNetworkWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a Network resource.
     * @param sid The SID of the Network resource to fetch. (required)
     * @return ApiResponse&lt;SupersimV1Network&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1Network> fetchNetworkWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchNetworkValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<SupersimV1Network>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a Network resource.
     * @param sid The SID of the Network resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchNetworkAsync(String sid, final ApiCallback<SupersimV1Network> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchNetworkValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1Network>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchNetworkAccessProfile
     * @param sid The SID of the Network Access Profile resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchNetworkAccessProfileCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/NetworkAccessProfiles/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchNetworkAccessProfileValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchNetworkAccessProfile(Async)");
        }

        return fetchNetworkAccessProfileCall(sid, _callback);

    }

    /**
     * 
     * Fetch a Network Access Profile instance from your account.
     * @param sid The SID of the Network Access Profile resource to fetch. (required)
     * @return SupersimV1NetworkAccessProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1NetworkAccessProfile fetchNetworkAccessProfile(String sid) throws ApiException {
        ApiResponse<SupersimV1NetworkAccessProfile> localVarResp = fetchNetworkAccessProfileWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a Network Access Profile instance from your account.
     * @param sid The SID of the Network Access Profile resource to fetch. (required)
     * @return ApiResponse&lt;SupersimV1NetworkAccessProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1NetworkAccessProfile> fetchNetworkAccessProfileWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchNetworkAccessProfileValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a Network Access Profile instance from your account.
     * @param sid The SID of the Network Access Profile resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchNetworkAccessProfileAsync(String sid, final ApiCallback<SupersimV1NetworkAccessProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchNetworkAccessProfileValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchNetworkAccessProfileNetwork
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchNetworkAccessProfileNetworkCall(String networkAccessProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks/{Sid}"
            .replace("{" + "NetworkAccessProfileSid" + "}", localVarApiClient.escapeString(networkAccessProfileSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchNetworkAccessProfileNetworkValidateBeforeCall(String networkAccessProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkAccessProfileSid' is set
        if (networkAccessProfileSid == null) {
            throw new ApiException("Missing the required parameter 'networkAccessProfileSid' when calling fetchNetworkAccessProfileNetwork(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchNetworkAccessProfileNetwork(Async)");
        }

        return fetchNetworkAccessProfileNetworkCall(networkAccessProfileSid, sid, _callback);

    }

    /**
     * 
     * Fetch a Network Access Profile resource&#39;s Network resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to fetch. (required)
     * @return SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork fetchNetworkAccessProfileNetwork(String networkAccessProfileSid, String sid) throws ApiException {
        ApiResponse<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork> localVarResp = fetchNetworkAccessProfileNetworkWithHttpInfo(networkAccessProfileSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a Network Access Profile resource&#39;s Network resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to fetch. (required)
     * @return ApiResponse&lt;SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork> fetchNetworkAccessProfileNetworkWithHttpInfo(String networkAccessProfileSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, sid, null);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a Network Access Profile resource&#39;s Network resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param sid The SID of the Network resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchNetworkAccessProfileNetworkAsync(String networkAccessProfileSid, String sid, final ApiCallback<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, sid, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfileNetworkAccessProfileNetwork>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSim
     * @param sid The SID of the Sim resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSimCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Sims/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSimValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchSim(Async)");
        }

        return fetchSimCall(sid, _callback);

    }

    /**
     * 
     * Fetch a Super SIM instance from your account.
     * @param sid The SID of the Sim resource to fetch. (required)
     * @return SupersimV1Sim
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1Sim fetchSim(String sid) throws ApiException {
        ApiResponse<SupersimV1Sim> localVarResp = fetchSimWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a Super SIM instance from your account.
     * @param sid The SID of the Sim resource to fetch. (required)
     * @return ApiResponse&lt;SupersimV1Sim&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1Sim> fetchSimWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchSimValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<SupersimV1Sim>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a Super SIM instance from your account.
     * @param sid The SID of the Sim resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSimAsync(String sid, final ApiCallback<SupersimV1Sim> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSimValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1Sim>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSmsCommand
     * @param sid The SID of the SMS Command resource to fetch. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSmsCommandCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SmsCommands/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSmsCommandValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchSmsCommand(Async)");
        }

        return fetchSmsCommandCall(sid, _callback);

    }

    /**
     * 
     * Fetch SMS Command instance from your account.
     * @param sid The SID of the SMS Command resource to fetch. (required)
     * @return SupersimV1SmsCommand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1SmsCommand fetchSmsCommand(String sid) throws ApiException {
        ApiResponse<SupersimV1SmsCommand> localVarResp = fetchSmsCommandWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch SMS Command instance from your account.
     * @param sid The SID of the SMS Command resource to fetch. (required)
     * @return ApiResponse&lt;SupersimV1SmsCommand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1SmsCommand> fetchSmsCommandWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchSmsCommandValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<SupersimV1SmsCommand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch SMS Command instance from your account.
     * @param sid The SID of the SMS Command resource to fetch. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSmsCommandAsync(String sid, final ApiCallback<SupersimV1SmsCommand> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSmsCommandValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1SmsCommand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBillingPeriod
     * @param simSid The SID of the Super SIM to list Billing Periods for. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBillingPeriodCall(String simSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Sims/{SimSid}/BillingPeriods"
            .replace("{" + "SimSid" + "}", localVarApiClient.escapeString(simSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBillingPeriodValidateBeforeCall(String simSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simSid' is set
        if (simSid == null) {
            throw new ApiException("Missing the required parameter 'simSid' when calling listBillingPeriod(Async)");
        }

        return listBillingPeriodCall(simSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Billing Periods for a Super SIM.
     * @param simSid The SID of the Super SIM to list Billing Periods for. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListBillingPeriodResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListBillingPeriodResponse listBillingPeriod(String simSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListBillingPeriodResponse> localVarResp = listBillingPeriodWithHttpInfo(simSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Billing Periods for a Super SIM.
     * @param simSid The SID of the Super SIM to list Billing Periods for. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListBillingPeriodResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBillingPeriodResponse> listBillingPeriodWithHttpInfo(String simSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listBillingPeriodValidateBeforeCall(simSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListBillingPeriodResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Billing Periods for a Super SIM.
     * @param simSid The SID of the Super SIM to list Billing Periods for. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBillingPeriodAsync(String simSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListBillingPeriodResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBillingPeriodValidateBeforeCall(simSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListBillingPeriodResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEsimProfile
     * @param eid List the eSIM Profiles that have been associated with an EId. (optional)
     * @param simSid Find the eSIM Profile resource related to a [Sim](https://www.twilio.com/docs/wireless/api/sim-resource) resource by providing the SIM SID. Will always return an array with either 1 or 0 records. (optional)
     * @param status List the eSIM Profiles that are in a given status. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEsimProfileCall(String eid, String simSid, EsimProfileEnumStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/ESimProfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Eid", eid));
        }

        if (simSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SimSid", simSid));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEsimProfileValidateBeforeCall(String eid, String simSid, EsimProfileEnumStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listEsimProfileCall(eid, simSid, status, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of eSIM Profiles.
     * @param eid List the eSIM Profiles that have been associated with an EId. (optional)
     * @param simSid Find the eSIM Profile resource related to a [Sim](https://www.twilio.com/docs/wireless/api/sim-resource) resource by providing the SIM SID. Will always return an array with either 1 or 0 records. (optional)
     * @param status List the eSIM Profiles that are in a given status. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListEsimProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListEsimProfileResponse listEsimProfile(String eid, String simSid, EsimProfileEnumStatus status, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListEsimProfileResponse> localVarResp = listEsimProfileWithHttpInfo(eid, simSid, status, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of eSIM Profiles.
     * @param eid List the eSIM Profiles that have been associated with an EId. (optional)
     * @param simSid Find the eSIM Profile resource related to a [Sim](https://www.twilio.com/docs/wireless/api/sim-resource) resource by providing the SIM SID. Will always return an array with either 1 or 0 records. (optional)
     * @param status List the eSIM Profiles that are in a given status. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListEsimProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEsimProfileResponse> listEsimProfileWithHttpInfo(String eid, String simSid, EsimProfileEnumStatus status, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listEsimProfileValidateBeforeCall(eid, simSid, status, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListEsimProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of eSIM Profiles.
     * @param eid List the eSIM Profiles that have been associated with an EId. (optional)
     * @param simSid Find the eSIM Profile resource related to a [Sim](https://www.twilio.com/docs/wireless/api/sim-resource) resource by providing the SIM SID. Will always return an array with either 1 or 0 records. (optional)
     * @param status List the eSIM Profiles that are in a given status. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEsimProfileAsync(String eid, String simSid, EsimProfileEnumStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListEsimProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEsimProfileValidateBeforeCall(eid, simSid, status, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListEsimProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFleet
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that controls which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFleetCall(String networkAccessProfile, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Fleets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (networkAccessProfile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NetworkAccessProfile", networkAccessProfile));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFleetValidateBeforeCall(String networkAccessProfile, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listFleetCall(networkAccessProfile, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Fleets from your account.
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that controls which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListFleetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListFleetResponse listFleet(String networkAccessProfile, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListFleetResponse> localVarResp = listFleetWithHttpInfo(networkAccessProfile, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Fleets from your account.
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that controls which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListFleetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFleetResponse> listFleetWithHttpInfo(String networkAccessProfile, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listFleetValidateBeforeCall(networkAccessProfile, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListFleetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Fleets from your account.
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that controls which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFleetAsync(String networkAccessProfile, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListFleetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFleetValidateBeforeCall(networkAccessProfile, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListFleetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIpCommand
     * @param sim The SID or unique name of the Sim resource that IP Command was sent to or from. (optional)
     * @param simIccid The ICCID of the Sim resource that IP Command was sent to or from. (optional)
     * @param status The status of the IP Command. Can be: &#x60;queued&#x60;, &#x60;sent&#x60;, &#x60;received&#x60; or &#x60;failed&#x60;. See the [IP Command Status Values](https://www.twilio.com/docs/wireless/api/ipcommand-resource#status-values) for a description of each. (optional)
     * @param direction The direction of the IP Command. Can be &#x60;to_sim&#x60; or &#x60;from_sim&#x60;. The value of &#x60;to_sim&#x60; is synonymous with the term &#x60;mobile terminated&#x60;, and &#x60;from_sim&#x60; is synonymous with the term &#x60;mobile originated&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIpCommandCall(String sim, String simIccid, IpCommandEnumStatus status, IpCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/IpCommands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sim", sim));
        }

        if (simIccid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SimIccid", simIccid));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Direction", direction));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIpCommandValidateBeforeCall(String sim, String simIccid, IpCommandEnumStatus status, IpCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listIpCommandCall(sim, simIccid, status, direction, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of IP Commands from your account.
     * @param sim The SID or unique name of the Sim resource that IP Command was sent to or from. (optional)
     * @param simIccid The ICCID of the Sim resource that IP Command was sent to or from. (optional)
     * @param status The status of the IP Command. Can be: &#x60;queued&#x60;, &#x60;sent&#x60;, &#x60;received&#x60; or &#x60;failed&#x60;. See the [IP Command Status Values](https://www.twilio.com/docs/wireless/api/ipcommand-resource#status-values) for a description of each. (optional)
     * @param direction The direction of the IP Command. Can be &#x60;to_sim&#x60; or &#x60;from_sim&#x60;. The value of &#x60;to_sim&#x60; is synonymous with the term &#x60;mobile terminated&#x60;, and &#x60;from_sim&#x60; is synonymous with the term &#x60;mobile originated&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListIpCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListIpCommandResponse listIpCommand(String sim, String simIccid, IpCommandEnumStatus status, IpCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListIpCommandResponse> localVarResp = listIpCommandWithHttpInfo(sim, simIccid, status, direction, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of IP Commands from your account.
     * @param sim The SID or unique name of the Sim resource that IP Command was sent to or from. (optional)
     * @param simIccid The ICCID of the Sim resource that IP Command was sent to or from. (optional)
     * @param status The status of the IP Command. Can be: &#x60;queued&#x60;, &#x60;sent&#x60;, &#x60;received&#x60; or &#x60;failed&#x60;. See the [IP Command Status Values](https://www.twilio.com/docs/wireless/api/ipcommand-resource#status-values) for a description of each. (optional)
     * @param direction The direction of the IP Command. Can be &#x60;to_sim&#x60; or &#x60;from_sim&#x60;. The value of &#x60;to_sim&#x60; is synonymous with the term &#x60;mobile terminated&#x60;, and &#x60;from_sim&#x60; is synonymous with the term &#x60;mobile originated&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListIpCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListIpCommandResponse> listIpCommandWithHttpInfo(String sim, String simIccid, IpCommandEnumStatus status, IpCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listIpCommandValidateBeforeCall(sim, simIccid, status, direction, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListIpCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of IP Commands from your account.
     * @param sim The SID or unique name of the Sim resource that IP Command was sent to or from. (optional)
     * @param simIccid The ICCID of the Sim resource that IP Command was sent to or from. (optional)
     * @param status The status of the IP Command. Can be: &#x60;queued&#x60;, &#x60;sent&#x60;, &#x60;received&#x60; or &#x60;failed&#x60;. See the [IP Command Status Values](https://www.twilio.com/docs/wireless/api/ipcommand-resource#status-values) for a description of each. (optional)
     * @param direction The direction of the IP Command. Can be &#x60;to_sim&#x60; or &#x60;from_sim&#x60;. The value of &#x60;to_sim&#x60; is synonymous with the term &#x60;mobile terminated&#x60;, and &#x60;from_sim&#x60; is synonymous with the term &#x60;mobile originated&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIpCommandAsync(String sim, String simIccid, IpCommandEnumStatus status, IpCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListIpCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIpCommandValidateBeforeCall(sim, simIccid, status, direction, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListIpCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetwork
     * @param isoCountry The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Network resources to read. (optional)
     * @param mcc The &#39;mobile country code&#39; of a country. Network resources with this &#x60;mcc&#x60; in their &#x60;identifiers&#x60; will be read. (optional)
     * @param mnc The &#39;mobile network code&#39; of a mobile operator network. Network resources with this &#x60;mnc&#x60; in their &#x60;identifiers&#x60; will be read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkCall(String isoCountry, String mcc, String mnc, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Networks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isoCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsoCountry", isoCountry));
        }

        if (mcc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Mcc", mcc));
        }

        if (mnc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Mnc", mnc));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkValidateBeforeCall(String isoCountry, String mcc, String mnc, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listNetworkCall(isoCountry, mcc, mnc, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Network resources.
     * @param isoCountry The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Network resources to read. (optional)
     * @param mcc The &#39;mobile country code&#39; of a country. Network resources with this &#x60;mcc&#x60; in their &#x60;identifiers&#x60; will be read. (optional)
     * @param mnc The &#39;mobile network code&#39; of a mobile operator network. Network resources with this &#x60;mnc&#x60; in their &#x60;identifiers&#x60; will be read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListNetworkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListNetworkResponse listNetwork(String isoCountry, String mcc, String mnc, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListNetworkResponse> localVarResp = listNetworkWithHttpInfo(isoCountry, mcc, mnc, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Network resources.
     * @param isoCountry The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Network resources to read. (optional)
     * @param mcc The &#39;mobile country code&#39; of a country. Network resources with this &#x60;mcc&#x60; in their &#x60;identifiers&#x60; will be read. (optional)
     * @param mnc The &#39;mobile network code&#39; of a mobile operator network. Network resources with this &#x60;mnc&#x60; in their &#x60;identifiers&#x60; will be read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListNetworkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListNetworkResponse> listNetworkWithHttpInfo(String isoCountry, String mcc, String mnc, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listNetworkValidateBeforeCall(isoCountry, mcc, mnc, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListNetworkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Network resources.
     * @param isoCountry The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) of the Network resources to read. (optional)
     * @param mcc The &#39;mobile country code&#39; of a country. Network resources with this &#x60;mcc&#x60; in their &#x60;identifiers&#x60; will be read. (optional)
     * @param mnc The &#39;mobile network code&#39; of a mobile operator network. Network resources with this &#x60;mnc&#x60; in their &#x60;identifiers&#x60; will be read. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkAsync(String isoCountry, String mcc, String mnc, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListNetworkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkValidateBeforeCall(isoCountry, mcc, mnc, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListNetworkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetworkAccessProfile
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkAccessProfileCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/NetworkAccessProfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkAccessProfileValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listNetworkAccessProfileCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Network Access Profiles from your account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListNetworkAccessProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListNetworkAccessProfileResponse listNetworkAccessProfile(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListNetworkAccessProfileResponse> localVarResp = listNetworkAccessProfileWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Network Access Profiles from your account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListNetworkAccessProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListNetworkAccessProfileResponse> listNetworkAccessProfileWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listNetworkAccessProfileValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListNetworkAccessProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Network Access Profiles from your account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkAccessProfileAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListNetworkAccessProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkAccessProfileValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListNetworkAccessProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listNetworkAccessProfileNetwork
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkAccessProfileNetworkCall(String networkAccessProfileSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/NetworkAccessProfiles/{NetworkAccessProfileSid}/Networks"
            .replace("{" + "NetworkAccessProfileSid" + "}", localVarApiClient.escapeString(networkAccessProfileSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listNetworkAccessProfileNetworkValidateBeforeCall(String networkAccessProfileSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'networkAccessProfileSid' is set
        if (networkAccessProfileSid == null) {
            throw new ApiException("Missing the required parameter 'networkAccessProfileSid' when calling listNetworkAccessProfileNetwork(Async)");
        }

        return listNetworkAccessProfileNetworkCall(networkAccessProfileSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Network Access Profile resource&#39;s Network resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListNetworkAccessProfileNetworkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListNetworkAccessProfileNetworkResponse listNetworkAccessProfileNetwork(String networkAccessProfileSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListNetworkAccessProfileNetworkResponse> localVarResp = listNetworkAccessProfileNetworkWithHttpInfo(networkAccessProfileSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Network Access Profile resource&#39;s Network resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListNetworkAccessProfileNetworkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListNetworkAccessProfileNetworkResponse> listNetworkAccessProfileNetworkWithHttpInfo(String networkAccessProfileSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListNetworkAccessProfileNetworkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Network Access Profile resource&#39;s Network resource.
     * @param networkAccessProfileSid The unique string that identifies the Network Access Profile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listNetworkAccessProfileNetworkAsync(String networkAccessProfileSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListNetworkAccessProfileNetworkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listNetworkAccessProfileNetworkValidateBeforeCall(networkAccessProfileSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListNetworkAccessProfileNetworkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSettingsUpdate
     * @param sim Filter the Settings Updates by a Super SIM&#39;s SID or UniqueName. (optional)
     * @param status Filter the Settings Updates by status. Can be &#x60;scheduled&#x60;, &#x60;in-progress&#x60;, &#x60;successful&#x60;, or &#x60;failed&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSettingsUpdateCall(String sim, SettingsUpdateEnumStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SettingsUpdates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sim", sim));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSettingsUpdateValidateBeforeCall(String sim, SettingsUpdateEnumStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listSettingsUpdateCall(sim, status, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Settings Updates.
     * @param sim Filter the Settings Updates by a Super SIM&#39;s SID or UniqueName. (optional)
     * @param status Filter the Settings Updates by status. Can be &#x60;scheduled&#x60;, &#x60;in-progress&#x60;, &#x60;successful&#x60;, or &#x60;failed&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListSettingsUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSettingsUpdateResponse listSettingsUpdate(String sim, SettingsUpdateEnumStatus status, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListSettingsUpdateResponse> localVarResp = listSettingsUpdateWithHttpInfo(sim, status, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Settings Updates.
     * @param sim Filter the Settings Updates by a Super SIM&#39;s SID or UniqueName. (optional)
     * @param status Filter the Settings Updates by status. Can be &#x60;scheduled&#x60;, &#x60;in-progress&#x60;, &#x60;successful&#x60;, or &#x60;failed&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListSettingsUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSettingsUpdateResponse> listSettingsUpdateWithHttpInfo(String sim, SettingsUpdateEnumStatus status, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSettingsUpdateValidateBeforeCall(sim, status, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSettingsUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Settings Updates.
     * @param sim Filter the Settings Updates by a Super SIM&#39;s SID or UniqueName. (optional)
     * @param status Filter the Settings Updates by status. Can be &#x60;scheduled&#x60;, &#x60;in-progress&#x60;, &#x60;successful&#x60;, or &#x60;failed&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSettingsUpdateAsync(String sim, SettingsUpdateEnumStatus status, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListSettingsUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSettingsUpdateValidateBeforeCall(sim, status, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSettingsUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSim
     * @param status The status of the Sim resources to read. Can be &#x60;new&#x60;, &#x60;ready&#x60;, &#x60;active&#x60;, &#x60;inactive&#x60;, or &#x60;scheduled&#x60;. (optional)
     * @param fleet The SID or unique name of the Fleet to which a list of Sims are assigned. (optional)
     * @param iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) associated with a Super SIM to filter the list by. Passing this parameter will always return a list containing zero or one SIMs. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSimCall(SimEnumStatus status, String fleet, String iccid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Sims";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (fleet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Fleet", fleet));
        }

        if (iccid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Iccid", iccid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSimValidateBeforeCall(SimEnumStatus status, String fleet, String iccid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listSimCall(status, fleet, iccid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Super SIMs from your account.
     * @param status The status of the Sim resources to read. Can be &#x60;new&#x60;, &#x60;ready&#x60;, &#x60;active&#x60;, &#x60;inactive&#x60;, or &#x60;scheduled&#x60;. (optional)
     * @param fleet The SID or unique name of the Fleet to which a list of Sims are assigned. (optional)
     * @param iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) associated with a Super SIM to filter the list by. Passing this parameter will always return a list containing zero or one SIMs. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListSimResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSimResponse listSim(SimEnumStatus status, String fleet, String iccid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListSimResponse> localVarResp = listSimWithHttpInfo(status, fleet, iccid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Super SIMs from your account.
     * @param status The status of the Sim resources to read. Can be &#x60;new&#x60;, &#x60;ready&#x60;, &#x60;active&#x60;, &#x60;inactive&#x60;, or &#x60;scheduled&#x60;. (optional)
     * @param fleet The SID or unique name of the Fleet to which a list of Sims are assigned. (optional)
     * @param iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) associated with a Super SIM to filter the list by. Passing this parameter will always return a list containing zero or one SIMs. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListSimResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSimResponse> listSimWithHttpInfo(SimEnumStatus status, String fleet, String iccid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSimValidateBeforeCall(status, fleet, iccid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSimResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Super SIMs from your account.
     * @param status The status of the Sim resources to read. Can be &#x60;new&#x60;, &#x60;ready&#x60;, &#x60;active&#x60;, &#x60;inactive&#x60;, or &#x60;scheduled&#x60;. (optional)
     * @param fleet The SID or unique name of the Fleet to which a list of Sims are assigned. (optional)
     * @param iccid The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module#ICCID) associated with a Super SIM to filter the list by. Passing this parameter will always return a list containing zero or one SIMs. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSimAsync(SimEnumStatus status, String fleet, String iccid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListSimResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSimValidateBeforeCall(status, fleet, iccid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSimResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSimIpAddress
     * @param simSid The SID of the Super SIM to list IP Addresses for. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSimIpAddressCall(String simSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Sims/{SimSid}/IpAddresses"
            .replace("{" + "SimSid" + "}", localVarApiClient.escapeString(simSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSimIpAddressValidateBeforeCall(String simSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simSid' is set
        if (simSid == null) {
            throw new ApiException("Missing the required parameter 'simSid' when calling listSimIpAddress(Async)");
        }

        return listSimIpAddressCall(simSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of IP Addresses for the given Super SIM.
     * @param simSid The SID of the Super SIM to list IP Addresses for. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListSimIpAddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSimIpAddressResponse listSimIpAddress(String simSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListSimIpAddressResponse> localVarResp = listSimIpAddressWithHttpInfo(simSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of IP Addresses for the given Super SIM.
     * @param simSid The SID of the Super SIM to list IP Addresses for. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListSimIpAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSimIpAddressResponse> listSimIpAddressWithHttpInfo(String simSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSimIpAddressValidateBeforeCall(simSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSimIpAddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of IP Addresses for the given Super SIM.
     * @param simSid The SID of the Super SIM to list IP Addresses for. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSimIpAddressAsync(String simSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListSimIpAddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSimIpAddressValidateBeforeCall(simSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSimIpAddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSmsCommand
     * @param sim The SID or unique name of the Sim resource that SMS Command was sent to or from. (optional)
     * @param status The status of the SMS Command. Can be: &#x60;queued&#x60;, &#x60;sent&#x60;, &#x60;delivered&#x60;, &#x60;received&#x60; or &#x60;failed&#x60;. See the [SMS Command Status Values](https://www.twilio.com/docs/iot/supersim/api/smscommand-resource#status-values) for a description of each. (optional)
     * @param direction The direction of the SMS Command. Can be &#x60;to_sim&#x60; or &#x60;from_sim&#x60;. The value of &#x60;to_sim&#x60; is synonymous with the term &#x60;mobile terminated&#x60;, and &#x60;from_sim&#x60; is synonymous with the term &#x60;mobile originated&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSmsCommandCall(String sim, SmsCommandEnumStatus status, SmsCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SmsCommands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sim", sim));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Direction", direction));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSmsCommandValidateBeforeCall(String sim, SmsCommandEnumStatus status, SmsCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listSmsCommandCall(sim, status, direction, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of SMS Commands from your account.
     * @param sim The SID or unique name of the Sim resource that SMS Command was sent to or from. (optional)
     * @param status The status of the SMS Command. Can be: &#x60;queued&#x60;, &#x60;sent&#x60;, &#x60;delivered&#x60;, &#x60;received&#x60; or &#x60;failed&#x60;. See the [SMS Command Status Values](https://www.twilio.com/docs/iot/supersim/api/smscommand-resource#status-values) for a description of each. (optional)
     * @param direction The direction of the SMS Command. Can be &#x60;to_sim&#x60; or &#x60;from_sim&#x60;. The value of &#x60;to_sim&#x60; is synonymous with the term &#x60;mobile terminated&#x60;, and &#x60;from_sim&#x60; is synonymous with the term &#x60;mobile originated&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListSmsCommandResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSmsCommandResponse listSmsCommand(String sim, SmsCommandEnumStatus status, SmsCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListSmsCommandResponse> localVarResp = listSmsCommandWithHttpInfo(sim, status, direction, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of SMS Commands from your account.
     * @param sim The SID or unique name of the Sim resource that SMS Command was sent to or from. (optional)
     * @param status The status of the SMS Command. Can be: &#x60;queued&#x60;, &#x60;sent&#x60;, &#x60;delivered&#x60;, &#x60;received&#x60; or &#x60;failed&#x60;. See the [SMS Command Status Values](https://www.twilio.com/docs/iot/supersim/api/smscommand-resource#status-values) for a description of each. (optional)
     * @param direction The direction of the SMS Command. Can be &#x60;to_sim&#x60; or &#x60;from_sim&#x60;. The value of &#x60;to_sim&#x60; is synonymous with the term &#x60;mobile terminated&#x60;, and &#x60;from_sim&#x60; is synonymous with the term &#x60;mobile originated&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListSmsCommandResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSmsCommandResponse> listSmsCommandWithHttpInfo(String sim, SmsCommandEnumStatus status, SmsCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSmsCommandValidateBeforeCall(sim, status, direction, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSmsCommandResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of SMS Commands from your account.
     * @param sim The SID or unique name of the Sim resource that SMS Command was sent to or from. (optional)
     * @param status The status of the SMS Command. Can be: &#x60;queued&#x60;, &#x60;sent&#x60;, &#x60;delivered&#x60;, &#x60;received&#x60; or &#x60;failed&#x60;. See the [SMS Command Status Values](https://www.twilio.com/docs/iot/supersim/api/smscommand-resource#status-values) for a description of each. (optional)
     * @param direction The direction of the SMS Command. Can be &#x60;to_sim&#x60; or &#x60;from_sim&#x60;. The value of &#x60;to_sim&#x60; is synonymous with the term &#x60;mobile terminated&#x60;, and &#x60;from_sim&#x60; is synonymous with the term &#x60;mobile originated&#x60;. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSmsCommandAsync(String sim, SmsCommandEnumStatus status, SmsCommandEnumDirection direction, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListSmsCommandResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSmsCommandValidateBeforeCall(sim, status, direction, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSmsCommandResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsageRecord
     * @param sim SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM. (optional)
     * @param fleet SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred. (optional)
     * @param network SID of a Network resource. Only show UsageRecords representing usage on this network. (optional)
     * @param isoCountry Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country. (optional)
     * @param group Dimension over which to aggregate usage records. Can be: &#x60;sim&#x60;, &#x60;fleet&#x60;, &#x60;network&#x60;, &#x60;isoCountry&#x60;. Default is to not aggregate across any of these dimensions, UsageRecords will be aggregated into the time buckets described by the &#x60;Granularity&#x60; parameter. (optional)
     * @param granularity Time-based grouping that UsageRecords should be aggregated by. Can be: &#x60;hour&#x60;, &#x60;day&#x60;, or &#x60;all&#x60;. Default is &#x60;all&#x60;. &#x60;all&#x60; returns one UsageRecord that describes the usage for the entire period. (optional)
     * @param startTime Only include usage that occurred at or after this time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is one month before the &#x60;end_time&#x60;. (optional)
     * @param endTime Only include usage that occurred before this time (exclusive), specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is the current time. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsageRecordCall(String sim, String fleet, String network, String isoCountry, UsageRecordEnumGroup group, UsageRecordEnumGranularity granularity, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/UsageRecords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sim != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Sim", sim));
        }

        if (fleet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Fleet", fleet));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Network", network));
        }

        if (isoCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IsoCountry", isoCountry));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Group", group));
        }

        if (granularity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Granularity", granularity));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsageRecordValidateBeforeCall(String sim, String fleet, String network, String isoCountry, UsageRecordEnumGroup group, UsageRecordEnumGranularity granularity, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listUsageRecordCall(sim, fleet, network, isoCountry, group, granularity, startTime, endTime, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * List UsageRecords
     * @param sim SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM. (optional)
     * @param fleet SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred. (optional)
     * @param network SID of a Network resource. Only show UsageRecords representing usage on this network. (optional)
     * @param isoCountry Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country. (optional)
     * @param group Dimension over which to aggregate usage records. Can be: &#x60;sim&#x60;, &#x60;fleet&#x60;, &#x60;network&#x60;, &#x60;isoCountry&#x60;. Default is to not aggregate across any of these dimensions, UsageRecords will be aggregated into the time buckets described by the &#x60;Granularity&#x60; parameter. (optional)
     * @param granularity Time-based grouping that UsageRecords should be aggregated by. Can be: &#x60;hour&#x60;, &#x60;day&#x60;, or &#x60;all&#x60;. Default is &#x60;all&#x60;. &#x60;all&#x60; returns one UsageRecord that describes the usage for the entire period. (optional)
     * @param startTime Only include usage that occurred at or after this time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is one month before the &#x60;end_time&#x60;. (optional)
     * @param endTime Only include usage that occurred before this time (exclusive), specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is the current time. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListUsageRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListUsageRecordResponse listUsageRecord(String sim, String fleet, String network, String isoCountry, UsageRecordEnumGroup group, UsageRecordEnumGranularity granularity, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListUsageRecordResponse> localVarResp = listUsageRecordWithHttpInfo(sim, fleet, network, isoCountry, group, granularity, startTime, endTime, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * List UsageRecords
     * @param sim SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM. (optional)
     * @param fleet SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred. (optional)
     * @param network SID of a Network resource. Only show UsageRecords representing usage on this network. (optional)
     * @param isoCountry Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country. (optional)
     * @param group Dimension over which to aggregate usage records. Can be: &#x60;sim&#x60;, &#x60;fleet&#x60;, &#x60;network&#x60;, &#x60;isoCountry&#x60;. Default is to not aggregate across any of these dimensions, UsageRecords will be aggregated into the time buckets described by the &#x60;Granularity&#x60; parameter. (optional)
     * @param granularity Time-based grouping that UsageRecords should be aggregated by. Can be: &#x60;hour&#x60;, &#x60;day&#x60;, or &#x60;all&#x60;. Default is &#x60;all&#x60;. &#x60;all&#x60; returns one UsageRecord that describes the usage for the entire period. (optional)
     * @param startTime Only include usage that occurred at or after this time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is one month before the &#x60;end_time&#x60;. (optional)
     * @param endTime Only include usage that occurred before this time (exclusive), specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is the current time. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListUsageRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUsageRecordResponse> listUsageRecordWithHttpInfo(String sim, String fleet, String network, String isoCountry, UsageRecordEnumGroup group, UsageRecordEnumGranularity granularity, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listUsageRecordValidateBeforeCall(sim, fleet, network, isoCountry, group, granularity, startTime, endTime, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListUsageRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List UsageRecords
     * @param sim SID or unique name of a Sim resource. Only show UsageRecords representing usage incurred by this Super SIM. (optional)
     * @param fleet SID or unique name of a Fleet resource. Only show UsageRecords representing usage for Super SIMs belonging to this Fleet resource at the time the usage occurred. (optional)
     * @param network SID of a Network resource. Only show UsageRecords representing usage on this network. (optional)
     * @param isoCountry Alpha-2 ISO Country Code. Only show UsageRecords representing usage in this country. (optional)
     * @param group Dimension over which to aggregate usage records. Can be: &#x60;sim&#x60;, &#x60;fleet&#x60;, &#x60;network&#x60;, &#x60;isoCountry&#x60;. Default is to not aggregate across any of these dimensions, UsageRecords will be aggregated into the time buckets described by the &#x60;Granularity&#x60; parameter. (optional)
     * @param granularity Time-based grouping that UsageRecords should be aggregated by. Can be: &#x60;hour&#x60;, &#x60;day&#x60;, or &#x60;all&#x60;. Default is &#x60;all&#x60;. &#x60;all&#x60; returns one UsageRecord that describes the usage for the entire period. (optional)
     * @param startTime Only include usage that occurred at or after this time, specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is one month before the &#x60;end_time&#x60;. (optional)
     * @param endTime Only include usage that occurred before this time (exclusive), specified in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Default is the current time. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsageRecordAsync(String sim, String fleet, String network, String isoCountry, UsageRecordEnumGroup group, UsageRecordEnumGranularity granularity, OffsetDateTime startTime, OffsetDateTime endTime, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListUsageRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsageRecordValidateBeforeCall(sim, fleet, network, isoCountry, group, granularity, startTime, endTime, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListUsageRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFleet
     * @param sid The SID of the Fleet resource to update. (required)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFleetCall(String sid, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, String networkAccessProfile, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Fleets/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dataLimit != null) {
            localVarFormParams.put("DataLimit", dataLimit);
        }

        if (ipCommandsMethod != null) {
            localVarFormParams.put("IpCommandsMethod", ipCommandsMethod);
        }

        if (ipCommandsUrl != null) {
            localVarFormParams.put("IpCommandsUrl", ipCommandsUrl);
        }

        if (networkAccessProfile != null) {
            localVarFormParams.put("NetworkAccessProfile", networkAccessProfile);
        }

        if (smsCommandsMethod != null) {
            localVarFormParams.put("SmsCommandsMethod", smsCommandsMethod);
        }

        if (smsCommandsUrl != null) {
            localVarFormParams.put("SmsCommandsUrl", smsCommandsUrl);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFleetValidateBeforeCall(String sid, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, String networkAccessProfile, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateFleet(Async)");
        }

        return updateFleetCall(sid, dataLimit, ipCommandsMethod, ipCommandsUrl, networkAccessProfile, smsCommandsMethod, smsCommandsUrl, uniqueName, _callback);

    }

    /**
     * 
     * Updates the given properties of a Super SIM Fleet instance from your account.
     * @param sid The SID of the Fleet resource to update. (required)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @return SupersimV1Fleet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1Fleet updateFleet(String sid, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, String networkAccessProfile, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName) throws ApiException {
        ApiResponse<SupersimV1Fleet> localVarResp = updateFleetWithHttpInfo(sid, dataLimit, ipCommandsMethod, ipCommandsUrl, networkAccessProfile, smsCommandsMethod, smsCommandsUrl, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the given properties of a Super SIM Fleet instance from your account.
     * @param sid The SID of the Fleet resource to update. (required)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @return ApiResponse&lt;SupersimV1Fleet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1Fleet> updateFleetWithHttpInfo(String sid, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, String networkAccessProfile, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = updateFleetValidateBeforeCall(sid, dataLimit, ipCommandsMethod, ipCommandsUrl, networkAccessProfile, smsCommandsMethod, smsCommandsUrl, uniqueName, null);
        Type localVarReturnType = new TypeToken<SupersimV1Fleet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the given properties of a Super SIM Fleet instance from your account.
     * @param sid The SID of the Fleet resource to update. (required)
     * @param dataLimit The total data usage (download and upload combined) in Megabytes that each Super SIM assigned to the Fleet can consume during a billing period (normally one month). Value must be between 1MB (1) and 2TB (2,000,000). Defaults to 1GB (1,000). (optional)
     * @param ipCommandsMethod A string representing the HTTP method to use when making a request to &#x60;ip_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param ipCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an IP Command from your device to a special IP address. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param networkAccessProfile The SID or unique name of the Network Access Profile that will control which cellular networks the Fleet&#39;s SIMs can connect to. (optional)
     * @param smsCommandsMethod A string representing the HTTP method to use when making a request to &#x60;sms_commands_url&#x60;. Can be one of &#x60;POST&#x60; or &#x60;GET&#x60;. Defaults to &#x60;POST&#x60;. (optional)
     * @param smsCommandsUrl The URL that will receive a webhook when a Super SIM in the Fleet is used to send an SMS from your device to the SMS Commands number. Your server should respond with an HTTP status code in the 200 range; any response body will be ignored. (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFleetAsync(String sid, Integer dataLimit, String ipCommandsMethod, URI ipCommandsUrl, String networkAccessProfile, String smsCommandsMethod, URI smsCommandsUrl, String uniqueName, final ApiCallback<SupersimV1Fleet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFleetValidateBeforeCall(sid, dataLimit, ipCommandsMethod, ipCommandsUrl, networkAccessProfile, smsCommandsMethod, smsCommandsUrl, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1Fleet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNetworkAccessProfile
     * @param sid The SID of the Network Access Profile to update. (required)
     * @param uniqueName The new unique name of the Network Access Profile. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAccessProfileCall(String sid, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/NetworkAccessProfiles/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNetworkAccessProfileValidateBeforeCall(String sid, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateNetworkAccessProfile(Async)");
        }

        return updateNetworkAccessProfileCall(sid, uniqueName, _callback);

    }

    /**
     * 
     * Updates the given properties of a Network Access Profile in your account.
     * @param sid The SID of the Network Access Profile to update. (required)
     * @param uniqueName The new unique name of the Network Access Profile. (optional)
     * @return SupersimV1NetworkAccessProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1NetworkAccessProfile updateNetworkAccessProfile(String sid, String uniqueName) throws ApiException {
        ApiResponse<SupersimV1NetworkAccessProfile> localVarResp = updateNetworkAccessProfileWithHttpInfo(sid, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the given properties of a Network Access Profile in your account.
     * @param sid The SID of the Network Access Profile to update. (required)
     * @param uniqueName The new unique name of the Network Access Profile. (optional)
     * @return ApiResponse&lt;SupersimV1NetworkAccessProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1NetworkAccessProfile> updateNetworkAccessProfileWithHttpInfo(String sid, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = updateNetworkAccessProfileValidateBeforeCall(sid, uniqueName, null);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the given properties of a Network Access Profile in your account.
     * @param sid The SID of the Network Access Profile to update. (required)
     * @param uniqueName The new unique name of the Network Access Profile. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNetworkAccessProfileAsync(String sid, String uniqueName, final ApiCallback<SupersimV1NetworkAccessProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNetworkAccessProfileValidateBeforeCall(sid, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1NetworkAccessProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSim
     * @param sid The SID of the Sim resource to update. (required)
     * @param accountSid The SID of the Account to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a Subaccount of the requesting Account. Only valid when the Sim resource&#39;s status is new. (optional)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is POST. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after an asynchronous update has finished. (optional)
     * @param fleet The SID or unique name of the Fleet to which the SIM resource should be assigned. (optional)
     * @param status  (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSimCall(String sid, String accountSid, String callbackMethod, URI callbackUrl, String fleet, SimEnumStatusUpdate status, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://supersim.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Sims/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountSid != null) {
            localVarFormParams.put("AccountSid", accountSid);
        }

        if (callbackMethod != null) {
            localVarFormParams.put("CallbackMethod", callbackMethod);
        }

        if (callbackUrl != null) {
            localVarFormParams.put("CallbackUrl", callbackUrl);
        }

        if (fleet != null) {
            localVarFormParams.put("Fleet", fleet);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSimValidateBeforeCall(String sid, String accountSid, String callbackMethod, URI callbackUrl, String fleet, SimEnumStatusUpdate status, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateSim(Async)");
        }

        return updateSimCall(sid, accountSid, callbackMethod, callbackUrl, fleet, status, uniqueName, _callback);

    }

    /**
     * 
     * Updates the given properties of a Super SIM instance from your account.
     * @param sid The SID of the Sim resource to update. (required)
     * @param accountSid The SID of the Account to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a Subaccount of the requesting Account. Only valid when the Sim resource&#39;s status is new. (optional)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is POST. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after an asynchronous update has finished. (optional)
     * @param fleet The SID or unique name of the Fleet to which the SIM resource should be assigned. (optional)
     * @param status  (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @return SupersimV1Sim
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public SupersimV1Sim updateSim(String sid, String accountSid, String callbackMethod, URI callbackUrl, String fleet, SimEnumStatusUpdate status, String uniqueName) throws ApiException {
        ApiResponse<SupersimV1Sim> localVarResp = updateSimWithHttpInfo(sid, accountSid, callbackMethod, callbackUrl, fleet, status, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the given properties of a Super SIM instance from your account.
     * @param sid The SID of the Sim resource to update. (required)
     * @param accountSid The SID of the Account to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a Subaccount of the requesting Account. Only valid when the Sim resource&#39;s status is new. (optional)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is POST. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after an asynchronous update has finished. (optional)
     * @param fleet The SID or unique name of the Fleet to which the SIM resource should be assigned. (optional)
     * @param status  (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @return ApiResponse&lt;SupersimV1Sim&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SupersimV1Sim> updateSimWithHttpInfo(String sid, String accountSid, String callbackMethod, URI callbackUrl, String fleet, SimEnumStatusUpdate status, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = updateSimValidateBeforeCall(sid, accountSid, callbackMethod, callbackUrl, fleet, status, uniqueName, null);
        Type localVarReturnType = new TypeToken<SupersimV1Sim>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the given properties of a Super SIM instance from your account.
     * @param sid The SID of the Sim resource to update. (required)
     * @param accountSid The SID of the Account to which the Sim resource should belong. The Account SID can only be that of the requesting Account or that of a Subaccount of the requesting Account. Only valid when the Sim resource&#39;s status is new. (optional)
     * @param callbackMethod The HTTP method we should use to call &#x60;callback_url&#x60;. Can be: &#x60;GET&#x60; or &#x60;POST&#x60; and the default is POST. (optional)
     * @param callbackUrl The URL we should call using the &#x60;callback_method&#x60; after an asynchronous update has finished. (optional)
     * @param fleet The SID or unique name of the Fleet to which the SIM resource should be assigned. (optional)
     * @param status  (optional)
     * @param uniqueName An application-defined string that uniquely identifies the resource. It can be used in place of the resource&#39;s &#x60;sid&#x60; in the URL to address the resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSimAsync(String sid, String accountSid, String callbackMethod, URI callbackUrl, String fleet, SimEnumStatusUpdate status, String uniqueName, final ApiCallback<SupersimV1Sim> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSimValidateBeforeCall(sid, accountSid, callbackMethod, callbackUrl, fleet, status, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<SupersimV1Sim>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
