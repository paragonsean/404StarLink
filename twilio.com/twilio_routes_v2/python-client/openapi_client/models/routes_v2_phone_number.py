# coding: utf-8

"""
    Twilio - Routes

    This is the public Twilio REST API.

    The version of the OpenAPI document: 1.42.0
    Contact: support@twilio.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RoutesV2PhoneNumber(BaseModel):
    """
    RoutesV2PhoneNumber
    """ # noqa: E501
    account_sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="The unique SID identifier of the Account.")
    date_created: Optional[datetime] = Field(default=None, description="The date that this phone number was assigned an Inbound Processing Region, given in ISO 8601 format.")
    date_updated: Optional[datetime] = Field(default=None, description="The date that the Inbound Processing Region was updated for this phone number, given in ISO 8601 format.")
    friendly_name: Optional[StrictStr] = Field(default=None, description="A human readable description of the Inbound Processing Region assignments for this phone number, up to 64 characters.")
    phone_number: Optional[StrictStr] = Field(default=None, description="The phone number in E.164 format")
    sid: Optional[Annotated[str, Field(min_length=34, strict=True, max_length=34)]] = Field(default=None, description="A 34 character string that uniquely identifies the Inbound Processing Region assignments for this phone number.")
    url: Optional[StrictStr] = Field(default=None, description="The absolute URL of the resource.")
    voice_region: Optional[StrictStr] = Field(default=None, description="The Inbound Processing Region used for this phone number for voice.")
    __properties: ClassVar[List[str]] = ["account_sid", "date_created", "date_updated", "friendly_name", "phone_number", "sid", "url", "voice_region"]

    @field_validator('account_sid')
    def account_sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^AC[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^AC[0-9a-fA-F]{32}$/")
        return value

    @field_validator('sid')
    def sid_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^QQ[0-9a-fA-F]{32}$", value):
            raise ValueError(r"must validate the regular expression /^QQ[0-9a-fA-F]{32}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoutesV2PhoneNumber from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_sid (nullable) is None
        # and model_fields_set contains the field
        if self.account_sid is None and "account_sid" in self.model_fields_set:
            _dict['account_sid'] = None

        # set to None if date_created (nullable) is None
        # and model_fields_set contains the field
        if self.date_created is None and "date_created" in self.model_fields_set:
            _dict['date_created'] = None

        # set to None if date_updated (nullable) is None
        # and model_fields_set contains the field
        if self.date_updated is None and "date_updated" in self.model_fields_set:
            _dict['date_updated'] = None

        # set to None if friendly_name (nullable) is None
        # and model_fields_set contains the field
        if self.friendly_name is None and "friendly_name" in self.model_fields_set:
            _dict['friendly_name'] = None

        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict['phone_number'] = None

        # set to None if sid (nullable) is None
        # and model_fields_set contains the field
        if self.sid is None and "sid" in self.model_fields_set:
            _dict['sid'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if voice_region (nullable) is None
        # and model_fields_set contains the field
        if self.voice_region is None and "voice_region" in self.model_fields_set:
            _dict['voice_region'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoutesV2PhoneNumber from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_sid": obj.get("account_sid"),
            "date_created": obj.get("date_created"),
            "date_updated": obj.get("date_updated"),
            "friendly_name": obj.get("friendly_name"),
            "phone_number": obj.get("phone_number"),
            "sid": obj.get("sid"),
            "url": obj.get("url"),
            "voice_region": obj.get("voice_region")
        })
        return _obj


