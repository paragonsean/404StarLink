/*
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.42.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomerProfileEnumStatus;
import org.openapitools.client.model.ListCustomerProfileChannelEndpointAssignmentResponse;
import org.openapitools.client.model.ListCustomerProfileEntityAssignmentResponse;
import org.openapitools.client.model.ListCustomerProfileEvaluationResponse;
import org.openapitools.client.model.ListCustomerProfileResponse;
import org.openapitools.client.model.ListEndUserResponse;
import org.openapitools.client.model.ListEndUserTypeResponse;
import org.openapitools.client.model.ListPoliciesResponse;
import org.openapitools.client.model.ListSupportingDocumentResponse;
import org.openapitools.client.model.ListSupportingDocumentTypeResponse;
import org.openapitools.client.model.ListTrustProductChannelEndpointAssignmentResponse;
import org.openapitools.client.model.ListTrustProductEntityAssignmentResponse;
import org.openapitools.client.model.ListTrustProductEvaluationResponse;
import org.openapitools.client.model.ListTrustProductResponse;
import org.openapitools.client.model.TrustProductEnumStatus;
import org.openapitools.client.model.TrusthubV1CustomerProfile;
import org.openapitools.client.model.TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment;
import org.openapitools.client.model.TrusthubV1CustomerProfileCustomerProfileEntityAssignment;
import org.openapitools.client.model.TrusthubV1CustomerProfileCustomerProfileEvaluation;
import org.openapitools.client.model.TrusthubV1EndUser;
import org.openapitools.client.model.TrusthubV1EndUserType;
import org.openapitools.client.model.TrusthubV1Policies;
import org.openapitools.client.model.TrusthubV1SupportingDocument;
import org.openapitools.client.model.TrusthubV1SupportingDocumentType;
import org.openapitools.client.model.TrusthubV1TrustProduct;
import org.openapitools.client.model.TrusthubV1TrustProductTrustProductChannelEndpointAssignment;
import org.openapitools.client.model.TrusthubV1TrustProductTrustProductEntityAssignment;
import org.openapitools.client.model.TrusthubV1TrustProductTrustProductEvaluation;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCustomerProfile
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (required)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerProfileCall(String email, String friendlyName, String policySid, URI statusCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarFormParams.put("Email", email);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (policySid != null) {
            localVarFormParams.put("PolicySid", policySid);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerProfileValidateBeforeCall(String email, String friendlyName, String policySid, URI statusCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling createCustomerProfile(Async)");
        }

        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createCustomerProfile(Async)");
        }

        // verify the required parameter 'policySid' is set
        if (policySid == null) {
            throw new ApiException("Missing the required parameter 'policySid' when calling createCustomerProfile(Async)");
        }

        return createCustomerProfileCall(email, friendlyName, policySid, statusCallback, _callback);

    }

    /**
     * 
     * Create a new Customer-Profile.
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (required)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return TrusthubV1CustomerProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1CustomerProfile createCustomerProfile(String email, String friendlyName, String policySid, URI statusCallback) throws ApiException {
        ApiResponse<TrusthubV1CustomerProfile> localVarResp = createCustomerProfileWithHttpInfo(email, friendlyName, policySid, statusCallback);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Customer-Profile.
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (required)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return ApiResponse&lt;TrusthubV1CustomerProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1CustomerProfile> createCustomerProfileWithHttpInfo(String email, String friendlyName, String policySid, URI statusCallback) throws ApiException {
        okhttp3.Call localVarCall = createCustomerProfileValidateBeforeCall(email, friendlyName, policySid, statusCallback, null);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Customer-Profile.
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (required)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerProfileAsync(String email, String friendlyName, String policySid, URI statusCallback, final ApiCallback<TrusthubV1CustomerProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerProfileValidateBeforeCall(email, friendlyName, policySid, statusCallback, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCustomerProfileChannelEndpointAssignment
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (required)
     * @param channelEndpointType The type of channel endpoint. eg: phone-number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerProfileChannelEndpointAssignmentCall(String customerProfileSid, String channelEndpointSid, String channelEndpointType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments"
            .replace("{" + "CustomerProfileSid" + "}", localVarApiClient.escapeString(customerProfileSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelEndpointSid != null) {
            localVarFormParams.put("ChannelEndpointSid", channelEndpointSid);
        }

        if (channelEndpointType != null) {
            localVarFormParams.put("ChannelEndpointType", channelEndpointType);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerProfileChannelEndpointAssignmentValidateBeforeCall(String customerProfileSid, String channelEndpointSid, String channelEndpointType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerProfileSid' is set
        if (customerProfileSid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileSid' when calling createCustomerProfileChannelEndpointAssignment(Async)");
        }

        // verify the required parameter 'channelEndpointSid' is set
        if (channelEndpointSid == null) {
            throw new ApiException("Missing the required parameter 'channelEndpointSid' when calling createCustomerProfileChannelEndpointAssignment(Async)");
        }

        // verify the required parameter 'channelEndpointType' is set
        if (channelEndpointType == null) {
            throw new ApiException("Missing the required parameter 'channelEndpointType' when calling createCustomerProfileChannelEndpointAssignment(Async)");
        }

        return createCustomerProfileChannelEndpointAssignmentCall(customerProfileSid, channelEndpointSid, channelEndpointType, _callback);

    }

    /**
     * 
     * Create a new Assigned Item.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (required)
     * @param channelEndpointType The type of channel endpoint. eg: phone-number (required)
     * @return TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment createCustomerProfileChannelEndpointAssignment(String customerProfileSid, String channelEndpointSid, String channelEndpointType) throws ApiException {
        ApiResponse<TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment> localVarResp = createCustomerProfileChannelEndpointAssignmentWithHttpInfo(customerProfileSid, channelEndpointSid, channelEndpointType);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Assigned Item.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (required)
     * @param channelEndpointType The type of channel endpoint. eg: phone-number (required)
     * @return ApiResponse&lt;TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment> createCustomerProfileChannelEndpointAssignmentWithHttpInfo(String customerProfileSid, String channelEndpointSid, String channelEndpointType) throws ApiException {
        okhttp3.Call localVarCall = createCustomerProfileChannelEndpointAssignmentValidateBeforeCall(customerProfileSid, channelEndpointSid, channelEndpointType, null);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Assigned Item.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (required)
     * @param channelEndpointType The type of channel endpoint. eg: phone-number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerProfileChannelEndpointAssignmentAsync(String customerProfileSid, String channelEndpointSid, String channelEndpointType, final ApiCallback<TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerProfileChannelEndpointAssignmentValidateBeforeCall(customerProfileSid, channelEndpointSid, channelEndpointType, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCustomerProfileEntityAssignment
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param objectSid The SID of an object bag that holds information of the different items. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerProfileEntityAssignmentCall(String customerProfileSid, String objectSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments"
            .replace("{" + "CustomerProfileSid" + "}", localVarApiClient.escapeString(customerProfileSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectSid != null) {
            localVarFormParams.put("ObjectSid", objectSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerProfileEntityAssignmentValidateBeforeCall(String customerProfileSid, String objectSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerProfileSid' is set
        if (customerProfileSid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileSid' when calling createCustomerProfileEntityAssignment(Async)");
        }

        // verify the required parameter 'objectSid' is set
        if (objectSid == null) {
            throw new ApiException("Missing the required parameter 'objectSid' when calling createCustomerProfileEntityAssignment(Async)");
        }

        return createCustomerProfileEntityAssignmentCall(customerProfileSid, objectSid, _callback);

    }

    /**
     * 
     * Create a new Assigned Item.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param objectSid The SID of an object bag that holds information of the different items. (required)
     * @return TrusthubV1CustomerProfileCustomerProfileEntityAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1CustomerProfileCustomerProfileEntityAssignment createCustomerProfileEntityAssignment(String customerProfileSid, String objectSid) throws ApiException {
        ApiResponse<TrusthubV1CustomerProfileCustomerProfileEntityAssignment> localVarResp = createCustomerProfileEntityAssignmentWithHttpInfo(customerProfileSid, objectSid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Assigned Item.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param objectSid The SID of an object bag that holds information of the different items. (required)
     * @return ApiResponse&lt;TrusthubV1CustomerProfileCustomerProfileEntityAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1CustomerProfileCustomerProfileEntityAssignment> createCustomerProfileEntityAssignmentWithHttpInfo(String customerProfileSid, String objectSid) throws ApiException {
        okhttp3.Call localVarCall = createCustomerProfileEntityAssignmentValidateBeforeCall(customerProfileSid, objectSid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfileCustomerProfileEntityAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Assigned Item.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param objectSid The SID of an object bag that holds information of the different items. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerProfileEntityAssignmentAsync(String customerProfileSid, String objectSid, final ApiCallback<TrusthubV1CustomerProfileCustomerProfileEntityAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerProfileEntityAssignmentValidateBeforeCall(customerProfileSid, objectSid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfileCustomerProfileEntityAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCustomerProfileEvaluation
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param policySid The unique string of a policy that is associated to the customer_profile resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerProfileEvaluationCall(String customerProfileSid, String policySid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations"
            .replace("{" + "CustomerProfileSid" + "}", localVarApiClient.escapeString(customerProfileSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policySid != null) {
            localVarFormParams.put("PolicySid", policySid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerProfileEvaluationValidateBeforeCall(String customerProfileSid, String policySid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerProfileSid' is set
        if (customerProfileSid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileSid' when calling createCustomerProfileEvaluation(Async)");
        }

        // verify the required parameter 'policySid' is set
        if (policySid == null) {
            throw new ApiException("Missing the required parameter 'policySid' when calling createCustomerProfileEvaluation(Async)");
        }

        return createCustomerProfileEvaluationCall(customerProfileSid, policySid, _callback);

    }

    /**
     * 
     * Create a new Evaluation
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param policySid The unique string of a policy that is associated to the customer_profile resource. (required)
     * @return TrusthubV1CustomerProfileCustomerProfileEvaluation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1CustomerProfileCustomerProfileEvaluation createCustomerProfileEvaluation(String customerProfileSid, String policySid) throws ApiException {
        ApiResponse<TrusthubV1CustomerProfileCustomerProfileEvaluation> localVarResp = createCustomerProfileEvaluationWithHttpInfo(customerProfileSid, policySid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Evaluation
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param policySid The unique string of a policy that is associated to the customer_profile resource. (required)
     * @return ApiResponse&lt;TrusthubV1CustomerProfileCustomerProfileEvaluation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1CustomerProfileCustomerProfileEvaluation> createCustomerProfileEvaluationWithHttpInfo(String customerProfileSid, String policySid) throws ApiException {
        okhttp3.Call localVarCall = createCustomerProfileEvaluationValidateBeforeCall(customerProfileSid, policySid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfileCustomerProfileEvaluation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Evaluation
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param policySid The unique string of a policy that is associated to the customer_profile resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerProfileEvaluationAsync(String customerProfileSid, String policySid, final ApiCallback<TrusthubV1CustomerProfileCustomerProfileEvaluation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerProfileEvaluationValidateBeforeCall(customerProfileSid, policySid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfileCustomerProfileEvaluation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEndUser
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param type The type of end user of the Bundle resource - can be &#x60;individual&#x60; or &#x60;business&#x60;. (required)
     * @param attributes The set of parameters that are the attributes of the End User resource which are derived End User Types. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEndUserCall(String friendlyName, String type, Object attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/EndUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (type != null) {
            localVarFormParams.put("Type", type);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEndUserValidateBeforeCall(String friendlyName, String type, Object attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createEndUser(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createEndUser(Async)");
        }

        return createEndUserCall(friendlyName, type, attributes, _callback);

    }

    /**
     * 
     * Create a new End User.
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param type The type of end user of the Bundle resource - can be &#x60;individual&#x60; or &#x60;business&#x60;. (required)
     * @param attributes The set of parameters that are the attributes of the End User resource which are derived End User Types. (optional)
     * @return TrusthubV1EndUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1EndUser createEndUser(String friendlyName, String type, Object attributes) throws ApiException {
        ApiResponse<TrusthubV1EndUser> localVarResp = createEndUserWithHttpInfo(friendlyName, type, attributes);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new End User.
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param type The type of end user of the Bundle resource - can be &#x60;individual&#x60; or &#x60;business&#x60;. (required)
     * @param attributes The set of parameters that are the attributes of the End User resource which are derived End User Types. (optional)
     * @return ApiResponse&lt;TrusthubV1EndUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1EndUser> createEndUserWithHttpInfo(String friendlyName, String type, Object attributes) throws ApiException {
        okhttp3.Call localVarCall = createEndUserValidateBeforeCall(friendlyName, type, attributes, null);
        Type localVarReturnType = new TypeToken<TrusthubV1EndUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new End User.
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param type The type of end user of the Bundle resource - can be &#x60;individual&#x60; or &#x60;business&#x60;. (required)
     * @param attributes The set of parameters that are the attributes of the End User resource which are derived End User Types. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEndUserAsync(String friendlyName, String type, Object attributes, final ApiCallback<TrusthubV1EndUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEndUserValidateBeforeCall(friendlyName, type, attributes, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1EndUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSupportingDocument
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param type The type of the Supporting Document. (required)
     * @param attributes The set of parameters that are the attributes of the Supporting Documents resource which are derived Supporting Document Types. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSupportingDocumentCall(String friendlyName, String type, Object attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SupportingDocuments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (type != null) {
            localVarFormParams.put("Type", type);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSupportingDocumentValidateBeforeCall(String friendlyName, String type, Object attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createSupportingDocument(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createSupportingDocument(Async)");
        }

        return createSupportingDocumentCall(friendlyName, type, attributes, _callback);

    }

    /**
     * 
     * Create a new Supporting Document.
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param type The type of the Supporting Document. (required)
     * @param attributes The set of parameters that are the attributes of the Supporting Documents resource which are derived Supporting Document Types. (optional)
     * @return TrusthubV1SupportingDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1SupportingDocument createSupportingDocument(String friendlyName, String type, Object attributes) throws ApiException {
        ApiResponse<TrusthubV1SupportingDocument> localVarResp = createSupportingDocumentWithHttpInfo(friendlyName, type, attributes);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Supporting Document.
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param type The type of the Supporting Document. (required)
     * @param attributes The set of parameters that are the attributes of the Supporting Documents resource which are derived Supporting Document Types. (optional)
     * @return ApiResponse&lt;TrusthubV1SupportingDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1SupportingDocument> createSupportingDocumentWithHttpInfo(String friendlyName, String type, Object attributes) throws ApiException {
        okhttp3.Call localVarCall = createSupportingDocumentValidateBeforeCall(friendlyName, type, attributes, null);
        Type localVarReturnType = new TypeToken<TrusthubV1SupportingDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Supporting Document.
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param type The type of the Supporting Document. (required)
     * @param attributes The set of parameters that are the attributes of the Supporting Documents resource which are derived Supporting Document Types. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSupportingDocumentAsync(String friendlyName, String type, Object attributes, final ApiCallback<TrusthubV1SupportingDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSupportingDocumentValidateBeforeCall(friendlyName, type, attributes, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1SupportingDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrustProduct
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (required)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrustProductCall(String email, String friendlyName, String policySid, URI statusCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarFormParams.put("Email", email);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (policySid != null) {
            localVarFormParams.put("PolicySid", policySid);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrustProductValidateBeforeCall(String email, String friendlyName, String policySid, URI statusCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling createTrustProduct(Async)");
        }

        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createTrustProduct(Async)");
        }

        // verify the required parameter 'policySid' is set
        if (policySid == null) {
            throw new ApiException("Missing the required parameter 'policySid' when calling createTrustProduct(Async)");
        }

        return createTrustProductCall(email, friendlyName, policySid, statusCallback, _callback);

    }

    /**
     * 
     * Create a new Customer-Profile.
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (required)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return TrusthubV1TrustProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1TrustProduct createTrustProduct(String email, String friendlyName, String policySid, URI statusCallback) throws ApiException {
        ApiResponse<TrusthubV1TrustProduct> localVarResp = createTrustProductWithHttpInfo(email, friendlyName, policySid, statusCallback);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Customer-Profile.
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (required)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return ApiResponse&lt;TrusthubV1TrustProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1TrustProduct> createTrustProductWithHttpInfo(String email, String friendlyName, String policySid, URI statusCallback) throws ApiException {
        okhttp3.Call localVarCall = createTrustProductValidateBeforeCall(email, friendlyName, policySid, statusCallback, null);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Customer-Profile.
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (required)
     * @param friendlyName The string that you assigned to describe the resource. (required)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (required)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrustProductAsync(String email, String friendlyName, String policySid, URI statusCallback, final ApiCallback<TrusthubV1TrustProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrustProductValidateBeforeCall(email, friendlyName, policySid, statusCallback, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrustProductChannelEndpointAssignment
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (required)
     * @param channelEndpointType The type of channel endpoint. eg: phone-number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrustProductChannelEndpointAssignmentCall(String trustProductSid, String channelEndpointSid, String channelEndpointType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments"
            .replace("{" + "TrustProductSid" + "}", localVarApiClient.escapeString(trustProductSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelEndpointSid != null) {
            localVarFormParams.put("ChannelEndpointSid", channelEndpointSid);
        }

        if (channelEndpointType != null) {
            localVarFormParams.put("ChannelEndpointType", channelEndpointType);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrustProductChannelEndpointAssignmentValidateBeforeCall(String trustProductSid, String channelEndpointSid, String channelEndpointType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustProductSid' is set
        if (trustProductSid == null) {
            throw new ApiException("Missing the required parameter 'trustProductSid' when calling createTrustProductChannelEndpointAssignment(Async)");
        }

        // verify the required parameter 'channelEndpointSid' is set
        if (channelEndpointSid == null) {
            throw new ApiException("Missing the required parameter 'channelEndpointSid' when calling createTrustProductChannelEndpointAssignment(Async)");
        }

        // verify the required parameter 'channelEndpointType' is set
        if (channelEndpointType == null) {
            throw new ApiException("Missing the required parameter 'channelEndpointType' when calling createTrustProductChannelEndpointAssignment(Async)");
        }

        return createTrustProductChannelEndpointAssignmentCall(trustProductSid, channelEndpointSid, channelEndpointType, _callback);

    }

    /**
     * 
     * Create a new Assigned Item.
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (required)
     * @param channelEndpointType The type of channel endpoint. eg: phone-number (required)
     * @return TrusthubV1TrustProductTrustProductChannelEndpointAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1TrustProductTrustProductChannelEndpointAssignment createTrustProductChannelEndpointAssignment(String trustProductSid, String channelEndpointSid, String channelEndpointType) throws ApiException {
        ApiResponse<TrusthubV1TrustProductTrustProductChannelEndpointAssignment> localVarResp = createTrustProductChannelEndpointAssignmentWithHttpInfo(trustProductSid, channelEndpointSid, channelEndpointType);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Assigned Item.
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (required)
     * @param channelEndpointType The type of channel endpoint. eg: phone-number (required)
     * @return ApiResponse&lt;TrusthubV1TrustProductTrustProductChannelEndpointAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1TrustProductTrustProductChannelEndpointAssignment> createTrustProductChannelEndpointAssignmentWithHttpInfo(String trustProductSid, String channelEndpointSid, String channelEndpointType) throws ApiException {
        okhttp3.Call localVarCall = createTrustProductChannelEndpointAssignmentValidateBeforeCall(trustProductSid, channelEndpointSid, channelEndpointType, null);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProductTrustProductChannelEndpointAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Assigned Item.
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (required)
     * @param channelEndpointType The type of channel endpoint. eg: phone-number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrustProductChannelEndpointAssignmentAsync(String trustProductSid, String channelEndpointSid, String channelEndpointType, final ApiCallback<TrusthubV1TrustProductTrustProductChannelEndpointAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrustProductChannelEndpointAssignmentValidateBeforeCall(trustProductSid, channelEndpointSid, channelEndpointType, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProductTrustProductChannelEndpointAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrustProductEntityAssignment
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param objectSid The SID of an object bag that holds information of the different items. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrustProductEntityAssignmentCall(String trustProductSid, String objectSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{TrustProductSid}/EntityAssignments"
            .replace("{" + "TrustProductSid" + "}", localVarApiClient.escapeString(trustProductSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (objectSid != null) {
            localVarFormParams.put("ObjectSid", objectSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrustProductEntityAssignmentValidateBeforeCall(String trustProductSid, String objectSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustProductSid' is set
        if (trustProductSid == null) {
            throw new ApiException("Missing the required parameter 'trustProductSid' when calling createTrustProductEntityAssignment(Async)");
        }

        // verify the required parameter 'objectSid' is set
        if (objectSid == null) {
            throw new ApiException("Missing the required parameter 'objectSid' when calling createTrustProductEntityAssignment(Async)");
        }

        return createTrustProductEntityAssignmentCall(trustProductSid, objectSid, _callback);

    }

    /**
     * 
     * Create a new Assigned Item.
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param objectSid The SID of an object bag that holds information of the different items. (required)
     * @return TrusthubV1TrustProductTrustProductEntityAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1TrustProductTrustProductEntityAssignment createTrustProductEntityAssignment(String trustProductSid, String objectSid) throws ApiException {
        ApiResponse<TrusthubV1TrustProductTrustProductEntityAssignment> localVarResp = createTrustProductEntityAssignmentWithHttpInfo(trustProductSid, objectSid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Assigned Item.
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param objectSid The SID of an object bag that holds information of the different items. (required)
     * @return ApiResponse&lt;TrusthubV1TrustProductTrustProductEntityAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1TrustProductTrustProductEntityAssignment> createTrustProductEntityAssignmentWithHttpInfo(String trustProductSid, String objectSid) throws ApiException {
        okhttp3.Call localVarCall = createTrustProductEntityAssignmentValidateBeforeCall(trustProductSid, objectSid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProductTrustProductEntityAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Assigned Item.
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param objectSid The SID of an object bag that holds information of the different items. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrustProductEntityAssignmentAsync(String trustProductSid, String objectSid, final ApiCallback<TrusthubV1TrustProductTrustProductEntityAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrustProductEntityAssignmentValidateBeforeCall(trustProductSid, objectSid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProductTrustProductEntityAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTrustProductEvaluation
     * @param trustProductSid The unique string that we created to identify the trust_product resource. (required)
     * @param policySid The unique string of a policy that is associated to the customer_profile resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrustProductEvaluationCall(String trustProductSid, String policySid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{TrustProductSid}/Evaluations"
            .replace("{" + "TrustProductSid" + "}", localVarApiClient.escapeString(trustProductSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policySid != null) {
            localVarFormParams.put("PolicySid", policySid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrustProductEvaluationValidateBeforeCall(String trustProductSid, String policySid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustProductSid' is set
        if (trustProductSid == null) {
            throw new ApiException("Missing the required parameter 'trustProductSid' when calling createTrustProductEvaluation(Async)");
        }

        // verify the required parameter 'policySid' is set
        if (policySid == null) {
            throw new ApiException("Missing the required parameter 'policySid' when calling createTrustProductEvaluation(Async)");
        }

        return createTrustProductEvaluationCall(trustProductSid, policySid, _callback);

    }

    /**
     * 
     * Create a new Evaluation
     * @param trustProductSid The unique string that we created to identify the trust_product resource. (required)
     * @param policySid The unique string of a policy that is associated to the customer_profile resource. (required)
     * @return TrusthubV1TrustProductTrustProductEvaluation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1TrustProductTrustProductEvaluation createTrustProductEvaluation(String trustProductSid, String policySid) throws ApiException {
        ApiResponse<TrusthubV1TrustProductTrustProductEvaluation> localVarResp = createTrustProductEvaluationWithHttpInfo(trustProductSid, policySid);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new Evaluation
     * @param trustProductSid The unique string that we created to identify the trust_product resource. (required)
     * @param policySid The unique string of a policy that is associated to the customer_profile resource. (required)
     * @return ApiResponse&lt;TrusthubV1TrustProductTrustProductEvaluation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1TrustProductTrustProductEvaluation> createTrustProductEvaluationWithHttpInfo(String trustProductSid, String policySid) throws ApiException {
        okhttp3.Call localVarCall = createTrustProductEvaluationValidateBeforeCall(trustProductSid, policySid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProductTrustProductEvaluation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new Evaluation
     * @param trustProductSid The unique string that we created to identify the trust_product resource. (required)
     * @param policySid The unique string of a policy that is associated to the customer_profile resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTrustProductEvaluationAsync(String trustProductSid, String policySid, final ApiCallback<TrusthubV1TrustProductTrustProductEvaluation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrustProductEvaluationValidateBeforeCall(trustProductSid, policySid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProductTrustProductEvaluation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomerProfile
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerProfileCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomerProfileValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteCustomerProfile(Async)");
        }

        return deleteCustomerProfileCall(sid, _callback);

    }

    /**
     * 
     * Delete a specific Customer-Profile.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomerProfile(String sid) throws ApiException {
        deleteCustomerProfileWithHttpInfo(sid);
    }

    /**
     * 
     * Delete a specific Customer-Profile.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomerProfileWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomerProfileValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific Customer-Profile.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerProfileAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomerProfileValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomerProfileChannelEndpointAssignment
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerProfileChannelEndpointAssignmentCall(String customerProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments/{Sid}"
            .replace("{" + "CustomerProfileSid" + "}", localVarApiClient.escapeString(customerProfileSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomerProfileChannelEndpointAssignmentValidateBeforeCall(String customerProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerProfileSid' is set
        if (customerProfileSid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileSid' when calling deleteCustomerProfileChannelEndpointAssignment(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteCustomerProfileChannelEndpointAssignment(Async)");
        }

        return deleteCustomerProfileChannelEndpointAssignmentCall(customerProfileSid, sid, _callback);

    }

    /**
     * 
     * Remove an Assignment Item Instance.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomerProfileChannelEndpointAssignment(String customerProfileSid, String sid) throws ApiException {
        deleteCustomerProfileChannelEndpointAssignmentWithHttpInfo(customerProfileSid, sid);
    }

    /**
     * 
     * Remove an Assignment Item Instance.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomerProfileChannelEndpointAssignmentWithHttpInfo(String customerProfileSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomerProfileChannelEndpointAssignmentValidateBeforeCall(customerProfileSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove an Assignment Item Instance.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerProfileChannelEndpointAssignmentAsync(String customerProfileSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomerProfileChannelEndpointAssignmentValidateBeforeCall(customerProfileSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomerProfileEntityAssignment
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerProfileEntityAssignmentCall(String customerProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments/{Sid}"
            .replace("{" + "CustomerProfileSid" + "}", localVarApiClient.escapeString(customerProfileSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomerProfileEntityAssignmentValidateBeforeCall(String customerProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerProfileSid' is set
        if (customerProfileSid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileSid' when calling deleteCustomerProfileEntityAssignment(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteCustomerProfileEntityAssignment(Async)");
        }

        return deleteCustomerProfileEntityAssignmentCall(customerProfileSid, sid, _callback);

    }

    /**
     * 
     * Remove an Assignment Item Instance.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomerProfileEntityAssignment(String customerProfileSid, String sid) throws ApiException {
        deleteCustomerProfileEntityAssignmentWithHttpInfo(customerProfileSid, sid);
    }

    /**
     * 
     * Remove an Assignment Item Instance.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomerProfileEntityAssignmentWithHttpInfo(String customerProfileSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomerProfileEntityAssignmentValidateBeforeCall(customerProfileSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove an Assignment Item Instance.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerProfileEntityAssignmentAsync(String customerProfileSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomerProfileEntityAssignmentValidateBeforeCall(customerProfileSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEndUser
     * @param sid The unique string created by Twilio to identify the End User resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEndUserCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/EndUsers/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEndUserValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteEndUser(Async)");
        }

        return deleteEndUserCall(sid, _callback);

    }

    /**
     * 
     * Delete a specific End User.
     * @param sid The unique string created by Twilio to identify the End User resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEndUser(String sid) throws ApiException {
        deleteEndUserWithHttpInfo(sid);
    }

    /**
     * 
     * Delete a specific End User.
     * @param sid The unique string created by Twilio to identify the End User resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEndUserWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteEndUserValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific End User.
     * @param sid The unique string created by Twilio to identify the End User resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEndUserAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEndUserValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSupportingDocument
     * @param sid The unique string created by Twilio to identify the Supporting Document resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSupportingDocumentCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SupportingDocuments/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSupportingDocumentValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteSupportingDocument(Async)");
        }

        return deleteSupportingDocumentCall(sid, _callback);

    }

    /**
     * 
     * Delete a specific Supporting Document.
     * @param sid The unique string created by Twilio to identify the Supporting Document resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSupportingDocument(String sid) throws ApiException {
        deleteSupportingDocumentWithHttpInfo(sid);
    }

    /**
     * 
     * Delete a specific Supporting Document.
     * @param sid The unique string created by Twilio to identify the Supporting Document resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSupportingDocumentWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteSupportingDocumentValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific Supporting Document.
     * @param sid The unique string created by Twilio to identify the Supporting Document resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSupportingDocumentAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSupportingDocumentValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrustProduct
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrustProductCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrustProductValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteTrustProduct(Async)");
        }

        return deleteTrustProductCall(sid, _callback);

    }

    /**
     * 
     * Delete a specific Customer-Profile.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTrustProduct(String sid) throws ApiException {
        deleteTrustProductWithHttpInfo(sid);
    }

    /**
     * 
     * Delete a specific Customer-Profile.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTrustProductWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteTrustProductValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a specific Customer-Profile.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrustProductAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrustProductValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrustProductChannelEndpointAssignment
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrustProductChannelEndpointAssignmentCall(String trustProductSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments/{Sid}"
            .replace("{" + "TrustProductSid" + "}", localVarApiClient.escapeString(trustProductSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrustProductChannelEndpointAssignmentValidateBeforeCall(String trustProductSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustProductSid' is set
        if (trustProductSid == null) {
            throw new ApiException("Missing the required parameter 'trustProductSid' when calling deleteTrustProductChannelEndpointAssignment(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteTrustProductChannelEndpointAssignment(Async)");
        }

        return deleteTrustProductChannelEndpointAssignmentCall(trustProductSid, sid, _callback);

    }

    /**
     * 
     * Remove an Assignment Item Instance.
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTrustProductChannelEndpointAssignment(String trustProductSid, String sid) throws ApiException {
        deleteTrustProductChannelEndpointAssignmentWithHttpInfo(trustProductSid, sid);
    }

    /**
     * 
     * Remove an Assignment Item Instance.
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTrustProductChannelEndpointAssignmentWithHttpInfo(String trustProductSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteTrustProductChannelEndpointAssignmentValidateBeforeCall(trustProductSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove an Assignment Item Instance.
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrustProductChannelEndpointAssignmentAsync(String trustProductSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrustProductChannelEndpointAssignmentValidateBeforeCall(trustProductSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTrustProductEntityAssignment
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrustProductEntityAssignmentCall(String trustProductSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{TrustProductSid}/EntityAssignments/{Sid}"
            .replace("{" + "TrustProductSid" + "}", localVarApiClient.escapeString(trustProductSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrustProductEntityAssignmentValidateBeforeCall(String trustProductSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustProductSid' is set
        if (trustProductSid == null) {
            throw new ApiException("Missing the required parameter 'trustProductSid' when calling deleteTrustProductEntityAssignment(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteTrustProductEntityAssignment(Async)");
        }

        return deleteTrustProductEntityAssignmentCall(trustProductSid, sid, _callback);

    }

    /**
     * 
     * Remove an Assignment Item Instance.
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTrustProductEntityAssignment(String trustProductSid, String sid) throws ApiException {
        deleteTrustProductEntityAssignmentWithHttpInfo(trustProductSid, sid);
    }

    /**
     * 
     * Remove an Assignment Item Instance.
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTrustProductEntityAssignmentWithHttpInfo(String trustProductSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteTrustProductEntityAssignmentValidateBeforeCall(trustProductSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove an Assignment Item Instance.
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTrustProductEntityAssignmentAsync(String trustProductSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrustProductEntityAssignmentValidateBeforeCall(trustProductSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCustomerProfile
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCustomerProfileCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCustomerProfileValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchCustomerProfile(Async)");
        }

        return fetchCustomerProfileCall(sid, _callback);

    }

    /**
     * 
     * Fetch a specific Customer-Profile instance.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @return TrusthubV1CustomerProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1CustomerProfile fetchCustomerProfile(String sid) throws ApiException {
        ApiResponse<TrusthubV1CustomerProfile> localVarResp = fetchCustomerProfileWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific Customer-Profile instance.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @return ApiResponse&lt;TrusthubV1CustomerProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1CustomerProfile> fetchCustomerProfileWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchCustomerProfileValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific Customer-Profile instance.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCustomerProfileAsync(String sid, final ApiCallback<TrusthubV1CustomerProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCustomerProfileValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCustomerProfileChannelEndpointAssignment
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCustomerProfileChannelEndpointAssignmentCall(String customerProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments/{Sid}"
            .replace("{" + "CustomerProfileSid" + "}", localVarApiClient.escapeString(customerProfileSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCustomerProfileChannelEndpointAssignmentValidateBeforeCall(String customerProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerProfileSid' is set
        if (customerProfileSid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileSid' when calling fetchCustomerProfileChannelEndpointAssignment(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchCustomerProfileChannelEndpointAssignment(Async)");
        }

        return fetchCustomerProfileChannelEndpointAssignmentCall(customerProfileSid, sid, _callback);

    }

    /**
     * 
     * Fetch specific Assigned Item Instance.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @return TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment fetchCustomerProfileChannelEndpointAssignment(String customerProfileSid, String sid) throws ApiException {
        ApiResponse<TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment> localVarResp = fetchCustomerProfileChannelEndpointAssignmentWithHttpInfo(customerProfileSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch specific Assigned Item Instance.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @return ApiResponse&lt;TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment> fetchCustomerProfileChannelEndpointAssignmentWithHttpInfo(String customerProfileSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchCustomerProfileChannelEndpointAssignmentValidateBeforeCall(customerProfileSid, sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch specific Assigned Item Instance.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCustomerProfileChannelEndpointAssignmentAsync(String customerProfileSid, String sid, final ApiCallback<TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCustomerProfileChannelEndpointAssignmentValidateBeforeCall(customerProfileSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCustomerProfileEntityAssignment
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCustomerProfileEntityAssignmentCall(String customerProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments/{Sid}"
            .replace("{" + "CustomerProfileSid" + "}", localVarApiClient.escapeString(customerProfileSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCustomerProfileEntityAssignmentValidateBeforeCall(String customerProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerProfileSid' is set
        if (customerProfileSid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileSid' when calling fetchCustomerProfileEntityAssignment(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchCustomerProfileEntityAssignment(Async)");
        }

        return fetchCustomerProfileEntityAssignmentCall(customerProfileSid, sid, _callback);

    }

    /**
     * 
     * Fetch specific Assigned Item Instance.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @return TrusthubV1CustomerProfileCustomerProfileEntityAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1CustomerProfileCustomerProfileEntityAssignment fetchCustomerProfileEntityAssignment(String customerProfileSid, String sid) throws ApiException {
        ApiResponse<TrusthubV1CustomerProfileCustomerProfileEntityAssignment> localVarResp = fetchCustomerProfileEntityAssignmentWithHttpInfo(customerProfileSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch specific Assigned Item Instance.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @return ApiResponse&lt;TrusthubV1CustomerProfileCustomerProfileEntityAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1CustomerProfileCustomerProfileEntityAssignment> fetchCustomerProfileEntityAssignmentWithHttpInfo(String customerProfileSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchCustomerProfileEntityAssignmentValidateBeforeCall(customerProfileSid, sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfileCustomerProfileEntityAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch specific Assigned Item Instance.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCustomerProfileEntityAssignmentAsync(String customerProfileSid, String sid, final ApiCallback<TrusthubV1CustomerProfileCustomerProfileEntityAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCustomerProfileEntityAssignmentValidateBeforeCall(customerProfileSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfileCustomerProfileEntityAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCustomerProfileEvaluation
     * @param customerProfileSid The unique string that we created to identify the customer_profile resource. (required)
     * @param sid The unique string that identifies the Evaluation resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCustomerProfileEvaluationCall(String customerProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations/{Sid}"
            .replace("{" + "CustomerProfileSid" + "}", localVarApiClient.escapeString(customerProfileSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCustomerProfileEvaluationValidateBeforeCall(String customerProfileSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerProfileSid' is set
        if (customerProfileSid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileSid' when calling fetchCustomerProfileEvaluation(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchCustomerProfileEvaluation(Async)");
        }

        return fetchCustomerProfileEvaluationCall(customerProfileSid, sid, _callback);

    }

    /**
     * 
     * Fetch specific Evaluation Instance.
     * @param customerProfileSid The unique string that we created to identify the customer_profile resource. (required)
     * @param sid The unique string that identifies the Evaluation resource. (required)
     * @return TrusthubV1CustomerProfileCustomerProfileEvaluation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1CustomerProfileCustomerProfileEvaluation fetchCustomerProfileEvaluation(String customerProfileSid, String sid) throws ApiException {
        ApiResponse<TrusthubV1CustomerProfileCustomerProfileEvaluation> localVarResp = fetchCustomerProfileEvaluationWithHttpInfo(customerProfileSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch specific Evaluation Instance.
     * @param customerProfileSid The unique string that we created to identify the customer_profile resource. (required)
     * @param sid The unique string that identifies the Evaluation resource. (required)
     * @return ApiResponse&lt;TrusthubV1CustomerProfileCustomerProfileEvaluation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1CustomerProfileCustomerProfileEvaluation> fetchCustomerProfileEvaluationWithHttpInfo(String customerProfileSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchCustomerProfileEvaluationValidateBeforeCall(customerProfileSid, sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfileCustomerProfileEvaluation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch specific Evaluation Instance.
     * @param customerProfileSid The unique string that we created to identify the customer_profile resource. (required)
     * @param sid The unique string that identifies the Evaluation resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCustomerProfileEvaluationAsync(String customerProfileSid, String sid, final ApiCallback<TrusthubV1CustomerProfileCustomerProfileEvaluation> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCustomerProfileEvaluationValidateBeforeCall(customerProfileSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfileCustomerProfileEvaluation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchEndUser
     * @param sid The unique string created by Twilio to identify the End User resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEndUserCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/EndUsers/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchEndUserValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchEndUser(Async)");
        }

        return fetchEndUserCall(sid, _callback);

    }

    /**
     * 
     * Fetch specific End User Instance.
     * @param sid The unique string created by Twilio to identify the End User resource. (required)
     * @return TrusthubV1EndUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1EndUser fetchEndUser(String sid) throws ApiException {
        ApiResponse<TrusthubV1EndUser> localVarResp = fetchEndUserWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch specific End User Instance.
     * @param sid The unique string created by Twilio to identify the End User resource. (required)
     * @return ApiResponse&lt;TrusthubV1EndUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1EndUser> fetchEndUserWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchEndUserValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1EndUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch specific End User Instance.
     * @param sid The unique string created by Twilio to identify the End User resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEndUserAsync(String sid, final ApiCallback<TrusthubV1EndUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchEndUserValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1EndUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchEndUserType
     * @param sid The unique string that identifies the End-User Type resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEndUserTypeCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/EndUserTypes/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchEndUserTypeValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchEndUserType(Async)");
        }

        return fetchEndUserTypeCall(sid, _callback);

    }

    /**
     * 
     * Fetch a specific End-User Type Instance.
     * @param sid The unique string that identifies the End-User Type resource. (required)
     * @return TrusthubV1EndUserType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1EndUserType fetchEndUserType(String sid) throws ApiException {
        ApiResponse<TrusthubV1EndUserType> localVarResp = fetchEndUserTypeWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific End-User Type Instance.
     * @param sid The unique string that identifies the End-User Type resource. (required)
     * @return ApiResponse&lt;TrusthubV1EndUserType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1EndUserType> fetchEndUserTypeWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchEndUserTypeValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1EndUserType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific End-User Type Instance.
     * @param sid The unique string that identifies the End-User Type resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchEndUserTypeAsync(String sid, final ApiCallback<TrusthubV1EndUserType> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchEndUserTypeValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1EndUserType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPolicies
     * @param sid The unique string that identifies the Policy resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPoliciesCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Policies/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPoliciesValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchPolicies(Async)");
        }

        return fetchPoliciesCall(sid, _callback);

    }

    /**
     * 
     * Fetch specific Policy Instance.
     * @param sid The unique string that identifies the Policy resource. (required)
     * @return TrusthubV1Policies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1Policies fetchPolicies(String sid) throws ApiException {
        ApiResponse<TrusthubV1Policies> localVarResp = fetchPoliciesWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch specific Policy Instance.
     * @param sid The unique string that identifies the Policy resource. (required)
     * @return ApiResponse&lt;TrusthubV1Policies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1Policies> fetchPoliciesWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchPoliciesValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1Policies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch specific Policy Instance.
     * @param sid The unique string that identifies the Policy resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPoliciesAsync(String sid, final ApiCallback<TrusthubV1Policies> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPoliciesValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1Policies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSupportingDocument
     * @param sid The unique string created by Twilio to identify the Supporting Document resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSupportingDocumentCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SupportingDocuments/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSupportingDocumentValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchSupportingDocument(Async)");
        }

        return fetchSupportingDocumentCall(sid, _callback);

    }

    /**
     * 
     * Fetch specific Supporting Document Instance.
     * @param sid The unique string created by Twilio to identify the Supporting Document resource. (required)
     * @return TrusthubV1SupportingDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1SupportingDocument fetchSupportingDocument(String sid) throws ApiException {
        ApiResponse<TrusthubV1SupportingDocument> localVarResp = fetchSupportingDocumentWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch specific Supporting Document Instance.
     * @param sid The unique string created by Twilio to identify the Supporting Document resource. (required)
     * @return ApiResponse&lt;TrusthubV1SupportingDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1SupportingDocument> fetchSupportingDocumentWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchSupportingDocumentValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1SupportingDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch specific Supporting Document Instance.
     * @param sid The unique string created by Twilio to identify the Supporting Document resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSupportingDocumentAsync(String sid, final ApiCallback<TrusthubV1SupportingDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSupportingDocumentValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1SupportingDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSupportingDocumentType
     * @param sid The unique string that identifies the Supporting Document Type resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSupportingDocumentTypeCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SupportingDocumentTypes/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSupportingDocumentTypeValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchSupportingDocumentType(Async)");
        }

        return fetchSupportingDocumentTypeCall(sid, _callback);

    }

    /**
     * 
     * Fetch a specific Supporting Document Type Instance.
     * @param sid The unique string that identifies the Supporting Document Type resource. (required)
     * @return TrusthubV1SupportingDocumentType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1SupportingDocumentType fetchSupportingDocumentType(String sid) throws ApiException {
        ApiResponse<TrusthubV1SupportingDocumentType> localVarResp = fetchSupportingDocumentTypeWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific Supporting Document Type Instance.
     * @param sid The unique string that identifies the Supporting Document Type resource. (required)
     * @return ApiResponse&lt;TrusthubV1SupportingDocumentType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1SupportingDocumentType> fetchSupportingDocumentTypeWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchSupportingDocumentTypeValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1SupportingDocumentType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific Supporting Document Type Instance.
     * @param sid The unique string that identifies the Supporting Document Type resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSupportingDocumentTypeAsync(String sid, final ApiCallback<TrusthubV1SupportingDocumentType> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSupportingDocumentTypeValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1SupportingDocumentType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTrustProduct
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTrustProductCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTrustProductValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchTrustProduct(Async)");
        }

        return fetchTrustProductCall(sid, _callback);

    }

    /**
     * 
     * Fetch a specific Customer-Profile instance.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @return TrusthubV1TrustProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1TrustProduct fetchTrustProduct(String sid) throws ApiException {
        ApiResponse<TrusthubV1TrustProduct> localVarResp = fetchTrustProductWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch a specific Customer-Profile instance.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @return ApiResponse&lt;TrusthubV1TrustProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1TrustProduct> fetchTrustProductWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchTrustProductValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch a specific Customer-Profile instance.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTrustProductAsync(String sid, final ApiCallback<TrusthubV1TrustProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTrustProductValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTrustProductChannelEndpointAssignment
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTrustProductChannelEndpointAssignmentCall(String trustProductSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments/{Sid}"
            .replace("{" + "TrustProductSid" + "}", localVarApiClient.escapeString(trustProductSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTrustProductChannelEndpointAssignmentValidateBeforeCall(String trustProductSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustProductSid' is set
        if (trustProductSid == null) {
            throw new ApiException("Missing the required parameter 'trustProductSid' when calling fetchTrustProductChannelEndpointAssignment(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchTrustProductChannelEndpointAssignment(Async)");
        }

        return fetchTrustProductChannelEndpointAssignmentCall(trustProductSid, sid, _callback);

    }

    /**
     * 
     * Fetch specific Assigned Item Instance.
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @return TrusthubV1TrustProductTrustProductChannelEndpointAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1TrustProductTrustProductChannelEndpointAssignment fetchTrustProductChannelEndpointAssignment(String trustProductSid, String sid) throws ApiException {
        ApiResponse<TrusthubV1TrustProductTrustProductChannelEndpointAssignment> localVarResp = fetchTrustProductChannelEndpointAssignmentWithHttpInfo(trustProductSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch specific Assigned Item Instance.
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @return ApiResponse&lt;TrusthubV1TrustProductTrustProductChannelEndpointAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1TrustProductTrustProductChannelEndpointAssignment> fetchTrustProductChannelEndpointAssignmentWithHttpInfo(String trustProductSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchTrustProductChannelEndpointAssignmentValidateBeforeCall(trustProductSid, sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProductTrustProductChannelEndpointAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch specific Assigned Item Instance.
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param sid The unique string that we created to identify the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTrustProductChannelEndpointAssignmentAsync(String trustProductSid, String sid, final ApiCallback<TrusthubV1TrustProductTrustProductChannelEndpointAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTrustProductChannelEndpointAssignmentValidateBeforeCall(trustProductSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProductTrustProductChannelEndpointAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTrustProductEntityAssignment
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTrustProductEntityAssignmentCall(String trustProductSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{TrustProductSid}/EntityAssignments/{Sid}"
            .replace("{" + "TrustProductSid" + "}", localVarApiClient.escapeString(trustProductSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTrustProductEntityAssignmentValidateBeforeCall(String trustProductSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustProductSid' is set
        if (trustProductSid == null) {
            throw new ApiException("Missing the required parameter 'trustProductSid' when calling fetchTrustProductEntityAssignment(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchTrustProductEntityAssignment(Async)");
        }

        return fetchTrustProductEntityAssignmentCall(trustProductSid, sid, _callback);

    }

    /**
     * 
     * Fetch specific Assigned Item Instance.
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @return TrusthubV1TrustProductTrustProductEntityAssignment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1TrustProductTrustProductEntityAssignment fetchTrustProductEntityAssignment(String trustProductSid, String sid) throws ApiException {
        ApiResponse<TrusthubV1TrustProductTrustProductEntityAssignment> localVarResp = fetchTrustProductEntityAssignmentWithHttpInfo(trustProductSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch specific Assigned Item Instance.
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @return ApiResponse&lt;TrusthubV1TrustProductTrustProductEntityAssignment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1TrustProductTrustProductEntityAssignment> fetchTrustProductEntityAssignmentWithHttpInfo(String trustProductSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchTrustProductEntityAssignmentValidateBeforeCall(trustProductSid, sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProductTrustProductEntityAssignment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch specific Assigned Item Instance.
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param sid The unique string that we created to identify the Identity resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTrustProductEntityAssignmentAsync(String trustProductSid, String sid, final ApiCallback<TrusthubV1TrustProductTrustProductEntityAssignment> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTrustProductEntityAssignmentValidateBeforeCall(trustProductSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProductTrustProductEntityAssignment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTrustProductEvaluation
     * @param trustProductSid The unique string that we created to identify the trust_product resource. (required)
     * @param sid The unique string that identifies the Evaluation resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTrustProductEvaluationCall(String trustProductSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{TrustProductSid}/Evaluations/{Sid}"
            .replace("{" + "TrustProductSid" + "}", localVarApiClient.escapeString(trustProductSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTrustProductEvaluationValidateBeforeCall(String trustProductSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustProductSid' is set
        if (trustProductSid == null) {
            throw new ApiException("Missing the required parameter 'trustProductSid' when calling fetchTrustProductEvaluation(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchTrustProductEvaluation(Async)");
        }

        return fetchTrustProductEvaluationCall(trustProductSid, sid, _callback);

    }

    /**
     * 
     * Fetch specific Evaluation Instance.
     * @param trustProductSid The unique string that we created to identify the trust_product resource. (required)
     * @param sid The unique string that identifies the Evaluation resource. (required)
     * @return TrusthubV1TrustProductTrustProductEvaluation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1TrustProductTrustProductEvaluation fetchTrustProductEvaluation(String trustProductSid, String sid) throws ApiException {
        ApiResponse<TrusthubV1TrustProductTrustProductEvaluation> localVarResp = fetchTrustProductEvaluationWithHttpInfo(trustProductSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetch specific Evaluation Instance.
     * @param trustProductSid The unique string that we created to identify the trust_product resource. (required)
     * @param sid The unique string that identifies the Evaluation resource. (required)
     * @return ApiResponse&lt;TrusthubV1TrustProductTrustProductEvaluation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1TrustProductTrustProductEvaluation> fetchTrustProductEvaluationWithHttpInfo(String trustProductSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchTrustProductEvaluationValidateBeforeCall(trustProductSid, sid, null);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProductTrustProductEvaluation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetch specific Evaluation Instance.
     * @param trustProductSid The unique string that we created to identify the trust_product resource. (required)
     * @param sid The unique string that identifies the Evaluation resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTrustProductEvaluationAsync(String trustProductSid, String sid, final ApiCallback<TrusthubV1TrustProductTrustProductEvaluation> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTrustProductEvaluationValidateBeforeCall(trustProductSid, sid, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProductTrustProductEvaluation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCustomerProfile
     * @param status The verification status of the Customer-Profile resource. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomerProfileCall(CustomerProfileEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (policySid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicySid", policySid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomerProfileValidateBeforeCall(CustomerProfileEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listCustomerProfileCall(status, friendlyName, policySid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Customer-Profiles for an account.
     * @param status The verification status of the Customer-Profile resource. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListCustomerProfileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomerProfileResponse listCustomerProfile(CustomerProfileEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListCustomerProfileResponse> localVarResp = listCustomerProfileWithHttpInfo(status, friendlyName, policySid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Customer-Profiles for an account.
     * @param status The verification status of the Customer-Profile resource. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListCustomerProfileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCustomerProfileResponse> listCustomerProfileWithHttpInfo(CustomerProfileEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listCustomerProfileValidateBeforeCall(status, friendlyName, policySid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListCustomerProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Customer-Profiles for an account.
     * @param status The verification status of the Customer-Profile resource. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomerProfileAsync(CustomerProfileEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListCustomerProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomerProfileValidateBeforeCall(status, friendlyName, policySid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListCustomerProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCustomerProfileChannelEndpointAssignment
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (optional)
     * @param channelEndpointSids comma separated list of channel endpoint sids (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomerProfileChannelEndpointAssignmentCall(String customerProfileSid, String channelEndpointSid, String channelEndpointSids, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{CustomerProfileSid}/ChannelEndpointAssignments"
            .replace("{" + "CustomerProfileSid" + "}", localVarApiClient.escapeString(customerProfileSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelEndpointSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChannelEndpointSid", channelEndpointSid));
        }

        if (channelEndpointSids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChannelEndpointSids", channelEndpointSids));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomerProfileChannelEndpointAssignmentValidateBeforeCall(String customerProfileSid, String channelEndpointSid, String channelEndpointSids, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerProfileSid' is set
        if (customerProfileSid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileSid' when calling listCustomerProfileChannelEndpointAssignment(Async)");
        }

        return listCustomerProfileChannelEndpointAssignmentCall(customerProfileSid, channelEndpointSid, channelEndpointSids, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Assigned Items for an account.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (optional)
     * @param channelEndpointSids comma separated list of channel endpoint sids (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListCustomerProfileChannelEndpointAssignmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomerProfileChannelEndpointAssignmentResponse listCustomerProfileChannelEndpointAssignment(String customerProfileSid, String channelEndpointSid, String channelEndpointSids, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListCustomerProfileChannelEndpointAssignmentResponse> localVarResp = listCustomerProfileChannelEndpointAssignmentWithHttpInfo(customerProfileSid, channelEndpointSid, channelEndpointSids, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Assigned Items for an account.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (optional)
     * @param channelEndpointSids comma separated list of channel endpoint sids (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListCustomerProfileChannelEndpointAssignmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCustomerProfileChannelEndpointAssignmentResponse> listCustomerProfileChannelEndpointAssignmentWithHttpInfo(String customerProfileSid, String channelEndpointSid, String channelEndpointSids, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listCustomerProfileChannelEndpointAssignmentValidateBeforeCall(customerProfileSid, channelEndpointSid, channelEndpointSids, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListCustomerProfileChannelEndpointAssignmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Assigned Items for an account.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (optional)
     * @param channelEndpointSids comma separated list of channel endpoint sids (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomerProfileChannelEndpointAssignmentAsync(String customerProfileSid, String channelEndpointSid, String channelEndpointSids, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListCustomerProfileChannelEndpointAssignmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomerProfileChannelEndpointAssignmentValidateBeforeCall(customerProfileSid, channelEndpointSid, channelEndpointSids, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListCustomerProfileChannelEndpointAssignmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCustomerProfileEntityAssignment
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomerProfileEntityAssignmentCall(String customerProfileSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{CustomerProfileSid}/EntityAssignments"
            .replace("{" + "CustomerProfileSid" + "}", localVarApiClient.escapeString(customerProfileSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomerProfileEntityAssignmentValidateBeforeCall(String customerProfileSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerProfileSid' is set
        if (customerProfileSid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileSid' when calling listCustomerProfileEntityAssignment(Async)");
        }

        return listCustomerProfileEntityAssignmentCall(customerProfileSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Assigned Items for an account.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListCustomerProfileEntityAssignmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomerProfileEntityAssignmentResponse listCustomerProfileEntityAssignment(String customerProfileSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListCustomerProfileEntityAssignmentResponse> localVarResp = listCustomerProfileEntityAssignmentWithHttpInfo(customerProfileSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Assigned Items for an account.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListCustomerProfileEntityAssignmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCustomerProfileEntityAssignmentResponse> listCustomerProfileEntityAssignmentWithHttpInfo(String customerProfileSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listCustomerProfileEntityAssignmentValidateBeforeCall(customerProfileSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListCustomerProfileEntityAssignmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Assigned Items for an account.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomerProfileEntityAssignmentAsync(String customerProfileSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListCustomerProfileEntityAssignmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomerProfileEntityAssignmentValidateBeforeCall(customerProfileSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListCustomerProfileEntityAssignmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCustomerProfileEvaluation
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomerProfileEvaluationCall(String customerProfileSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{CustomerProfileSid}/Evaluations"
            .replace("{" + "CustomerProfileSid" + "}", localVarApiClient.escapeString(customerProfileSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomerProfileEvaluationValidateBeforeCall(String customerProfileSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customerProfileSid' is set
        if (customerProfileSid == null) {
            throw new ApiException("Missing the required parameter 'customerProfileSid' when calling listCustomerProfileEvaluation(Async)");
        }

        return listCustomerProfileEvaluationCall(customerProfileSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Evaluations associated to the customer_profile resource.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListCustomerProfileEvaluationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomerProfileEvaluationResponse listCustomerProfileEvaluation(String customerProfileSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListCustomerProfileEvaluationResponse> localVarResp = listCustomerProfileEvaluationWithHttpInfo(customerProfileSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Evaluations associated to the customer_profile resource.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListCustomerProfileEvaluationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCustomerProfileEvaluationResponse> listCustomerProfileEvaluationWithHttpInfo(String customerProfileSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listCustomerProfileEvaluationValidateBeforeCall(customerProfileSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListCustomerProfileEvaluationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Evaluations associated to the customer_profile resource.
     * @param customerProfileSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomerProfileEvaluationAsync(String customerProfileSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListCustomerProfileEvaluationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomerProfileEvaluationValidateBeforeCall(customerProfileSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListCustomerProfileEvaluationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEndUser
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEndUserCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/EndUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEndUserValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listEndUserCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all End User for an account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListEndUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListEndUserResponse listEndUser(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListEndUserResponse> localVarResp = listEndUserWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all End User for an account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListEndUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEndUserResponse> listEndUserWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listEndUserValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListEndUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all End User for an account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEndUserAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListEndUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEndUserValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListEndUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEndUserType
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEndUserTypeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/EndUserTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEndUserTypeValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listEndUserTypeCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all End-User Types.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListEndUserTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListEndUserTypeResponse listEndUserType(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListEndUserTypeResponse> localVarResp = listEndUserTypeWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all End-User Types.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListEndUserTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListEndUserTypeResponse> listEndUserTypeWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listEndUserTypeValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListEndUserTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all End-User Types.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEndUserTypeAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListEndUserTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEndUserTypeValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListEndUserTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPolicies
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPoliciesCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPoliciesValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listPoliciesCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Policys.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListPoliciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListPoliciesResponse listPolicies(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListPoliciesResponse> localVarResp = listPoliciesWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Policys.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListPoliciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPoliciesResponse> listPoliciesWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listPoliciesValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListPoliciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Policys.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPoliciesAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListPoliciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPoliciesValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListPoliciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSupportingDocument
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSupportingDocumentCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SupportingDocuments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSupportingDocumentValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listSupportingDocumentCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Supporting Document for an account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListSupportingDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSupportingDocumentResponse listSupportingDocument(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListSupportingDocumentResponse> localVarResp = listSupportingDocumentWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Supporting Document for an account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListSupportingDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSupportingDocumentResponse> listSupportingDocumentWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSupportingDocumentValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSupportingDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Supporting Document for an account.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSupportingDocumentAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListSupportingDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSupportingDocumentValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSupportingDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSupportingDocumentType
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSupportingDocumentTypeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SupportingDocumentTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSupportingDocumentTypeValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listSupportingDocumentTypeCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Supporting Document Types.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListSupportingDocumentTypeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListSupportingDocumentTypeResponse listSupportingDocumentType(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListSupportingDocumentTypeResponse> localVarResp = listSupportingDocumentTypeWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Supporting Document Types.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListSupportingDocumentTypeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSupportingDocumentTypeResponse> listSupportingDocumentTypeWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listSupportingDocumentTypeValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListSupportingDocumentTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Supporting Document Types.
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSupportingDocumentTypeAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListSupportingDocumentTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSupportingDocumentTypeValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListSupportingDocumentTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTrustProduct
     * @param status The verification status of the Customer-Profile resource. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrustProductCall(TrustProductEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        if (friendlyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FriendlyName", friendlyName));
        }

        if (policySid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PolicySid", policySid));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrustProductValidateBeforeCall(TrustProductEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listTrustProductCall(status, friendlyName, policySid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Customer-Profiles for an account.
     * @param status The verification status of the Customer-Profile resource. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListTrustProductResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListTrustProductResponse listTrustProduct(TrustProductEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListTrustProductResponse> localVarResp = listTrustProductWithHttpInfo(status, friendlyName, policySid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Customer-Profiles for an account.
     * @param status The verification status of the Customer-Profile resource. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListTrustProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTrustProductResponse> listTrustProductWithHttpInfo(TrustProductEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listTrustProductValidateBeforeCall(status, friendlyName, policySid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListTrustProductResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Customer-Profiles for an account.
     * @param status The verification status of the Customer-Profile resource. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param policySid The unique string of a policy that is associated to the Customer-Profile resource. (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrustProductAsync(TrustProductEnumStatus status, String friendlyName, String policySid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListTrustProductResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrustProductValidateBeforeCall(status, friendlyName, policySid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListTrustProductResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTrustProductChannelEndpointAssignment
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (optional)
     * @param channelEndpointSids comma separated list of channel endpoint sids (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrustProductChannelEndpointAssignmentCall(String trustProductSid, String channelEndpointSid, String channelEndpointSids, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{TrustProductSid}/ChannelEndpointAssignments"
            .replace("{" + "TrustProductSid" + "}", localVarApiClient.escapeString(trustProductSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelEndpointSid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChannelEndpointSid", channelEndpointSid));
        }

        if (channelEndpointSids != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ChannelEndpointSids", channelEndpointSids));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrustProductChannelEndpointAssignmentValidateBeforeCall(String trustProductSid, String channelEndpointSid, String channelEndpointSids, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustProductSid' is set
        if (trustProductSid == null) {
            throw new ApiException("Missing the required parameter 'trustProductSid' when calling listTrustProductChannelEndpointAssignment(Async)");
        }

        return listTrustProductChannelEndpointAssignmentCall(trustProductSid, channelEndpointSid, channelEndpointSids, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Assigned Items for an account.
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (optional)
     * @param channelEndpointSids comma separated list of channel endpoint sids (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListTrustProductChannelEndpointAssignmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListTrustProductChannelEndpointAssignmentResponse listTrustProductChannelEndpointAssignment(String trustProductSid, String channelEndpointSid, String channelEndpointSids, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListTrustProductChannelEndpointAssignmentResponse> localVarResp = listTrustProductChannelEndpointAssignmentWithHttpInfo(trustProductSid, channelEndpointSid, channelEndpointSids, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Assigned Items for an account.
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (optional)
     * @param channelEndpointSids comma separated list of channel endpoint sids (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListTrustProductChannelEndpointAssignmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTrustProductChannelEndpointAssignmentResponse> listTrustProductChannelEndpointAssignmentWithHttpInfo(String trustProductSid, String channelEndpointSid, String channelEndpointSids, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listTrustProductChannelEndpointAssignmentValidateBeforeCall(trustProductSid, channelEndpointSid, channelEndpointSids, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListTrustProductChannelEndpointAssignmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Assigned Items for an account.
     * @param trustProductSid The unique string that we created to identify the CustomerProfile resource. (required)
     * @param channelEndpointSid The SID of an channel endpoint (optional)
     * @param channelEndpointSids comma separated list of channel endpoint sids (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrustProductChannelEndpointAssignmentAsync(String trustProductSid, String channelEndpointSid, String channelEndpointSids, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListTrustProductChannelEndpointAssignmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrustProductChannelEndpointAssignmentValidateBeforeCall(trustProductSid, channelEndpointSid, channelEndpointSids, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListTrustProductChannelEndpointAssignmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTrustProductEntityAssignment
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrustProductEntityAssignmentCall(String trustProductSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{TrustProductSid}/EntityAssignments"
            .replace("{" + "TrustProductSid" + "}", localVarApiClient.escapeString(trustProductSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrustProductEntityAssignmentValidateBeforeCall(String trustProductSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustProductSid' is set
        if (trustProductSid == null) {
            throw new ApiException("Missing the required parameter 'trustProductSid' when calling listTrustProductEntityAssignment(Async)");
        }

        return listTrustProductEntityAssignmentCall(trustProductSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of all Assigned Items for an account.
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListTrustProductEntityAssignmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListTrustProductEntityAssignmentResponse listTrustProductEntityAssignment(String trustProductSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListTrustProductEntityAssignmentResponse> localVarResp = listTrustProductEntityAssignmentWithHttpInfo(trustProductSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of all Assigned Items for an account.
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListTrustProductEntityAssignmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTrustProductEntityAssignmentResponse> listTrustProductEntityAssignmentWithHttpInfo(String trustProductSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listTrustProductEntityAssignmentValidateBeforeCall(trustProductSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListTrustProductEntityAssignmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of all Assigned Items for an account.
     * @param trustProductSid The unique string that we created to identify the TrustProduct resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrustProductEntityAssignmentAsync(String trustProductSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListTrustProductEntityAssignmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrustProductEntityAssignmentValidateBeforeCall(trustProductSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListTrustProductEntityAssignmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTrustProductEvaluation
     * @param trustProductSid The unique string that we created to identify the trust_product resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrustProductEvaluationCall(String trustProductSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{TrustProductSid}/Evaluations"
            .replace("{" + "TrustProductSid" + "}", localVarApiClient.escapeString(trustProductSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrustProductEvaluationValidateBeforeCall(String trustProductSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'trustProductSid' is set
        if (trustProductSid == null) {
            throw new ApiException("Missing the required parameter 'trustProductSid' when calling listTrustProductEvaluation(Async)");
        }

        return listTrustProductEvaluationCall(trustProductSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * Retrieve a list of Evaluations associated to the trust_product resource.
     * @param trustProductSid The unique string that we created to identify the trust_product resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListTrustProductEvaluationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListTrustProductEvaluationResponse listTrustProductEvaluation(String trustProductSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListTrustProductEvaluationResponse> localVarResp = listTrustProductEvaluationWithHttpInfo(trustProductSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Evaluations associated to the trust_product resource.
     * @param trustProductSid The unique string that we created to identify the trust_product resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListTrustProductEvaluationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTrustProductEvaluationResponse> listTrustProductEvaluationWithHttpInfo(String trustProductSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listTrustProductEvaluationValidateBeforeCall(trustProductSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListTrustProductEvaluationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Evaluations associated to the trust_product resource.
     * @param trustProductSid The unique string that we created to identify the trust_product resource. (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTrustProductEvaluationAsync(String trustProductSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListTrustProductEvaluationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrustProductEvaluationValidateBeforeCall(trustProductSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListTrustProductEvaluationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomerProfile
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerProfileCall(String sid, String email, String friendlyName, CustomerProfileEnumStatus status, URI statusCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/CustomerProfiles/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarFormParams.put("Email", email);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerProfileValidateBeforeCall(String sid, String email, String friendlyName, CustomerProfileEnumStatus status, URI statusCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateCustomerProfile(Async)");
        }

        return updateCustomerProfileCall(sid, email, friendlyName, status, statusCallback, _callback);

    }

    /**
     * 
     * Updates a Customer-Profile in an account.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return TrusthubV1CustomerProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1CustomerProfile updateCustomerProfile(String sid, String email, String friendlyName, CustomerProfileEnumStatus status, URI statusCallback) throws ApiException {
        ApiResponse<TrusthubV1CustomerProfile> localVarResp = updateCustomerProfileWithHttpInfo(sid, email, friendlyName, status, statusCallback);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a Customer-Profile in an account.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return ApiResponse&lt;TrusthubV1CustomerProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1CustomerProfile> updateCustomerProfileWithHttpInfo(String sid, String email, String friendlyName, CustomerProfileEnumStatus status, URI statusCallback) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerProfileValidateBeforeCall(sid, email, friendlyName, status, statusCallback, null);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a Customer-Profile in an account.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerProfileAsync(String sid, String email, String friendlyName, CustomerProfileEnumStatus status, URI statusCallback, final ApiCallback<TrusthubV1CustomerProfile> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerProfileValidateBeforeCall(sid, email, friendlyName, status, statusCallback, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1CustomerProfile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEndUser
     * @param sid The unique string created by Twilio to identify the End User resource. (required)
     * @param attributes The set of parameters that are the attributes of the End User resource which are derived End User Types. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEndUserCall(String sid, Object attributes, String friendlyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/EndUsers/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEndUserValidateBeforeCall(String sid, Object attributes, String friendlyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateEndUser(Async)");
        }

        return updateEndUserCall(sid, attributes, friendlyName, _callback);

    }

    /**
     * 
     * Update an existing End User.
     * @param sid The unique string created by Twilio to identify the End User resource. (required)
     * @param attributes The set of parameters that are the attributes of the End User resource which are derived End User Types. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @return TrusthubV1EndUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1EndUser updateEndUser(String sid, Object attributes, String friendlyName) throws ApiException {
        ApiResponse<TrusthubV1EndUser> localVarResp = updateEndUserWithHttpInfo(sid, attributes, friendlyName);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing End User.
     * @param sid The unique string created by Twilio to identify the End User resource. (required)
     * @param attributes The set of parameters that are the attributes of the End User resource which are derived End User Types. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @return ApiResponse&lt;TrusthubV1EndUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1EndUser> updateEndUserWithHttpInfo(String sid, Object attributes, String friendlyName) throws ApiException {
        okhttp3.Call localVarCall = updateEndUserValidateBeforeCall(sid, attributes, friendlyName, null);
        Type localVarReturnType = new TypeToken<TrusthubV1EndUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing End User.
     * @param sid The unique string created by Twilio to identify the End User resource. (required)
     * @param attributes The set of parameters that are the attributes of the End User resource which are derived End User Types. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEndUserAsync(String sid, Object attributes, String friendlyName, final ApiCallback<TrusthubV1EndUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEndUserValidateBeforeCall(sid, attributes, friendlyName, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1EndUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSupportingDocument
     * @param sid The unique string created by Twilio to identify the Supporting Document resource. (required)
     * @param attributes The set of parameters that are the attributes of the Supporting Document resource which are derived Supporting Document Types. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSupportingDocumentCall(String sid, Object attributes, String friendlyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/SupportingDocuments/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSupportingDocumentValidateBeforeCall(String sid, Object attributes, String friendlyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateSupportingDocument(Async)");
        }

        return updateSupportingDocumentCall(sid, attributes, friendlyName, _callback);

    }

    /**
     * 
     * Update an existing Supporting Document.
     * @param sid The unique string created by Twilio to identify the Supporting Document resource. (required)
     * @param attributes The set of parameters that are the attributes of the Supporting Document resource which are derived Supporting Document Types. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @return TrusthubV1SupportingDocument
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1SupportingDocument updateSupportingDocument(String sid, Object attributes, String friendlyName) throws ApiException {
        ApiResponse<TrusthubV1SupportingDocument> localVarResp = updateSupportingDocumentWithHttpInfo(sid, attributes, friendlyName);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing Supporting Document.
     * @param sid The unique string created by Twilio to identify the Supporting Document resource. (required)
     * @param attributes The set of parameters that are the attributes of the Supporting Document resource which are derived Supporting Document Types. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @return ApiResponse&lt;TrusthubV1SupportingDocument&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1SupportingDocument> updateSupportingDocumentWithHttpInfo(String sid, Object attributes, String friendlyName) throws ApiException {
        okhttp3.Call localVarCall = updateSupportingDocumentValidateBeforeCall(sid, attributes, friendlyName, null);
        Type localVarReturnType = new TypeToken<TrusthubV1SupportingDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing Supporting Document.
     * @param sid The unique string created by Twilio to identify the Supporting Document resource. (required)
     * @param attributes The set of parameters that are the attributes of the Supporting Document resource which are derived Supporting Document Types. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSupportingDocumentAsync(String sid, Object attributes, String friendlyName, final ApiCallback<TrusthubV1SupportingDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSupportingDocumentValidateBeforeCall(sid, attributes, friendlyName, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1SupportingDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTrustProduct
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrustProductCall(String sid, String email, String friendlyName, TrustProductEnumStatus status, URI statusCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://trusthub.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/TrustProducts/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarFormParams.put("Email", email);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (status != null) {
            localVarFormParams.put("Status", status);
        }

        if (statusCallback != null) {
            localVarFormParams.put("StatusCallback", statusCallback);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTrustProductValidateBeforeCall(String sid, String email, String friendlyName, TrustProductEnumStatus status, URI statusCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateTrustProduct(Async)");
        }

        return updateTrustProductCall(sid, email, friendlyName, status, statusCallback, _callback);

    }

    /**
     * 
     * Updates a Customer-Profile in an account.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return TrusthubV1TrustProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TrusthubV1TrustProduct updateTrustProduct(String sid, String email, String friendlyName, TrustProductEnumStatus status, URI statusCallback) throws ApiException {
        ApiResponse<TrusthubV1TrustProduct> localVarResp = updateTrustProductWithHttpInfo(sid, email, friendlyName, status, statusCallback);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a Customer-Profile in an account.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @return ApiResponse&lt;TrusthubV1TrustProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TrusthubV1TrustProduct> updateTrustProductWithHttpInfo(String sid, String email, String friendlyName, TrustProductEnumStatus status, URI statusCallback) throws ApiException {
        okhttp3.Call localVarCall = updateTrustProductValidateBeforeCall(sid, email, friendlyName, status, statusCallback, null);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a Customer-Profile in an account.
     * @param sid The unique string that we created to identify the Customer-Profile resource. (required)
     * @param email The email address that will receive updates when the Customer-Profile resource changes status. (optional)
     * @param friendlyName The string that you assigned to describe the resource. (optional)
     * @param status  (optional)
     * @param statusCallback The URL we call to inform your application of status changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTrustProductAsync(String sid, String email, String friendlyName, TrustProductEnumStatus status, URI statusCallback, final ApiCallback<TrusthubV1TrustProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTrustProductValidateBeforeCall(sid, email, friendlyName, status, statusCallback, _callback);
        Type localVarReturnType = new TypeToken<TrusthubV1TrustProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
