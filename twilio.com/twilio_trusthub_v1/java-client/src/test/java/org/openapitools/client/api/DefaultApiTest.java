/*
 * Twilio - Trusthub
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.42.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CustomerProfileEnumStatus;
import org.openapitools.client.model.ListCustomerProfileChannelEndpointAssignmentResponse;
import org.openapitools.client.model.ListCustomerProfileEntityAssignmentResponse;
import org.openapitools.client.model.ListCustomerProfileEvaluationResponse;
import org.openapitools.client.model.ListCustomerProfileResponse;
import org.openapitools.client.model.ListEndUserResponse;
import org.openapitools.client.model.ListEndUserTypeResponse;
import org.openapitools.client.model.ListPoliciesResponse;
import org.openapitools.client.model.ListSupportingDocumentResponse;
import org.openapitools.client.model.ListSupportingDocumentTypeResponse;
import org.openapitools.client.model.ListTrustProductChannelEndpointAssignmentResponse;
import org.openapitools.client.model.ListTrustProductEntityAssignmentResponse;
import org.openapitools.client.model.ListTrustProductEvaluationResponse;
import org.openapitools.client.model.ListTrustProductResponse;
import org.openapitools.client.model.TrustProductEnumStatus;
import org.openapitools.client.model.TrusthubV1CustomerProfile;
import org.openapitools.client.model.TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment;
import org.openapitools.client.model.TrusthubV1CustomerProfileCustomerProfileEntityAssignment;
import org.openapitools.client.model.TrusthubV1CustomerProfileCustomerProfileEvaluation;
import org.openapitools.client.model.TrusthubV1EndUser;
import org.openapitools.client.model.TrusthubV1EndUserType;
import org.openapitools.client.model.TrusthubV1Policies;
import org.openapitools.client.model.TrusthubV1SupportingDocument;
import org.openapitools.client.model.TrusthubV1SupportingDocumentType;
import org.openapitools.client.model.TrusthubV1TrustProduct;
import org.openapitools.client.model.TrusthubV1TrustProductTrustProductChannelEndpointAssignment;
import org.openapitools.client.model.TrusthubV1TrustProductTrustProductEntityAssignment;
import org.openapitools.client.model.TrusthubV1TrustProductTrustProductEvaluation;
import java.net.URI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create a new Customer-Profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomerProfileTest() throws ApiException {
        String email = null;
        String friendlyName = null;
        String policySid = null;
        URI statusCallback = null;
        TrusthubV1CustomerProfile response = api.createCustomerProfile(email, friendlyName, policySid, statusCallback);
        // TODO: test validations
    }

    /**
     * Create a new Assigned Item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomerProfileChannelEndpointAssignmentTest() throws ApiException {
        String customerProfileSid = null;
        String channelEndpointSid = null;
        String channelEndpointType = null;
        TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment response = api.createCustomerProfileChannelEndpointAssignment(customerProfileSid, channelEndpointSid, channelEndpointType);
        // TODO: test validations
    }

    /**
     * Create a new Assigned Item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomerProfileEntityAssignmentTest() throws ApiException {
        String customerProfileSid = null;
        String objectSid = null;
        TrusthubV1CustomerProfileCustomerProfileEntityAssignment response = api.createCustomerProfileEntityAssignment(customerProfileSid, objectSid);
        // TODO: test validations
    }

    /**
     * Create a new Evaluation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomerProfileEvaluationTest() throws ApiException {
        String customerProfileSid = null;
        String policySid = null;
        TrusthubV1CustomerProfileCustomerProfileEvaluation response = api.createCustomerProfileEvaluation(customerProfileSid, policySid);
        // TODO: test validations
    }

    /**
     * Create a new End User.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEndUserTest() throws ApiException {
        String friendlyName = null;
        String type = null;
        Object attributes = null;
        TrusthubV1EndUser response = api.createEndUser(friendlyName, type, attributes);
        // TODO: test validations
    }

    /**
     * Create a new Supporting Document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSupportingDocumentTest() throws ApiException {
        String friendlyName = null;
        String type = null;
        Object attributes = null;
        TrusthubV1SupportingDocument response = api.createSupportingDocument(friendlyName, type, attributes);
        // TODO: test validations
    }

    /**
     * Create a new Customer-Profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrustProductTest() throws ApiException {
        String email = null;
        String friendlyName = null;
        String policySid = null;
        URI statusCallback = null;
        TrusthubV1TrustProduct response = api.createTrustProduct(email, friendlyName, policySid, statusCallback);
        // TODO: test validations
    }

    /**
     * Create a new Assigned Item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrustProductChannelEndpointAssignmentTest() throws ApiException {
        String trustProductSid = null;
        String channelEndpointSid = null;
        String channelEndpointType = null;
        TrusthubV1TrustProductTrustProductChannelEndpointAssignment response = api.createTrustProductChannelEndpointAssignment(trustProductSid, channelEndpointSid, channelEndpointType);
        // TODO: test validations
    }

    /**
     * Create a new Assigned Item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrustProductEntityAssignmentTest() throws ApiException {
        String trustProductSid = null;
        String objectSid = null;
        TrusthubV1TrustProductTrustProductEntityAssignment response = api.createTrustProductEntityAssignment(trustProductSid, objectSid);
        // TODO: test validations
    }

    /**
     * Create a new Evaluation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrustProductEvaluationTest() throws ApiException {
        String trustProductSid = null;
        String policySid = null;
        TrusthubV1TrustProductTrustProductEvaluation response = api.createTrustProductEvaluation(trustProductSid, policySid);
        // TODO: test validations
    }

    /**
     * Delete a specific Customer-Profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomerProfileTest() throws ApiException {
        String sid = null;
        api.deleteCustomerProfile(sid);
        // TODO: test validations
    }

    /**
     * Remove an Assignment Item Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomerProfileChannelEndpointAssignmentTest() throws ApiException {
        String customerProfileSid = null;
        String sid = null;
        api.deleteCustomerProfileChannelEndpointAssignment(customerProfileSid, sid);
        // TODO: test validations
    }

    /**
     * Remove an Assignment Item Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomerProfileEntityAssignmentTest() throws ApiException {
        String customerProfileSid = null;
        String sid = null;
        api.deleteCustomerProfileEntityAssignment(customerProfileSid, sid);
        // TODO: test validations
    }

    /**
     * Delete a specific End User.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEndUserTest() throws ApiException {
        String sid = null;
        api.deleteEndUser(sid);
        // TODO: test validations
    }

    /**
     * Delete a specific Supporting Document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSupportingDocumentTest() throws ApiException {
        String sid = null;
        api.deleteSupportingDocument(sid);
        // TODO: test validations
    }

    /**
     * Delete a specific Customer-Profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrustProductTest() throws ApiException {
        String sid = null;
        api.deleteTrustProduct(sid);
        // TODO: test validations
    }

    /**
     * Remove an Assignment Item Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrustProductChannelEndpointAssignmentTest() throws ApiException {
        String trustProductSid = null;
        String sid = null;
        api.deleteTrustProductChannelEndpointAssignment(trustProductSid, sid);
        // TODO: test validations
    }

    /**
     * Remove an Assignment Item Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrustProductEntityAssignmentTest() throws ApiException {
        String trustProductSid = null;
        String sid = null;
        api.deleteTrustProductEntityAssignment(trustProductSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch a specific Customer-Profile instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchCustomerProfileTest() throws ApiException {
        String sid = null;
        TrusthubV1CustomerProfile response = api.fetchCustomerProfile(sid);
        // TODO: test validations
    }

    /**
     * Fetch specific Assigned Item Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchCustomerProfileChannelEndpointAssignmentTest() throws ApiException {
        String customerProfileSid = null;
        String sid = null;
        TrusthubV1CustomerProfileCustomerProfileChannelEndpointAssignment response = api.fetchCustomerProfileChannelEndpointAssignment(customerProfileSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch specific Assigned Item Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchCustomerProfileEntityAssignmentTest() throws ApiException {
        String customerProfileSid = null;
        String sid = null;
        TrusthubV1CustomerProfileCustomerProfileEntityAssignment response = api.fetchCustomerProfileEntityAssignment(customerProfileSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch specific Evaluation Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchCustomerProfileEvaluationTest() throws ApiException {
        String customerProfileSid = null;
        String sid = null;
        TrusthubV1CustomerProfileCustomerProfileEvaluation response = api.fetchCustomerProfileEvaluation(customerProfileSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch specific End User Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchEndUserTest() throws ApiException {
        String sid = null;
        TrusthubV1EndUser response = api.fetchEndUser(sid);
        // TODO: test validations
    }

    /**
     * Fetch a specific End-User Type Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchEndUserTypeTest() throws ApiException {
        String sid = null;
        TrusthubV1EndUserType response = api.fetchEndUserType(sid);
        // TODO: test validations
    }

    /**
     * Fetch specific Policy Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchPoliciesTest() throws ApiException {
        String sid = null;
        TrusthubV1Policies response = api.fetchPolicies(sid);
        // TODO: test validations
    }

    /**
     * Fetch specific Supporting Document Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchSupportingDocumentTest() throws ApiException {
        String sid = null;
        TrusthubV1SupportingDocument response = api.fetchSupportingDocument(sid);
        // TODO: test validations
    }

    /**
     * Fetch a specific Supporting Document Type Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchSupportingDocumentTypeTest() throws ApiException {
        String sid = null;
        TrusthubV1SupportingDocumentType response = api.fetchSupportingDocumentType(sid);
        // TODO: test validations
    }

    /**
     * Fetch a specific Customer-Profile instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchTrustProductTest() throws ApiException {
        String sid = null;
        TrusthubV1TrustProduct response = api.fetchTrustProduct(sid);
        // TODO: test validations
    }

    /**
     * Fetch specific Assigned Item Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchTrustProductChannelEndpointAssignmentTest() throws ApiException {
        String trustProductSid = null;
        String sid = null;
        TrusthubV1TrustProductTrustProductChannelEndpointAssignment response = api.fetchTrustProductChannelEndpointAssignment(trustProductSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch specific Assigned Item Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchTrustProductEntityAssignmentTest() throws ApiException {
        String trustProductSid = null;
        String sid = null;
        TrusthubV1TrustProductTrustProductEntityAssignment response = api.fetchTrustProductEntityAssignment(trustProductSid, sid);
        // TODO: test validations
    }

    /**
     * Fetch specific Evaluation Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fetchTrustProductEvaluationTest() throws ApiException {
        String trustProductSid = null;
        String sid = null;
        TrusthubV1TrustProductTrustProductEvaluation response = api.fetchTrustProductEvaluation(trustProductSid, sid);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Customer-Profiles for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCustomerProfileTest() throws ApiException {
        CustomerProfileEnumStatus status = null;
        String friendlyName = null;
        String policySid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListCustomerProfileResponse response = api.listCustomerProfile(status, friendlyName, policySid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Assigned Items for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCustomerProfileChannelEndpointAssignmentTest() throws ApiException {
        String customerProfileSid = null;
        String channelEndpointSid = null;
        String channelEndpointSids = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListCustomerProfileChannelEndpointAssignmentResponse response = api.listCustomerProfileChannelEndpointAssignment(customerProfileSid, channelEndpointSid, channelEndpointSids, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Assigned Items for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCustomerProfileEntityAssignmentTest() throws ApiException {
        String customerProfileSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListCustomerProfileEntityAssignmentResponse response = api.listCustomerProfileEntityAssignment(customerProfileSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of Evaluations associated to the customer_profile resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCustomerProfileEvaluationTest() throws ApiException {
        String customerProfileSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListCustomerProfileEvaluationResponse response = api.listCustomerProfileEvaluation(customerProfileSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all End User for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEndUserTest() throws ApiException {
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListEndUserResponse response = api.listEndUser(pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all End-User Types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEndUserTypeTest() throws ApiException {
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListEndUserTypeResponse response = api.listEndUserType(pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Policys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPoliciesTest() throws ApiException {
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListPoliciesResponse response = api.listPolicies(pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Supporting Document for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSupportingDocumentTest() throws ApiException {
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListSupportingDocumentResponse response = api.listSupportingDocument(pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Supporting Document Types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSupportingDocumentTypeTest() throws ApiException {
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListSupportingDocumentTypeResponse response = api.listSupportingDocumentType(pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Customer-Profiles for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrustProductTest() throws ApiException {
        TrustProductEnumStatus status = null;
        String friendlyName = null;
        String policySid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListTrustProductResponse response = api.listTrustProduct(status, friendlyName, policySid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Assigned Items for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrustProductChannelEndpointAssignmentTest() throws ApiException {
        String trustProductSid = null;
        String channelEndpointSid = null;
        String channelEndpointSids = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListTrustProductChannelEndpointAssignmentResponse response = api.listTrustProductChannelEndpointAssignment(trustProductSid, channelEndpointSid, channelEndpointSids, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of all Assigned Items for an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrustProductEntityAssignmentTest() throws ApiException {
        String trustProductSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListTrustProductEntityAssignmentResponse response = api.listTrustProductEntityAssignment(trustProductSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieve a list of Evaluations associated to the trust_product resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrustProductEvaluationTest() throws ApiException {
        String trustProductSid = null;
        Integer pageSize = null;
        Integer page = null;
        String pageToken = null;
        ListTrustProductEvaluationResponse response = api.listTrustProductEvaluation(trustProductSid, pageSize, page, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a Customer-Profile in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomerProfileTest() throws ApiException {
        String sid = null;
        String email = null;
        String friendlyName = null;
        CustomerProfileEnumStatus status = null;
        URI statusCallback = null;
        TrusthubV1CustomerProfile response = api.updateCustomerProfile(sid, email, friendlyName, status, statusCallback);
        // TODO: test validations
    }

    /**
     * Update an existing End User.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEndUserTest() throws ApiException {
        String sid = null;
        Object attributes = null;
        String friendlyName = null;
        TrusthubV1EndUser response = api.updateEndUser(sid, attributes, friendlyName);
        // TODO: test validations
    }

    /**
     * Update an existing Supporting Document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSupportingDocumentTest() throws ApiException {
        String sid = null;
        Object attributes = null;
        String friendlyName = null;
        TrusthubV1SupportingDocument response = api.updateSupportingDocument(sid, attributes, friendlyName);
        // TODO: test validations
    }

    /**
     * Updates a Customer-Profile in an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTrustProductTest() throws ApiException {
        String sid = null;
        String email = null;
        String friendlyName = null;
        TrustProductEnumStatus status = null;
        URI statusCallback = null;
        TrusthubV1TrustProduct response = api.updateTrustProduct(sid, email, friendlyName, status, statusCallback);
        // TODO: test validations
    }

}
