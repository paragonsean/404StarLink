/*
 * AWS OpsWorks
 * <fullname>AWS OpsWorks</fullname> <p>Welcome to the <i>AWS OpsWorks Stacks API Reference</i>. This guide provides descriptions, syntax, and usage examples for AWS OpsWorks Stacks actions and data types, including common parameters and error codes. </p> <p>AWS OpsWorks Stacks is an application management service that provides an integrated experience for overseeing the complete application lifecycle. For information about this product, go to the <a href=\"http://aws.amazon.com/opsworks/\">AWS OpsWorks</a> details page. </p> <p> <b>SDKs and CLI</b> </p> <p>The most common way to use the AWS OpsWorks Stacks API is by using the AWS Command Line Interface (CLI) or by using one of the AWS SDKs to implement applications in your preferred language. For more information, see:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html\">AWS CLI</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/opsworks/AWSOpsWorksClient.html\">AWS SDK for Java</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/latest/apidocs/html/N_Amazon_OpsWorks.htm\">AWS SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php-2/latest/class-Aws.OpsWorks.OpsWorksClient.html\">AWS SDK for PHP 2</a> </p> </li> <li> <p> <a href=\"http://docs.aws.amazon.com/sdkforruby/api/\">AWS SDK for Ruby</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/sdkforjavascript/\">AWS SDK for Node.js</a> </p> </li> <li> <p> <a href=\"http://docs.pythonboto.org/en/latest/ref/opsworks.html\">AWS SDK for Python(Boto)</a> </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks Stacks supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Stacks can only be accessed or managed within the endpoint in which they are created.</p> <ul> <li> <p>opsworks.us-east-1.amazonaws.com</p> </li> <li> <p>opsworks.us-east-2.amazonaws.com</p> </li> <li> <p>opsworks.us-west-1.amazonaws.com</p> </li> <li> <p>opsworks.us-west-2.amazonaws.com</p> </li> <li> <p>opsworks.ca-central-1.amazonaws.com (API only; not available in the AWS console)</p> </li> <li> <p>opsworks.eu-west-1.amazonaws.com</p> </li> <li> <p>opsworks.eu-west-2.amazonaws.com</p> </li> <li> <p>opsworks.eu-west-3.amazonaws.com</p> </li> <li> <p>opsworks.eu-central-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-northeast-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-northeast-2.amazonaws.com</p> </li> <li> <p>opsworks.ap-south-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-southeast-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-southeast-2.amazonaws.com</p> </li> <li> <p>opsworks.sa-east-1.amazonaws.com</p> </li> </ul> <p> <b>Chef Versions</b> </p> <p>When you call <a>CreateStack</a>, <a>CloneStack</a>, or <a>UpdateStack</a> we recommend you use the <code>ConfigurationManager</code> parameter to specify the Chef version. The recommended and default value for Linux stacks is currently 12. Windows stacks use Chef 12.2. For more information, see <a href=\"https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-chef11.html\">Chef Versions</a>.</p> <note> <p>You can specify Chef 12, 11.10, or 11.4 for your Linux stack. We recommend migrating your existing Linux stacks to Chef 12 as soon as possible.</p> </note>
 *
 * The version of the OpenAPI document: 2013-02-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for InstancesCount
 */
public class InstancesCountTest {
    private final InstancesCount model = new InstancesCount();

    /**
     * Model tests for InstancesCount
     */
    @Test
    public void testInstancesCount() {
        // TODO: test InstancesCount
    }

    /**
     * Test the property 'assigning'
     */
    @Test
    public void assigningTest() {
        // TODO: test assigning
    }

    /**
     * Test the property 'booting'
     */
    @Test
    public void bootingTest() {
        // TODO: test booting
    }

    /**
     * Test the property 'connectionLost'
     */
    @Test
    public void connectionLostTest() {
        // TODO: test connectionLost
    }

    /**
     * Test the property 'deregistering'
     */
    @Test
    public void deregisteringTest() {
        // TODO: test deregistering
    }

    /**
     * Test the property 'online'
     */
    @Test
    public void onlineTest() {
        // TODO: test online
    }

    /**
     * Test the property 'pending'
     */
    @Test
    public void pendingTest() {
        // TODO: test pending
    }

    /**
     * Test the property 'rebooting'
     */
    @Test
    public void rebootingTest() {
        // TODO: test rebooting
    }

    /**
     * Test the property 'registered'
     */
    @Test
    public void registeredTest() {
        // TODO: test registered
    }

    /**
     * Test the property 'registering'
     */
    @Test
    public void registeringTest() {
        // TODO: test registering
    }

    /**
     * Test the property 'requested'
     */
    @Test
    public void requestedTest() {
        // TODO: test requested
    }

    /**
     * Test the property 'runningSetup'
     */
    @Test
    public void runningSetupTest() {
        // TODO: test runningSetup
    }

    /**
     * Test the property 'setupFailed'
     */
    @Test
    public void setupFailedTest() {
        // TODO: test setupFailed
    }

    /**
     * Test the property 'shuttingDown'
     */
    @Test
    public void shuttingDownTest() {
        // TODO: test shuttingDown
    }

    /**
     * Test the property 'startFailed'
     */
    @Test
    public void startFailedTest() {
        // TODO: test startFailed
    }

    /**
     * Test the property 'stopFailed'
     */
    @Test
    public void stopFailedTest() {
        // TODO: test stopFailed
    }

    /**
     * Test the property 'stopped'
     */
    @Test
    public void stoppedTest() {
        // TODO: test stopped
    }

    /**
     * Test the property 'stopping'
     */
    @Test
    public void stoppingTest() {
        // TODO: test stopping
    }

    /**
     * Test the property 'terminated'
     */
    @Test
    public void terminatedTest() {
        // TODO: test terminated
    }

    /**
     * Test the property 'terminating'
     */
    @Test
    public void terminatingTest() {
        // TODO: test terminating
    }

    /**
     * Test the property 'unassigning'
     */
    @Test
    public void unassigningTest() {
        // TODO: test unassigning
    }

}
