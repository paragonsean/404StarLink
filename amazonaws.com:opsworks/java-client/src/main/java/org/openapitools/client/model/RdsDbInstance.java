/*
 * AWS OpsWorks
 * <fullname>AWS OpsWorks</fullname> <p>Welcome to the <i>AWS OpsWorks Stacks API Reference</i>. This guide provides descriptions, syntax, and usage examples for AWS OpsWorks Stacks actions and data types, including common parameters and error codes. </p> <p>AWS OpsWorks Stacks is an application management service that provides an integrated experience for overseeing the complete application lifecycle. For information about this product, go to the <a href=\"http://aws.amazon.com/opsworks/\">AWS OpsWorks</a> details page. </p> <p> <b>SDKs and CLI</b> </p> <p>The most common way to use the AWS OpsWorks Stacks API is by using the AWS Command Line Interface (CLI) or by using one of the AWS SDKs to implement applications in your preferred language. For more information, see:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html\">AWS CLI</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/opsworks/AWSOpsWorksClient.html\">AWS SDK for Java</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/latest/apidocs/html/N_Amazon_OpsWorks.htm\">AWS SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php-2/latest/class-Aws.OpsWorks.OpsWorksClient.html\">AWS SDK for PHP 2</a> </p> </li> <li> <p> <a href=\"http://docs.aws.amazon.com/sdkforruby/api/\">AWS SDK for Ruby</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/sdkforjavascript/\">AWS SDK for Node.js</a> </p> </li> <li> <p> <a href=\"http://docs.pythonboto.org/en/latest/ref/opsworks.html\">AWS SDK for Python(Boto)</a> </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks Stacks supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Stacks can only be accessed or managed within the endpoint in which they are created.</p> <ul> <li> <p>opsworks.us-east-1.amazonaws.com</p> </li> <li> <p>opsworks.us-east-2.amazonaws.com</p> </li> <li> <p>opsworks.us-west-1.amazonaws.com</p> </li> <li> <p>opsworks.us-west-2.amazonaws.com</p> </li> <li> <p>opsworks.ca-central-1.amazonaws.com (API only; not available in the AWS console)</p> </li> <li> <p>opsworks.eu-west-1.amazonaws.com</p> </li> <li> <p>opsworks.eu-west-2.amazonaws.com</p> </li> <li> <p>opsworks.eu-west-3.amazonaws.com</p> </li> <li> <p>opsworks.eu-central-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-northeast-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-northeast-2.amazonaws.com</p> </li> <li> <p>opsworks.ap-south-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-southeast-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-southeast-2.amazonaws.com</p> </li> <li> <p>opsworks.sa-east-1.amazonaws.com</p> </li> </ul> <p> <b>Chef Versions</b> </p> <p>When you call <a>CreateStack</a>, <a>CloneStack</a>, or <a>UpdateStack</a> we recommend you use the <code>ConfigurationManager</code> parameter to specify the Chef version. The recommended and default value for Linux stacks is currently 12. Windows stacks use Chef 12.2. For more information, see <a href=\"https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-chef11.html\">Chef Versions</a>.</p> <note> <p>You can specify Chef 12, 11.10, or 11.4 for your Linux stack. We recommend migrating your existing Linux stacks to Chef 12 as soon as possible.</p> </note>
 *
 * The version of the OpenAPI document: 2013-02-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an Amazon RDS instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:05:36.435440-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RdsDbInstance {
  public static final String SERIALIZED_NAME_RDS_DB_INSTANCE_ARN = "RdsDbInstanceArn";
  @SerializedName(SERIALIZED_NAME_RDS_DB_INSTANCE_ARN)
  private String rdsDbInstanceArn;

  public static final String SERIALIZED_NAME_DB_INSTANCE_IDENTIFIER = "DbInstanceIdentifier";
  @SerializedName(SERIALIZED_NAME_DB_INSTANCE_IDENTIFIER)
  private String dbInstanceIdentifier;

  public static final String SERIALIZED_NAME_DB_USER = "DbUser";
  @SerializedName(SERIALIZED_NAME_DB_USER)
  private String dbUser;

  public static final String SERIALIZED_NAME_DB_PASSWORD = "DbPassword";
  @SerializedName(SERIALIZED_NAME_DB_PASSWORD)
  private String dbPassword;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_STACK_ID = "StackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public static final String SERIALIZED_NAME_MISSING_ON_RDS = "MissingOnRds";
  @SerializedName(SERIALIZED_NAME_MISSING_ON_RDS)
  private Boolean missingOnRds;

  public RdsDbInstance() {
  }

  public RdsDbInstance rdsDbInstanceArn(String rdsDbInstanceArn) {
    this.rdsDbInstanceArn = rdsDbInstanceArn;
    return this;
  }

  /**
   * Get rdsDbInstanceArn
   * @return rdsDbInstanceArn
   */
  @javax.annotation.Nullable
  public String getRdsDbInstanceArn() {
    return rdsDbInstanceArn;
  }

  public void setRdsDbInstanceArn(String rdsDbInstanceArn) {
    this.rdsDbInstanceArn = rdsDbInstanceArn;
  }


  public RdsDbInstance dbInstanceIdentifier(String dbInstanceIdentifier) {
    this.dbInstanceIdentifier = dbInstanceIdentifier;
    return this;
  }

  /**
   * Get dbInstanceIdentifier
   * @return dbInstanceIdentifier
   */
  @javax.annotation.Nullable
  public String getDbInstanceIdentifier() {
    return dbInstanceIdentifier;
  }

  public void setDbInstanceIdentifier(String dbInstanceIdentifier) {
    this.dbInstanceIdentifier = dbInstanceIdentifier;
  }


  public RdsDbInstance dbUser(String dbUser) {
    this.dbUser = dbUser;
    return this;
  }

  /**
   * Get dbUser
   * @return dbUser
   */
  @javax.annotation.Nullable
  public String getDbUser() {
    return dbUser;
  }

  public void setDbUser(String dbUser) {
    this.dbUser = dbUser;
  }


  public RdsDbInstance dbPassword(String dbPassword) {
    this.dbPassword = dbPassword;
    return this;
  }

  /**
   * Get dbPassword
   * @return dbPassword
   */
  @javax.annotation.Nullable
  public String getDbPassword() {
    return dbPassword;
  }

  public void setDbPassword(String dbPassword) {
    this.dbPassword = dbPassword;
  }


  public RdsDbInstance region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public RdsDbInstance address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public RdsDbInstance engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public RdsDbInstance stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nullable
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }


  public RdsDbInstance missingOnRds(Boolean missingOnRds) {
    this.missingOnRds = missingOnRds;
    return this;
  }

  /**
   * Get missingOnRds
   * @return missingOnRds
   */
  @javax.annotation.Nullable
  public Boolean getMissingOnRds() {
    return missingOnRds;
  }

  public void setMissingOnRds(Boolean missingOnRds) {
    this.missingOnRds = missingOnRds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RdsDbInstance rdsDbInstance = (RdsDbInstance) o;
    return Objects.equals(this.rdsDbInstanceArn, rdsDbInstance.rdsDbInstanceArn) &&
        Objects.equals(this.dbInstanceIdentifier, rdsDbInstance.dbInstanceIdentifier) &&
        Objects.equals(this.dbUser, rdsDbInstance.dbUser) &&
        Objects.equals(this.dbPassword, rdsDbInstance.dbPassword) &&
        Objects.equals(this.region, rdsDbInstance.region) &&
        Objects.equals(this.address, rdsDbInstance.address) &&
        Objects.equals(this.engine, rdsDbInstance.engine) &&
        Objects.equals(this.stackId, rdsDbInstance.stackId) &&
        Objects.equals(this.missingOnRds, rdsDbInstance.missingOnRds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rdsDbInstanceArn, dbInstanceIdentifier, dbUser, dbPassword, region, address, engine, stackId, missingOnRds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RdsDbInstance {\n");
    sb.append("    rdsDbInstanceArn: ").append(toIndentedString(rdsDbInstanceArn)).append("\n");
    sb.append("    dbInstanceIdentifier: ").append(toIndentedString(dbInstanceIdentifier)).append("\n");
    sb.append("    dbUser: ").append(toIndentedString(dbUser)).append("\n");
    sb.append("    dbPassword: ").append(toIndentedString(dbPassword)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("    missingOnRds: ").append(toIndentedString(missingOnRds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RdsDbInstanceArn");
    openapiFields.add("DbInstanceIdentifier");
    openapiFields.add("DbUser");
    openapiFields.add("DbPassword");
    openapiFields.add("Region");
    openapiFields.add("Address");
    openapiFields.add("Engine");
    openapiFields.add("StackId");
    openapiFields.add("MissingOnRds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RdsDbInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RdsDbInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RdsDbInstance is not found in the empty JSON string", RdsDbInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RdsDbInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RdsDbInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RdsDbInstanceArn`
      if (jsonObj.get("RdsDbInstanceArn") != null && !jsonObj.get("RdsDbInstanceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RdsDbInstanceArn"));
      }
      // validate the optional field `DbInstanceIdentifier`
      if (jsonObj.get("DbInstanceIdentifier") != null && !jsonObj.get("DbInstanceIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DbInstanceIdentifier"));
      }
      // validate the optional field `DbUser`
      if (jsonObj.get("DbUser") != null && !jsonObj.get("DbUser").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DbUser"));
      }
      // validate the optional field `DbPassword`
      if (jsonObj.get("DbPassword") != null && !jsonObj.get("DbPassword").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DbPassword"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Region"));
      }
      // validate the optional field `Address`
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Address"));
      }
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `StackId`
      if (jsonObj.get("StackId") != null && !jsonObj.get("StackId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StackId"));
      }
      // validate the optional field `MissingOnRds`
      if (jsonObj.get("MissingOnRds") != null && !jsonObj.get("MissingOnRds").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("MissingOnRds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RdsDbInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RdsDbInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RdsDbInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RdsDbInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<RdsDbInstance>() {
           @Override
           public void write(JsonWriter out, RdsDbInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RdsDbInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RdsDbInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RdsDbInstance
   * @throws IOException if the JSON string is invalid with respect to RdsDbInstance
   */
  public static RdsDbInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RdsDbInstance.class);
  }

  /**
   * Convert an instance of RdsDbInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

