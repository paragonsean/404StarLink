/*
 * AWS OpsWorks
 * <fullname>AWS OpsWorks</fullname> <p>Welcome to the <i>AWS OpsWorks Stacks API Reference</i>. This guide provides descriptions, syntax, and usage examples for AWS OpsWorks Stacks actions and data types, including common parameters and error codes. </p> <p>AWS OpsWorks Stacks is an application management service that provides an integrated experience for overseeing the complete application lifecycle. For information about this product, go to the <a href=\"http://aws.amazon.com/opsworks/\">AWS OpsWorks</a> details page. </p> <p> <b>SDKs and CLI</b> </p> <p>The most common way to use the AWS OpsWorks Stacks API is by using the AWS Command Line Interface (CLI) or by using one of the AWS SDKs to implement applications in your preferred language. For more information, see:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html\">AWS CLI</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/opsworks/AWSOpsWorksClient.html\">AWS SDK for Java</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/latest/apidocs/html/N_Amazon_OpsWorks.htm\">AWS SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php-2/latest/class-Aws.OpsWorks.OpsWorksClient.html\">AWS SDK for PHP 2</a> </p> </li> <li> <p> <a href=\"http://docs.aws.amazon.com/sdkforruby/api/\">AWS SDK for Ruby</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/sdkforjavascript/\">AWS SDK for Node.js</a> </p> </li> <li> <p> <a href=\"http://docs.pythonboto.org/en/latest/ref/opsworks.html\">AWS SDK for Python(Boto)</a> </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks Stacks supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Stacks can only be accessed or managed within the endpoint in which they are created.</p> <ul> <li> <p>opsworks.us-east-1.amazonaws.com</p> </li> <li> <p>opsworks.us-east-2.amazonaws.com</p> </li> <li> <p>opsworks.us-west-1.amazonaws.com</p> </li> <li> <p>opsworks.us-west-2.amazonaws.com</p> </li> <li> <p>opsworks.ca-central-1.amazonaws.com (API only; not available in the AWS console)</p> </li> <li> <p>opsworks.eu-west-1.amazonaws.com</p> </li> <li> <p>opsworks.eu-west-2.amazonaws.com</p> </li> <li> <p>opsworks.eu-west-3.amazonaws.com</p> </li> <li> <p>opsworks.eu-central-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-northeast-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-northeast-2.amazonaws.com</p> </li> <li> <p>opsworks.ap-south-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-southeast-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-southeast-2.amazonaws.com</p> </li> <li> <p>opsworks.sa-east-1.amazonaws.com</p> </li> </ul> <p> <b>Chef Versions</b> </p> <p>When you call <a>CreateStack</a>, <a>CloneStack</a>, or <a>UpdateStack</a> we recommend you use the <code>ConfigurationManager</code> parameter to specify the Chef version. The recommended and default value for Linux stacks is currently 12. Windows stacks use Chef 12.2. For more information, see <a href=\"https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-chef11.html\">Chef Versions</a>.</p> <note> <p>You can specify Chef 12, 11.10, or 11.4 for your Linux stack. We recommend migrating your existing Linux stacks to Chef 12 as soon as possible.</p> </note>
 *
 * The version of the OpenAPI document: 2013-02-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes how many instances a stack has for each status.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:57:31.585098-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstancesCount {
  public static final String SERIALIZED_NAME_ASSIGNING = "Assigning";
  @SerializedName(SERIALIZED_NAME_ASSIGNING)
  private Integer assigning;

  public static final String SERIALIZED_NAME_BOOTING = "Booting";
  @SerializedName(SERIALIZED_NAME_BOOTING)
  private Integer booting;

  public static final String SERIALIZED_NAME_CONNECTION_LOST = "ConnectionLost";
  @SerializedName(SERIALIZED_NAME_CONNECTION_LOST)
  private Integer connectionLost;

  public static final String SERIALIZED_NAME_DEREGISTERING = "Deregistering";
  @SerializedName(SERIALIZED_NAME_DEREGISTERING)
  private Integer deregistering;

  public static final String SERIALIZED_NAME_ONLINE = "Online";
  @SerializedName(SERIALIZED_NAME_ONLINE)
  private Integer online;

  public static final String SERIALIZED_NAME_PENDING = "Pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private Integer pending;

  public static final String SERIALIZED_NAME_REBOOTING = "Rebooting";
  @SerializedName(SERIALIZED_NAME_REBOOTING)
  private Integer rebooting;

  public static final String SERIALIZED_NAME_REGISTERED = "Registered";
  @SerializedName(SERIALIZED_NAME_REGISTERED)
  private Integer registered;

  public static final String SERIALIZED_NAME_REGISTERING = "Registering";
  @SerializedName(SERIALIZED_NAME_REGISTERING)
  private Integer registering;

  public static final String SERIALIZED_NAME_REQUESTED = "Requested";
  @SerializedName(SERIALIZED_NAME_REQUESTED)
  private Integer requested;

  public static final String SERIALIZED_NAME_RUNNING_SETUP = "RunningSetup";
  @SerializedName(SERIALIZED_NAME_RUNNING_SETUP)
  private Integer runningSetup;

  public static final String SERIALIZED_NAME_SETUP_FAILED = "SetupFailed";
  @SerializedName(SERIALIZED_NAME_SETUP_FAILED)
  private Integer setupFailed;

  public static final String SERIALIZED_NAME_SHUTTING_DOWN = "ShuttingDown";
  @SerializedName(SERIALIZED_NAME_SHUTTING_DOWN)
  private Integer shuttingDown;

  public static final String SERIALIZED_NAME_START_FAILED = "StartFailed";
  @SerializedName(SERIALIZED_NAME_START_FAILED)
  private Integer startFailed;

  public static final String SERIALIZED_NAME_STOP_FAILED = "StopFailed";
  @SerializedName(SERIALIZED_NAME_STOP_FAILED)
  private Integer stopFailed;

  public static final String SERIALIZED_NAME_STOPPED = "Stopped";
  @SerializedName(SERIALIZED_NAME_STOPPED)
  private Integer stopped;

  public static final String SERIALIZED_NAME_STOPPING = "Stopping";
  @SerializedName(SERIALIZED_NAME_STOPPING)
  private Integer stopping;

  public static final String SERIALIZED_NAME_TERMINATED = "Terminated";
  @SerializedName(SERIALIZED_NAME_TERMINATED)
  private Integer terminated;

  public static final String SERIALIZED_NAME_TERMINATING = "Terminating";
  @SerializedName(SERIALIZED_NAME_TERMINATING)
  private Integer terminating;

  public static final String SERIALIZED_NAME_UNASSIGNING = "Unassigning";
  @SerializedName(SERIALIZED_NAME_UNASSIGNING)
  private Integer unassigning;

  public InstancesCount() {
  }

  public InstancesCount assigning(Integer assigning) {
    this.assigning = assigning;
    return this;
  }

  /**
   * Get assigning
   * @return assigning
   */
  @javax.annotation.Nullable
  public Integer getAssigning() {
    return assigning;
  }

  public void setAssigning(Integer assigning) {
    this.assigning = assigning;
  }


  public InstancesCount booting(Integer booting) {
    this.booting = booting;
    return this;
  }

  /**
   * Get booting
   * @return booting
   */
  @javax.annotation.Nullable
  public Integer getBooting() {
    return booting;
  }

  public void setBooting(Integer booting) {
    this.booting = booting;
  }


  public InstancesCount connectionLost(Integer connectionLost) {
    this.connectionLost = connectionLost;
    return this;
  }

  /**
   * Get connectionLost
   * @return connectionLost
   */
  @javax.annotation.Nullable
  public Integer getConnectionLost() {
    return connectionLost;
  }

  public void setConnectionLost(Integer connectionLost) {
    this.connectionLost = connectionLost;
  }


  public InstancesCount deregistering(Integer deregistering) {
    this.deregistering = deregistering;
    return this;
  }

  /**
   * Get deregistering
   * @return deregistering
   */
  @javax.annotation.Nullable
  public Integer getDeregistering() {
    return deregistering;
  }

  public void setDeregistering(Integer deregistering) {
    this.deregistering = deregistering;
  }


  public InstancesCount online(Integer online) {
    this.online = online;
    return this;
  }

  /**
   * Get online
   * @return online
   */
  @javax.annotation.Nullable
  public Integer getOnline() {
    return online;
  }

  public void setOnline(Integer online) {
    this.online = online;
  }


  public InstancesCount pending(Integer pending) {
    this.pending = pending;
    return this;
  }

  /**
   * Get pending
   * @return pending
   */
  @javax.annotation.Nullable
  public Integer getPending() {
    return pending;
  }

  public void setPending(Integer pending) {
    this.pending = pending;
  }


  public InstancesCount rebooting(Integer rebooting) {
    this.rebooting = rebooting;
    return this;
  }

  /**
   * Get rebooting
   * @return rebooting
   */
  @javax.annotation.Nullable
  public Integer getRebooting() {
    return rebooting;
  }

  public void setRebooting(Integer rebooting) {
    this.rebooting = rebooting;
  }


  public InstancesCount registered(Integer registered) {
    this.registered = registered;
    return this;
  }

  /**
   * Get registered
   * @return registered
   */
  @javax.annotation.Nullable
  public Integer getRegistered() {
    return registered;
  }

  public void setRegistered(Integer registered) {
    this.registered = registered;
  }


  public InstancesCount registering(Integer registering) {
    this.registering = registering;
    return this;
  }

  /**
   * Get registering
   * @return registering
   */
  @javax.annotation.Nullable
  public Integer getRegistering() {
    return registering;
  }

  public void setRegistering(Integer registering) {
    this.registering = registering;
  }


  public InstancesCount requested(Integer requested) {
    this.requested = requested;
    return this;
  }

  /**
   * Get requested
   * @return requested
   */
  @javax.annotation.Nullable
  public Integer getRequested() {
    return requested;
  }

  public void setRequested(Integer requested) {
    this.requested = requested;
  }


  public InstancesCount runningSetup(Integer runningSetup) {
    this.runningSetup = runningSetup;
    return this;
  }

  /**
   * Get runningSetup
   * @return runningSetup
   */
  @javax.annotation.Nullable
  public Integer getRunningSetup() {
    return runningSetup;
  }

  public void setRunningSetup(Integer runningSetup) {
    this.runningSetup = runningSetup;
  }


  public InstancesCount setupFailed(Integer setupFailed) {
    this.setupFailed = setupFailed;
    return this;
  }

  /**
   * Get setupFailed
   * @return setupFailed
   */
  @javax.annotation.Nullable
  public Integer getSetupFailed() {
    return setupFailed;
  }

  public void setSetupFailed(Integer setupFailed) {
    this.setupFailed = setupFailed;
  }


  public InstancesCount shuttingDown(Integer shuttingDown) {
    this.shuttingDown = shuttingDown;
    return this;
  }

  /**
   * Get shuttingDown
   * @return shuttingDown
   */
  @javax.annotation.Nullable
  public Integer getShuttingDown() {
    return shuttingDown;
  }

  public void setShuttingDown(Integer shuttingDown) {
    this.shuttingDown = shuttingDown;
  }


  public InstancesCount startFailed(Integer startFailed) {
    this.startFailed = startFailed;
    return this;
  }

  /**
   * Get startFailed
   * @return startFailed
   */
  @javax.annotation.Nullable
  public Integer getStartFailed() {
    return startFailed;
  }

  public void setStartFailed(Integer startFailed) {
    this.startFailed = startFailed;
  }


  public InstancesCount stopFailed(Integer stopFailed) {
    this.stopFailed = stopFailed;
    return this;
  }

  /**
   * Get stopFailed
   * @return stopFailed
   */
  @javax.annotation.Nullable
  public Integer getStopFailed() {
    return stopFailed;
  }

  public void setStopFailed(Integer stopFailed) {
    this.stopFailed = stopFailed;
  }


  public InstancesCount stopped(Integer stopped) {
    this.stopped = stopped;
    return this;
  }

  /**
   * Get stopped
   * @return stopped
   */
  @javax.annotation.Nullable
  public Integer getStopped() {
    return stopped;
  }

  public void setStopped(Integer stopped) {
    this.stopped = stopped;
  }


  public InstancesCount stopping(Integer stopping) {
    this.stopping = stopping;
    return this;
  }

  /**
   * Get stopping
   * @return stopping
   */
  @javax.annotation.Nullable
  public Integer getStopping() {
    return stopping;
  }

  public void setStopping(Integer stopping) {
    this.stopping = stopping;
  }


  public InstancesCount terminated(Integer terminated) {
    this.terminated = terminated;
    return this;
  }

  /**
   * Get terminated
   * @return terminated
   */
  @javax.annotation.Nullable
  public Integer getTerminated() {
    return terminated;
  }

  public void setTerminated(Integer terminated) {
    this.terminated = terminated;
  }


  public InstancesCount terminating(Integer terminating) {
    this.terminating = terminating;
    return this;
  }

  /**
   * Get terminating
   * @return terminating
   */
  @javax.annotation.Nullable
  public Integer getTerminating() {
    return terminating;
  }

  public void setTerminating(Integer terminating) {
    this.terminating = terminating;
  }


  public InstancesCount unassigning(Integer unassigning) {
    this.unassigning = unassigning;
    return this;
  }

  /**
   * Get unassigning
   * @return unassigning
   */
  @javax.annotation.Nullable
  public Integer getUnassigning() {
    return unassigning;
  }

  public void setUnassigning(Integer unassigning) {
    this.unassigning = unassigning;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstancesCount instancesCount = (InstancesCount) o;
    return Objects.equals(this.assigning, instancesCount.assigning) &&
        Objects.equals(this.booting, instancesCount.booting) &&
        Objects.equals(this.connectionLost, instancesCount.connectionLost) &&
        Objects.equals(this.deregistering, instancesCount.deregistering) &&
        Objects.equals(this.online, instancesCount.online) &&
        Objects.equals(this.pending, instancesCount.pending) &&
        Objects.equals(this.rebooting, instancesCount.rebooting) &&
        Objects.equals(this.registered, instancesCount.registered) &&
        Objects.equals(this.registering, instancesCount.registering) &&
        Objects.equals(this.requested, instancesCount.requested) &&
        Objects.equals(this.runningSetup, instancesCount.runningSetup) &&
        Objects.equals(this.setupFailed, instancesCount.setupFailed) &&
        Objects.equals(this.shuttingDown, instancesCount.shuttingDown) &&
        Objects.equals(this.startFailed, instancesCount.startFailed) &&
        Objects.equals(this.stopFailed, instancesCount.stopFailed) &&
        Objects.equals(this.stopped, instancesCount.stopped) &&
        Objects.equals(this.stopping, instancesCount.stopping) &&
        Objects.equals(this.terminated, instancesCount.terminated) &&
        Objects.equals(this.terminating, instancesCount.terminating) &&
        Objects.equals(this.unassigning, instancesCount.unassigning);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assigning, booting, connectionLost, deregistering, online, pending, rebooting, registered, registering, requested, runningSetup, setupFailed, shuttingDown, startFailed, stopFailed, stopped, stopping, terminated, terminating, unassigning);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstancesCount {\n");
    sb.append("    assigning: ").append(toIndentedString(assigning)).append("\n");
    sb.append("    booting: ").append(toIndentedString(booting)).append("\n");
    sb.append("    connectionLost: ").append(toIndentedString(connectionLost)).append("\n");
    sb.append("    deregistering: ").append(toIndentedString(deregistering)).append("\n");
    sb.append("    online: ").append(toIndentedString(online)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    rebooting: ").append(toIndentedString(rebooting)).append("\n");
    sb.append("    registered: ").append(toIndentedString(registered)).append("\n");
    sb.append("    registering: ").append(toIndentedString(registering)).append("\n");
    sb.append("    requested: ").append(toIndentedString(requested)).append("\n");
    sb.append("    runningSetup: ").append(toIndentedString(runningSetup)).append("\n");
    sb.append("    setupFailed: ").append(toIndentedString(setupFailed)).append("\n");
    sb.append("    shuttingDown: ").append(toIndentedString(shuttingDown)).append("\n");
    sb.append("    startFailed: ").append(toIndentedString(startFailed)).append("\n");
    sb.append("    stopFailed: ").append(toIndentedString(stopFailed)).append("\n");
    sb.append("    stopped: ").append(toIndentedString(stopped)).append("\n");
    sb.append("    stopping: ").append(toIndentedString(stopping)).append("\n");
    sb.append("    terminated: ").append(toIndentedString(terminated)).append("\n");
    sb.append("    terminating: ").append(toIndentedString(terminating)).append("\n");
    sb.append("    unassigning: ").append(toIndentedString(unassigning)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Assigning");
    openapiFields.add("Booting");
    openapiFields.add("ConnectionLost");
    openapiFields.add("Deregistering");
    openapiFields.add("Online");
    openapiFields.add("Pending");
    openapiFields.add("Rebooting");
    openapiFields.add("Registered");
    openapiFields.add("Registering");
    openapiFields.add("Requested");
    openapiFields.add("RunningSetup");
    openapiFields.add("SetupFailed");
    openapiFields.add("ShuttingDown");
    openapiFields.add("StartFailed");
    openapiFields.add("StopFailed");
    openapiFields.add("Stopped");
    openapiFields.add("Stopping");
    openapiFields.add("Terminated");
    openapiFields.add("Terminating");
    openapiFields.add("Unassigning");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstancesCount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstancesCount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstancesCount is not found in the empty JSON string", InstancesCount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstancesCount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstancesCount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Assigning`
      if (jsonObj.get("Assigning") != null && !jsonObj.get("Assigning").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Assigning"));
      }
      // validate the optional field `Booting`
      if (jsonObj.get("Booting") != null && !jsonObj.get("Booting").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Booting"));
      }
      // validate the optional field `ConnectionLost`
      if (jsonObj.get("ConnectionLost") != null && !jsonObj.get("ConnectionLost").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ConnectionLost"));
      }
      // validate the optional field `Deregistering`
      if (jsonObj.get("Deregistering") != null && !jsonObj.get("Deregistering").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Deregistering"));
      }
      // validate the optional field `Online`
      if (jsonObj.get("Online") != null && !jsonObj.get("Online").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Online"));
      }
      // validate the optional field `Pending`
      if (jsonObj.get("Pending") != null && !jsonObj.get("Pending").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Pending"));
      }
      // validate the optional field `Rebooting`
      if (jsonObj.get("Rebooting") != null && !jsonObj.get("Rebooting").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Rebooting"));
      }
      // validate the optional field `Registered`
      if (jsonObj.get("Registered") != null && !jsonObj.get("Registered").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Registered"));
      }
      // validate the optional field `Registering`
      if (jsonObj.get("Registering") != null && !jsonObj.get("Registering").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Registering"));
      }
      // validate the optional field `Requested`
      if (jsonObj.get("Requested") != null && !jsonObj.get("Requested").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Requested"));
      }
      // validate the optional field `RunningSetup`
      if (jsonObj.get("RunningSetup") != null && !jsonObj.get("RunningSetup").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RunningSetup"));
      }
      // validate the optional field `SetupFailed`
      if (jsonObj.get("SetupFailed") != null && !jsonObj.get("SetupFailed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SetupFailed"));
      }
      // validate the optional field `ShuttingDown`
      if (jsonObj.get("ShuttingDown") != null && !jsonObj.get("ShuttingDown").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ShuttingDown"));
      }
      // validate the optional field `StartFailed`
      if (jsonObj.get("StartFailed") != null && !jsonObj.get("StartFailed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StartFailed"));
      }
      // validate the optional field `StopFailed`
      if (jsonObj.get("StopFailed") != null && !jsonObj.get("StopFailed").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("StopFailed"));
      }
      // validate the optional field `Stopped`
      if (jsonObj.get("Stopped") != null && !jsonObj.get("Stopped").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Stopped"));
      }
      // validate the optional field `Stopping`
      if (jsonObj.get("Stopping") != null && !jsonObj.get("Stopping").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Stopping"));
      }
      // validate the optional field `Terminated`
      if (jsonObj.get("Terminated") != null && !jsonObj.get("Terminated").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Terminated"));
      }
      // validate the optional field `Terminating`
      if (jsonObj.get("Terminating") != null && !jsonObj.get("Terminating").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Terminating"));
      }
      // validate the optional field `Unassigning`
      if (jsonObj.get("Unassigning") != null && !jsonObj.get("Unassigning").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Unassigning"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstancesCount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstancesCount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstancesCount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstancesCount.class));

       return (TypeAdapter<T>) new TypeAdapter<InstancesCount>() {
           @Override
           public void write(JsonWriter out, InstancesCount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstancesCount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstancesCount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstancesCount
   * @throws IOException if the JSON string is invalid with respect to InstancesCount
   */
  public static InstancesCount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstancesCount.class);
  }

  /**
   * Convert an instance of InstancesCount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

