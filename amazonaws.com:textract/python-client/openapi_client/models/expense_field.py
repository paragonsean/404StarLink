# coding: utf-8

"""
    Amazon Textract

    Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.

    The version of the OpenAPI document: 2018-06-27
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.expense_field_currency import ExpenseFieldCurrency
from openapi_client.models.expense_field_label_detection import ExpenseFieldLabelDetection
from openapi_client.models.expense_field_type import ExpenseFieldType
from openapi_client.models.expense_field_value_detection import ExpenseFieldValueDetection
from typing import Optional, Set
from typing_extensions import Self

class ExpenseField(BaseModel):
    """
    Breakdown of detected information, seperated into the catagories Type, LabelDetection, and ValueDetection
    """ # noqa: E501
    type: Optional[ExpenseFieldType] = Field(default=None, alias="Type")
    label_detection: Optional[ExpenseFieldLabelDetection] = Field(default=None, alias="LabelDetection")
    value_detection: Optional[ExpenseFieldValueDetection] = Field(default=None, alias="ValueDetection")
    page_number: Optional[Any] = Field(default=None, alias="PageNumber")
    currency: Optional[ExpenseFieldCurrency] = Field(default=None, alias="Currency")
    group_properties: Optional[Any] = Field(default=None, alias="GroupProperties")
    __properties: ClassVar[List[str]] = ["Type", "LabelDetection", "ValueDetection", "PageNumber", "Currency", "GroupProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExpenseField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['Type'] = self.type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of label_detection
        if self.label_detection:
            _dict['LabelDetection'] = self.label_detection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_detection
        if self.value_detection:
            _dict['ValueDetection'] = self.value_detection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['Currency'] = self.currency.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExpenseField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Type": ExpenseFieldType.from_dict(obj["Type"]) if obj.get("Type") is not None else None,
            "LabelDetection": ExpenseFieldLabelDetection.from_dict(obj["LabelDetection"]) if obj.get("LabelDetection") is not None else None,
            "ValueDetection": ExpenseFieldValueDetection.from_dict(obj["ValueDetection"]) if obj.get("ValueDetection") is not None else None,
            "PageNumber": obj.get("PageNumber"),
            "Currency": ExpenseFieldCurrency.from_dict(obj["Currency"]) if obj.get("Currency") is not None else None,
            "GroupProperties": obj.get("GroupProperties")
        })
        return _obj


