# coding: utf-8

"""
    Amazon Textract

    Amazon Textract detects and analyzes text in documents and converts it into machine-readable text. This is the API reference documentation for Amazon Textract.

    The version of the OpenAPI document: 2018-06-27
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analyze_document_request_document import AnalyzeDocumentRequestDocument
from openapi_client.models.analyze_document_request_human_loop_config import AnalyzeDocumentRequestHumanLoopConfig
from openapi_client.models.analyze_document_request_queries_config import AnalyzeDocumentRequestQueriesConfig
from typing import Optional, Set
from typing_extensions import Self

class AnalyzeDocumentRequest(BaseModel):
    """
    AnalyzeDocumentRequest
    """ # noqa: E501
    document: AnalyzeDocumentRequestDocument = Field(alias="Document")
    feature_types: Any = Field(alias="FeatureTypes")
    human_loop_config: Optional[AnalyzeDocumentRequestHumanLoopConfig] = Field(default=None, alias="HumanLoopConfig")
    queries_config: Optional[AnalyzeDocumentRequestQueriesConfig] = Field(default=None, alias="QueriesConfig")
    __properties: ClassVar[List[str]] = ["Document", "FeatureTypes", "HumanLoopConfig", "QueriesConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalyzeDocumentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document
        if self.document:
            _dict['Document'] = self.document.to_dict()
        # override the default output from pydantic by calling `to_dict()` of human_loop_config
        if self.human_loop_config:
            _dict['HumanLoopConfig'] = self.human_loop_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of queries_config
        if self.queries_config:
            _dict['QueriesConfig'] = self.queries_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalyzeDocumentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Document": AnalyzeDocumentRequestDocument.from_dict(obj["Document"]) if obj.get("Document") is not None else None,
            "FeatureTypes": obj.get("FeatureTypes"),
            "HumanLoopConfig": AnalyzeDocumentRequestHumanLoopConfig.from_dict(obj["HumanLoopConfig"]) if obj.get("HumanLoopConfig") is not None else None,
            "QueriesConfig": AnalyzeDocumentRequestQueriesConfig.from_dict(obj["QueriesConfig"]) if obj.get("QueriesConfig") is not None else None
        })
        return _obj


