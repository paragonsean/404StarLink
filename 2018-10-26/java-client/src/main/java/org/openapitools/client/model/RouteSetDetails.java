/*
 * AWS SecurityHub
 * <p>Security Hub provides you with a comprehensive view of the security state of your Amazon Web Services environment and resources. It also provides you with the readiness status of your environment based on controls from supported security standards. Security Hub collects security data from Amazon Web Services accounts, services, and integrated third-party products and helps you analyze security trends in your environment to identify the highest priority security issues. For more information about Security Hub, see the <a href=\"https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html\">Security HubUser Guide</a>.</p> <p>When you use operations in the Security Hub API, the requests are executed only in the Amazon Web Services Region that is currently active or in the specific Amazon Web Services Region that you specify in your request. Any configuration or settings change that results from the operation is applied only to that Region. To make the same change in other Regions, run the same command for each Region in which you want to apply the change.</p> <p>For example, if your Region is set to <code>us-west-2</code>, when you use <code>CreateMembers</code> to add a member account to Security Hub, the association of the member account with the administrator account is created only in the <code>us-west-2</code> Region. Security Hub must be enabled for the member account in the same Region that the invitation was sent from.</p> <p>The following throttling limits apply to using Security Hub API operations.</p> <ul> <li> <p> <code>BatchEnableStandards</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 1 request per second.</p> </li> <li> <p> <code>GetFindings</code> - <code>RateLimit</code> of 3 requests per second. <code>BurstLimit</code> of 6 requests per second.</p> </li> <li> <p> <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>UpdateStandardsControl</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 5 requests per second.</p> </li> <li> <p>All other operations - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  Provides details about the routes in the route table. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:57:02.717661-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RouteSetDetails {
  public static final String SERIALIZED_NAME_CARRIER_GATEWAY_ID = "CarrierGatewayId";
  @SerializedName(SERIALIZED_NAME_CARRIER_GATEWAY_ID)
  private String carrierGatewayId;

  public static final String SERIALIZED_NAME_CORE_NETWORK_ARN = "CoreNetworkArn";
  @SerializedName(SERIALIZED_NAME_CORE_NETWORK_ARN)
  private String coreNetworkArn;

  public static final String SERIALIZED_NAME_DESTINATION_CIDR_BLOCK = "DestinationCidrBlock";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CIDR_BLOCK)
  private String destinationCidrBlock;

  public static final String SERIALIZED_NAME_DESTINATION_IPV6_CIDR_BLOCK = "DestinationIpv6CidrBlock";
  @SerializedName(SERIALIZED_NAME_DESTINATION_IPV6_CIDR_BLOCK)
  private String destinationIpv6CidrBlock;

  public static final String SERIALIZED_NAME_DESTINATION_PREFIX_LIST_ID = "DestinationPrefixListId";
  @SerializedName(SERIALIZED_NAME_DESTINATION_PREFIX_LIST_ID)
  private String destinationPrefixListId;

  public static final String SERIALIZED_NAME_EGRESS_ONLY_INTERNET_GATEWAY_ID = "EgressOnlyInternetGatewayId";
  @SerializedName(SERIALIZED_NAME_EGRESS_ONLY_INTERNET_GATEWAY_ID)
  private String egressOnlyInternetGatewayId;

  public static final String SERIALIZED_NAME_GATEWAY_ID = "GatewayId";
  @SerializedName(SERIALIZED_NAME_GATEWAY_ID)
  private String gatewayId;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "InstanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INSTANCE_OWNER_ID = "InstanceOwnerId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_OWNER_ID)
  private String instanceOwnerId;

  public static final String SERIALIZED_NAME_LOCAL_GATEWAY_ID = "LocalGatewayId";
  @SerializedName(SERIALIZED_NAME_LOCAL_GATEWAY_ID)
  private String localGatewayId;

  public static final String SERIALIZED_NAME_NAT_GATEWAY_ID = "NatGatewayId";
  @SerializedName(SERIALIZED_NAME_NAT_GATEWAY_ID)
  private String natGatewayId;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACE_ID = "NetworkInterfaceId";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACE_ID)
  private String networkInterfaceId;

  public static final String SERIALIZED_NAME_ORIGIN = "Origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TRANSIT_GATEWAY_ID = "TransitGatewayId";
  @SerializedName(SERIALIZED_NAME_TRANSIT_GATEWAY_ID)
  private String transitGatewayId;

  public static final String SERIALIZED_NAME_VPC_PEERING_CONNECTION_ID = "VpcPeeringConnectionId";
  @SerializedName(SERIALIZED_NAME_VPC_PEERING_CONNECTION_ID)
  private String vpcPeeringConnectionId;

  public RouteSetDetails() {
  }

  public RouteSetDetails carrierGatewayId(String carrierGatewayId) {
    this.carrierGatewayId = carrierGatewayId;
    return this;
  }

  /**
   * Get carrierGatewayId
   * @return carrierGatewayId
   */
  @javax.annotation.Nullable
  public String getCarrierGatewayId() {
    return carrierGatewayId;
  }

  public void setCarrierGatewayId(String carrierGatewayId) {
    this.carrierGatewayId = carrierGatewayId;
  }


  public RouteSetDetails coreNetworkArn(String coreNetworkArn) {
    this.coreNetworkArn = coreNetworkArn;
    return this;
  }

  /**
   * Get coreNetworkArn
   * @return coreNetworkArn
   */
  @javax.annotation.Nullable
  public String getCoreNetworkArn() {
    return coreNetworkArn;
  }

  public void setCoreNetworkArn(String coreNetworkArn) {
    this.coreNetworkArn = coreNetworkArn;
  }


  public RouteSetDetails destinationCidrBlock(String destinationCidrBlock) {
    this.destinationCidrBlock = destinationCidrBlock;
    return this;
  }

  /**
   * Get destinationCidrBlock
   * @return destinationCidrBlock
   */
  @javax.annotation.Nullable
  public String getDestinationCidrBlock() {
    return destinationCidrBlock;
  }

  public void setDestinationCidrBlock(String destinationCidrBlock) {
    this.destinationCidrBlock = destinationCidrBlock;
  }


  public RouteSetDetails destinationIpv6CidrBlock(String destinationIpv6CidrBlock) {
    this.destinationIpv6CidrBlock = destinationIpv6CidrBlock;
    return this;
  }

  /**
   * Get destinationIpv6CidrBlock
   * @return destinationIpv6CidrBlock
   */
  @javax.annotation.Nullable
  public String getDestinationIpv6CidrBlock() {
    return destinationIpv6CidrBlock;
  }

  public void setDestinationIpv6CidrBlock(String destinationIpv6CidrBlock) {
    this.destinationIpv6CidrBlock = destinationIpv6CidrBlock;
  }


  public RouteSetDetails destinationPrefixListId(String destinationPrefixListId) {
    this.destinationPrefixListId = destinationPrefixListId;
    return this;
  }

  /**
   * Get destinationPrefixListId
   * @return destinationPrefixListId
   */
  @javax.annotation.Nullable
  public String getDestinationPrefixListId() {
    return destinationPrefixListId;
  }

  public void setDestinationPrefixListId(String destinationPrefixListId) {
    this.destinationPrefixListId = destinationPrefixListId;
  }


  public RouteSetDetails egressOnlyInternetGatewayId(String egressOnlyInternetGatewayId) {
    this.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId;
    return this;
  }

  /**
   * Get egressOnlyInternetGatewayId
   * @return egressOnlyInternetGatewayId
   */
  @javax.annotation.Nullable
  public String getEgressOnlyInternetGatewayId() {
    return egressOnlyInternetGatewayId;
  }

  public void setEgressOnlyInternetGatewayId(String egressOnlyInternetGatewayId) {
    this.egressOnlyInternetGatewayId = egressOnlyInternetGatewayId;
  }


  public RouteSetDetails gatewayId(String gatewayId) {
    this.gatewayId = gatewayId;
    return this;
  }

  /**
   * Get gatewayId
   * @return gatewayId
   */
  @javax.annotation.Nullable
  public String getGatewayId() {
    return gatewayId;
  }

  public void setGatewayId(String gatewayId) {
    this.gatewayId = gatewayId;
  }


  public RouteSetDetails instanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  /**
   * Get instanceId
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }

  public void setInstanceId(String instanceId) {
    this.instanceId = instanceId;
  }


  public RouteSetDetails instanceOwnerId(String instanceOwnerId) {
    this.instanceOwnerId = instanceOwnerId;
    return this;
  }

  /**
   * Get instanceOwnerId
   * @return instanceOwnerId
   */
  @javax.annotation.Nullable
  public String getInstanceOwnerId() {
    return instanceOwnerId;
  }

  public void setInstanceOwnerId(String instanceOwnerId) {
    this.instanceOwnerId = instanceOwnerId;
  }


  public RouteSetDetails localGatewayId(String localGatewayId) {
    this.localGatewayId = localGatewayId;
    return this;
  }

  /**
   * Get localGatewayId
   * @return localGatewayId
   */
  @javax.annotation.Nullable
  public String getLocalGatewayId() {
    return localGatewayId;
  }

  public void setLocalGatewayId(String localGatewayId) {
    this.localGatewayId = localGatewayId;
  }


  public RouteSetDetails natGatewayId(String natGatewayId) {
    this.natGatewayId = natGatewayId;
    return this;
  }

  /**
   * Get natGatewayId
   * @return natGatewayId
   */
  @javax.annotation.Nullable
  public String getNatGatewayId() {
    return natGatewayId;
  }

  public void setNatGatewayId(String natGatewayId) {
    this.natGatewayId = natGatewayId;
  }


  public RouteSetDetails networkInterfaceId(String networkInterfaceId) {
    this.networkInterfaceId = networkInterfaceId;
    return this;
  }

  /**
   * Get networkInterfaceId
   * @return networkInterfaceId
   */
  @javax.annotation.Nullable
  public String getNetworkInterfaceId() {
    return networkInterfaceId;
  }

  public void setNetworkInterfaceId(String networkInterfaceId) {
    this.networkInterfaceId = networkInterfaceId;
  }


  public RouteSetDetails origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public RouteSetDetails state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public RouteSetDetails transitGatewayId(String transitGatewayId) {
    this.transitGatewayId = transitGatewayId;
    return this;
  }

  /**
   * Get transitGatewayId
   * @return transitGatewayId
   */
  @javax.annotation.Nullable
  public String getTransitGatewayId() {
    return transitGatewayId;
  }

  public void setTransitGatewayId(String transitGatewayId) {
    this.transitGatewayId = transitGatewayId;
  }


  public RouteSetDetails vpcPeeringConnectionId(String vpcPeeringConnectionId) {
    this.vpcPeeringConnectionId = vpcPeeringConnectionId;
    return this;
  }

  /**
   * Get vpcPeeringConnectionId
   * @return vpcPeeringConnectionId
   */
  @javax.annotation.Nullable
  public String getVpcPeeringConnectionId() {
    return vpcPeeringConnectionId;
  }

  public void setVpcPeeringConnectionId(String vpcPeeringConnectionId) {
    this.vpcPeeringConnectionId = vpcPeeringConnectionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteSetDetails routeSetDetails = (RouteSetDetails) o;
    return Objects.equals(this.carrierGatewayId, routeSetDetails.carrierGatewayId) &&
        Objects.equals(this.coreNetworkArn, routeSetDetails.coreNetworkArn) &&
        Objects.equals(this.destinationCidrBlock, routeSetDetails.destinationCidrBlock) &&
        Objects.equals(this.destinationIpv6CidrBlock, routeSetDetails.destinationIpv6CidrBlock) &&
        Objects.equals(this.destinationPrefixListId, routeSetDetails.destinationPrefixListId) &&
        Objects.equals(this.egressOnlyInternetGatewayId, routeSetDetails.egressOnlyInternetGatewayId) &&
        Objects.equals(this.gatewayId, routeSetDetails.gatewayId) &&
        Objects.equals(this.instanceId, routeSetDetails.instanceId) &&
        Objects.equals(this.instanceOwnerId, routeSetDetails.instanceOwnerId) &&
        Objects.equals(this.localGatewayId, routeSetDetails.localGatewayId) &&
        Objects.equals(this.natGatewayId, routeSetDetails.natGatewayId) &&
        Objects.equals(this.networkInterfaceId, routeSetDetails.networkInterfaceId) &&
        Objects.equals(this.origin, routeSetDetails.origin) &&
        Objects.equals(this.state, routeSetDetails.state) &&
        Objects.equals(this.transitGatewayId, routeSetDetails.transitGatewayId) &&
        Objects.equals(this.vpcPeeringConnectionId, routeSetDetails.vpcPeeringConnectionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrierGatewayId, coreNetworkArn, destinationCidrBlock, destinationIpv6CidrBlock, destinationPrefixListId, egressOnlyInternetGatewayId, gatewayId, instanceId, instanceOwnerId, localGatewayId, natGatewayId, networkInterfaceId, origin, state, transitGatewayId, vpcPeeringConnectionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteSetDetails {\n");
    sb.append("    carrierGatewayId: ").append(toIndentedString(carrierGatewayId)).append("\n");
    sb.append("    coreNetworkArn: ").append(toIndentedString(coreNetworkArn)).append("\n");
    sb.append("    destinationCidrBlock: ").append(toIndentedString(destinationCidrBlock)).append("\n");
    sb.append("    destinationIpv6CidrBlock: ").append(toIndentedString(destinationIpv6CidrBlock)).append("\n");
    sb.append("    destinationPrefixListId: ").append(toIndentedString(destinationPrefixListId)).append("\n");
    sb.append("    egressOnlyInternetGatewayId: ").append(toIndentedString(egressOnlyInternetGatewayId)).append("\n");
    sb.append("    gatewayId: ").append(toIndentedString(gatewayId)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceOwnerId: ").append(toIndentedString(instanceOwnerId)).append("\n");
    sb.append("    localGatewayId: ").append(toIndentedString(localGatewayId)).append("\n");
    sb.append("    natGatewayId: ").append(toIndentedString(natGatewayId)).append("\n");
    sb.append("    networkInterfaceId: ").append(toIndentedString(networkInterfaceId)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    transitGatewayId: ").append(toIndentedString(transitGatewayId)).append("\n");
    sb.append("    vpcPeeringConnectionId: ").append(toIndentedString(vpcPeeringConnectionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CarrierGatewayId");
    openapiFields.add("CoreNetworkArn");
    openapiFields.add("DestinationCidrBlock");
    openapiFields.add("DestinationIpv6CidrBlock");
    openapiFields.add("DestinationPrefixListId");
    openapiFields.add("EgressOnlyInternetGatewayId");
    openapiFields.add("GatewayId");
    openapiFields.add("InstanceId");
    openapiFields.add("InstanceOwnerId");
    openapiFields.add("LocalGatewayId");
    openapiFields.add("NatGatewayId");
    openapiFields.add("NetworkInterfaceId");
    openapiFields.add("Origin");
    openapiFields.add("State");
    openapiFields.add("TransitGatewayId");
    openapiFields.add("VpcPeeringConnectionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RouteSetDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RouteSetDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RouteSetDetails is not found in the empty JSON string", RouteSetDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RouteSetDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RouteSetDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CarrierGatewayId`
      if (jsonObj.get("CarrierGatewayId") != null && !jsonObj.get("CarrierGatewayId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CarrierGatewayId"));
      }
      // validate the optional field `CoreNetworkArn`
      if (jsonObj.get("CoreNetworkArn") != null && !jsonObj.get("CoreNetworkArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CoreNetworkArn"));
      }
      // validate the optional field `DestinationCidrBlock`
      if (jsonObj.get("DestinationCidrBlock") != null && !jsonObj.get("DestinationCidrBlock").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DestinationCidrBlock"));
      }
      // validate the optional field `DestinationIpv6CidrBlock`
      if (jsonObj.get("DestinationIpv6CidrBlock") != null && !jsonObj.get("DestinationIpv6CidrBlock").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DestinationIpv6CidrBlock"));
      }
      // validate the optional field `DestinationPrefixListId`
      if (jsonObj.get("DestinationPrefixListId") != null && !jsonObj.get("DestinationPrefixListId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DestinationPrefixListId"));
      }
      // validate the optional field `EgressOnlyInternetGatewayId`
      if (jsonObj.get("EgressOnlyInternetGatewayId") != null && !jsonObj.get("EgressOnlyInternetGatewayId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EgressOnlyInternetGatewayId"));
      }
      // validate the optional field `GatewayId`
      if (jsonObj.get("GatewayId") != null && !jsonObj.get("GatewayId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GatewayId"));
      }
      // validate the optional field `InstanceId`
      if (jsonObj.get("InstanceId") != null && !jsonObj.get("InstanceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceId"));
      }
      // validate the optional field `InstanceOwnerId`
      if (jsonObj.get("InstanceOwnerId") != null && !jsonObj.get("InstanceOwnerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InstanceOwnerId"));
      }
      // validate the optional field `LocalGatewayId`
      if (jsonObj.get("LocalGatewayId") != null && !jsonObj.get("LocalGatewayId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LocalGatewayId"));
      }
      // validate the optional field `NatGatewayId`
      if (jsonObj.get("NatGatewayId") != null && !jsonObj.get("NatGatewayId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NatGatewayId"));
      }
      // validate the optional field `NetworkInterfaceId`
      if (jsonObj.get("NetworkInterfaceId") != null && !jsonObj.get("NetworkInterfaceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkInterfaceId"));
      }
      // validate the optional field `Origin`
      if (jsonObj.get("Origin") != null && !jsonObj.get("Origin").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Origin"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `TransitGatewayId`
      if (jsonObj.get("TransitGatewayId") != null && !jsonObj.get("TransitGatewayId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TransitGatewayId"));
      }
      // validate the optional field `VpcPeeringConnectionId`
      if (jsonObj.get("VpcPeeringConnectionId") != null && !jsonObj.get("VpcPeeringConnectionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcPeeringConnectionId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RouteSetDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RouteSetDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RouteSetDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RouteSetDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<RouteSetDetails>() {
           @Override
           public void write(JsonWriter out, RouteSetDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RouteSetDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RouteSetDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RouteSetDetails
   * @throws IOException if the JSON string is invalid with respect to RouteSetDetails
   */
  public static RouteSetDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RouteSetDetails.class);
  }

  /**
   * Convert an instance of RouteSetDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

