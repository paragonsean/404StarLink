/*
 * AWS SecurityHub
 * <p>Security Hub provides you with a comprehensive view of the security state of your Amazon Web Services environment and resources. It also provides you with the readiness status of your environment based on controls from supported security standards. Security Hub collects security data from Amazon Web Services accounts, services, and integrated third-party products and helps you analyze security trends in your environment to identify the highest priority security issues. For more information about Security Hub, see the <a href=\"https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html\">Security HubUser Guide</a>.</p> <p>When you use operations in the Security Hub API, the requests are executed only in the Amazon Web Services Region that is currently active or in the specific Amazon Web Services Region that you specify in your request. Any configuration or settings change that results from the operation is applied only to that Region. To make the same change in other Regions, run the same command for each Region in which you want to apply the change.</p> <p>For example, if your Region is set to <code>us-west-2</code>, when you use <code>CreateMembers</code> to add a member account to Security Hub, the association of the member account with the administrator account is created only in the <code>us-west-2</code> Region. Security Hub must be enabled for the member account in the same Region that the invitation was sent from.</p> <p>The following throttling limits apply to using Security Hub API operations.</p> <ul> <li> <p> <code>BatchEnableStandards</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 1 request per second.</p> </li> <li> <p> <code>GetFindings</code> - <code>RateLimit</code> of 3 requests per second. <code>BurstLimit</code> of 6 requests per second.</p> </li> <li> <p> <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>UpdateStandardsControl</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 5 requests per second.</p> </li> <li> <p>All other operations - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  One or more network interfaces to attach to an Amazon EC2 instance. If you specify a network interface, you must specify security groups and subnets as part of the network interface. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:04:58.462265-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails {
  public static final String SERIALIZED_NAME_ASSOCIATE_CARRIER_IP_ADDRESS = "AssociateCarrierIpAddress";
  @SerializedName(SERIALIZED_NAME_ASSOCIATE_CARRIER_IP_ADDRESS)
  private Boolean associateCarrierIpAddress;

  public static final String SERIALIZED_NAME_ASSOCIATE_PUBLIC_IP_ADDRESS = "AssociatePublicIpAddress";
  @SerializedName(SERIALIZED_NAME_ASSOCIATE_PUBLIC_IP_ADDRESS)
  private Boolean associatePublicIpAddress;

  public static final String SERIALIZED_NAME_DELETE_ON_TERMINATION = "DeleteOnTermination";
  @SerializedName(SERIALIZED_NAME_DELETE_ON_TERMINATION)
  private Boolean deleteOnTermination;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DEVICE_INDEX = "DeviceIndex";
  @SerializedName(SERIALIZED_NAME_DEVICE_INDEX)
  private Integer deviceIndex;

  public static final String SERIALIZED_NAME_GROUPS = "Groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List groups;

  public static final String SERIALIZED_NAME_INTERFACE_TYPE = "InterfaceType";
  @SerializedName(SERIALIZED_NAME_INTERFACE_TYPE)
  private String interfaceType;

  public static final String SERIALIZED_NAME_IPV4_PREFIX_COUNT = "Ipv4PrefixCount";
  @SerializedName(SERIALIZED_NAME_IPV4_PREFIX_COUNT)
  private Integer ipv4PrefixCount;

  public static final String SERIALIZED_NAME_IPV4_PREFIXES = "Ipv4Prefixes";
  @SerializedName(SERIALIZED_NAME_IPV4_PREFIXES)
  private List ipv4Prefixes;

  public static final String SERIALIZED_NAME_IPV6_ADDRESS_COUNT = "Ipv6AddressCount";
  @SerializedName(SERIALIZED_NAME_IPV6_ADDRESS_COUNT)
  private Integer ipv6AddressCount;

  public static final String SERIALIZED_NAME_IPV6_ADDRESSES = "Ipv6Addresses";
  @SerializedName(SERIALIZED_NAME_IPV6_ADDRESSES)
  private List ipv6Addresses;

  public static final String SERIALIZED_NAME_IPV6_PREFIX_COUNT = "Ipv6PrefixCount";
  @SerializedName(SERIALIZED_NAME_IPV6_PREFIX_COUNT)
  private Integer ipv6PrefixCount;

  public static final String SERIALIZED_NAME_IPV6_PREFIXES = "Ipv6Prefixes";
  @SerializedName(SERIALIZED_NAME_IPV6_PREFIXES)
  private List ipv6Prefixes;

  public static final String SERIALIZED_NAME_NETWORK_CARD_INDEX = "NetworkCardIndex";
  @SerializedName(SERIALIZED_NAME_NETWORK_CARD_INDEX)
  private Integer networkCardIndex;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACE_ID = "NetworkInterfaceId";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACE_ID)
  private String networkInterfaceId;

  public static final String SERIALIZED_NAME_PRIVATE_IP_ADDRESS = "PrivateIpAddress";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IP_ADDRESS)
  private String privateIpAddress;

  public static final String SERIALIZED_NAME_PRIVATE_IP_ADDRESSES = "PrivateIpAddresses";
  @SerializedName(SERIALIZED_NAME_PRIVATE_IP_ADDRESSES)
  private List privateIpAddresses;

  public static final String SERIALIZED_NAME_SECONDARY_PRIVATE_IP_ADDRESS_COUNT = "SecondaryPrivateIpAddressCount";
  @SerializedName(SERIALIZED_NAME_SECONDARY_PRIVATE_IP_ADDRESS_COUNT)
  private Integer secondaryPrivateIpAddressCount;

  public static final String SERIALIZED_NAME_SUBNET_ID = "SubnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails() {
  }

  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails associateCarrierIpAddress(Boolean associateCarrierIpAddress) {
    this.associateCarrierIpAddress = associateCarrierIpAddress;
    return this;
  }

  /**
   * Get associateCarrierIpAddress
   * @return associateCarrierIpAddress
   */
  @javax.annotation.Nullable
  public Boolean getAssociateCarrierIpAddress() {
    return associateCarrierIpAddress;
  }

  public void setAssociateCarrierIpAddress(Boolean associateCarrierIpAddress) {
    this.associateCarrierIpAddress = associateCarrierIpAddress;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails associatePublicIpAddress(Boolean associatePublicIpAddress) {
    this.associatePublicIpAddress = associatePublicIpAddress;
    return this;
  }

  /**
   * Get associatePublicIpAddress
   * @return associatePublicIpAddress
   */
  @javax.annotation.Nullable
  public Boolean getAssociatePublicIpAddress() {
    return associatePublicIpAddress;
  }

  public void setAssociatePublicIpAddress(Boolean associatePublicIpAddress) {
    this.associatePublicIpAddress = associatePublicIpAddress;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails deleteOnTermination(Boolean deleteOnTermination) {
    this.deleteOnTermination = deleteOnTermination;
    return this;
  }

  /**
   * Get deleteOnTermination
   * @return deleteOnTermination
   */
  @javax.annotation.Nullable
  public Boolean getDeleteOnTermination() {
    return deleteOnTermination;
  }

  public void setDeleteOnTermination(Boolean deleteOnTermination) {
    this.deleteOnTermination = deleteOnTermination;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails deviceIndex(Integer deviceIndex) {
    this.deviceIndex = deviceIndex;
    return this;
  }

  /**
   * Get deviceIndex
   * @return deviceIndex
   */
  @javax.annotation.Nullable
  public Integer getDeviceIndex() {
    return deviceIndex;
  }

  public void setDeviceIndex(Integer deviceIndex) {
    this.deviceIndex = deviceIndex;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails groups(List groups) {
    this.groups = groups;
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  public List getGroups() {
    return groups;
  }

  public void setGroups(List groups) {
    this.groups = groups;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails interfaceType(String interfaceType) {
    this.interfaceType = interfaceType;
    return this;
  }

  /**
   * Get interfaceType
   * @return interfaceType
   */
  @javax.annotation.Nullable
  public String getInterfaceType() {
    return interfaceType;
  }

  public void setInterfaceType(String interfaceType) {
    this.interfaceType = interfaceType;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails ipv4PrefixCount(Integer ipv4PrefixCount) {
    this.ipv4PrefixCount = ipv4PrefixCount;
    return this;
  }

  /**
   * Get ipv4PrefixCount
   * @return ipv4PrefixCount
   */
  @javax.annotation.Nullable
  public Integer getIpv4PrefixCount() {
    return ipv4PrefixCount;
  }

  public void setIpv4PrefixCount(Integer ipv4PrefixCount) {
    this.ipv4PrefixCount = ipv4PrefixCount;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails ipv4Prefixes(List ipv4Prefixes) {
    this.ipv4Prefixes = ipv4Prefixes;
    return this;
  }

  /**
   * Get ipv4Prefixes
   * @return ipv4Prefixes
   */
  @javax.annotation.Nullable
  public List getIpv4Prefixes() {
    return ipv4Prefixes;
  }

  public void setIpv4Prefixes(List ipv4Prefixes) {
    this.ipv4Prefixes = ipv4Prefixes;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails ipv6AddressCount(Integer ipv6AddressCount) {
    this.ipv6AddressCount = ipv6AddressCount;
    return this;
  }

  /**
   * Get ipv6AddressCount
   * @return ipv6AddressCount
   */
  @javax.annotation.Nullable
  public Integer getIpv6AddressCount() {
    return ipv6AddressCount;
  }

  public void setIpv6AddressCount(Integer ipv6AddressCount) {
    this.ipv6AddressCount = ipv6AddressCount;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails ipv6Addresses(List ipv6Addresses) {
    this.ipv6Addresses = ipv6Addresses;
    return this;
  }

  /**
   * Get ipv6Addresses
   * @return ipv6Addresses
   */
  @javax.annotation.Nullable
  public List getIpv6Addresses() {
    return ipv6Addresses;
  }

  public void setIpv6Addresses(List ipv6Addresses) {
    this.ipv6Addresses = ipv6Addresses;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails ipv6PrefixCount(Integer ipv6PrefixCount) {
    this.ipv6PrefixCount = ipv6PrefixCount;
    return this;
  }

  /**
   * Get ipv6PrefixCount
   * @return ipv6PrefixCount
   */
  @javax.annotation.Nullable
  public Integer getIpv6PrefixCount() {
    return ipv6PrefixCount;
  }

  public void setIpv6PrefixCount(Integer ipv6PrefixCount) {
    this.ipv6PrefixCount = ipv6PrefixCount;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails ipv6Prefixes(List ipv6Prefixes) {
    this.ipv6Prefixes = ipv6Prefixes;
    return this;
  }

  /**
   * Get ipv6Prefixes
   * @return ipv6Prefixes
   */
  @javax.annotation.Nullable
  public List getIpv6Prefixes() {
    return ipv6Prefixes;
  }

  public void setIpv6Prefixes(List ipv6Prefixes) {
    this.ipv6Prefixes = ipv6Prefixes;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails networkCardIndex(Integer networkCardIndex) {
    this.networkCardIndex = networkCardIndex;
    return this;
  }

  /**
   * Get networkCardIndex
   * @return networkCardIndex
   */
  @javax.annotation.Nullable
  public Integer getNetworkCardIndex() {
    return networkCardIndex;
  }

  public void setNetworkCardIndex(Integer networkCardIndex) {
    this.networkCardIndex = networkCardIndex;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails networkInterfaceId(String networkInterfaceId) {
    this.networkInterfaceId = networkInterfaceId;
    return this;
  }

  /**
   * Get networkInterfaceId
   * @return networkInterfaceId
   */
  @javax.annotation.Nullable
  public String getNetworkInterfaceId() {
    return networkInterfaceId;
  }

  public void setNetworkInterfaceId(String networkInterfaceId) {
    this.networkInterfaceId = networkInterfaceId;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails privateIpAddress(String privateIpAddress) {
    this.privateIpAddress = privateIpAddress;
    return this;
  }

  /**
   * Get privateIpAddress
   * @return privateIpAddress
   */
  @javax.annotation.Nullable
  public String getPrivateIpAddress() {
    return privateIpAddress;
  }

  public void setPrivateIpAddress(String privateIpAddress) {
    this.privateIpAddress = privateIpAddress;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails privateIpAddresses(List privateIpAddresses) {
    this.privateIpAddresses = privateIpAddresses;
    return this;
  }

  /**
   * Get privateIpAddresses
   * @return privateIpAddresses
   */
  @javax.annotation.Nullable
  public List getPrivateIpAddresses() {
    return privateIpAddresses;
  }

  public void setPrivateIpAddresses(List privateIpAddresses) {
    this.privateIpAddresses = privateIpAddresses;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails secondaryPrivateIpAddressCount(Integer secondaryPrivateIpAddressCount) {
    this.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount;
    return this;
  }

  /**
   * Get secondaryPrivateIpAddressCount
   * @return secondaryPrivateIpAddressCount
   */
  @javax.annotation.Nullable
  public Integer getSecondaryPrivateIpAddressCount() {
    return secondaryPrivateIpAddressCount;
  }

  public void setSecondaryPrivateIpAddressCount(Integer secondaryPrivateIpAddressCount) {
    this.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount;
  }


  public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * Get subnetId
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails awsEc2LaunchTemplateDataNetworkInterfaceSetDetails = (AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails) o;
    return Objects.equals(this.associateCarrierIpAddress, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.associateCarrierIpAddress) &&
        Objects.equals(this.associatePublicIpAddress, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.associatePublicIpAddress) &&
        Objects.equals(this.deleteOnTermination, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.deleteOnTermination) &&
        Objects.equals(this.description, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.description) &&
        Objects.equals(this.deviceIndex, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.deviceIndex) &&
        Objects.equals(this.groups, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.groups) &&
        Objects.equals(this.interfaceType, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.interfaceType) &&
        Objects.equals(this.ipv4PrefixCount, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.ipv4PrefixCount) &&
        Objects.equals(this.ipv4Prefixes, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.ipv4Prefixes) &&
        Objects.equals(this.ipv6AddressCount, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.ipv6AddressCount) &&
        Objects.equals(this.ipv6Addresses, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.ipv6Addresses) &&
        Objects.equals(this.ipv6PrefixCount, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.ipv6PrefixCount) &&
        Objects.equals(this.ipv6Prefixes, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.ipv6Prefixes) &&
        Objects.equals(this.networkCardIndex, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.networkCardIndex) &&
        Objects.equals(this.networkInterfaceId, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.networkInterfaceId) &&
        Objects.equals(this.privateIpAddress, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.privateIpAddress) &&
        Objects.equals(this.privateIpAddresses, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.privateIpAddresses) &&
        Objects.equals(this.secondaryPrivateIpAddressCount, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.secondaryPrivateIpAddressCount) &&
        Objects.equals(this.subnetId, awsEc2LaunchTemplateDataNetworkInterfaceSetDetails.subnetId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associateCarrierIpAddress, associatePublicIpAddress, deleteOnTermination, description, deviceIndex, groups, interfaceType, ipv4PrefixCount, ipv4Prefixes, ipv6AddressCount, ipv6Addresses, ipv6PrefixCount, ipv6Prefixes, networkCardIndex, networkInterfaceId, privateIpAddress, privateIpAddresses, secondaryPrivateIpAddressCount, subnetId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails {\n");
    sb.append("    associateCarrierIpAddress: ").append(toIndentedString(associateCarrierIpAddress)).append("\n");
    sb.append("    associatePublicIpAddress: ").append(toIndentedString(associatePublicIpAddress)).append("\n");
    sb.append("    deleteOnTermination: ").append(toIndentedString(deleteOnTermination)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    deviceIndex: ").append(toIndentedString(deviceIndex)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    interfaceType: ").append(toIndentedString(interfaceType)).append("\n");
    sb.append("    ipv4PrefixCount: ").append(toIndentedString(ipv4PrefixCount)).append("\n");
    sb.append("    ipv4Prefixes: ").append(toIndentedString(ipv4Prefixes)).append("\n");
    sb.append("    ipv6AddressCount: ").append(toIndentedString(ipv6AddressCount)).append("\n");
    sb.append("    ipv6Addresses: ").append(toIndentedString(ipv6Addresses)).append("\n");
    sb.append("    ipv6PrefixCount: ").append(toIndentedString(ipv6PrefixCount)).append("\n");
    sb.append("    ipv6Prefixes: ").append(toIndentedString(ipv6Prefixes)).append("\n");
    sb.append("    networkCardIndex: ").append(toIndentedString(networkCardIndex)).append("\n");
    sb.append("    networkInterfaceId: ").append(toIndentedString(networkInterfaceId)).append("\n");
    sb.append("    privateIpAddress: ").append(toIndentedString(privateIpAddress)).append("\n");
    sb.append("    privateIpAddresses: ").append(toIndentedString(privateIpAddresses)).append("\n");
    sb.append("    secondaryPrivateIpAddressCount: ").append(toIndentedString(secondaryPrivateIpAddressCount)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AssociateCarrierIpAddress");
    openapiFields.add("AssociatePublicIpAddress");
    openapiFields.add("DeleteOnTermination");
    openapiFields.add("Description");
    openapiFields.add("DeviceIndex");
    openapiFields.add("Groups");
    openapiFields.add("InterfaceType");
    openapiFields.add("Ipv4PrefixCount");
    openapiFields.add("Ipv4Prefixes");
    openapiFields.add("Ipv6AddressCount");
    openapiFields.add("Ipv6Addresses");
    openapiFields.add("Ipv6PrefixCount");
    openapiFields.add("Ipv6Prefixes");
    openapiFields.add("NetworkCardIndex");
    openapiFields.add("NetworkInterfaceId");
    openapiFields.add("PrivateIpAddress");
    openapiFields.add("PrivateIpAddresses");
    openapiFields.add("SecondaryPrivateIpAddressCount");
    openapiFields.add("SubnetId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails is not found in the empty JSON string", AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AssociateCarrierIpAddress`
      if (jsonObj.get("AssociateCarrierIpAddress") != null && !jsonObj.get("AssociateCarrierIpAddress").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AssociateCarrierIpAddress"));
      }
      // validate the optional field `AssociatePublicIpAddress`
      if (jsonObj.get("AssociatePublicIpAddress") != null && !jsonObj.get("AssociatePublicIpAddress").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AssociatePublicIpAddress"));
      }
      // validate the optional field `DeleteOnTermination`
      if (jsonObj.get("DeleteOnTermination") != null && !jsonObj.get("DeleteOnTermination").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DeleteOnTermination"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `DeviceIndex`
      if (jsonObj.get("DeviceIndex") != null && !jsonObj.get("DeviceIndex").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DeviceIndex"));
      }
      // validate the optional field `Groups`
      if (jsonObj.get("Groups") != null && !jsonObj.get("Groups").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Groups"));
      }
      // validate the optional field `InterfaceType`
      if (jsonObj.get("InterfaceType") != null && !jsonObj.get("InterfaceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("InterfaceType"));
      }
      // validate the optional field `Ipv4PrefixCount`
      if (jsonObj.get("Ipv4PrefixCount") != null && !jsonObj.get("Ipv4PrefixCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Ipv4PrefixCount"));
      }
      // validate the optional field `Ipv4Prefixes`
      if (jsonObj.get("Ipv4Prefixes") != null && !jsonObj.get("Ipv4Prefixes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Ipv4Prefixes"));
      }
      // validate the optional field `Ipv6AddressCount`
      if (jsonObj.get("Ipv6AddressCount") != null && !jsonObj.get("Ipv6AddressCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Ipv6AddressCount"));
      }
      // validate the optional field `Ipv6Addresses`
      if (jsonObj.get("Ipv6Addresses") != null && !jsonObj.get("Ipv6Addresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Ipv6Addresses"));
      }
      // validate the optional field `Ipv6PrefixCount`
      if (jsonObj.get("Ipv6PrefixCount") != null && !jsonObj.get("Ipv6PrefixCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Ipv6PrefixCount"));
      }
      // validate the optional field `Ipv6Prefixes`
      if (jsonObj.get("Ipv6Prefixes") != null && !jsonObj.get("Ipv6Prefixes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Ipv6Prefixes"));
      }
      // validate the optional field `NetworkCardIndex`
      if (jsonObj.get("NetworkCardIndex") != null && !jsonObj.get("NetworkCardIndex").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NetworkCardIndex"));
      }
      // validate the optional field `NetworkInterfaceId`
      if (jsonObj.get("NetworkInterfaceId") != null && !jsonObj.get("NetworkInterfaceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NetworkInterfaceId"));
      }
      // validate the optional field `PrivateIpAddress`
      if (jsonObj.get("PrivateIpAddress") != null && !jsonObj.get("PrivateIpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PrivateIpAddress"));
      }
      // validate the optional field `PrivateIpAddresses`
      if (jsonObj.get("PrivateIpAddresses") != null && !jsonObj.get("PrivateIpAddresses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PrivateIpAddresses"));
      }
      // validate the optional field `SecondaryPrivateIpAddressCount`
      if (jsonObj.get("SecondaryPrivateIpAddressCount") != null && !jsonObj.get("SecondaryPrivateIpAddressCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SecondaryPrivateIpAddressCount"));
      }
      // validate the optional field `SubnetId`
      if (jsonObj.get("SubnetId") != null && !jsonObj.get("SubnetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubnetId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails>() {
           @Override
           public void write(JsonWriter out, AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails
   * @throws IOException if the JSON string is invalid with respect to AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails
   */
  public static AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails.class);
  }

  /**
   * Convert an instance of AwsEc2LaunchTemplateDataNetworkInterfaceSetDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

