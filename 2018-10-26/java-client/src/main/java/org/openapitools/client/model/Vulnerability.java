/*
 * AWS SecurityHub
 * <p>Security Hub provides you with a comprehensive view of the security state of your Amazon Web Services environment and resources. It also provides you with the readiness status of your environment based on controls from supported security standards. Security Hub collects security data from Amazon Web Services accounts, services, and integrated third-party products and helps you analyze security trends in your environment to identify the highest priority security issues. For more information about Security Hub, see the <a href=\"https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html\">Security HubUser Guide</a>.</p> <p>When you use operations in the Security Hub API, the requests are executed only in the Amazon Web Services Region that is currently active or in the specific Amazon Web Services Region that you specify in your request. Any configuration or settings change that results from the operation is applied only to that Region. To make the same change in other Regions, run the same command for each Region in which you want to apply the change.</p> <p>For example, if your Region is set to <code>us-west-2</code>, when you use <code>CreateMembers</code> to add a member account to Security Hub, the association of the member account with the administrator account is created only in the <code>us-west-2</code> Region. Security Hub must be enabled for the member account in the same Region that the invitation was sent from.</p> <p>The following throttling limits apply to using Security Hub API operations.</p> <ul> <li> <p> <code>BatchEnableStandards</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 1 request per second.</p> </li> <li> <p> <code>GetFindings</code> - <code>RateLimit</code> of 3 requests per second. <code>BurstLimit</code> of 6 requests per second.</p> </li> <li> <p> <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>UpdateStandardsControl</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 5 requests per second.</p> </li> <li> <p>All other operations - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VulnerabilityFixAvailable;
import org.openapitools.client.model.VulnerabilityVendor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A vulnerability associated with a finding.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:04:58.462265-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Vulnerability {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_VULNERABLE_PACKAGES = "VulnerablePackages";
  @SerializedName(SERIALIZED_NAME_VULNERABLE_PACKAGES)
  private List vulnerablePackages;

  public static final String SERIALIZED_NAME_CVSS = "Cvss";
  @SerializedName(SERIALIZED_NAME_CVSS)
  private List cvss;

  public static final String SERIALIZED_NAME_RELATED_VULNERABILITIES = "RelatedVulnerabilities";
  @SerializedName(SERIALIZED_NAME_RELATED_VULNERABILITIES)
  private List relatedVulnerabilities;

  public static final String SERIALIZED_NAME_VENDOR = "Vendor";
  @SerializedName(SERIALIZED_NAME_VENDOR)
  private VulnerabilityVendor vendor;

  public static final String SERIALIZED_NAME_REFERENCE_URLS = "ReferenceUrls";
  @SerializedName(SERIALIZED_NAME_REFERENCE_URLS)
  private List referenceUrls;

  public static final String SERIALIZED_NAME_FIX_AVAILABLE = "FixAvailable";
  @SerializedName(SERIALIZED_NAME_FIX_AVAILABLE)
  private VulnerabilityFixAvailable fixAvailable;

  public Vulnerability() {
  }

  public Vulnerability id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Vulnerability vulnerablePackages(List vulnerablePackages) {
    this.vulnerablePackages = vulnerablePackages;
    return this;
  }

  /**
   * Get vulnerablePackages
   * @return vulnerablePackages
   */
  @javax.annotation.Nullable
  public List getVulnerablePackages() {
    return vulnerablePackages;
  }

  public void setVulnerablePackages(List vulnerablePackages) {
    this.vulnerablePackages = vulnerablePackages;
  }


  public Vulnerability cvss(List cvss) {
    this.cvss = cvss;
    return this;
  }

  /**
   * Get cvss
   * @return cvss
   */
  @javax.annotation.Nullable
  public List getCvss() {
    return cvss;
  }

  public void setCvss(List cvss) {
    this.cvss = cvss;
  }


  public Vulnerability relatedVulnerabilities(List relatedVulnerabilities) {
    this.relatedVulnerabilities = relatedVulnerabilities;
    return this;
  }

  /**
   * Get relatedVulnerabilities
   * @return relatedVulnerabilities
   */
  @javax.annotation.Nullable
  public List getRelatedVulnerabilities() {
    return relatedVulnerabilities;
  }

  public void setRelatedVulnerabilities(List relatedVulnerabilities) {
    this.relatedVulnerabilities = relatedVulnerabilities;
  }


  public Vulnerability vendor(VulnerabilityVendor vendor) {
    this.vendor = vendor;
    return this;
  }

  /**
   * Get vendor
   * @return vendor
   */
  @javax.annotation.Nullable
  public VulnerabilityVendor getVendor() {
    return vendor;
  }

  public void setVendor(VulnerabilityVendor vendor) {
    this.vendor = vendor;
  }


  public Vulnerability referenceUrls(List referenceUrls) {
    this.referenceUrls = referenceUrls;
    return this;
  }

  /**
   * Get referenceUrls
   * @return referenceUrls
   */
  @javax.annotation.Nullable
  public List getReferenceUrls() {
    return referenceUrls;
  }

  public void setReferenceUrls(List referenceUrls) {
    this.referenceUrls = referenceUrls;
  }


  public Vulnerability fixAvailable(VulnerabilityFixAvailable fixAvailable) {
    this.fixAvailable = fixAvailable;
    return this;
  }

  /**
   * Get fixAvailable
   * @return fixAvailable
   */
  @javax.annotation.Nullable
  public VulnerabilityFixAvailable getFixAvailable() {
    return fixAvailable;
  }

  public void setFixAvailable(VulnerabilityFixAvailable fixAvailable) {
    this.fixAvailable = fixAvailable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vulnerability vulnerability = (Vulnerability) o;
    return Objects.equals(this.id, vulnerability.id) &&
        Objects.equals(this.vulnerablePackages, vulnerability.vulnerablePackages) &&
        Objects.equals(this.cvss, vulnerability.cvss) &&
        Objects.equals(this.relatedVulnerabilities, vulnerability.relatedVulnerabilities) &&
        Objects.equals(this.vendor, vulnerability.vendor) &&
        Objects.equals(this.referenceUrls, vulnerability.referenceUrls) &&
        Objects.equals(this.fixAvailable, vulnerability.fixAvailable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, vulnerablePackages, cvss, relatedVulnerabilities, vendor, referenceUrls, fixAvailable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vulnerability {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    vulnerablePackages: ").append(toIndentedString(vulnerablePackages)).append("\n");
    sb.append("    cvss: ").append(toIndentedString(cvss)).append("\n");
    sb.append("    relatedVulnerabilities: ").append(toIndentedString(relatedVulnerabilities)).append("\n");
    sb.append("    vendor: ").append(toIndentedString(vendor)).append("\n");
    sb.append("    referenceUrls: ").append(toIndentedString(referenceUrls)).append("\n");
    sb.append("    fixAvailable: ").append(toIndentedString(fixAvailable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("VulnerablePackages");
    openapiFields.add("Cvss");
    openapiFields.add("RelatedVulnerabilities");
    openapiFields.add("Vendor");
    openapiFields.add("ReferenceUrls");
    openapiFields.add("FixAvailable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Vulnerability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vulnerability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vulnerability is not found in the empty JSON string", Vulnerability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vulnerability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vulnerability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Vulnerability.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the optional field `VulnerablePackages`
      if (jsonObj.get("VulnerablePackages") != null && !jsonObj.get("VulnerablePackages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("VulnerablePackages"));
      }
      // validate the optional field `Cvss`
      if (jsonObj.get("Cvss") != null && !jsonObj.get("Cvss").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Cvss"));
      }
      // validate the optional field `RelatedVulnerabilities`
      if (jsonObj.get("RelatedVulnerabilities") != null && !jsonObj.get("RelatedVulnerabilities").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RelatedVulnerabilities"));
      }
      // validate the optional field `Vendor`
      if (jsonObj.get("Vendor") != null && !jsonObj.get("Vendor").isJsonNull()) {
        VulnerabilityVendor.validateJsonElement(jsonObj.get("Vendor"));
      }
      // validate the optional field `ReferenceUrls`
      if (jsonObj.get("ReferenceUrls") != null && !jsonObj.get("ReferenceUrls").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReferenceUrls"));
      }
      // validate the optional field `FixAvailable`
      if (jsonObj.get("FixAvailable") != null && !jsonObj.get("FixAvailable").isJsonNull()) {
        VulnerabilityFixAvailable.validateJsonElement(jsonObj.get("FixAvailable"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vulnerability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vulnerability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vulnerability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vulnerability.class));

       return (TypeAdapter<T>) new TypeAdapter<Vulnerability>() {
           @Override
           public void write(JsonWriter out, Vulnerability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vulnerability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Vulnerability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Vulnerability
   * @throws IOException if the JSON string is invalid with respect to Vulnerability
   */
  public static Vulnerability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vulnerability.class);
  }

  /**
   * Convert an instance of Vulnerability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

