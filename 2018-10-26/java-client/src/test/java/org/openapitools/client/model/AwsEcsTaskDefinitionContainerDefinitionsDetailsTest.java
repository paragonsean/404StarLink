/*
 * AWS SecurityHub
 * <p>Security Hub provides you with a comprehensive view of the security state of your Amazon Web Services environment and resources. It also provides you with the readiness status of your environment based on controls from supported security standards. Security Hub collects security data from Amazon Web Services accounts, services, and integrated third-party products and helps you analyze security trends in your environment to identify the highest priority security issues. For more information about Security Hub, see the <a href=\"https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html\">Security HubUser Guide</a>.</p> <p>When you use operations in the Security Hub API, the requests are executed only in the Amazon Web Services Region that is currently active or in the specific Amazon Web Services Region that you specify in your request. Any configuration or settings change that results from the operation is applied only to that Region. To make the same change in other Regions, run the same command for each Region in which you want to apply the change.</p> <p>For example, if your Region is set to <code>us-west-2</code>, when you use <code>CreateMembers</code> to add a member account to Security Hub, the association of the member account with the administrator account is created only in the <code>us-west-2</code> Region. Security Hub must be enabled for the member account in the same Region that the invitation was sent from.</p> <p>The following throttling limits apply to using Security Hub API operations.</p> <ul> <li> <p> <code>BatchEnableStandards</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 1 request per second.</p> </li> <li> <p> <code>GetFindings</code> - <code>RateLimit</code> of 3 requests per second. <code>BurstLimit</code> of 6 requests per second.</p> </li> <li> <p> <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>UpdateStandardsControl</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 5 requests per second.</p> </li> <li> <p>All other operations - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AwsEcsTaskDefinitionContainerDefinitionsDetailsFirelensConfiguration;
import org.openapitools.client.model.AwsEcsTaskDefinitionContainerDefinitionsDetailsHealthCheck;
import org.openapitools.client.model.AwsEcsTaskDefinitionContainerDefinitionsDetailsLinuxParameters;
import org.openapitools.client.model.AwsEcsTaskDefinitionContainerDefinitionsDetailsLogConfiguration;
import org.openapitools.client.model.AwsEcsTaskDefinitionContainerDefinitionsDetailsRepositoryCredentials;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AwsEcsTaskDefinitionContainerDefinitionsDetails
 */
public class AwsEcsTaskDefinitionContainerDefinitionsDetailsTest {
    private final AwsEcsTaskDefinitionContainerDefinitionsDetails model = new AwsEcsTaskDefinitionContainerDefinitionsDetails();

    /**
     * Model tests for AwsEcsTaskDefinitionContainerDefinitionsDetails
     */
    @Test
    public void testAwsEcsTaskDefinitionContainerDefinitionsDetails() {
        // TODO: test AwsEcsTaskDefinitionContainerDefinitionsDetails
    }

    /**
     * Test the property 'command'
     */
    @Test
    public void commandTest() {
        // TODO: test command
    }

    /**
     * Test the property 'cpu'
     */
    @Test
    public void cpuTest() {
        // TODO: test cpu
    }

    /**
     * Test the property 'dependsOn'
     */
    @Test
    public void dependsOnTest() {
        // TODO: test dependsOn
    }

    /**
     * Test the property 'disableNetworking'
     */
    @Test
    public void disableNetworkingTest() {
        // TODO: test disableNetworking
    }

    /**
     * Test the property 'dnsSearchDomains'
     */
    @Test
    public void dnsSearchDomainsTest() {
        // TODO: test dnsSearchDomains
    }

    /**
     * Test the property 'dnsServers'
     */
    @Test
    public void dnsServersTest() {
        // TODO: test dnsServers
    }

    /**
     * Test the property 'dockerLabels'
     */
    @Test
    public void dockerLabelsTest() {
        // TODO: test dockerLabels
    }

    /**
     * Test the property 'dockerSecurityOptions'
     */
    @Test
    public void dockerSecurityOptionsTest() {
        // TODO: test dockerSecurityOptions
    }

    /**
     * Test the property 'entryPoint'
     */
    @Test
    public void entryPointTest() {
        // TODO: test entryPoint
    }

    /**
     * Test the property 'environment'
     */
    @Test
    public void environmentTest() {
        // TODO: test environment
    }

    /**
     * Test the property 'environmentFiles'
     */
    @Test
    public void environmentFilesTest() {
        // TODO: test environmentFiles
    }

    /**
     * Test the property 'essential'
     */
    @Test
    public void essentialTest() {
        // TODO: test essential
    }

    /**
     * Test the property 'extraHosts'
     */
    @Test
    public void extraHostsTest() {
        // TODO: test extraHosts
    }

    /**
     * Test the property 'firelensConfiguration'
     */
    @Test
    public void firelensConfigurationTest() {
        // TODO: test firelensConfiguration
    }

    /**
     * Test the property 'healthCheck'
     */
    @Test
    public void healthCheckTest() {
        // TODO: test healthCheck
    }

    /**
     * Test the property 'hostname'
     */
    @Test
    public void hostnameTest() {
        // TODO: test hostname
    }

    /**
     * Test the property 'image'
     */
    @Test
    public void imageTest() {
        // TODO: test image
    }

    /**
     * Test the property 'interactive'
     */
    @Test
    public void interactiveTest() {
        // TODO: test interactive
    }

    /**
     * Test the property 'links'
     */
    @Test
    public void linksTest() {
        // TODO: test links
    }

    /**
     * Test the property 'linuxParameters'
     */
    @Test
    public void linuxParametersTest() {
        // TODO: test linuxParameters
    }

    /**
     * Test the property 'logConfiguration'
     */
    @Test
    public void logConfigurationTest() {
        // TODO: test logConfiguration
    }

    /**
     * Test the property 'memory'
     */
    @Test
    public void memoryTest() {
        // TODO: test memory
    }

    /**
     * Test the property 'memoryReservation'
     */
    @Test
    public void memoryReservationTest() {
        // TODO: test memoryReservation
    }

    /**
     * Test the property 'mountPoints'
     */
    @Test
    public void mountPointsTest() {
        // TODO: test mountPoints
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'portMappings'
     */
    @Test
    public void portMappingsTest() {
        // TODO: test portMappings
    }

    /**
     * Test the property 'privileged'
     */
    @Test
    public void privilegedTest() {
        // TODO: test privileged
    }

    /**
     * Test the property 'pseudoTerminal'
     */
    @Test
    public void pseudoTerminalTest() {
        // TODO: test pseudoTerminal
    }

    /**
     * Test the property 'readonlyRootFilesystem'
     */
    @Test
    public void readonlyRootFilesystemTest() {
        // TODO: test readonlyRootFilesystem
    }

    /**
     * Test the property 'repositoryCredentials'
     */
    @Test
    public void repositoryCredentialsTest() {
        // TODO: test repositoryCredentials
    }

    /**
     * Test the property 'resourceRequirements'
     */
    @Test
    public void resourceRequirementsTest() {
        // TODO: test resourceRequirements
    }

    /**
     * Test the property 'secrets'
     */
    @Test
    public void secretsTest() {
        // TODO: test secrets
    }

    /**
     * Test the property 'startTimeout'
     */
    @Test
    public void startTimeoutTest() {
        // TODO: test startTimeout
    }

    /**
     * Test the property 'stopTimeout'
     */
    @Test
    public void stopTimeoutTest() {
        // TODO: test stopTimeout
    }

    /**
     * Test the property 'systemControls'
     */
    @Test
    public void systemControlsTest() {
        // TODO: test systemControls
    }

    /**
     * Test the property 'ulimits'
     */
    @Test
    public void ulimitsTest() {
        // TODO: test ulimits
    }

    /**
     * Test the property 'user'
     */
    @Test
    public void userTest() {
        // TODO: test user
    }

    /**
     * Test the property 'volumesFrom'
     */
    @Test
    public void volumesFromTest() {
        // TODO: test volumesFrom
    }

    /**
     * Test the property 'workingDirectory'
     */
    @Test
    public void workingDirectoryTest() {
        // TODO: test workingDirectory
    }

}
