# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Any, List, Optional
from typing_extensions import Annotated
from openapi_client.models.attraction import Attraction
from openapi_client.models.classification import Classification
from openapi_client.models.event import Event
from openapi_client.models.event_images import EventImages
from openapi_client.models.genre import Genre
from openapi_client.models.level import Level
from openapi_client.models.segment import Segment
from openapi_client.models.venue import Venue

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def discovery_v2_classifications_get(
        self,
        sort: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Sorting order of the search result")] = None,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter entities by its id")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        include_test: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to have entities flag as test in the response. Only, if you only wanted test entities")] = None,
        page: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page number")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page size of the response")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Classification]:
        """Classification Search

        Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.

        :param sort: Sorting order of the search result
        :type sort: str
        :param keyword: Keyword to search on
        :type keyword: str
        :param id: Filter entities by its id
        :type id: str
        :param source: Filter entities by its source name
        :type source: str
        :param include_test: True if you want to have entities flag as test in the response. Only, if you only wanted test entities
        :type include_test: str
        :param page: Page number
        :type page: str
        :param size: Page size of the response
        :type size: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_classifications_get_serialize(
            sort=sort,
            keyword=keyword,
            id=id,
            source=source,
            include_test=include_test,
            page=page,
            size=size,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Classification]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def discovery_v2_classifications_get_with_http_info(
        self,
        sort: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Sorting order of the search result")] = None,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter entities by its id")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        include_test: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to have entities flag as test in the response. Only, if you only wanted test entities")] = None,
        page: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page number")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page size of the response")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Classification]]:
        """Classification Search

        Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.

        :param sort: Sorting order of the search result
        :type sort: str
        :param keyword: Keyword to search on
        :type keyword: str
        :param id: Filter entities by its id
        :type id: str
        :param source: Filter entities by its source name
        :type source: str
        :param include_test: True if you want to have entities flag as test in the response. Only, if you only wanted test entities
        :type include_test: str
        :param page: Page number
        :type page: str
        :param size: Page size of the response
        :type size: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_classifications_get_serialize(
            sort=sort,
            keyword=keyword,
            id=id,
            source=source,
            include_test=include_test,
            page=page,
            size=size,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Classification]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def discovery_v2_classifications_get_without_preload_content(
        self,
        sort: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Sorting order of the search result")] = None,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter entities by its id")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        include_test: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to have entities flag as test in the response. Only, if you only wanted test entities")] = None,
        page: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page number")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page size of the response")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Classification Search

        Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.

        :param sort: Sorting order of the search result
        :type sort: str
        :param keyword: Keyword to search on
        :type keyword: str
        :param id: Filter entities by its id
        :type id: str
        :param source: Filter entities by its source name
        :type source: str
        :param include_test: True if you want to have entities flag as test in the response. Only, if you only wanted test entities
        :type include_test: str
        :param page: Page number
        :type page: str
        :param size: Page size of the response
        :type size: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_classifications_get_serialize(
            sort=sort,
            keyword=keyword,
            id=id,
            source=source,
            include_test=include_test,
            page=page,
            size=size,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Classification]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _discovery_v2_classifications_get_serialize(
        self,
        sort,
        keyword,
        id,
        source,
        include_test,
        page,
        size,
        locale,
        include_licensed_content,
        include_spellcheck,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if keyword is not None:
            
            _query_params.append(('keyword', keyword))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if include_test is not None:
            
            _query_params.append(('includeTest', include_test))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        if include_spellcheck is not None:
            
            _query_params.append(('includeSpellcheck', include_spellcheck))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/classifications',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def discovery_v2_classifications_id_get(
        self,
        id: Annotated[StrictStr, Field(description="ID of the segment, genre, or sub-genre")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Classification:
        """Get Classification Details

        Get details for a specific segment, genre, or sub-genre using its unique identifier.

        :param id: ID of the segment, genre, or sub-genre (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_classifications_id_get_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Classification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def discovery_v2_classifications_id_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the segment, genre, or sub-genre")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Classification]:
        """Get Classification Details

        Get details for a specific segment, genre, or sub-genre using its unique identifier.

        :param id: ID of the segment, genre, or sub-genre (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_classifications_id_get_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Classification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def discovery_v2_classifications_id_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the segment, genre, or sub-genre")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Classification Details

        Get details for a specific segment, genre, or sub-genre using its unique identifier.

        :param id: ID of the segment, genre, or sub-genre (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_classifications_id_get_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Classification",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _discovery_v2_classifications_id_get_serialize(
        self,
        id,
        locale,
        include_licensed_content,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/classifications/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def discovery_v2_events_get(
        self,
        sort: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Sorting order of the search result. Allowable values : 'name,asc', 'name,desc', 'date,asc', 'date,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'name,date,asc', 'name,date,desc', 'date,name,asc', 'date,name,desc','onsaleStartDate,asc', 'id,asc'")] = None,
        start_date_time: Annotated[Optional[StrictStr], Field(description="Filter events with a start date after this date")] = None,
        end_date_time: Annotated[Optional[StrictStr], Field(description="Filter events with a start date before this date")] = None,
        onsale_start_date_time: Annotated[Optional[StrictStr], Field(description="Filter events with onsale start date after this date")] = None,
        onsale_on_start_date: Annotated[Optional[StrictStr], Field(description="Filter events with onsale start date on this date")] = None,
        onsale_on_after_start_date: Annotated[Optional[StrictStr], Field(description="Filter events with onsale range within this date")] = None,
        onsale_end_date_time: Annotated[Optional[StrictStr], Field(description="Filter events with onsale end date before this date")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Filter events by city")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Filter events by country code")] = None,
        state_code: Annotated[Optional[StrictStr], Field(description="Filter events by state code")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="Filter events by postal code / zipcode")] = None,
        venue_id: Annotated[Optional[StrictStr], Field(description="Filter events by venue id")] = None,
        attraction_id: Annotated[Optional[StrictStr], Field(description="Filter events by attraction id")] = None,
        segment_id: Annotated[Optional[StrictStr], Field(description="Filter events by segment id")] = None,
        segment_name: Annotated[Optional[StrictStr], Field(description="Filter events by segment name")] = None,
        classification_name: Annotated[Optional[List[Any]], Field(description="Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type")] = None,
        classification_id: Annotated[Optional[List[Any]], Field(description="Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type")] = None,
        market_id: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by market id")] = None,
        promoter_id: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by promoter id")] = None,
        dma_id: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by dma id")] = None,
        include_tba: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True, to include events with date to be announce (TBA)")] = None,
        include_tbd: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True, to include event with a date to be defined (TBD)")] = None,
        client_visibility: Annotated[Optional[StrictStr], Field(description="Filter events by clientName")] = None,
        latlong: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead")] = None,
        radius: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Radius of the area in which we want to search for events.")] = None,
        unit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Unit of the radius")] = None,
        geo_point: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="filter events by geoHash")] = None,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter entities by its id")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        include_test: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to have entities flag as test in the response. Only, if you only wanted test entities")] = None,
        page: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page number")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page size of the response")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Event]:
        """Event Search

        Find events and filter your search by location, date, availability, and much more.

        :param sort: Sorting order of the search result. Allowable values : 'name,asc', 'name,desc', 'date,asc', 'date,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'name,date,asc', 'name,date,desc', 'date,name,asc', 'date,name,desc','onsaleStartDate,asc', 'id,asc'
        :type sort: str
        :param start_date_time: Filter events with a start date after this date
        :type start_date_time: str
        :param end_date_time: Filter events with a start date before this date
        :type end_date_time: str
        :param onsale_start_date_time: Filter events with onsale start date after this date
        :type onsale_start_date_time: str
        :param onsale_on_start_date: Filter events with onsale start date on this date
        :type onsale_on_start_date: str
        :param onsale_on_after_start_date: Filter events with onsale range within this date
        :type onsale_on_after_start_date: str
        :param onsale_end_date_time: Filter events with onsale end date before this date
        :type onsale_end_date_time: str
        :param city: Filter events by city
        :type city: str
        :param country_code: Filter events by country code
        :type country_code: str
        :param state_code: Filter events by state code
        :type state_code: str
        :param postal_code: Filter events by postal code / zipcode
        :type postal_code: str
        :param venue_id: Filter events by venue id
        :type venue_id: str
        :param attraction_id: Filter events by attraction id
        :type attraction_id: str
        :param segment_id: Filter events by segment id
        :type segment_id: str
        :param segment_name: Filter events by segment name
        :type segment_name: str
        :param classification_name: Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type
        :type classification_name: List[object]
        :param classification_id: Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type
        :type classification_id: List[object]
        :param market_id: Filter events by market id
        :type market_id: str
        :param promoter_id: Filter events by promoter id
        :type promoter_id: str
        :param dma_id: Filter events by dma id
        :type dma_id: str
        :param include_tba: True, to include events with date to be announce (TBA)
        :type include_tba: str
        :param include_tbd: True, to include event with a date to be defined (TBD)
        :type include_tbd: str
        :param client_visibility: Filter events by clientName
        :type client_visibility: str
        :param latlong: Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
        :type latlong: str
        :param radius: Radius of the area in which we want to search for events.
        :type radius: str
        :param unit: Unit of the radius
        :type unit: str
        :param geo_point: filter events by geoHash
        :type geo_point: str
        :param keyword: Keyword to search on
        :type keyword: str
        :param id: Filter entities by its id
        :type id: str
        :param source: Filter entities by its source name
        :type source: str
        :param include_test: True if you want to have entities flag as test in the response. Only, if you only wanted test entities
        :type include_test: str
        :param page: Page number
        :type page: str
        :param size: Page size of the response
        :type size: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_events_get_serialize(
            sort=sort,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            onsale_start_date_time=onsale_start_date_time,
            onsale_on_start_date=onsale_on_start_date,
            onsale_on_after_start_date=onsale_on_after_start_date,
            onsale_end_date_time=onsale_end_date_time,
            city=city,
            country_code=country_code,
            state_code=state_code,
            postal_code=postal_code,
            venue_id=venue_id,
            attraction_id=attraction_id,
            segment_id=segment_id,
            segment_name=segment_name,
            classification_name=classification_name,
            classification_id=classification_id,
            market_id=market_id,
            promoter_id=promoter_id,
            dma_id=dma_id,
            include_tba=include_tba,
            include_tbd=include_tbd,
            client_visibility=client_visibility,
            latlong=latlong,
            radius=radius,
            unit=unit,
            geo_point=geo_point,
            keyword=keyword,
            id=id,
            source=source,
            include_test=include_test,
            page=page,
            size=size,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Event]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def discovery_v2_events_get_with_http_info(
        self,
        sort: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Sorting order of the search result. Allowable values : 'name,asc', 'name,desc', 'date,asc', 'date,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'name,date,asc', 'name,date,desc', 'date,name,asc', 'date,name,desc','onsaleStartDate,asc', 'id,asc'")] = None,
        start_date_time: Annotated[Optional[StrictStr], Field(description="Filter events with a start date after this date")] = None,
        end_date_time: Annotated[Optional[StrictStr], Field(description="Filter events with a start date before this date")] = None,
        onsale_start_date_time: Annotated[Optional[StrictStr], Field(description="Filter events with onsale start date after this date")] = None,
        onsale_on_start_date: Annotated[Optional[StrictStr], Field(description="Filter events with onsale start date on this date")] = None,
        onsale_on_after_start_date: Annotated[Optional[StrictStr], Field(description="Filter events with onsale range within this date")] = None,
        onsale_end_date_time: Annotated[Optional[StrictStr], Field(description="Filter events with onsale end date before this date")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Filter events by city")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Filter events by country code")] = None,
        state_code: Annotated[Optional[StrictStr], Field(description="Filter events by state code")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="Filter events by postal code / zipcode")] = None,
        venue_id: Annotated[Optional[StrictStr], Field(description="Filter events by venue id")] = None,
        attraction_id: Annotated[Optional[StrictStr], Field(description="Filter events by attraction id")] = None,
        segment_id: Annotated[Optional[StrictStr], Field(description="Filter events by segment id")] = None,
        segment_name: Annotated[Optional[StrictStr], Field(description="Filter events by segment name")] = None,
        classification_name: Annotated[Optional[List[Any]], Field(description="Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type")] = None,
        classification_id: Annotated[Optional[List[Any]], Field(description="Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type")] = None,
        market_id: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by market id")] = None,
        promoter_id: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by promoter id")] = None,
        dma_id: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by dma id")] = None,
        include_tba: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True, to include events with date to be announce (TBA)")] = None,
        include_tbd: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True, to include event with a date to be defined (TBD)")] = None,
        client_visibility: Annotated[Optional[StrictStr], Field(description="Filter events by clientName")] = None,
        latlong: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead")] = None,
        radius: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Radius of the area in which we want to search for events.")] = None,
        unit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Unit of the radius")] = None,
        geo_point: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="filter events by geoHash")] = None,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter entities by its id")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        include_test: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to have entities flag as test in the response. Only, if you only wanted test entities")] = None,
        page: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page number")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page size of the response")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Event]]:
        """Event Search

        Find events and filter your search by location, date, availability, and much more.

        :param sort: Sorting order of the search result. Allowable values : 'name,asc', 'name,desc', 'date,asc', 'date,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'name,date,asc', 'name,date,desc', 'date,name,asc', 'date,name,desc','onsaleStartDate,asc', 'id,asc'
        :type sort: str
        :param start_date_time: Filter events with a start date after this date
        :type start_date_time: str
        :param end_date_time: Filter events with a start date before this date
        :type end_date_time: str
        :param onsale_start_date_time: Filter events with onsale start date after this date
        :type onsale_start_date_time: str
        :param onsale_on_start_date: Filter events with onsale start date on this date
        :type onsale_on_start_date: str
        :param onsale_on_after_start_date: Filter events with onsale range within this date
        :type onsale_on_after_start_date: str
        :param onsale_end_date_time: Filter events with onsale end date before this date
        :type onsale_end_date_time: str
        :param city: Filter events by city
        :type city: str
        :param country_code: Filter events by country code
        :type country_code: str
        :param state_code: Filter events by state code
        :type state_code: str
        :param postal_code: Filter events by postal code / zipcode
        :type postal_code: str
        :param venue_id: Filter events by venue id
        :type venue_id: str
        :param attraction_id: Filter events by attraction id
        :type attraction_id: str
        :param segment_id: Filter events by segment id
        :type segment_id: str
        :param segment_name: Filter events by segment name
        :type segment_name: str
        :param classification_name: Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type
        :type classification_name: List[object]
        :param classification_id: Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type
        :type classification_id: List[object]
        :param market_id: Filter events by market id
        :type market_id: str
        :param promoter_id: Filter events by promoter id
        :type promoter_id: str
        :param dma_id: Filter events by dma id
        :type dma_id: str
        :param include_tba: True, to include events with date to be announce (TBA)
        :type include_tba: str
        :param include_tbd: True, to include event with a date to be defined (TBD)
        :type include_tbd: str
        :param client_visibility: Filter events by clientName
        :type client_visibility: str
        :param latlong: Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
        :type latlong: str
        :param radius: Radius of the area in which we want to search for events.
        :type radius: str
        :param unit: Unit of the radius
        :type unit: str
        :param geo_point: filter events by geoHash
        :type geo_point: str
        :param keyword: Keyword to search on
        :type keyword: str
        :param id: Filter entities by its id
        :type id: str
        :param source: Filter entities by its source name
        :type source: str
        :param include_test: True if you want to have entities flag as test in the response. Only, if you only wanted test entities
        :type include_test: str
        :param page: Page number
        :type page: str
        :param size: Page size of the response
        :type size: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_events_get_serialize(
            sort=sort,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            onsale_start_date_time=onsale_start_date_time,
            onsale_on_start_date=onsale_on_start_date,
            onsale_on_after_start_date=onsale_on_after_start_date,
            onsale_end_date_time=onsale_end_date_time,
            city=city,
            country_code=country_code,
            state_code=state_code,
            postal_code=postal_code,
            venue_id=venue_id,
            attraction_id=attraction_id,
            segment_id=segment_id,
            segment_name=segment_name,
            classification_name=classification_name,
            classification_id=classification_id,
            market_id=market_id,
            promoter_id=promoter_id,
            dma_id=dma_id,
            include_tba=include_tba,
            include_tbd=include_tbd,
            client_visibility=client_visibility,
            latlong=latlong,
            radius=radius,
            unit=unit,
            geo_point=geo_point,
            keyword=keyword,
            id=id,
            source=source,
            include_test=include_test,
            page=page,
            size=size,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Event]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def discovery_v2_events_get_without_preload_content(
        self,
        sort: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Sorting order of the search result. Allowable values : 'name,asc', 'name,desc', 'date,asc', 'date,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'name,date,asc', 'name,date,desc', 'date,name,asc', 'date,name,desc','onsaleStartDate,asc', 'id,asc'")] = None,
        start_date_time: Annotated[Optional[StrictStr], Field(description="Filter events with a start date after this date")] = None,
        end_date_time: Annotated[Optional[StrictStr], Field(description="Filter events with a start date before this date")] = None,
        onsale_start_date_time: Annotated[Optional[StrictStr], Field(description="Filter events with onsale start date after this date")] = None,
        onsale_on_start_date: Annotated[Optional[StrictStr], Field(description="Filter events with onsale start date on this date")] = None,
        onsale_on_after_start_date: Annotated[Optional[StrictStr], Field(description="Filter events with onsale range within this date")] = None,
        onsale_end_date_time: Annotated[Optional[StrictStr], Field(description="Filter events with onsale end date before this date")] = None,
        city: Annotated[Optional[StrictStr], Field(description="Filter events by city")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Filter events by country code")] = None,
        state_code: Annotated[Optional[StrictStr], Field(description="Filter events by state code")] = None,
        postal_code: Annotated[Optional[StrictStr], Field(description="Filter events by postal code / zipcode")] = None,
        venue_id: Annotated[Optional[StrictStr], Field(description="Filter events by venue id")] = None,
        attraction_id: Annotated[Optional[StrictStr], Field(description="Filter events by attraction id")] = None,
        segment_id: Annotated[Optional[StrictStr], Field(description="Filter events by segment id")] = None,
        segment_name: Annotated[Optional[StrictStr], Field(description="Filter events by segment name")] = None,
        classification_name: Annotated[Optional[List[Any]], Field(description="Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type")] = None,
        classification_id: Annotated[Optional[List[Any]], Field(description="Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type")] = None,
        market_id: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by market id")] = None,
        promoter_id: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by promoter id")] = None,
        dma_id: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by dma id")] = None,
        include_tba: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True, to include events with date to be announce (TBA)")] = None,
        include_tbd: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True, to include event with a date to be defined (TBD)")] = None,
        client_visibility: Annotated[Optional[StrictStr], Field(description="Filter events by clientName")] = None,
        latlong: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead")] = None,
        radius: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Radius of the area in which we want to search for events.")] = None,
        unit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Unit of the radius")] = None,
        geo_point: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="filter events by geoHash")] = None,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter entities by its id")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        include_test: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to have entities flag as test in the response. Only, if you only wanted test entities")] = None,
        page: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page number")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page size of the response")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Event Search

        Find events and filter your search by location, date, availability, and much more.

        :param sort: Sorting order of the search result. Allowable values : 'name,asc', 'name,desc', 'date,asc', 'date,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'name,date,asc', 'name,date,desc', 'date,name,asc', 'date,name,desc','onsaleStartDate,asc', 'id,asc'
        :type sort: str
        :param start_date_time: Filter events with a start date after this date
        :type start_date_time: str
        :param end_date_time: Filter events with a start date before this date
        :type end_date_time: str
        :param onsale_start_date_time: Filter events with onsale start date after this date
        :type onsale_start_date_time: str
        :param onsale_on_start_date: Filter events with onsale start date on this date
        :type onsale_on_start_date: str
        :param onsale_on_after_start_date: Filter events with onsale range within this date
        :type onsale_on_after_start_date: str
        :param onsale_end_date_time: Filter events with onsale end date before this date
        :type onsale_end_date_time: str
        :param city: Filter events by city
        :type city: str
        :param country_code: Filter events by country code
        :type country_code: str
        :param state_code: Filter events by state code
        :type state_code: str
        :param postal_code: Filter events by postal code / zipcode
        :type postal_code: str
        :param venue_id: Filter events by venue id
        :type venue_id: str
        :param attraction_id: Filter events by attraction id
        :type attraction_id: str
        :param segment_id: Filter events by segment id
        :type segment_id: str
        :param segment_name: Filter events by segment name
        :type segment_name: str
        :param classification_name: Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type
        :type classification_name: List[object]
        :param classification_id: Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type
        :type classification_id: List[object]
        :param market_id: Filter events by market id
        :type market_id: str
        :param promoter_id: Filter events by promoter id
        :type promoter_id: str
        :param dma_id: Filter events by dma id
        :type dma_id: str
        :param include_tba: True, to include events with date to be announce (TBA)
        :type include_tba: str
        :param include_tbd: True, to include event with a date to be defined (TBD)
        :type include_tbd: str
        :param client_visibility: Filter events by clientName
        :type client_visibility: str
        :param latlong: Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
        :type latlong: str
        :param radius: Radius of the area in which we want to search for events.
        :type radius: str
        :param unit: Unit of the radius
        :type unit: str
        :param geo_point: filter events by geoHash
        :type geo_point: str
        :param keyword: Keyword to search on
        :type keyword: str
        :param id: Filter entities by its id
        :type id: str
        :param source: Filter entities by its source name
        :type source: str
        :param include_test: True if you want to have entities flag as test in the response. Only, if you only wanted test entities
        :type include_test: str
        :param page: Page number
        :type page: str
        :param size: Page size of the response
        :type size: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_events_get_serialize(
            sort=sort,
            start_date_time=start_date_time,
            end_date_time=end_date_time,
            onsale_start_date_time=onsale_start_date_time,
            onsale_on_start_date=onsale_on_start_date,
            onsale_on_after_start_date=onsale_on_after_start_date,
            onsale_end_date_time=onsale_end_date_time,
            city=city,
            country_code=country_code,
            state_code=state_code,
            postal_code=postal_code,
            venue_id=venue_id,
            attraction_id=attraction_id,
            segment_id=segment_id,
            segment_name=segment_name,
            classification_name=classification_name,
            classification_id=classification_id,
            market_id=market_id,
            promoter_id=promoter_id,
            dma_id=dma_id,
            include_tba=include_tba,
            include_tbd=include_tbd,
            client_visibility=client_visibility,
            latlong=latlong,
            radius=radius,
            unit=unit,
            geo_point=geo_point,
            keyword=keyword,
            id=id,
            source=source,
            include_test=include_test,
            page=page,
            size=size,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Event]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _discovery_v2_events_get_serialize(
        self,
        sort,
        start_date_time,
        end_date_time,
        onsale_start_date_time,
        onsale_on_start_date,
        onsale_on_after_start_date,
        onsale_end_date_time,
        city,
        country_code,
        state_code,
        postal_code,
        venue_id,
        attraction_id,
        segment_id,
        segment_name,
        classification_name,
        classification_id,
        market_id,
        promoter_id,
        dma_id,
        include_tba,
        include_tbd,
        client_visibility,
        latlong,
        radius,
        unit,
        geo_point,
        keyword,
        id,
        source,
        include_test,
        page,
        size,
        locale,
        include_licensed_content,
        include_spellcheck,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'classificationName': 'multi',
            'classificationId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if start_date_time is not None:
            
            _query_params.append(('startDateTime', start_date_time))
            
        if end_date_time is not None:
            
            _query_params.append(('endDateTime', end_date_time))
            
        if onsale_start_date_time is not None:
            
            _query_params.append(('onsaleStartDateTime', onsale_start_date_time))
            
        if onsale_on_start_date is not None:
            
            _query_params.append(('onsaleOnStartDate', onsale_on_start_date))
            
        if onsale_on_after_start_date is not None:
            
            _query_params.append(('onsaleOnAfterStartDate', onsale_on_after_start_date))
            
        if onsale_end_date_time is not None:
            
            _query_params.append(('onsaleEndDateTime', onsale_end_date_time))
            
        if city is not None:
            
            _query_params.append(('city', city))
            
        if country_code is not None:
            
            _query_params.append(('countryCode', country_code))
            
        if state_code is not None:
            
            _query_params.append(('stateCode', state_code))
            
        if postal_code is not None:
            
            _query_params.append(('postalCode', postal_code))
            
        if venue_id is not None:
            
            _query_params.append(('venueId', venue_id))
            
        if attraction_id is not None:
            
            _query_params.append(('attractionId', attraction_id))
            
        if segment_id is not None:
            
            _query_params.append(('segmentId', segment_id))
            
        if segment_name is not None:
            
            _query_params.append(('segmentName', segment_name))
            
        if classification_name is not None:
            
            _query_params.append(('classificationName', classification_name))
            
        if classification_id is not None:
            
            _query_params.append(('classificationId', classification_id))
            
        if market_id is not None:
            
            _query_params.append(('marketId', market_id))
            
        if promoter_id is not None:
            
            _query_params.append(('promoterId', promoter_id))
            
        if dma_id is not None:
            
            _query_params.append(('dmaId', dma_id))
            
        if include_tba is not None:
            
            _query_params.append(('includeTBA', include_tba))
            
        if include_tbd is not None:
            
            _query_params.append(('includeTBD', include_tbd))
            
        if client_visibility is not None:
            
            _query_params.append(('clientVisibility', client_visibility))
            
        if latlong is not None:
            
            _query_params.append(('latlong', latlong))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if unit is not None:
            
            _query_params.append(('unit', unit))
            
        if geo_point is not None:
            
            _query_params.append(('geoPoint', geo_point))
            
        if keyword is not None:
            
            _query_params.append(('keyword', keyword))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if include_test is not None:
            
            _query_params.append(('includeTest', include_test))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        if include_spellcheck is not None:
            
            _query_params.append(('includeSpellcheck', include_spellcheck))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/events',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def discovery_v2_events_id_get(
        self,
        id: Annotated[StrictStr, Field(description="ID of the event")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Event:
        """Get Event Details

        Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.

        :param id: ID of the event (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_events_id_get_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Event",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def discovery_v2_events_id_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the event")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Event]:
        """Get Event Details

        Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.

        :param id: ID of the event (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_events_id_get_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Event",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def discovery_v2_events_id_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the event")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Event Details

        Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.

        :param id: ID of the event (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_events_id_get_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Event",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _discovery_v2_events_id_get_serialize(
        self,
        id,
        locale,
        include_licensed_content,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/events/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def discovery_v2_venues_get(
        self,
        sort: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Sorting order of the search result. Allowable Values: 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'distance,desc'")] = None,
        state_code: Annotated[Optional[StrictStr], Field(description="Filter venues by state / province code")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Filter venues by country code")] = None,
        latlong: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead")] = None,
        radius: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Radius of the area in which we want to search for events.")] = None,
        unit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Unit of the radius")] = None,
        geo_point: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="filter events by geoHash")] = None,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter entities by its id")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        include_test: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to have entities flag as test in the response. Only, if you only wanted test entities")] = None,
        page: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page number")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page size of the response")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Venue]:
        """Venue Search

        Find venues and filter your search by name, and much more.

        :param sort: Sorting order of the search result. Allowable Values: 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'distance,desc'
        :type sort: str
        :param state_code: Filter venues by state / province code
        :type state_code: str
        :param country_code: Filter venues by country code
        :type country_code: str
        :param latlong: Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
        :type latlong: str
        :param radius: Radius of the area in which we want to search for events.
        :type radius: str
        :param unit: Unit of the radius
        :type unit: str
        :param geo_point: filter events by geoHash
        :type geo_point: str
        :param keyword: Keyword to search on
        :type keyword: str
        :param id: Filter entities by its id
        :type id: str
        :param source: Filter entities by its source name
        :type source: str
        :param include_test: True if you want to have entities flag as test in the response. Only, if you only wanted test entities
        :type include_test: str
        :param page: Page number
        :type page: str
        :param size: Page size of the response
        :type size: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_venues_get_serialize(
            sort=sort,
            state_code=state_code,
            country_code=country_code,
            latlong=latlong,
            radius=radius,
            unit=unit,
            geo_point=geo_point,
            keyword=keyword,
            id=id,
            source=source,
            include_test=include_test,
            page=page,
            size=size,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Venue]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def discovery_v2_venues_get_with_http_info(
        self,
        sort: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Sorting order of the search result. Allowable Values: 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'distance,desc'")] = None,
        state_code: Annotated[Optional[StrictStr], Field(description="Filter venues by state / province code")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Filter venues by country code")] = None,
        latlong: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead")] = None,
        radius: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Radius of the area in which we want to search for events.")] = None,
        unit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Unit of the radius")] = None,
        geo_point: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="filter events by geoHash")] = None,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter entities by its id")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        include_test: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to have entities flag as test in the response. Only, if you only wanted test entities")] = None,
        page: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page number")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page size of the response")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Venue]]:
        """Venue Search

        Find venues and filter your search by name, and much more.

        :param sort: Sorting order of the search result. Allowable Values: 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'distance,desc'
        :type sort: str
        :param state_code: Filter venues by state / province code
        :type state_code: str
        :param country_code: Filter venues by country code
        :type country_code: str
        :param latlong: Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
        :type latlong: str
        :param radius: Radius of the area in which we want to search for events.
        :type radius: str
        :param unit: Unit of the radius
        :type unit: str
        :param geo_point: filter events by geoHash
        :type geo_point: str
        :param keyword: Keyword to search on
        :type keyword: str
        :param id: Filter entities by its id
        :type id: str
        :param source: Filter entities by its source name
        :type source: str
        :param include_test: True if you want to have entities flag as test in the response. Only, if you only wanted test entities
        :type include_test: str
        :param page: Page number
        :type page: str
        :param size: Page size of the response
        :type size: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_venues_get_serialize(
            sort=sort,
            state_code=state_code,
            country_code=country_code,
            latlong=latlong,
            radius=radius,
            unit=unit,
            geo_point=geo_point,
            keyword=keyword,
            id=id,
            source=source,
            include_test=include_test,
            page=page,
            size=size,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Venue]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def discovery_v2_venues_get_without_preload_content(
        self,
        sort: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Sorting order of the search result. Allowable Values: 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'distance,desc'")] = None,
        state_code: Annotated[Optional[StrictStr], Field(description="Filter venues by state / province code")] = None,
        country_code: Annotated[Optional[StrictStr], Field(description="Filter venues by country code")] = None,
        latlong: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead")] = None,
        radius: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Radius of the area in which we want to search for events.")] = None,
        unit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Unit of the radius")] = None,
        geo_point: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="filter events by geoHash")] = None,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter entities by its id")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        include_test: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to have entities flag as test in the response. Only, if you only wanted test entities")] = None,
        page: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page number")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page size of the response")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Venue Search

        Find venues and filter your search by name, and much more.

        :param sort: Sorting order of the search result. Allowable Values: 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'distance,desc'
        :type sort: str
        :param state_code: Filter venues by state / province code
        :type state_code: str
        :param country_code: Filter venues by country code
        :type country_code: str
        :param latlong: Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead
        :type latlong: str
        :param radius: Radius of the area in which we want to search for events.
        :type radius: str
        :param unit: Unit of the radius
        :type unit: str
        :param geo_point: filter events by geoHash
        :type geo_point: str
        :param keyword: Keyword to search on
        :type keyword: str
        :param id: Filter entities by its id
        :type id: str
        :param source: Filter entities by its source name
        :type source: str
        :param include_test: True if you want to have entities flag as test in the response. Only, if you only wanted test entities
        :type include_test: str
        :param page: Page number
        :type page: str
        :param size: Page size of the response
        :type size: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_venues_get_serialize(
            sort=sort,
            state_code=state_code,
            country_code=country_code,
            latlong=latlong,
            radius=radius,
            unit=unit,
            geo_point=geo_point,
            keyword=keyword,
            id=id,
            source=source,
            include_test=include_test,
            page=page,
            size=size,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Venue]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _discovery_v2_venues_get_serialize(
        self,
        sort,
        state_code,
        country_code,
        latlong,
        radius,
        unit,
        geo_point,
        keyword,
        id,
        source,
        include_test,
        page,
        size,
        locale,
        include_licensed_content,
        include_spellcheck,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if state_code is not None:
            
            _query_params.append(('stateCode', state_code))
            
        if country_code is not None:
            
            _query_params.append(('countryCode', country_code))
            
        if latlong is not None:
            
            _query_params.append(('latlong', latlong))
            
        if radius is not None:
            
            _query_params.append(('radius', radius))
            
        if unit is not None:
            
            _query_params.append(('unit', unit))
            
        if geo_point is not None:
            
            _query_params.append(('geoPoint', geo_point))
            
        if keyword is not None:
            
            _query_params.append(('keyword', keyword))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if include_test is not None:
            
            _query_params.append(('includeTest', include_test))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        if include_spellcheck is not None:
            
            _query_params.append(('includeSpellcheck', include_spellcheck))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/venues',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def discovery_v2_venues_id_get(
        self,
        id: Annotated[StrictStr, Field(description="ID of the venue")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Venue:
        """Get Venue Details

        Get details for a specific venue using the unique identifier for the venue.

        :param id: ID of the venue (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_venues_id_get_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Venue",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def discovery_v2_venues_id_get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the venue")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Venue]:
        """Get Venue Details

        Get details for a specific venue using the unique identifier for the venue.

        :param id: ID of the venue (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_venues_id_get_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Venue",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def discovery_v2_venues_id_get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the venue")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Venue Details

        Get details for a specific venue using the unique identifier for the venue.

        :param id: ID of the venue (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._discovery_v2_venues_id_get_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Venue",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _discovery_v2_venues_id_get_serialize(
        self,
        id,
        locale,
        include_licensed_content,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/venues/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find(
        self,
        sort: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'")] = None,
        classification_name: Annotated[Optional[List[Any]], Field(description="Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type")] = None,
        classification_id: Annotated[Optional[List[Any]], Field(description="Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type")] = None,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter entities by its id")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        include_test: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to have entities flag as test in the response. Only, if you only wanted test entities")] = None,
        page: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page number")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page size of the response")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Attraction]:
        """Attraction Search

        Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.

        :param sort: Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'
        :type sort: str
        :param classification_name: Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type
        :type classification_name: List[object]
        :param classification_id: Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type
        :type classification_id: List[object]
        :param keyword: Keyword to search on
        :type keyword: str
        :param id: Filter entities by its id
        :type id: str
        :param source: Filter entities by its source name
        :type source: str
        :param include_test: True if you want to have entities flag as test in the response. Only, if you only wanted test entities
        :type include_test: str
        :param page: Page number
        :type page: str
        :param size: Page size of the response
        :type size: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_serialize(
            sort=sort,
            classification_name=classification_name,
            classification_id=classification_id,
            keyword=keyword,
            id=id,
            source=source,
            include_test=include_test,
            page=page,
            size=size,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Attraction]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_with_http_info(
        self,
        sort: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'")] = None,
        classification_name: Annotated[Optional[List[Any]], Field(description="Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type")] = None,
        classification_id: Annotated[Optional[List[Any]], Field(description="Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type")] = None,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter entities by its id")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        include_test: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to have entities flag as test in the response. Only, if you only wanted test entities")] = None,
        page: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page number")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page size of the response")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Attraction]]:
        """Attraction Search

        Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.

        :param sort: Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'
        :type sort: str
        :param classification_name: Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type
        :type classification_name: List[object]
        :param classification_id: Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type
        :type classification_id: List[object]
        :param keyword: Keyword to search on
        :type keyword: str
        :param id: Filter entities by its id
        :type id: str
        :param source: Filter entities by its source name
        :type source: str
        :param include_test: True if you want to have entities flag as test in the response. Only, if you only wanted test entities
        :type include_test: str
        :param page: Page number
        :type page: str
        :param size: Page size of the response
        :type size: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_serialize(
            sort=sort,
            classification_name=classification_name,
            classification_id=classification_id,
            keyword=keyword,
            id=id,
            source=source,
            include_test=include_test,
            page=page,
            size=size,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Attraction]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_without_preload_content(
        self,
        sort: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'")] = None,
        classification_name: Annotated[Optional[List[Any]], Field(description="Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type")] = None,
        classification_id: Annotated[Optional[List[Any]], Field(description="Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type")] = None,
        keyword: Annotated[Optional[StrictStr], Field(description="Keyword to search on")] = None,
        id: Annotated[Optional[StrictStr], Field(description="Filter entities by its id")] = None,
        source: Annotated[Optional[StrictStr], Field(description="Filter entities by its source name")] = None,
        include_test: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to have entities flag as test in the response. Only, if you only wanted test entities")] = None,
        page: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page number")] = None,
        size: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Page size of the response")] = None,
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Yes if you want to display licensed content")] = None,
        include_spellcheck: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="yes, to include spell check suggestions in the response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Attraction Search

        Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.

        :param sort: Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'
        :type sort: str
        :param classification_name: Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type
        :type classification_name: List[object]
        :param classification_id: Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type
        :type classification_id: List[object]
        :param keyword: Keyword to search on
        :type keyword: str
        :param id: Filter entities by its id
        :type id: str
        :param source: Filter entities by its source name
        :type source: str
        :param include_test: True if you want to have entities flag as test in the response. Only, if you only wanted test entities
        :type include_test: str
        :param page: Page number
        :type page: str
        :param size: Page size of the response
        :type size: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: Yes if you want to display licensed content
        :type include_licensed_content: str
        :param include_spellcheck: yes, to include spell check suggestions in the response.
        :type include_spellcheck: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_serialize(
            sort=sort,
            classification_name=classification_name,
            classification_id=classification_id,
            keyword=keyword,
            id=id,
            source=source,
            include_test=include_test,
            page=page,
            size=size,
            locale=locale,
            include_licensed_content=include_licensed_content,
            include_spellcheck=include_spellcheck,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Attraction]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_serialize(
        self,
        sort,
        classification_name,
        classification_id,
        keyword,
        id,
        source,
        include_test,
        page,
        size,
        locale,
        include_licensed_content,
        include_spellcheck,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'classificationName': 'multi',
            'classificationId': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if classification_name is not None:
            
            _query_params.append(('classificationName', classification_name))
            
        if classification_id is not None:
            
            _query_params.append(('classificationId', classification_id))
            
        if keyword is not None:
            
            _query_params.append(('keyword', keyword))
            
        if id is not None:
            
            _query_params.append(('id', id))
            
        if source is not None:
            
            _query_params.append(('source', source))
            
        if include_test is not None:
            
            _query_params.append(('includeTest', include_test))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        if include_spellcheck is not None:
            
            _query_params.append(('includeSpellcheck', include_spellcheck))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/attractions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get(
        self,
        id: Annotated[StrictStr, Field(description="ID of the attraction")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Attraction:
        """Get Attraction Details

        Get details for a specific attraction using the unique identifier for the attraction.

        :param id: ID of the attraction (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Attraction",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the attraction")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Attraction]:
        """Get Attraction Details

        Get details for a specific attraction using the unique identifier for the attraction.

        :param id: ID of the attraction (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Attraction",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the attraction")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Attraction Details

        Get details for a specific attraction using the unique identifier for the attraction.

        :param id: ID of the attraction (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Attraction",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_serialize(
        self,
        id,
        locale,
        include_licensed_content,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/attractions/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_genre(
        self,
        id: Annotated[StrictStr, Field(description="ID of the genre")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Genre:
        """Get Genre Details

        Get details for a specific genre using its unique identifier.

        :param id: ID of the genre (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genre_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Genre",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_genre_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the genre")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Genre]:
        """Get Genre Details

        Get details for a specific genre using its unique identifier.

        :param id: ID of the genre (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genre_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Genre",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_genre_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the genre")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Genre Details

        Get details for a specific genre using its unique identifier.

        :param id: ID of the genre (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_genre_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Genre",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_genre_serialize(
        self,
        id,
        locale,
        include_licensed_content,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/classifications/genres/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_images(
        self,
        id: Annotated[StrictStr, Field(description="ID of the event")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EventImages:
        """Get Event Images

        Get images for a specific event using the unique identifier for the event.

        :param id: ID of the event (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_images_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventImages",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_images_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the event")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EventImages]:
        """Get Event Images

        Get images for a specific event using the unique identifier for the event.

        :param id: ID of the event (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_images_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventImages",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_images_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the event")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Event Images

        Get images for a specific event using the unique identifier for the event.

        :param id: ID of the event (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_images_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "EventImages",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_images_serialize(
        self,
        id,
        locale,
        include_licensed_content,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/events/{id}/images',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_segment(
        self,
        id: Annotated[StrictStr, Field(description="ID of the segment")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Segment:
        """Get Segment Details

        Get details for a specific segment using its unique identifier.

        :param id: ID of the segment (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Segment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_segment_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the segment")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Segment]:
        """Get Segment Details

        Get details for a specific segment using its unique identifier.

        :param id: ID of the segment (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Segment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_segment_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the segment")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Segment Details

        Get details for a specific segment using its unique identifier.

        :param id: ID of the segment (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Segment",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_segment_serialize(
        self,
        id,
        locale,
        include_licensed_content,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/classifications/segments/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_subgenre(
        self,
        id: Annotated[StrictStr, Field(description="ID of the subgenre")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Level:
        """Get Sub-Genre Details

        Get details for a specific sub-genre using its unique identifier.

        :param id: ID of the subgenre (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_subgenre_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Level",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_subgenre_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="ID of the subgenre")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Level]:
        """Get Sub-Genre Details

        Get details for a specific sub-genre using its unique identifier.

        :param id: ID of the subgenre (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_subgenre_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Level",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_subgenre_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="ID of the subgenre")],
        locale: Annotated[Optional[StrictStr], Field(description="The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') ")] = None,
        include_licensed_content: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="True if you want to display licensed content")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get Sub-Genre Details

        Get details for a specific sub-genre using its unique identifier.

        :param id: ID of the subgenre (required)
        :type id: str
        :param locale: The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') 
        :type locale: str
        :param include_licensed_content: True if you want to display licensed content
        :type include_licensed_content: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_subgenre_serialize(
            id=id,
            locale=locale,
            include_licensed_content=include_licensed_content,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Level",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_subgenre_serialize(
        self,
        id,
        locale,
        include_licensed_content,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if id is not None:
            _path_params['id'] = id
        # process the query parameters
        if locale is not None:
            
            _query_params.append(('locale', locale))
            
        if include_licensed_content is not None:
            
            _query_params.append(('includeLicensedContent', include_licensed_content))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/discovery/v2/classifications/subgenres/{id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


