# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.area import Area
from openapi_client.models.city import City
from openapi_client.models.country import Country
from openapi_client.models.location import Location
from openapi_client.models.state import State
from typing import Optional, Set
from typing_extensions import Self

class Place(BaseModel):
    """
    Place
    """ # noqa: E501
    address: Optional[Address] = None
    area: Optional[Area] = None
    city: Optional[City] = None
    country: Optional[Country] = None
    location: Optional[Location] = None
    name: Optional[StrictStr] = Field(default=None, description="Name of the entity")
    postal_code: Optional[StrictStr] = Field(default=None, description="Postal code / zipcode of the place", alias="postalCode")
    state: Optional[State] = None
    __properties: ClassVar[List[str]] = ["address", "area", "city", "country", "location", "name", "postalCode", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Place from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of area
        if self.area:
            _dict['area'] = self.area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of city
        if self.city:
            _dict['city'] = self.city.to_dict()
        # override the default output from pydantic by calling `to_dict()` of country
        if self.country:
            _dict['country'] = self.country.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Place from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "area": Area.from_dict(obj["area"]) if obj.get("area") is not None else None,
            "city": City.from_dict(obj["city"]) if obj.get("city") is not None else None,
            "country": Country.from_dict(obj["country"]) if obj.get("country") is not None else None,
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "name": obj.get("name"),
            "postalCode": obj.get("postalCode"),
            "state": State.from_dict(obj["state"]) if obj.get("state") is not None else None
        })
        return _obj


