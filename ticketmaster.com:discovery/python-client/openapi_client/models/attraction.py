# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.classification import Classification
from openapi_client.models.external_link import ExternalLink
from openapi_client.models.image import Image
from typing import Optional, Set
from typing_extensions import Self

class Attraction(BaseModel):
    """
    Attraction
    """ # noqa: E501
    additional_info: Optional[StrictStr] = Field(default=None, description="Additional information of the entity", alias="additionalInfo")
    classifications: Optional[List[Classification]] = Field(default=None, description="Attraction's classifications")
    description: Optional[StrictStr] = Field(default=None, description="Description's of the entity")
    external_links: Optional[Dict[str, List[ExternalLink]]] = Field(default=None, description="List of external links", alias="externalLinks")
    id: StrictStr = Field(description="Unique id of the entity in the discovery API")
    images: Optional[List[Image]] = Field(default=None, description="Images of the entity")
    locale: Optional[StrictStr] = Field(default=None, description="Locale in which the content is returned")
    name: Optional[StrictStr] = Field(default=None, description="Name of the entity")
    test: Optional[StrictBool] = Field(default=False, description="Indicate if this is a test entity, by default test entities won't appear in discovery API")
    type: StrictStr = Field(description="Type of the entity")
    upcoming_events: Optional[Dict[str, StrictInt]] = Field(default=None, description="number of upcoming events", alias="upcomingEvents")
    url: Optional[StrictStr] = Field(default=None, description="URL of a web site detail page of the entity")
    __properties: ClassVar[List[str]] = ["additionalInfo", "classifications", "description", "externalLinks", "id", "images", "locale", "name", "test", "type", "upcomingEvents", "url"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['event', 'venue', 'attraction']):
            raise ValueError("must be one of enum values ('event', 'venue', 'attraction')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attraction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in classifications (list)
        _items = []
        if self.classifications:
            for _item_classifications in self.classifications:
                if _item_classifications:
                    _items.append(_item_classifications.to_dict())
            _dict['classifications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in external_links (dict of array)
        _field_dict_of_array = {}
        if self.external_links:
            for _key_external_links in self.external_links:
                if self.external_links[_key_external_links] is not None:
                    _field_dict_of_array[_key_external_links] = [
                        _item.to_dict() for _item in self.external_links[_key_external_links]
                    ]
            _dict['externalLinks'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attraction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalInfo": obj.get("additionalInfo"),
            "classifications": [Classification.from_dict(_item) for _item in obj["classifications"]] if obj.get("classifications") is not None else None,
            "description": obj.get("description"),
            "externalLinks": dict(
                (_k,
                        [ExternalLink.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("externalLinks", {}).items()
            ),
            "id": obj.get("id"),
            "images": [Image.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "locale": obj.get("locale"),
            "name": obj.get("name"),
            "test": obj.get("test") if obj.get("test") is not None else False,
            "type": obj.get("type"),
            "upcomingEvents": obj.get("upcomingEvents"),
            "url": obj.get("url")
        })
        return _obj


