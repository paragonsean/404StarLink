# coding: utf-8

"""
    Discovery API

    The Ticketmaster Discovery API allows you to search for events, attractions, or venues.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Locale(BaseModel):
    """
    Locale
    """ # noqa: E501
    country: Optional[StrictStr] = None
    display_country: Optional[StrictStr] = Field(default=None, alias="displayCountry")
    display_language: Optional[StrictStr] = Field(default=None, alias="displayLanguage")
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    display_script: Optional[StrictStr] = Field(default=None, alias="displayScript")
    display_variant: Optional[StrictStr] = Field(default=None, alias="displayVariant")
    extension_keys: Optional[List[StrictStr]] = Field(default=None, alias="extensionKeys")
    iso3_country: Optional[StrictStr] = Field(default=None, alias="iso3Country")
    iso3_language: Optional[StrictStr] = Field(default=None, alias="iso3Language")
    language: Optional[StrictStr] = None
    script: Optional[StrictStr] = None
    unicode_locale_attributes: Optional[List[StrictStr]] = Field(default=None, alias="unicodeLocaleAttributes")
    unicode_locale_keys: Optional[List[StrictStr]] = Field(default=None, alias="unicodeLocaleKeys")
    variant: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["country", "displayCountry", "displayLanguage", "displayName", "displayScript", "displayVariant", "extensionKeys", "iso3Country", "iso3Language", "language", "script", "unicodeLocaleAttributes", "unicodeLocaleKeys", "variant"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Locale from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Locale from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "displayCountry": obj.get("displayCountry"),
            "displayLanguage": obj.get("displayLanguage"),
            "displayName": obj.get("displayName"),
            "displayScript": obj.get("displayScript"),
            "displayVariant": obj.get("displayVariant"),
            "extensionKeys": obj.get("extensionKeys"),
            "iso3Country": obj.get("iso3Country"),
            "iso3Language": obj.get("iso3Language"),
            "language": obj.get("language"),
            "script": obj.get("script"),
            "unicodeLocaleAttributes": obj.get("unicodeLocaleAttributes"),
            "unicodeLocaleKeys": obj.get("unicodeLocaleKeys"),
            "variant": obj.get("variant")
        })
        return _obj


