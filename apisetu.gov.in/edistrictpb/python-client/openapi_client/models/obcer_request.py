# coding: utf-8

"""
    Punjab State eGovernance Society, Punjab

    eDistrict Punjab (http://edistrict.punjabgovt.gov.in) is the online service delivery portal for Punjab State Govt. Certain documents issued by it (e.g. Residence, SC/ST, OBC Certificates etc) can be pulled into citizens' DigiLocker accounts.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.consent_artifact_schema import ConsentArtifactSchema
from openapi_client.models.obcer_request_certificate_parameters import ObcerRequestCertificateParameters
from typing import Optional, Set
from typing_extensions import Self

class ObcerRequest(BaseModel):
    """
    ObcerRequest
    """ # noqa: E501
    certificate_parameters: Optional[ObcerRequestCertificateParameters] = Field(default=None, alias="certificateParameters")
    consent_artifact: Optional[ConsentArtifactSchema] = Field(default=None, alias="consentArtifact")
    format: StrictStr = Field(description="The format of the certificate in response.")
    txn_id: StrictStr = Field(description="A unique transaction id for this request in UUID format. It is used for tracking the request.", alias="txnId")
    __properties: ClassVar[List[str]] = ["certificateParameters", "consentArtifact", "format", "txnId"]

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pdf']):
            raise ValueError("must be one of enum values ('pdf')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObcerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificate_parameters
        if self.certificate_parameters:
            _dict['certificateParameters'] = self.certificate_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consent_artifact
        if self.consent_artifact:
            _dict['consentArtifact'] = self.consent_artifact.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObcerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateParameters": ObcerRequestCertificateParameters.from_dict(obj["certificateParameters"]) if obj.get("certificateParameters") is not None else None,
            "consentArtifact": ConsentArtifactSchema.from_dict(obj["consentArtifact"]) if obj.get("consentArtifact") is not None else None,
            "format": obj.get("format"),
            "txnId": obj.get("txnId")
        })
        return _obj


