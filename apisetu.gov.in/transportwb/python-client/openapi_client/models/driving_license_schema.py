# coding: utf-8

"""
    Transport Department, West Bengal

    Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.driving_license_schema_certificate_data import DrivingLicenseSchemaCertificateData
from openapi_client.models.driving_license_schema_issued_by import DrivingLicenseSchemaIssuedBy
from openapi_client.models.driving_license_schema_issued_to import DrivingLicenseSchemaIssuedTo
from typing import Optional, Set
from typing_extensions import Self

class DrivingLicenseSchema(BaseModel):
    """
    DrivingLicenseSchema
    """ # noqa: E501
    certificate_data: DrivingLicenseSchemaCertificateData = Field(alias="CertificateData")
    issued_by: DrivingLicenseSchemaIssuedBy = Field(alias="IssuedBy")
    issued_to: DrivingLicenseSchemaIssuedTo = Field(alias="IssuedTo")
    expiry_date: Optional[StrictStr] = Field(default=None, alias="expiryDate")
    issue_date: StrictStr = Field(alias="issueDate")
    issued_at: StrictStr = Field(alias="issuedAt")
    language: Annotated[str, Field(min_length=1, strict=True)]
    name: Annotated[str, Field(min_length=1, strict=True)]
    number: Annotated[int, Field(strict=True)]
    prev_number: Optional[Annotated[int, Field(strict=True)]] = Field(default=None, alias="prevNumber")
    status: Annotated[str, Field(min_length=1, strict=True)]
    type: StrictStr
    valid_from_date: StrictStr = Field(alias="validFromDate")
    __properties: ClassVar[List[str]] = ["CertificateData", "IssuedBy", "IssuedTo", "expiryDate", "issueDate", "issuedAt", "language", "name", "number", "prevNumber", "status", "type", "validFromDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DrivingLicenseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificate_data
        if self.certificate_data:
            _dict['CertificateData'] = self.certificate_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issued_by
        if self.issued_by:
            _dict['IssuedBy'] = self.issued_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of issued_to
        if self.issued_to:
            _dict['IssuedTo'] = self.issued_to.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DrivingLicenseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CertificateData": DrivingLicenseSchemaCertificateData.from_dict(obj["CertificateData"]) if obj.get("CertificateData") is not None else None,
            "IssuedBy": DrivingLicenseSchemaIssuedBy.from_dict(obj["IssuedBy"]) if obj.get("IssuedBy") is not None else None,
            "IssuedTo": DrivingLicenseSchemaIssuedTo.from_dict(obj["IssuedTo"]) if obj.get("IssuedTo") is not None else None,
            "expiryDate": obj.get("expiryDate"),
            "issueDate": obj.get("issueDate"),
            "issuedAt": obj.get("issuedAt"),
            "language": obj.get("language"),
            "name": obj.get("name"),
            "number": obj.get("number"),
            "prevNumber": obj.get("prevNumber"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "validFromDate": obj.get("validFromDate")
        })
        return _obj


