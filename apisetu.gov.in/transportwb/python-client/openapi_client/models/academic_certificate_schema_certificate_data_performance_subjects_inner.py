# coding: utf-8

"""
    Transport Department, West Bengal

    Driving License (DL) and Vehicle Registration Certificate (RC) of the State, as available on Parivahan Sewa (http://parivahan.co.in/) of Ministry of Road Transport and Highways, are available on DigiLocker. Citizens can pull these documents into their DigiLocker accounts.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner(BaseModel):
    """
    AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner
    """ # noqa: E501
    code: Annotated[str, Field(min_length=1, strict=True)]
    gp: StrictStr
    gp_max: StrictStr = Field(alias="gpMax")
    grade: Annotated[str, Field(min_length=1, strict=True)]
    marks_max: StrictInt = Field(alias="marksMax")
    marks_max_practical: StrictInt = Field(alias="marksMaxPractical")
    marks_max_theory: StrictInt = Field(alias="marksMaxTheory")
    marks_practical: StrictInt = Field(alias="marksPractical")
    marks_theory: Annotated[int, Field(strict=True)] = Field(alias="marksTheory")
    marks_total: Annotated[int, Field(strict=True)] = Field(alias="marksTotal")
    name: Annotated[str, Field(min_length=1, strict=True)]
    __properties: ClassVar[List[str]] = ["code", "gp", "gpMax", "grade", "marksMax", "marksMaxPractical", "marksMaxTheory", "marksPractical", "marksTheory", "marksTotal", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "gp": obj.get("gp"),
            "gpMax": obj.get("gpMax"),
            "grade": obj.get("grade"),
            "marksMax": obj.get("marksMax"),
            "marksMaxPractical": obj.get("marksMaxPractical"),
            "marksMaxTheory": obj.get("marksMaxTheory"),
            "marksPractical": obj.get("marksPractical"),
            "marksTheory": obj.get("marksTheory"),
            "marksTotal": obj.get("marksTotal"),
            "name": obj.get("name")
        })
        return _obj


