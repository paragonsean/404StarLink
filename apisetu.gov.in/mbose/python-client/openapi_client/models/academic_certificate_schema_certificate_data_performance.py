# coding: utf-8

"""
    Meghalaya Board of School Education, Tura, Meghalaya

    Meghalaya Board of School Education (MBOSE) with Marksheets of Class Xth and Class XIIth (Arts , Science, Commerce and Vocational), is availablke on DigiLocker for the students of 2015-2019.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_client.models.academic_certificate_schema_certificate_data_performance_subjects_inner import AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner
from typing import Optional, Set
from typing_extensions import Self

class AcademicCertificateSchemaCertificateDataPerformance(BaseModel):
    """
    AcademicCertificateSchemaCertificateDataPerformance
    """ # noqa: E501
    subjects: List[AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner] = Field(alias="Subjects")
    cgpa: StrictStr
    cgpa_max: StrictStr = Field(alias="cgpaMax")
    grade: StrictStr
    marks_max: StrictStr = Field(alias="marksMax")
    marks_total: StrictStr = Field(alias="marksTotal")
    percentage: StrictStr
    result: Annotated[str, Field(min_length=1, strict=True)]
    result_date: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="resultDate")
    update_date: StrictStr = Field(alias="updateDate")
    __properties: ClassVar[List[str]] = ["Subjects", "cgpa", "cgpaMax", "grade", "marksMax", "marksTotal", "percentage", "result", "resultDate", "updateDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AcademicCertificateSchemaCertificateDataPerformance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in subjects (list)
        _items = []
        if self.subjects:
            for _item_subjects in self.subjects:
                if _item_subjects:
                    _items.append(_item_subjects.to_dict())
            _dict['Subjects'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AcademicCertificateSchemaCertificateDataPerformance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Subjects": [AcademicCertificateSchemaCertificateDataPerformanceSubjectsInner.from_dict(_item) for _item in obj["Subjects"]] if obj.get("Subjects") is not None else None,
            "cgpa": obj.get("cgpa"),
            "cgpaMax": obj.get("cgpaMax"),
            "grade": obj.get("grade"),
            "marksMax": obj.get("marksMax"),
            "marksTotal": obj.get("marksTotal"),
            "percentage": obj.get("percentage"),
            "result": obj.get("result"),
            "resultDate": obj.get("resultDate"),
            "updateDate": obj.get("updateDate")
        })
        return _obj


