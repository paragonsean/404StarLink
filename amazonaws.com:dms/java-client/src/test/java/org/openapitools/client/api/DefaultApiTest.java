/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddTagsToResourceMessage;
import org.openapitools.client.model.ApplyPendingMaintenanceActionMessage;
import org.openapitools.client.model.ApplyPendingMaintenanceActionResponse;
import org.openapitools.client.model.BatchStartRecommendationsRequest;
import org.openapitools.client.model.BatchStartRecommendationsResponse;
import org.openapitools.client.model.CancelReplicationTaskAssessmentRunMessage;
import org.openapitools.client.model.CancelReplicationTaskAssessmentRunResponse;
import org.openapitools.client.model.CreateEndpointMessage;
import org.openapitools.client.model.CreateEndpointResponse;
import org.openapitools.client.model.CreateEventSubscriptionMessage;
import org.openapitools.client.model.CreateEventSubscriptionResponse;
import org.openapitools.client.model.CreateFleetAdvisorCollectorRequest;
import org.openapitools.client.model.CreateFleetAdvisorCollectorResponse;
import org.openapitools.client.model.CreateReplicationInstanceMessage;
import org.openapitools.client.model.CreateReplicationInstanceResponse;
import org.openapitools.client.model.CreateReplicationSubnetGroupMessage;
import org.openapitools.client.model.CreateReplicationSubnetGroupResponse;
import org.openapitools.client.model.CreateReplicationTaskMessage;
import org.openapitools.client.model.CreateReplicationTaskResponse;
import org.openapitools.client.model.DeleteCertificateMessage;
import org.openapitools.client.model.DeleteCertificateResponse;
import org.openapitools.client.model.DeleteCollectorRequest;
import org.openapitools.client.model.DeleteConnectionMessage;
import org.openapitools.client.model.DeleteConnectionResponse;
import org.openapitools.client.model.DeleteEndpointMessage;
import org.openapitools.client.model.DeleteEndpointResponse;
import org.openapitools.client.model.DeleteEventSubscriptionMessage;
import org.openapitools.client.model.DeleteEventSubscriptionResponse;
import org.openapitools.client.model.DeleteFleetAdvisorDatabasesRequest;
import org.openapitools.client.model.DeleteFleetAdvisorDatabasesResponse;
import org.openapitools.client.model.DeleteReplicationInstanceMessage;
import org.openapitools.client.model.DeleteReplicationInstanceResponse;
import org.openapitools.client.model.DeleteReplicationSubnetGroupMessage;
import org.openapitools.client.model.DeleteReplicationTaskAssessmentRunMessage;
import org.openapitools.client.model.DeleteReplicationTaskAssessmentRunResponse;
import org.openapitools.client.model.DeleteReplicationTaskMessage;
import org.openapitools.client.model.DeleteReplicationTaskResponse;
import org.openapitools.client.model.DescribeAccountAttributesResponse;
import org.openapitools.client.model.DescribeApplicableIndividualAssessmentsMessage;
import org.openapitools.client.model.DescribeApplicableIndividualAssessmentsResponse;
import org.openapitools.client.model.DescribeCertificatesMessage;
import org.openapitools.client.model.DescribeCertificatesResponse;
import org.openapitools.client.model.DescribeConnectionsMessage;
import org.openapitools.client.model.DescribeConnectionsResponse;
import org.openapitools.client.model.DescribeEndpointSettingsMessage;
import org.openapitools.client.model.DescribeEndpointSettingsResponse;
import org.openapitools.client.model.DescribeEndpointTypesMessage;
import org.openapitools.client.model.DescribeEndpointTypesResponse;
import org.openapitools.client.model.DescribeEndpointsMessage;
import org.openapitools.client.model.DescribeEndpointsResponse;
import org.openapitools.client.model.DescribeEventCategoriesMessage;
import org.openapitools.client.model.DescribeEventCategoriesResponse;
import org.openapitools.client.model.DescribeEventSubscriptionsMessage;
import org.openapitools.client.model.DescribeEventSubscriptionsResponse;
import org.openapitools.client.model.DescribeEventsMessage;
import org.openapitools.client.model.DescribeEventsResponse;
import org.openapitools.client.model.DescribeFleetAdvisorCollectorsRequest;
import org.openapitools.client.model.DescribeFleetAdvisorCollectorsResponse;
import org.openapitools.client.model.DescribeFleetAdvisorDatabasesRequest;
import org.openapitools.client.model.DescribeFleetAdvisorDatabasesResponse;
import org.openapitools.client.model.DescribeFleetAdvisorLsaAnalysisRequest;
import org.openapitools.client.model.DescribeFleetAdvisorLsaAnalysisResponse;
import org.openapitools.client.model.DescribeFleetAdvisorSchemaObjectSummaryRequest;
import org.openapitools.client.model.DescribeFleetAdvisorSchemaObjectSummaryResponse;
import org.openapitools.client.model.DescribeFleetAdvisorSchemasRequest;
import org.openapitools.client.model.DescribeFleetAdvisorSchemasResponse;
import org.openapitools.client.model.DescribeOrderableReplicationInstancesMessage;
import org.openapitools.client.model.DescribeOrderableReplicationInstancesResponse;
import org.openapitools.client.model.DescribePendingMaintenanceActionsMessage;
import org.openapitools.client.model.DescribePendingMaintenanceActionsResponse;
import org.openapitools.client.model.DescribeRecommendationLimitationsRequest;
import org.openapitools.client.model.DescribeRecommendationLimitationsResponse;
import org.openapitools.client.model.DescribeRecommendationsRequest;
import org.openapitools.client.model.DescribeRecommendationsResponse;
import org.openapitools.client.model.DescribeRefreshSchemasStatusMessage;
import org.openapitools.client.model.DescribeRefreshSchemasStatusResponse;
import org.openapitools.client.model.DescribeReplicationInstanceTaskLogsMessage;
import org.openapitools.client.model.DescribeReplicationInstanceTaskLogsResponse;
import org.openapitools.client.model.DescribeReplicationInstancesMessage;
import org.openapitools.client.model.DescribeReplicationInstancesResponse;
import org.openapitools.client.model.DescribeReplicationSubnetGroupsMessage;
import org.openapitools.client.model.DescribeReplicationSubnetGroupsResponse;
import org.openapitools.client.model.DescribeReplicationTaskAssessmentResultsMessage;
import org.openapitools.client.model.DescribeReplicationTaskAssessmentResultsResponse;
import org.openapitools.client.model.DescribeReplicationTaskAssessmentRunsMessage;
import org.openapitools.client.model.DescribeReplicationTaskAssessmentRunsResponse;
import org.openapitools.client.model.DescribeReplicationTaskIndividualAssessmentsMessage;
import org.openapitools.client.model.DescribeReplicationTaskIndividualAssessmentsResponse;
import org.openapitools.client.model.DescribeReplicationTasksMessage;
import org.openapitools.client.model.DescribeReplicationTasksResponse;
import org.openapitools.client.model.DescribeSchemasMessage;
import org.openapitools.client.model.DescribeSchemasResponse;
import org.openapitools.client.model.DescribeTableStatisticsMessage;
import org.openapitools.client.model.DescribeTableStatisticsResponse;
import org.openapitools.client.model.ImportCertificateMessage;
import org.openapitools.client.model.ImportCertificateResponse;
import org.openapitools.client.model.ListTagsForResourceMessage;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ModifyEndpointMessage;
import org.openapitools.client.model.ModifyEndpointResponse;
import org.openapitools.client.model.ModifyEventSubscriptionMessage;
import org.openapitools.client.model.ModifyEventSubscriptionResponse;
import org.openapitools.client.model.ModifyReplicationInstanceMessage;
import org.openapitools.client.model.ModifyReplicationInstanceResponse;
import org.openapitools.client.model.ModifyReplicationSubnetGroupMessage;
import org.openapitools.client.model.ModifyReplicationSubnetGroupResponse;
import org.openapitools.client.model.ModifyReplicationTaskMessage;
import org.openapitools.client.model.ModifyReplicationTaskResponse;
import org.openapitools.client.model.MoveReplicationTaskMessage;
import org.openapitools.client.model.MoveReplicationTaskResponse;
import org.openapitools.client.model.RebootReplicationInstanceMessage;
import org.openapitools.client.model.RebootReplicationInstanceResponse;
import org.openapitools.client.model.RefreshSchemasMessage;
import org.openapitools.client.model.RefreshSchemasResponse;
import org.openapitools.client.model.ReloadTablesMessage;
import org.openapitools.client.model.ReloadTablesResponse;
import org.openapitools.client.model.RemoveTagsFromResourceMessage;
import org.openapitools.client.model.RunFleetAdvisorLsaAnalysisResponse;
import org.openapitools.client.model.StartRecommendationsRequest;
import org.openapitools.client.model.StartReplicationTaskAssessmentMessage;
import org.openapitools.client.model.StartReplicationTaskAssessmentResponse;
import org.openapitools.client.model.StartReplicationTaskAssessmentRunMessage;
import org.openapitools.client.model.StartReplicationTaskAssessmentRunResponse;
import org.openapitools.client.model.StartReplicationTaskMessage;
import org.openapitools.client.model.StartReplicationTaskResponse;
import org.openapitools.client.model.StopReplicationTaskMessage;
import org.openapitools.client.model.StopReplicationTaskResponse;
import org.openapitools.client.model.TestConnectionMessage;
import org.openapitools.client.model.TestConnectionResponse;
import org.openapitools.client.model.UpdateSubscriptionsToEventBridgeMessage;
import org.openapitools.client.model.UpdateSubscriptionsToEventBridgeResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Adds metadata tags to an DMS resource, including replication instance, endpoint, subnet group, and migration task. These tags can also be used with cost allocation reporting to track cost associated with DMS resources, or used in a Condition statement in an IAM policy for DMS. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html\&quot;&gt; &lt;code&gt;Tag&lt;/code&gt; &lt;/a&gt; data type description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTagsToResourceTest() throws ApiException {
        String xAmzTarget = null;
        AddTagsToResourceMessage addTagsToResourceMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.addTagsToResource(xAmzTarget, addTagsToResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Applies a pending maintenance action to a resource (for example, to a replication instance).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyPendingMaintenanceActionTest() throws ApiException {
        String xAmzTarget = null;
        ApplyPendingMaintenanceActionMessage applyPendingMaintenanceActionMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ApplyPendingMaintenanceActionResponse response = api.applyPendingMaintenanceAction(xAmzTarget, applyPendingMaintenanceActionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts the analysis of up to 20 source databases to recommend target engines for each source database. This is a batch version of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_StartRecommendations.html\&quot;&gt;StartRecommendations&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The result of analysis of each source database is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of &lt;code&gt;200&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchStartRecommendationsTest() throws ApiException {
        String xAmzTarget = null;
        BatchStartRecommendationsRequest batchStartRecommendationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchStartRecommendationsResponse response = api.batchStartRecommendations(xAmzTarget, batchStartRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Cancels a single premigration assessment run.&lt;/p&gt; &lt;p&gt;This operation prevents any individual assessments from running if they haven&#39;t started running. It also attempts to cancel any individual assessments that are currently running.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelReplicationTaskAssessmentRunTest() throws ApiException {
        String xAmzTarget = null;
        CancelReplicationTaskAssessmentRunMessage cancelReplicationTaskAssessmentRunMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CancelReplicationTaskAssessmentRunResponse response = api.cancelReplicationTaskAssessmentRun(xAmzTarget, cancelReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an endpoint using the provided settings.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For a MySQL source or target endpoint, don&#39;t explicitly specify the database using the &lt;code&gt;DatabaseName&lt;/code&gt; request parameter on the &lt;code&gt;CreateEndpoint&lt;/code&gt; API call. Specifying &lt;code&gt;DatabaseName&lt;/code&gt; when you create a MySQL endpoint replicates all the task tables to this single database. For MySQL endpoints, you specify the database only when you specify the schema in the table-mapping rules of the DMS task.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEndpointTest() throws ApiException {
        String xAmzTarget = null;
        CreateEndpointMessage createEndpointMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEndpointResponse response = api.createEndpoint(xAmzTarget, createEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Creates an DMS event notification subscription. &lt;/p&gt; &lt;p&gt;You can specify the type of source (&lt;code&gt;SourceType&lt;/code&gt;) you want to be notified of, provide a list of DMS source IDs (&lt;code&gt;SourceIds&lt;/code&gt;) that triggers the events, and provide a list of event categories (&lt;code&gt;EventCategories&lt;/code&gt;) for events you want to be notified of. If you specify both the &lt;code&gt;SourceType&lt;/code&gt; and &lt;code&gt;SourceIds&lt;/code&gt;, such as &lt;code&gt;SourceType &#x3D; replication-instance&lt;/code&gt; and &lt;code&gt;SourceIdentifier &#x3D; my-replinstance&lt;/code&gt;, you will be notified of all the replication instance events for the specified source. If you specify a &lt;code&gt;SourceType&lt;/code&gt; but don&#39;t specify a &lt;code&gt;SourceIdentifier&lt;/code&gt;, you receive notice of the events for that source type for all your DMS sources. If you don&#39;t specify either &lt;code&gt;SourceType&lt;/code&gt; nor &lt;code&gt;SourceIdentifier&lt;/code&gt;, you will be notified of events generated from all DMS sources belonging to your customer account.&lt;/p&gt; &lt;p&gt;For more information about DMS events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html\&quot;&gt;Working with Events and Notifications&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEventSubscriptionTest() throws ApiException {
        String xAmzTarget = null;
        CreateEventSubscriptionMessage createEventSubscriptionMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEventSubscriptionResponse response = api.createEventSubscription(xAmzTarget, createEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Fleet Advisor collector using the specified parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFleetAdvisorCollectorTest() throws ApiException {
        String xAmzTarget = null;
        CreateFleetAdvisorCollectorRequest createFleetAdvisorCollectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFleetAdvisorCollectorResponse response = api.createFleetAdvisorCollector(xAmzTarget, createFleetAdvisorCollectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates the replication instance using the specified parameters.&lt;/p&gt; &lt;p&gt;DMS requires that your account have certain roles with appropriate permissions before you can create a replication instance. For information on the required roles, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.APIRole\&quot;&gt;Creating the IAM Roles to Use With the CLI and DMS API&lt;/a&gt;. For information on the required permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html#CHAP_Security.IAMPermissions\&quot;&gt;IAM Permissions Needed to Use DMS&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReplicationInstanceTest() throws ApiException {
        String xAmzTarget = null;
        CreateReplicationInstanceMessage createReplicationInstanceMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateReplicationInstanceResponse response = api.createReplicationInstance(xAmzTarget, createReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a replication subnet group given a list of the subnet IDs in a VPC.&lt;/p&gt; &lt;p&gt;The VPC needs to have at least one subnet in at least two availability zones in the Amazon Web Services Region, otherwise the service will throw a &lt;code&gt;ReplicationSubnetGroupDoesNotCoverEnoughAZs&lt;/code&gt; exception.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReplicationSubnetGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateReplicationSubnetGroupMessage createReplicationSubnetGroupMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateReplicationSubnetGroupResponse response = api.createReplicationSubnetGroup(xAmzTarget, createReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a replication task using the specified parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReplicationTaskTest() throws ApiException {
        String xAmzTarget = null;
        CreateReplicationTaskMessage createReplicationTaskMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateReplicationTaskResponse response = api.createReplicationTask(xAmzTarget, createReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified certificate. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCertificateTest() throws ApiException {
        String xAmzTarget = null;
        DeleteCertificateMessage deleteCertificateMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteCertificateResponse response = api.deleteCertificate(xAmzTarget, deleteCertificateMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the connection between a replication instance and an endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteConnectionMessage deleteConnectionMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteConnectionResponse response = api.deleteConnection(xAmzTarget, deleteConnectionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified endpoint.&lt;/p&gt; &lt;note&gt; &lt;p&gt;All tasks associated with the endpoint must be deleted before you can delete the endpoint.&lt;/p&gt; &lt;/note&gt; &lt;p/&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEndpointTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEndpointMessage deleteEndpointMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEndpointResponse response = api.deleteEndpoint(xAmzTarget, deleteEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Deletes an DMS event subscription. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventSubscriptionTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEventSubscriptionMessage deleteEventSubscriptionMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteEventSubscriptionResponse response = api.deleteEventSubscription(xAmzTarget, deleteEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified Fleet Advisor collector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFleetAdvisorCollectorTest() throws ApiException {
        String xAmzTarget = null;
        DeleteCollectorRequest deleteCollectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteFleetAdvisorCollector(xAmzTarget, deleteCollectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified Fleet Advisor collector databases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFleetAdvisorDatabasesTest() throws ApiException {
        String xAmzTarget = null;
        DeleteFleetAdvisorDatabasesRequest deleteFleetAdvisorDatabasesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteFleetAdvisorDatabasesResponse response = api.deleteFleetAdvisorDatabases(xAmzTarget, deleteFleetAdvisorDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified replication instance.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You must delete any migration tasks that are associated with the replication instance before you can delete it.&lt;/p&gt; &lt;/note&gt; &lt;p/&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReplicationInstanceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteReplicationInstanceMessage deleteReplicationInstanceMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteReplicationInstanceResponse response = api.deleteReplicationInstance(xAmzTarget, deleteReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a subnet group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReplicationSubnetGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteReplicationSubnetGroupMessage deleteReplicationSubnetGroupMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteReplicationSubnetGroup(xAmzTarget, deleteReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified replication task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReplicationTaskTest() throws ApiException {
        String xAmzTarget = null;
        DeleteReplicationTaskMessage deleteReplicationTaskMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteReplicationTaskResponse response = api.deleteReplicationTask(xAmzTarget, deleteReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the record of a single premigration assessment run.&lt;/p&gt; &lt;p&gt;This operation removes all metadata that DMS maintains about this assessment run. However, the operation leaves untouched all information about this assessment run that is stored in your Amazon S3 bucket.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReplicationTaskAssessmentRunTest() throws ApiException {
        String xAmzTarget = null;
        DeleteReplicationTaskAssessmentRunMessage deleteReplicationTaskAssessmentRunMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteReplicationTaskAssessmentRunResponse response = api.deleteReplicationTaskAssessmentRun(xAmzTarget, deleteReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all of the DMS attributes for a customer account. These attributes include DMS quotas for the account and a unique account identifier in a particular DMS region. DMS quotas include a list of resource quotas supported by the account, such as the number of replication instances allowed. The description for each resource quota, includes the quota name, current usage toward that quota, and the quota&#39;s maximum value. DMS uses the unique account identifier to name each artifact used by DMS in the given region.&lt;/p&gt; &lt;p&gt;This command does not take any parameters.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAccountAttributesTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAccountAttributesResponse response = api.describeAccountAttributes(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides a list of individual assessments that you can specify for a new premigration assessment run, given one or more parameters.&lt;/p&gt; &lt;p&gt;If you specify an existing migration task, this operation provides the default individual assessments you can specify for that task. Otherwise, the specified parameters model elements of a possible migration task on which to base a premigration assessment run.&lt;/p&gt; &lt;p&gt;To use these migration task modeling parameters, you must specify an existing replication instance, a source database engine, a target database engine, and a migration type. This combination of parameters potentially limits the default individual assessments available for an assessment run created for a corresponding migration task.&lt;/p&gt; &lt;p&gt;If you specify no parameters, this operation provides a list of all possible individual assessments that you can specify for an assessment run. If you specify any one of the task modeling parameters, you must specify all of them or the operation cannot provide a list of individual assessments. The only parameter that you can specify alone is for an existing migration task. The specified task definition then determines the default list of individual assessments that you can specify in an assessment run for the task.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeApplicableIndividualAssessmentsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeApplicableIndividualAssessmentsMessage describeApplicableIndividualAssessmentsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeApplicableIndividualAssessmentsResponse response = api.describeApplicableIndividualAssessments(xAmzTarget, describeApplicableIndividualAssessmentsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Provides a description of the certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCertificatesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeCertificatesMessage describeCertificatesMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeCertificatesResponse response = api.describeCertificates(xAmzTarget, describeCertificatesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Describes the status of the connections that have been made between the replication instance and an endpoint. Connections are created when you test an endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeConnectionsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeConnectionsMessage describeConnectionsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeConnectionsResponse response = api.describeConnections(xAmzTarget, describeConnectionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns information about the possible endpoint settings available when you create an endpoint for a specific database engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEndpointSettingsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEndpointSettingsMessage describeEndpointSettingsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEndpointSettingsResponse response = api.describeEndpointSettings(xAmzTarget, describeEndpointSettingsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns information about the type of endpoints available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEndpointTypesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEndpointTypesMessage describeEndpointTypesMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEndpointTypesResponse response = api.describeEndpointTypes(xAmzTarget, describeEndpointTypesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns information about the endpoints for your account in the current region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEndpointsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEndpointsMessage describeEndpointsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEndpointsResponse response = api.describeEndpoints(xAmzTarget, describeEndpointsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Lists categories for all event source types, or, if specified, for a specified source type. You can see a list of the event categories and source types in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html\&quot;&gt;Working with Events and Notifications&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEventCategoriesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEventCategoriesMessage describeEventCategoriesMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEventCategoriesResponse response = api.describeEventCategories(xAmzTarget, describeEventCategoriesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists all the event subscriptions for a customer account. The description of a subscription includes &lt;code&gt;SubscriptionName&lt;/code&gt;, &lt;code&gt;SNSTopicARN&lt;/code&gt;, &lt;code&gt;CustomerID&lt;/code&gt;, &lt;code&gt;SourceType&lt;/code&gt;, &lt;code&gt;SourceID&lt;/code&gt;, &lt;code&gt;CreationTime&lt;/code&gt;, and &lt;code&gt;Status&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;If you specify &lt;code&gt;SubscriptionName&lt;/code&gt;, this action lists the description for that subscription.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEventSubscriptionsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEventSubscriptionsMessage describeEventSubscriptionsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEventSubscriptionsResponse response = api.describeEventSubscriptions(xAmzTarget, describeEventSubscriptionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     *  Lists events for a given source identifier and source type. You can also specify a start and end time. For more information on DMS events, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html\&quot;&gt;Working with Events and Notifications&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEventsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEventsMessage describeEventsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeEventsResponse response = api.describeEvents(xAmzTarget, describeEventsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a list of the Fleet Advisor collectors in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFleetAdvisorCollectorsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFleetAdvisorCollectorsRequest describeFleetAdvisorCollectorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeFleetAdvisorCollectorsResponse response = api.describeFleetAdvisorCollectors(xAmzTarget, describeFleetAdvisorCollectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of Fleet Advisor databases in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFleetAdvisorDatabasesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFleetAdvisorDatabasesRequest describeFleetAdvisorDatabasesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeFleetAdvisorDatabasesResponse response = api.describeFleetAdvisorDatabases(xAmzTarget, describeFleetAdvisorDatabasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        // TODO: test validations
    }

    /**
     * Provides descriptions of large-scale assessment (LSA) analyses produced by your Fleet Advisor collectors. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFleetAdvisorLsaAnalysisTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFleetAdvisorLsaAnalysisRequest describeFleetAdvisorLsaAnalysisRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeFleetAdvisorLsaAnalysisResponse response = api.describeFleetAdvisorLsaAnalysis(xAmzTarget, describeFleetAdvisorLsaAnalysisRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        // TODO: test validations
    }

    /**
     * Provides descriptions of the schemas discovered by your Fleet Advisor collectors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFleetAdvisorSchemaObjectSummaryTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFleetAdvisorSchemaObjectSummaryRequest describeFleetAdvisorSchemaObjectSummaryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeFleetAdvisorSchemaObjectSummaryResponse response = api.describeFleetAdvisorSchemaObjectSummary(xAmzTarget, describeFleetAdvisorSchemaObjectSummaryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of schemas detected by Fleet Advisor Collectors in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeFleetAdvisorSchemasTest() throws ApiException {
        String xAmzTarget = null;
        DescribeFleetAdvisorSchemasRequest describeFleetAdvisorSchemasRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeFleetAdvisorSchemasResponse response = api.describeFleetAdvisorSchemas(xAmzTarget, describeFleetAdvisorSchemasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        // TODO: test validations
    }

    /**
     * Returns information about the replication instance types that can be created in the specified region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeOrderableReplicationInstancesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeOrderableReplicationInstancesMessage describeOrderableReplicationInstancesMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeOrderableReplicationInstancesResponse response = api.describeOrderableReplicationInstances(xAmzTarget, describeOrderableReplicationInstancesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * For internal use only
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describePendingMaintenanceActionsTest() throws ApiException {
        String xAmzTarget = null;
        DescribePendingMaintenanceActionsMessage describePendingMaintenanceActionsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribePendingMaintenanceActionsResponse response = api.describePendingMaintenanceActions(xAmzTarget, describePendingMaintenanceActionsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of limitations for recommendations of target Amazon Web Services engines.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRecommendationLimitationsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeRecommendationLimitationsRequest describeRecommendationLimitationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeRecommendationLimitationsResponse response = api.describeRecommendationLimitations(xAmzTarget, describeRecommendationLimitationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of target engine recommendations for your source databases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRecommendationsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeRecommendationsRequest describeRecommendationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String nextToken = null;
        DescribeRecommendationsResponse response = api.describeRecommendations(xAmzTarget, describeRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the status of the RefreshSchemas operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRefreshSchemasStatusTest() throws ApiException {
        String xAmzTarget = null;
        DescribeRefreshSchemasStatusMessage describeRefreshSchemasStatusMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRefreshSchemasStatusResponse response = api.describeRefreshSchemasStatus(xAmzTarget, describeRefreshSchemasStatusMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about the task logs for the specified task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReplicationInstanceTaskLogsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeReplicationInstanceTaskLogsMessage describeReplicationInstanceTaskLogsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReplicationInstanceTaskLogsResponse response = api.describeReplicationInstanceTaskLogs(xAmzTarget, describeReplicationInstanceTaskLogsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns information about replication instances for your account in the current region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReplicationInstancesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeReplicationInstancesMessage describeReplicationInstancesMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReplicationInstancesResponse response = api.describeReplicationInstances(xAmzTarget, describeReplicationInstancesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns information about the replication subnet groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReplicationSubnetGroupsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeReplicationSubnetGroupsMessage describeReplicationSubnetGroupsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReplicationSubnetGroupsResponse response = api.describeReplicationSubnetGroups(xAmzTarget, describeReplicationSubnetGroupsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the task assessment results from the Amazon S3 bucket that DMS creates in your Amazon Web Services account. This action always returns the latest results.&lt;/p&gt; &lt;p&gt;For more information about DMS task assessments, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html\&quot;&gt;Creating a task assessment report&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReplicationTaskAssessmentResultsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeReplicationTaskAssessmentResultsMessage describeReplicationTaskAssessmentResultsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReplicationTaskAssessmentResultsResponse response = api.describeReplicationTaskAssessmentResults(xAmzTarget, describeReplicationTaskAssessmentResultsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a paginated list of premigration assessment runs based on filter settings.&lt;/p&gt; &lt;p&gt;These filter settings can specify a combination of premigration assessment runs, migration tasks, replication instances, and assessment run status values.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation doesn&#39;t return information about individual assessments. For this information, see the &lt;code&gt;DescribeReplicationTaskIndividualAssessments&lt;/code&gt; operation. &lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReplicationTaskAssessmentRunsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeReplicationTaskAssessmentRunsMessage describeReplicationTaskAssessmentRunsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReplicationTaskAssessmentRunsResponse response = api.describeReplicationTaskAssessmentRuns(xAmzTarget, describeReplicationTaskAssessmentRunsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a paginated list of individual assessments based on filter settings.&lt;/p&gt; &lt;p&gt;These filter settings can specify a combination of premigration assessment runs, migration tasks, and assessment status values.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReplicationTaskIndividualAssessmentsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeReplicationTaskIndividualAssessmentsMessage describeReplicationTaskIndividualAssessmentsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReplicationTaskIndividualAssessmentsResponse response = api.describeReplicationTaskIndividualAssessments(xAmzTarget, describeReplicationTaskIndividualAssessmentsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Returns information about replication tasks for your account in the current region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReplicationTasksTest() throws ApiException {
        String xAmzTarget = null;
        DescribeReplicationTasksMessage describeReplicationTasksMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeReplicationTasksResponse response = api.describeReplicationTasks(xAmzTarget, describeReplicationTasksMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the schema for the specified endpoint.&lt;/p&gt; &lt;p/&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSchemasTest() throws ApiException {
        String xAmzTarget = null;
        DescribeSchemasMessage describeSchemasMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeSchemasResponse response = api.describeSchemas(xAmzTarget, describeSchemasMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns table statistics on the database migration task, including table name, rows inserted, rows updated, and rows deleted.&lt;/p&gt; &lt;p&gt;Note that the \&quot;last updated\&quot; column the DMS console only indicates the time that DMS last updated the table statistics record for a table. It does not indicate the time of the last update to the table.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTableStatisticsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeTableStatisticsMessage describeTableStatisticsMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxRecords = null;
        String marker = null;
        DescribeTableStatisticsResponse response = api.describeTableStatistics(xAmzTarget, describeTableStatisticsMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        // TODO: test validations
    }

    /**
     * Uploads the specified certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importCertificateTest() throws ApiException {
        String xAmzTarget = null;
        ImportCertificateMessage importCertificateMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ImportCertificateResponse response = api.importCertificate(xAmzTarget, importCertificateMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all metadata tags attached to an DMS resource, including replication instance, endpoint, subnet group, and migration task. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html\&quot;&gt; &lt;code&gt;Tag&lt;/code&gt; &lt;/a&gt; data type description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceMessage listTagsForResourceMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the specified endpoint.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For a MySQL source or target endpoint, don&#39;t explicitly specify the database using the &lt;code&gt;DatabaseName&lt;/code&gt; request parameter on the &lt;code&gt;ModifyEndpoint&lt;/code&gt; API call. Specifying &lt;code&gt;DatabaseName&lt;/code&gt; when you modify a MySQL endpoint replicates all the task tables to this single database. For MySQL endpoints, you specify the database only when you specify the schema in the table-mapping rules of the DMS task.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyEndpointTest() throws ApiException {
        String xAmzTarget = null;
        ModifyEndpointMessage modifyEndpointMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyEndpointResponse response = api.modifyEndpoint(xAmzTarget, modifyEndpointMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies an existing DMS event notification subscription. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyEventSubscriptionTest() throws ApiException {
        String xAmzTarget = null;
        ModifyEventSubscriptionMessage modifyEventSubscriptionMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyEventSubscriptionResponse response = api.modifyEventSubscription(xAmzTarget, modifyEventSubscriptionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the replication instance to apply new settings. You can change one or more parameters by specifying these parameters and the new values in the request.&lt;/p&gt; &lt;p&gt;Some settings are applied during the maintenance window.&lt;/p&gt; &lt;p/&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyReplicationInstanceTest() throws ApiException {
        String xAmzTarget = null;
        ModifyReplicationInstanceMessage modifyReplicationInstanceMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyReplicationInstanceResponse response = api.modifyReplicationInstance(xAmzTarget, modifyReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Modifies the settings for the specified replication subnet group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyReplicationSubnetGroupTest() throws ApiException {
        String xAmzTarget = null;
        ModifyReplicationSubnetGroupMessage modifyReplicationSubnetGroupMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyReplicationSubnetGroupResponse response = api.modifyReplicationSubnetGroup(xAmzTarget, modifyReplicationSubnetGroupMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Modifies the specified replication task.&lt;/p&gt; &lt;p&gt;You can&#39;t modify the task endpoints. The task must be stopped before you can modify it. &lt;/p&gt; &lt;p&gt;For more information about DMS tasks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html\&quot;&gt;Working with Migration Tasks&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyReplicationTaskTest() throws ApiException {
        String xAmzTarget = null;
        ModifyReplicationTaskMessage modifyReplicationTaskMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ModifyReplicationTaskResponse response = api.modifyReplicationTask(xAmzTarget, modifyReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Moves a replication task from its current replication instance to a different target replication instance using the specified parameters. The target replication instance must be created with the same or later DMS version as the current replication instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveReplicationTaskTest() throws ApiException {
        String xAmzTarget = null;
        MoveReplicationTaskMessage moveReplicationTaskMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        MoveReplicationTaskResponse response = api.moveReplicationTask(xAmzTarget, moveReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Reboots a replication instance. Rebooting results in a momentary outage, until the replication instance becomes available again.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rebootReplicationInstanceTest() throws ApiException {
        String xAmzTarget = null;
        RebootReplicationInstanceMessage rebootReplicationInstanceMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RebootReplicationInstanceResponse response = api.rebootReplicationInstance(xAmzTarget, rebootReplicationInstanceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Populates the schema for the specified endpoint. This is an asynchronous operation and can take several minutes. You can check the status of this operation by calling the DescribeRefreshSchemasStatus operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshSchemasTest() throws ApiException {
        String xAmzTarget = null;
        RefreshSchemasMessage refreshSchemasMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RefreshSchemasResponse response = api.refreshSchemas(xAmzTarget, refreshSchemasMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Reloads the target database table with the source data. &lt;/p&gt; &lt;p&gt;You can only use this operation with a task in the &lt;code&gt;RUNNING&lt;/code&gt; state, otherwise the service will throw an &lt;code&gt;InvalidResourceStateFault&lt;/code&gt; exception.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reloadTablesTest() throws ApiException {
        String xAmzTarget = null;
        ReloadTablesMessage reloadTablesMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ReloadTablesResponse response = api.reloadTables(xAmzTarget, reloadTablesMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes metadata tags from an DMS resource, including replication instance, endpoint, subnet group, and migration task. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_Tag.html\&quot;&gt; &lt;code&gt;Tag&lt;/code&gt; &lt;/a&gt; data type description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTagsFromResourceTest() throws ApiException {
        String xAmzTarget = null;
        RemoveTagsFromResourceMessage removeTagsFromResourceMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.removeTagsFromResource(xAmzTarget, removeTagsFromResourceMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Runs large-scale assessment (LSA) analysis on every Fleet Advisor collector in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runFleetAdvisorLsaAnalysisTest() throws ApiException {
        String xAmzTarget = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RunFleetAdvisorLsaAnalysisResponse response = api.runFleetAdvisorLsaAnalysis(xAmzTarget, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts the analysis of your source database to provide recommendations of target engines.&lt;/p&gt; &lt;p&gt;You can create recommendations for multiple source databases using &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/APIReference/API_BatchStartRecommendations.html\&quot;&gt;BatchStartRecommendations&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startRecommendationsTest() throws ApiException {
        String xAmzTarget = null;
        StartRecommendationsRequest startRecommendationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.startRecommendations(xAmzTarget, startRecommendationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts the replication task.&lt;/p&gt; &lt;p&gt;For more information about DMS tasks, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.html\&quot;&gt;Working with Migration Tasks &lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide.&lt;/i&gt; &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startReplicationTaskTest() throws ApiException {
        String xAmzTarget = null;
        StartReplicationTaskMessage startReplicationTaskMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartReplicationTaskResponse response = api.startReplicationTask(xAmzTarget, startReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt; Starts the replication task assessment for unsupported data types in the source database. &lt;/p&gt; &lt;p&gt;You can only use this operation for a task if the following conditions are true:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The task must be in the &lt;code&gt;stopped&lt;/code&gt; state.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The task must have successful connections to the source and target.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If either of these conditions are not met, an &lt;code&gt;InvalidResourceStateFault&lt;/code&gt; error will result. &lt;/p&gt; &lt;p&gt;For information about DMS task assessments, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Tasks.AssessmentReport.html\&quot;&gt;Creating a task assessment report&lt;/a&gt; in the &lt;i&gt;Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startReplicationTaskAssessmentTest() throws ApiException {
        String xAmzTarget = null;
        StartReplicationTaskAssessmentMessage startReplicationTaskAssessmentMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartReplicationTaskAssessmentResponse response = api.startReplicationTaskAssessment(xAmzTarget, startReplicationTaskAssessmentMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts a new premigration assessment run for one or more individual assessments of a migration task.&lt;/p&gt; &lt;p&gt;The assessments that you can specify depend on the source and target database engine and the migration type defined for the given task. To run this operation, your migration task must already be created. After you run this operation, you can review the status of each individual assessment. You can also run the migration task manually after the assessment run and its individual assessments complete.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startReplicationTaskAssessmentRunTest() throws ApiException {
        String xAmzTarget = null;
        StartReplicationTaskAssessmentRunMessage startReplicationTaskAssessmentRunMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartReplicationTaskAssessmentRunResponse response = api.startReplicationTaskAssessmentRun(xAmzTarget, startReplicationTaskAssessmentRunMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops the replication task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopReplicationTaskTest() throws ApiException {
        String xAmzTarget = null;
        StopReplicationTaskMessage stopReplicationTaskMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopReplicationTaskResponse response = api.stopReplicationTask(xAmzTarget, stopReplicationTaskMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Tests the connection between the replication instance and the endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testConnectionTest() throws ApiException {
        String xAmzTarget = null;
        TestConnectionMessage testConnectionMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestConnectionResponse response = api.testConnection(xAmzTarget, testConnectionMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Migrates 10 active and enabled Amazon SNS subscriptions at a time and converts them to corresponding Amazon EventBridge rules. By default, this operation migrates subscriptions only when all your replication instance versions are 3.4.6 or higher. If any replication instances are from versions earlier than 3.4.6, the operation raises an error and tells you to upgrade these instances to version 3.4.6 or higher. To enable migration regardless of version, set the &lt;code&gt;Force&lt;/code&gt; option to true. However, if you don&#39;t upgrade instances earlier than version 3.4.6, some types of events might not be available when you use Amazon EventBridge.&lt;/p&gt; &lt;p&gt;To call this operation, make sure that you have certain permissions added to your user account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Events.html#CHAP_Events-migrate-to-eventbridge\&quot;&gt;Migrating event subscriptions to Amazon EventBridge&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Database Migration Service User Guide&lt;/i&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionsToEventBridgeTest() throws ApiException {
        String xAmzTarget = null;
        UpdateSubscriptionsToEventBridgeMessage updateSubscriptionsToEventBridgeMessage = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSubscriptionsToEventBridgeResponse response = api.updateSubscriptionsToEventBridge(xAmzTarget, updateSubscriptionsToEventBridgeMessage, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
