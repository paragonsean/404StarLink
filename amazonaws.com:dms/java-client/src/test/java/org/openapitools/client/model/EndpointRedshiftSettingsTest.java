/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EncryptionModeValue;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for EndpointRedshiftSettings
 */
public class EndpointRedshiftSettingsTest {
    private final EndpointRedshiftSettings model = new EndpointRedshiftSettings();

    /**
     * Model tests for EndpointRedshiftSettings
     */
    @Test
    public void testEndpointRedshiftSettings() {
        // TODO: test EndpointRedshiftSettings
    }

    /**
     * Test the property 'acceptAnyDate'
     */
    @Test
    public void acceptAnyDateTest() {
        // TODO: test acceptAnyDate
    }

    /**
     * Test the property 'afterConnectScript'
     */
    @Test
    public void afterConnectScriptTest() {
        // TODO: test afterConnectScript
    }

    /**
     * Test the property 'bucketFolder'
     */
    @Test
    public void bucketFolderTest() {
        // TODO: test bucketFolder
    }

    /**
     * Test the property 'bucketName'
     */
    @Test
    public void bucketNameTest() {
        // TODO: test bucketName
    }

    /**
     * Test the property 'caseSensitiveNames'
     */
    @Test
    public void caseSensitiveNamesTest() {
        // TODO: test caseSensitiveNames
    }

    /**
     * Test the property 'compUpdate'
     */
    @Test
    public void compUpdateTest() {
        // TODO: test compUpdate
    }

    /**
     * Test the property 'connectionTimeout'
     */
    @Test
    public void connectionTimeoutTest() {
        // TODO: test connectionTimeout
    }

    /**
     * Test the property 'databaseName'
     */
    @Test
    public void databaseNameTest() {
        // TODO: test databaseName
    }

    /**
     * Test the property 'dateFormat'
     */
    @Test
    public void dateFormatTest() {
        // TODO: test dateFormat
    }

    /**
     * Test the property 'emptyAsNull'
     */
    @Test
    public void emptyAsNullTest() {
        // TODO: test emptyAsNull
    }

    /**
     * Test the property 'encryptionMode'
     */
    @Test
    public void encryptionModeTest() {
        // TODO: test encryptionMode
    }

    /**
     * Test the property 'explicitIds'
     */
    @Test
    public void explicitIdsTest() {
        // TODO: test explicitIds
    }

    /**
     * Test the property 'fileTransferUploadStreams'
     */
    @Test
    public void fileTransferUploadStreamsTest() {
        // TODO: test fileTransferUploadStreams
    }

    /**
     * Test the property 'loadTimeout'
     */
    @Test
    public void loadTimeoutTest() {
        // TODO: test loadTimeout
    }

    /**
     * Test the property 'maxFileSize'
     */
    @Test
    public void maxFileSizeTest() {
        // TODO: test maxFileSize
    }

    /**
     * Test the property 'password'
     */
    @Test
    public void passwordTest() {
        // TODO: test password
    }

    /**
     * Test the property 'port'
     */
    @Test
    public void portTest() {
        // TODO: test port
    }

    /**
     * Test the property 'removeQuotes'
     */
    @Test
    public void removeQuotesTest() {
        // TODO: test removeQuotes
    }

    /**
     * Test the property 'replaceInvalidChars'
     */
    @Test
    public void replaceInvalidCharsTest() {
        // TODO: test replaceInvalidChars
    }

    /**
     * Test the property 'replaceChars'
     */
    @Test
    public void replaceCharsTest() {
        // TODO: test replaceChars
    }

    /**
     * Test the property 'serverName'
     */
    @Test
    public void serverNameTest() {
        // TODO: test serverName
    }

    /**
     * Test the property 'serviceAccessRoleArn'
     */
    @Test
    public void serviceAccessRoleArnTest() {
        // TODO: test serviceAccessRoleArn
    }

    /**
     * Test the property 'serverSideEncryptionKmsKeyId'
     */
    @Test
    public void serverSideEncryptionKmsKeyIdTest() {
        // TODO: test serverSideEncryptionKmsKeyId
    }

    /**
     * Test the property 'timeFormat'
     */
    @Test
    public void timeFormatTest() {
        // TODO: test timeFormat
    }

    /**
     * Test the property 'trimBlanks'
     */
    @Test
    public void trimBlanksTest() {
        // TODO: test trimBlanks
    }

    /**
     * Test the property 'truncateColumns'
     */
    @Test
    public void truncateColumnsTest() {
        // TODO: test truncateColumns
    }

    /**
     * Test the property 'username'
     */
    @Test
    public void usernameTest() {
        // TODO: test username
    }

    /**
     * Test the property 'writeBufferSize'
     */
    @Test
    public void writeBufferSizeTest() {
        // TODO: test writeBufferSize
    }

    /**
     * Test the property 'secretsManagerAccessRoleArn'
     */
    @Test
    public void secretsManagerAccessRoleArnTest() {
        // TODO: test secretsManagerAccessRoleArn
    }

    /**
     * Test the property 'secretsManagerSecretId'
     */
    @Test
    public void secretsManagerSecretIdTest() {
        // TODO: test secretsManagerSecretId
    }

    /**
     * Test the property 'mapBooleanAsBoolean'
     */
    @Test
    public void mapBooleanAsBooleanTest() {
        // TODO: test mapBooleanAsBoolean
    }

}
