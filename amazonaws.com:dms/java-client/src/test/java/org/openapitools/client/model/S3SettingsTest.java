/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CannedAclForObjectsValue;
import org.openapitools.client.model.CompressionTypeValue;
import org.openapitools.client.model.DataFormatValue;
import org.openapitools.client.model.DatePartitionDelimiterValue;
import org.openapitools.client.model.DatePartitionSequenceValue;
import org.openapitools.client.model.EncodingTypeValue;
import org.openapitools.client.model.EncryptionModeValue;
import org.openapitools.client.model.ParquetVersionValue;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for S3Settings
 */
public class S3SettingsTest {
    private final S3Settings model = new S3Settings();

    /**
     * Model tests for S3Settings
     */
    @Test
    public void testS3Settings() {
        // TODO: test S3Settings
    }

    /**
     * Test the property 'serviceAccessRoleArn'
     */
    @Test
    public void serviceAccessRoleArnTest() {
        // TODO: test serviceAccessRoleArn
    }

    /**
     * Test the property 'externalTableDefinition'
     */
    @Test
    public void externalTableDefinitionTest() {
        // TODO: test externalTableDefinition
    }

    /**
     * Test the property 'csvRowDelimiter'
     */
    @Test
    public void csvRowDelimiterTest() {
        // TODO: test csvRowDelimiter
    }

    /**
     * Test the property 'csvDelimiter'
     */
    @Test
    public void csvDelimiterTest() {
        // TODO: test csvDelimiter
    }

    /**
     * Test the property 'bucketFolder'
     */
    @Test
    public void bucketFolderTest() {
        // TODO: test bucketFolder
    }

    /**
     * Test the property 'bucketName'
     */
    @Test
    public void bucketNameTest() {
        // TODO: test bucketName
    }

    /**
     * Test the property 'compressionType'
     */
    @Test
    public void compressionTypeTest() {
        // TODO: test compressionType
    }

    /**
     * Test the property 'encryptionMode'
     */
    @Test
    public void encryptionModeTest() {
        // TODO: test encryptionMode
    }

    /**
     * Test the property 'serverSideEncryptionKmsKeyId'
     */
    @Test
    public void serverSideEncryptionKmsKeyIdTest() {
        // TODO: test serverSideEncryptionKmsKeyId
    }

    /**
     * Test the property 'dataFormat'
     */
    @Test
    public void dataFormatTest() {
        // TODO: test dataFormat
    }

    /**
     * Test the property 'encodingType'
     */
    @Test
    public void encodingTypeTest() {
        // TODO: test encodingType
    }

    /**
     * Test the property 'dictPageSizeLimit'
     */
    @Test
    public void dictPageSizeLimitTest() {
        // TODO: test dictPageSizeLimit
    }

    /**
     * Test the property 'rowGroupLength'
     */
    @Test
    public void rowGroupLengthTest() {
        // TODO: test rowGroupLength
    }

    /**
     * Test the property 'dataPageSize'
     */
    @Test
    public void dataPageSizeTest() {
        // TODO: test dataPageSize
    }

    /**
     * Test the property 'parquetVersion'
     */
    @Test
    public void parquetVersionTest() {
        // TODO: test parquetVersion
    }

    /**
     * Test the property 'enableStatistics'
     */
    @Test
    public void enableStatisticsTest() {
        // TODO: test enableStatistics
    }

    /**
     * Test the property 'includeOpForFullLoad'
     */
    @Test
    public void includeOpForFullLoadTest() {
        // TODO: test includeOpForFullLoad
    }

    /**
     * Test the property 'cdcInsertsOnly'
     */
    @Test
    public void cdcInsertsOnlyTest() {
        // TODO: test cdcInsertsOnly
    }

    /**
     * Test the property 'timestampColumnName'
     */
    @Test
    public void timestampColumnNameTest() {
        // TODO: test timestampColumnName
    }

    /**
     * Test the property 'parquetTimestampInMillisecond'
     */
    @Test
    public void parquetTimestampInMillisecondTest() {
        // TODO: test parquetTimestampInMillisecond
    }

    /**
     * Test the property 'cdcInsertsAndUpdates'
     */
    @Test
    public void cdcInsertsAndUpdatesTest() {
        // TODO: test cdcInsertsAndUpdates
    }

    /**
     * Test the property 'datePartitionEnabled'
     */
    @Test
    public void datePartitionEnabledTest() {
        // TODO: test datePartitionEnabled
    }

    /**
     * Test the property 'datePartitionSequence'
     */
    @Test
    public void datePartitionSequenceTest() {
        // TODO: test datePartitionSequence
    }

    /**
     * Test the property 'datePartitionDelimiter'
     */
    @Test
    public void datePartitionDelimiterTest() {
        // TODO: test datePartitionDelimiter
    }

    /**
     * Test the property 'useCsvNoSupValue'
     */
    @Test
    public void useCsvNoSupValueTest() {
        // TODO: test useCsvNoSupValue
    }

    /**
     * Test the property 'csvNoSupValue'
     */
    @Test
    public void csvNoSupValueTest() {
        // TODO: test csvNoSupValue
    }

    /**
     * Test the property 'preserveTransactions'
     */
    @Test
    public void preserveTransactionsTest() {
        // TODO: test preserveTransactions
    }

    /**
     * Test the property 'cdcPath'
     */
    @Test
    public void cdcPathTest() {
        // TODO: test cdcPath
    }

    /**
     * Test the property 'useTaskStartTimeForFullLoadTimestamp'
     */
    @Test
    public void useTaskStartTimeForFullLoadTimestampTest() {
        // TODO: test useTaskStartTimeForFullLoadTimestamp
    }

    /**
     * Test the property 'cannedAclForObjects'
     */
    @Test
    public void cannedAclForObjectsTest() {
        // TODO: test cannedAclForObjects
    }

    /**
     * Test the property 'addColumnName'
     */
    @Test
    public void addColumnNameTest() {
        // TODO: test addColumnName
    }

    /**
     * Test the property 'cdcMaxBatchInterval'
     */
    @Test
    public void cdcMaxBatchIntervalTest() {
        // TODO: test cdcMaxBatchInterval
    }

    /**
     * Test the property 'cdcMinFileSize'
     */
    @Test
    public void cdcMinFileSizeTest() {
        // TODO: test cdcMinFileSize
    }

    /**
     * Test the property 'csvNullValue'
     */
    @Test
    public void csvNullValueTest() {
        // TODO: test csvNullValue
    }

    /**
     * Test the property 'ignoreHeaderRows'
     */
    @Test
    public void ignoreHeaderRowsTest() {
        // TODO: test ignoreHeaderRows
    }

    /**
     * Test the property 'maxFileSize'
     */
    @Test
    public void maxFileSizeTest() {
        // TODO: test maxFileSize
    }

    /**
     * Test the property 'rfc4180'
     */
    @Test
    public void rfc4180Test() {
        // TODO: test rfc4180
    }

    /**
     * Test the property 'datePartitionTimezone'
     */
    @Test
    public void datePartitionTimezoneTest() {
        // TODO: test datePartitionTimezone
    }

    /**
     * Test the property 'addTrailingPaddingCharacter'
     */
    @Test
    public void addTrailingPaddingCharacterTest() {
        // TODO: test addTrailingPaddingCharacter
    }

    /**
     * Test the property 'expectedBucketOwner'
     */
    @Test
    public void expectedBucketOwnerTest() {
        // TODO: test expectedBucketOwner
    }

    /**
     * Test the property 'glueCatalogGeneration'
     */
    @Test
    public void glueCatalogGenerationTest() {
        // TODO: test glueCatalogGeneration
    }

}
