/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestConnectionResponseConnection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:34.502814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestConnectionResponseConnection {
  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_ARN = "ReplicationInstanceArn";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_ARN)
  private String replicationInstanceArn;

  public static final String SERIALIZED_NAME_ENDPOINT_ARN = "EndpointArn";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_ARN)
  private String endpointArn;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_LAST_FAILURE_MESSAGE = "LastFailureMessage";
  @SerializedName(SERIALIZED_NAME_LAST_FAILURE_MESSAGE)
  private String lastFailureMessage;

  public static final String SERIALIZED_NAME_ENDPOINT_IDENTIFIER = "EndpointIdentifier";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_IDENTIFIER)
  private String endpointIdentifier;

  public static final String SERIALIZED_NAME_REPLICATION_INSTANCE_IDENTIFIER = "ReplicationInstanceIdentifier";
  @SerializedName(SERIALIZED_NAME_REPLICATION_INSTANCE_IDENTIFIER)
  private String replicationInstanceIdentifier;

  public TestConnectionResponseConnection() {
  }

  public TestConnectionResponseConnection replicationInstanceArn(String replicationInstanceArn) {
    this.replicationInstanceArn = replicationInstanceArn;
    return this;
  }

  /**
   * Get replicationInstanceArn
   * @return replicationInstanceArn
   */
  @javax.annotation.Nullable
  public String getReplicationInstanceArn() {
    return replicationInstanceArn;
  }

  public void setReplicationInstanceArn(String replicationInstanceArn) {
    this.replicationInstanceArn = replicationInstanceArn;
  }


  public TestConnectionResponseConnection endpointArn(String endpointArn) {
    this.endpointArn = endpointArn;
    return this;
  }

  /**
   * Get endpointArn
   * @return endpointArn
   */
  @javax.annotation.Nullable
  public String getEndpointArn() {
    return endpointArn;
  }

  public void setEndpointArn(String endpointArn) {
    this.endpointArn = endpointArn;
  }


  public TestConnectionResponseConnection status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public TestConnectionResponseConnection lastFailureMessage(String lastFailureMessage) {
    this.lastFailureMessage = lastFailureMessage;
    return this;
  }

  /**
   * Get lastFailureMessage
   * @return lastFailureMessage
   */
  @javax.annotation.Nullable
  public String getLastFailureMessage() {
    return lastFailureMessage;
  }

  public void setLastFailureMessage(String lastFailureMessage) {
    this.lastFailureMessage = lastFailureMessage;
  }


  public TestConnectionResponseConnection endpointIdentifier(String endpointIdentifier) {
    this.endpointIdentifier = endpointIdentifier;
    return this;
  }

  /**
   * Get endpointIdentifier
   * @return endpointIdentifier
   */
  @javax.annotation.Nullable
  public String getEndpointIdentifier() {
    return endpointIdentifier;
  }

  public void setEndpointIdentifier(String endpointIdentifier) {
    this.endpointIdentifier = endpointIdentifier;
  }


  public TestConnectionResponseConnection replicationInstanceIdentifier(String replicationInstanceIdentifier) {
    this.replicationInstanceIdentifier = replicationInstanceIdentifier;
    return this;
  }

  /**
   * Get replicationInstanceIdentifier
   * @return replicationInstanceIdentifier
   */
  @javax.annotation.Nullable
  public String getReplicationInstanceIdentifier() {
    return replicationInstanceIdentifier;
  }

  public void setReplicationInstanceIdentifier(String replicationInstanceIdentifier) {
    this.replicationInstanceIdentifier = replicationInstanceIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestConnectionResponseConnection testConnectionResponseConnection = (TestConnectionResponseConnection) o;
    return Objects.equals(this.replicationInstanceArn, testConnectionResponseConnection.replicationInstanceArn) &&
        Objects.equals(this.endpointArn, testConnectionResponseConnection.endpointArn) &&
        Objects.equals(this.status, testConnectionResponseConnection.status) &&
        Objects.equals(this.lastFailureMessage, testConnectionResponseConnection.lastFailureMessage) &&
        Objects.equals(this.endpointIdentifier, testConnectionResponseConnection.endpointIdentifier) &&
        Objects.equals(this.replicationInstanceIdentifier, testConnectionResponseConnection.replicationInstanceIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(replicationInstanceArn, endpointArn, status, lastFailureMessage, endpointIdentifier, replicationInstanceIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestConnectionResponseConnection {\n");
    sb.append("    replicationInstanceArn: ").append(toIndentedString(replicationInstanceArn)).append("\n");
    sb.append("    endpointArn: ").append(toIndentedString(endpointArn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    lastFailureMessage: ").append(toIndentedString(lastFailureMessage)).append("\n");
    sb.append("    endpointIdentifier: ").append(toIndentedString(endpointIdentifier)).append("\n");
    sb.append("    replicationInstanceIdentifier: ").append(toIndentedString(replicationInstanceIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReplicationInstanceArn");
    openapiFields.add("EndpointArn");
    openapiFields.add("Status");
    openapiFields.add("LastFailureMessage");
    openapiFields.add("EndpointIdentifier");
    openapiFields.add("ReplicationInstanceIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestConnectionResponseConnection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestConnectionResponseConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestConnectionResponseConnection is not found in the empty JSON string", TestConnectionResponseConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestConnectionResponseConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestConnectionResponseConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReplicationInstanceArn`
      if (jsonObj.get("ReplicationInstanceArn") != null && !jsonObj.get("ReplicationInstanceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationInstanceArn"));
      }
      // validate the optional field `EndpointArn`
      if (jsonObj.get("EndpointArn") != null && !jsonObj.get("EndpointArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndpointArn"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `LastFailureMessage`
      if (jsonObj.get("LastFailureMessage") != null && !jsonObj.get("LastFailureMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastFailureMessage"));
      }
      // validate the optional field `EndpointIdentifier`
      if (jsonObj.get("EndpointIdentifier") != null && !jsonObj.get("EndpointIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndpointIdentifier"));
      }
      // validate the optional field `ReplicationInstanceIdentifier`
      if (jsonObj.get("ReplicationInstanceIdentifier") != null && !jsonObj.get("ReplicationInstanceIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationInstanceIdentifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestConnectionResponseConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestConnectionResponseConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestConnectionResponseConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestConnectionResponseConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<TestConnectionResponseConnection>() {
           @Override
           public void write(JsonWriter out, TestConnectionResponseConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestConnectionResponseConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestConnectionResponseConnection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestConnectionResponseConnection
   * @throws IOException if the JSON string is invalid with respect to TestConnectionResponseConnection
   */
  public static TestConnectionResponseConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestConnectionResponseConnection.class);
  }

  /**
   * Convert an instance of TestConnectionResponseConnection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

