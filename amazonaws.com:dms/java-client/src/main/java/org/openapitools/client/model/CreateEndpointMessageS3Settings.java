/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CannedAclForObjectsValue;
import org.openapitools.client.model.CompressionTypeValue;
import org.openapitools.client.model.DataFormatValue;
import org.openapitools.client.model.DatePartitionDelimiterValue;
import org.openapitools.client.model.DatePartitionSequenceValue;
import org.openapitools.client.model.EncodingTypeValue;
import org.openapitools.client.model.EncryptionModeValue;
import org.openapitools.client.model.ParquetVersionValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateEndpointMessageS3Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:34.502814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateEndpointMessageS3Settings {
  public static final String SERIALIZED_NAME_SERVICE_ACCESS_ROLE_ARN = "ServiceAccessRoleArn";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCESS_ROLE_ARN)
  private String serviceAccessRoleArn;

  public static final String SERIALIZED_NAME_EXTERNAL_TABLE_DEFINITION = "ExternalTableDefinition";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_TABLE_DEFINITION)
  private String externalTableDefinition;

  public static final String SERIALIZED_NAME_CSV_ROW_DELIMITER = "CsvRowDelimiter";
  @SerializedName(SERIALIZED_NAME_CSV_ROW_DELIMITER)
  private String csvRowDelimiter;

  public static final String SERIALIZED_NAME_CSV_DELIMITER = "CsvDelimiter";
  @SerializedName(SERIALIZED_NAME_CSV_DELIMITER)
  private String csvDelimiter;

  public static final String SERIALIZED_NAME_BUCKET_FOLDER = "BucketFolder";
  @SerializedName(SERIALIZED_NAME_BUCKET_FOLDER)
  private String bucketFolder;

  public static final String SERIALIZED_NAME_BUCKET_NAME = "BucketName";
  @SerializedName(SERIALIZED_NAME_BUCKET_NAME)
  private String bucketName;

  public static final String SERIALIZED_NAME_COMPRESSION_TYPE = "CompressionType";
  @SerializedName(SERIALIZED_NAME_COMPRESSION_TYPE)
  private CompressionTypeValue compressionType;

  public static final String SERIALIZED_NAME_ENCRYPTION_MODE = "EncryptionMode";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_MODE)
  private EncryptionModeValue encryptionMode;

  public static final String SERIALIZED_NAME_SERVER_SIDE_ENCRYPTION_KMS_KEY_ID = "ServerSideEncryptionKmsKeyId";
  @SerializedName(SERIALIZED_NAME_SERVER_SIDE_ENCRYPTION_KMS_KEY_ID)
  private String serverSideEncryptionKmsKeyId;

  public static final String SERIALIZED_NAME_DATA_FORMAT = "DataFormat";
  @SerializedName(SERIALIZED_NAME_DATA_FORMAT)
  private DataFormatValue dataFormat;

  public static final String SERIALIZED_NAME_ENCODING_TYPE = "EncodingType";
  @SerializedName(SERIALIZED_NAME_ENCODING_TYPE)
  private EncodingTypeValue encodingType;

  public static final String SERIALIZED_NAME_DICT_PAGE_SIZE_LIMIT = "DictPageSizeLimit";
  @SerializedName(SERIALIZED_NAME_DICT_PAGE_SIZE_LIMIT)
  private Integer dictPageSizeLimit;

  public static final String SERIALIZED_NAME_ROW_GROUP_LENGTH = "RowGroupLength";
  @SerializedName(SERIALIZED_NAME_ROW_GROUP_LENGTH)
  private Integer rowGroupLength;

  public static final String SERIALIZED_NAME_DATA_PAGE_SIZE = "DataPageSize";
  @SerializedName(SERIALIZED_NAME_DATA_PAGE_SIZE)
  private Integer dataPageSize;

  public static final String SERIALIZED_NAME_PARQUET_VERSION = "ParquetVersion";
  @SerializedName(SERIALIZED_NAME_PARQUET_VERSION)
  private ParquetVersionValue parquetVersion;

  public static final String SERIALIZED_NAME_ENABLE_STATISTICS = "EnableStatistics";
  @SerializedName(SERIALIZED_NAME_ENABLE_STATISTICS)
  private Boolean enableStatistics;

  public static final String SERIALIZED_NAME_INCLUDE_OP_FOR_FULL_LOAD = "IncludeOpForFullLoad";
  @SerializedName(SERIALIZED_NAME_INCLUDE_OP_FOR_FULL_LOAD)
  private Boolean includeOpForFullLoad;

  public static final String SERIALIZED_NAME_CDC_INSERTS_ONLY = "CdcInsertsOnly";
  @SerializedName(SERIALIZED_NAME_CDC_INSERTS_ONLY)
  private Boolean cdcInsertsOnly;

  public static final String SERIALIZED_NAME_TIMESTAMP_COLUMN_NAME = "TimestampColumnName";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_COLUMN_NAME)
  private String timestampColumnName;

  public static final String SERIALIZED_NAME_PARQUET_TIMESTAMP_IN_MILLISECOND = "ParquetTimestampInMillisecond";
  @SerializedName(SERIALIZED_NAME_PARQUET_TIMESTAMP_IN_MILLISECOND)
  private Boolean parquetTimestampInMillisecond;

  public static final String SERIALIZED_NAME_CDC_INSERTS_AND_UPDATES = "CdcInsertsAndUpdates";
  @SerializedName(SERIALIZED_NAME_CDC_INSERTS_AND_UPDATES)
  private Boolean cdcInsertsAndUpdates;

  public static final String SERIALIZED_NAME_DATE_PARTITION_ENABLED = "DatePartitionEnabled";
  @SerializedName(SERIALIZED_NAME_DATE_PARTITION_ENABLED)
  private Boolean datePartitionEnabled;

  public static final String SERIALIZED_NAME_DATE_PARTITION_SEQUENCE = "DatePartitionSequence";
  @SerializedName(SERIALIZED_NAME_DATE_PARTITION_SEQUENCE)
  private DatePartitionSequenceValue datePartitionSequence;

  public static final String SERIALIZED_NAME_DATE_PARTITION_DELIMITER = "DatePartitionDelimiter";
  @SerializedName(SERIALIZED_NAME_DATE_PARTITION_DELIMITER)
  private DatePartitionDelimiterValue datePartitionDelimiter;

  public static final String SERIALIZED_NAME_USE_CSV_NO_SUP_VALUE = "UseCsvNoSupValue";
  @SerializedName(SERIALIZED_NAME_USE_CSV_NO_SUP_VALUE)
  private Boolean useCsvNoSupValue;

  public static final String SERIALIZED_NAME_CSV_NO_SUP_VALUE = "CsvNoSupValue";
  @SerializedName(SERIALIZED_NAME_CSV_NO_SUP_VALUE)
  private String csvNoSupValue;

  public static final String SERIALIZED_NAME_PRESERVE_TRANSACTIONS = "PreserveTransactions";
  @SerializedName(SERIALIZED_NAME_PRESERVE_TRANSACTIONS)
  private Boolean preserveTransactions;

  public static final String SERIALIZED_NAME_CDC_PATH = "CdcPath";
  @SerializedName(SERIALIZED_NAME_CDC_PATH)
  private String cdcPath;

  public static final String SERIALIZED_NAME_USE_TASK_START_TIME_FOR_FULL_LOAD_TIMESTAMP = "UseTaskStartTimeForFullLoadTimestamp";
  @SerializedName(SERIALIZED_NAME_USE_TASK_START_TIME_FOR_FULL_LOAD_TIMESTAMP)
  private Boolean useTaskStartTimeForFullLoadTimestamp;

  public static final String SERIALIZED_NAME_CANNED_ACL_FOR_OBJECTS = "CannedAclForObjects";
  @SerializedName(SERIALIZED_NAME_CANNED_ACL_FOR_OBJECTS)
  private CannedAclForObjectsValue cannedAclForObjects;

  public static final String SERIALIZED_NAME_ADD_COLUMN_NAME = "AddColumnName";
  @SerializedName(SERIALIZED_NAME_ADD_COLUMN_NAME)
  private Boolean addColumnName;

  public static final String SERIALIZED_NAME_CDC_MAX_BATCH_INTERVAL = "CdcMaxBatchInterval";
  @SerializedName(SERIALIZED_NAME_CDC_MAX_BATCH_INTERVAL)
  private Integer cdcMaxBatchInterval;

  public static final String SERIALIZED_NAME_CDC_MIN_FILE_SIZE = "CdcMinFileSize";
  @SerializedName(SERIALIZED_NAME_CDC_MIN_FILE_SIZE)
  private Integer cdcMinFileSize;

  public static final String SERIALIZED_NAME_CSV_NULL_VALUE = "CsvNullValue";
  @SerializedName(SERIALIZED_NAME_CSV_NULL_VALUE)
  private String csvNullValue;

  public static final String SERIALIZED_NAME_IGNORE_HEADER_ROWS = "IgnoreHeaderRows";
  @SerializedName(SERIALIZED_NAME_IGNORE_HEADER_ROWS)
  private Integer ignoreHeaderRows;

  public static final String SERIALIZED_NAME_MAX_FILE_SIZE = "MaxFileSize";
  @SerializedName(SERIALIZED_NAME_MAX_FILE_SIZE)
  private Integer maxFileSize;

  public static final String SERIALIZED_NAME_RFC4180 = "Rfc4180";
  @SerializedName(SERIALIZED_NAME_RFC4180)
  private Boolean rfc4180;

  public static final String SERIALIZED_NAME_DATE_PARTITION_TIMEZONE = "DatePartitionTimezone";
  @SerializedName(SERIALIZED_NAME_DATE_PARTITION_TIMEZONE)
  private String datePartitionTimezone;

  public static final String SERIALIZED_NAME_ADD_TRAILING_PADDING_CHARACTER = "AddTrailingPaddingCharacter";
  @SerializedName(SERIALIZED_NAME_ADD_TRAILING_PADDING_CHARACTER)
  private Boolean addTrailingPaddingCharacter;

  public static final String SERIALIZED_NAME_EXPECTED_BUCKET_OWNER = "ExpectedBucketOwner";
  @SerializedName(SERIALIZED_NAME_EXPECTED_BUCKET_OWNER)
  private String expectedBucketOwner;

  public static final String SERIALIZED_NAME_GLUE_CATALOG_GENERATION = "GlueCatalogGeneration";
  @SerializedName(SERIALIZED_NAME_GLUE_CATALOG_GENERATION)
  private Boolean glueCatalogGeneration;

  public CreateEndpointMessageS3Settings() {
  }

  public CreateEndpointMessageS3Settings serviceAccessRoleArn(String serviceAccessRoleArn) {
    this.serviceAccessRoleArn = serviceAccessRoleArn;
    return this;
  }

  /**
   * Get serviceAccessRoleArn
   * @return serviceAccessRoleArn
   */
  @javax.annotation.Nullable
  public String getServiceAccessRoleArn() {
    return serviceAccessRoleArn;
  }

  public void setServiceAccessRoleArn(String serviceAccessRoleArn) {
    this.serviceAccessRoleArn = serviceAccessRoleArn;
  }


  public CreateEndpointMessageS3Settings externalTableDefinition(String externalTableDefinition) {
    this.externalTableDefinition = externalTableDefinition;
    return this;
  }

  /**
   * Get externalTableDefinition
   * @return externalTableDefinition
   */
  @javax.annotation.Nullable
  public String getExternalTableDefinition() {
    return externalTableDefinition;
  }

  public void setExternalTableDefinition(String externalTableDefinition) {
    this.externalTableDefinition = externalTableDefinition;
  }


  public CreateEndpointMessageS3Settings csvRowDelimiter(String csvRowDelimiter) {
    this.csvRowDelimiter = csvRowDelimiter;
    return this;
  }

  /**
   * Get csvRowDelimiter
   * @return csvRowDelimiter
   */
  @javax.annotation.Nullable
  public String getCsvRowDelimiter() {
    return csvRowDelimiter;
  }

  public void setCsvRowDelimiter(String csvRowDelimiter) {
    this.csvRowDelimiter = csvRowDelimiter;
  }


  public CreateEndpointMessageS3Settings csvDelimiter(String csvDelimiter) {
    this.csvDelimiter = csvDelimiter;
    return this;
  }

  /**
   * Get csvDelimiter
   * @return csvDelimiter
   */
  @javax.annotation.Nullable
  public String getCsvDelimiter() {
    return csvDelimiter;
  }

  public void setCsvDelimiter(String csvDelimiter) {
    this.csvDelimiter = csvDelimiter;
  }


  public CreateEndpointMessageS3Settings bucketFolder(String bucketFolder) {
    this.bucketFolder = bucketFolder;
    return this;
  }

  /**
   * Get bucketFolder
   * @return bucketFolder
   */
  @javax.annotation.Nullable
  public String getBucketFolder() {
    return bucketFolder;
  }

  public void setBucketFolder(String bucketFolder) {
    this.bucketFolder = bucketFolder;
  }


  public CreateEndpointMessageS3Settings bucketName(String bucketName) {
    this.bucketName = bucketName;
    return this;
  }

  /**
   * Get bucketName
   * @return bucketName
   */
  @javax.annotation.Nullable
  public String getBucketName() {
    return bucketName;
  }

  public void setBucketName(String bucketName) {
    this.bucketName = bucketName;
  }


  public CreateEndpointMessageS3Settings compressionType(CompressionTypeValue compressionType) {
    this.compressionType = compressionType;
    return this;
  }

  /**
   * Get compressionType
   * @return compressionType
   */
  @javax.annotation.Nullable
  public CompressionTypeValue getCompressionType() {
    return compressionType;
  }

  public void setCompressionType(CompressionTypeValue compressionType) {
    this.compressionType = compressionType;
  }


  public CreateEndpointMessageS3Settings encryptionMode(EncryptionModeValue encryptionMode) {
    this.encryptionMode = encryptionMode;
    return this;
  }

  /**
   * Get encryptionMode
   * @return encryptionMode
   */
  @javax.annotation.Nullable
  public EncryptionModeValue getEncryptionMode() {
    return encryptionMode;
  }

  public void setEncryptionMode(EncryptionModeValue encryptionMode) {
    this.encryptionMode = encryptionMode;
  }


  public CreateEndpointMessageS3Settings serverSideEncryptionKmsKeyId(String serverSideEncryptionKmsKeyId) {
    this.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
    return this;
  }

  /**
   * Get serverSideEncryptionKmsKeyId
   * @return serverSideEncryptionKmsKeyId
   */
  @javax.annotation.Nullable
  public String getServerSideEncryptionKmsKeyId() {
    return serverSideEncryptionKmsKeyId;
  }

  public void setServerSideEncryptionKmsKeyId(String serverSideEncryptionKmsKeyId) {
    this.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
  }


  public CreateEndpointMessageS3Settings dataFormat(DataFormatValue dataFormat) {
    this.dataFormat = dataFormat;
    return this;
  }

  /**
   * Get dataFormat
   * @return dataFormat
   */
  @javax.annotation.Nullable
  public DataFormatValue getDataFormat() {
    return dataFormat;
  }

  public void setDataFormat(DataFormatValue dataFormat) {
    this.dataFormat = dataFormat;
  }


  public CreateEndpointMessageS3Settings encodingType(EncodingTypeValue encodingType) {
    this.encodingType = encodingType;
    return this;
  }

  /**
   * Get encodingType
   * @return encodingType
   */
  @javax.annotation.Nullable
  public EncodingTypeValue getEncodingType() {
    return encodingType;
  }

  public void setEncodingType(EncodingTypeValue encodingType) {
    this.encodingType = encodingType;
  }


  public CreateEndpointMessageS3Settings dictPageSizeLimit(Integer dictPageSizeLimit) {
    this.dictPageSizeLimit = dictPageSizeLimit;
    return this;
  }

  /**
   * Get dictPageSizeLimit
   * @return dictPageSizeLimit
   */
  @javax.annotation.Nullable
  public Integer getDictPageSizeLimit() {
    return dictPageSizeLimit;
  }

  public void setDictPageSizeLimit(Integer dictPageSizeLimit) {
    this.dictPageSizeLimit = dictPageSizeLimit;
  }


  public CreateEndpointMessageS3Settings rowGroupLength(Integer rowGroupLength) {
    this.rowGroupLength = rowGroupLength;
    return this;
  }

  /**
   * Get rowGroupLength
   * @return rowGroupLength
   */
  @javax.annotation.Nullable
  public Integer getRowGroupLength() {
    return rowGroupLength;
  }

  public void setRowGroupLength(Integer rowGroupLength) {
    this.rowGroupLength = rowGroupLength;
  }


  public CreateEndpointMessageS3Settings dataPageSize(Integer dataPageSize) {
    this.dataPageSize = dataPageSize;
    return this;
  }

  /**
   * Get dataPageSize
   * @return dataPageSize
   */
  @javax.annotation.Nullable
  public Integer getDataPageSize() {
    return dataPageSize;
  }

  public void setDataPageSize(Integer dataPageSize) {
    this.dataPageSize = dataPageSize;
  }


  public CreateEndpointMessageS3Settings parquetVersion(ParquetVersionValue parquetVersion) {
    this.parquetVersion = parquetVersion;
    return this;
  }

  /**
   * Get parquetVersion
   * @return parquetVersion
   */
  @javax.annotation.Nullable
  public ParquetVersionValue getParquetVersion() {
    return parquetVersion;
  }

  public void setParquetVersion(ParquetVersionValue parquetVersion) {
    this.parquetVersion = parquetVersion;
  }


  public CreateEndpointMessageS3Settings enableStatistics(Boolean enableStatistics) {
    this.enableStatistics = enableStatistics;
    return this;
  }

  /**
   * Get enableStatistics
   * @return enableStatistics
   */
  @javax.annotation.Nullable
  public Boolean getEnableStatistics() {
    return enableStatistics;
  }

  public void setEnableStatistics(Boolean enableStatistics) {
    this.enableStatistics = enableStatistics;
  }


  public CreateEndpointMessageS3Settings includeOpForFullLoad(Boolean includeOpForFullLoad) {
    this.includeOpForFullLoad = includeOpForFullLoad;
    return this;
  }

  /**
   * Get includeOpForFullLoad
   * @return includeOpForFullLoad
   */
  @javax.annotation.Nullable
  public Boolean getIncludeOpForFullLoad() {
    return includeOpForFullLoad;
  }

  public void setIncludeOpForFullLoad(Boolean includeOpForFullLoad) {
    this.includeOpForFullLoad = includeOpForFullLoad;
  }


  public CreateEndpointMessageS3Settings cdcInsertsOnly(Boolean cdcInsertsOnly) {
    this.cdcInsertsOnly = cdcInsertsOnly;
    return this;
  }

  /**
   * Get cdcInsertsOnly
   * @return cdcInsertsOnly
   */
  @javax.annotation.Nullable
  public Boolean getCdcInsertsOnly() {
    return cdcInsertsOnly;
  }

  public void setCdcInsertsOnly(Boolean cdcInsertsOnly) {
    this.cdcInsertsOnly = cdcInsertsOnly;
  }


  public CreateEndpointMessageS3Settings timestampColumnName(String timestampColumnName) {
    this.timestampColumnName = timestampColumnName;
    return this;
  }

  /**
   * Get timestampColumnName
   * @return timestampColumnName
   */
  @javax.annotation.Nullable
  public String getTimestampColumnName() {
    return timestampColumnName;
  }

  public void setTimestampColumnName(String timestampColumnName) {
    this.timestampColumnName = timestampColumnName;
  }


  public CreateEndpointMessageS3Settings parquetTimestampInMillisecond(Boolean parquetTimestampInMillisecond) {
    this.parquetTimestampInMillisecond = parquetTimestampInMillisecond;
    return this;
  }

  /**
   * Get parquetTimestampInMillisecond
   * @return parquetTimestampInMillisecond
   */
  @javax.annotation.Nullable
  public Boolean getParquetTimestampInMillisecond() {
    return parquetTimestampInMillisecond;
  }

  public void setParquetTimestampInMillisecond(Boolean parquetTimestampInMillisecond) {
    this.parquetTimestampInMillisecond = parquetTimestampInMillisecond;
  }


  public CreateEndpointMessageS3Settings cdcInsertsAndUpdates(Boolean cdcInsertsAndUpdates) {
    this.cdcInsertsAndUpdates = cdcInsertsAndUpdates;
    return this;
  }

  /**
   * Get cdcInsertsAndUpdates
   * @return cdcInsertsAndUpdates
   */
  @javax.annotation.Nullable
  public Boolean getCdcInsertsAndUpdates() {
    return cdcInsertsAndUpdates;
  }

  public void setCdcInsertsAndUpdates(Boolean cdcInsertsAndUpdates) {
    this.cdcInsertsAndUpdates = cdcInsertsAndUpdates;
  }


  public CreateEndpointMessageS3Settings datePartitionEnabled(Boolean datePartitionEnabled) {
    this.datePartitionEnabled = datePartitionEnabled;
    return this;
  }

  /**
   * Get datePartitionEnabled
   * @return datePartitionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDatePartitionEnabled() {
    return datePartitionEnabled;
  }

  public void setDatePartitionEnabled(Boolean datePartitionEnabled) {
    this.datePartitionEnabled = datePartitionEnabled;
  }


  public CreateEndpointMessageS3Settings datePartitionSequence(DatePartitionSequenceValue datePartitionSequence) {
    this.datePartitionSequence = datePartitionSequence;
    return this;
  }

  /**
   * Get datePartitionSequence
   * @return datePartitionSequence
   */
  @javax.annotation.Nullable
  public DatePartitionSequenceValue getDatePartitionSequence() {
    return datePartitionSequence;
  }

  public void setDatePartitionSequence(DatePartitionSequenceValue datePartitionSequence) {
    this.datePartitionSequence = datePartitionSequence;
  }


  public CreateEndpointMessageS3Settings datePartitionDelimiter(DatePartitionDelimiterValue datePartitionDelimiter) {
    this.datePartitionDelimiter = datePartitionDelimiter;
    return this;
  }

  /**
   * Get datePartitionDelimiter
   * @return datePartitionDelimiter
   */
  @javax.annotation.Nullable
  public DatePartitionDelimiterValue getDatePartitionDelimiter() {
    return datePartitionDelimiter;
  }

  public void setDatePartitionDelimiter(DatePartitionDelimiterValue datePartitionDelimiter) {
    this.datePartitionDelimiter = datePartitionDelimiter;
  }


  public CreateEndpointMessageS3Settings useCsvNoSupValue(Boolean useCsvNoSupValue) {
    this.useCsvNoSupValue = useCsvNoSupValue;
    return this;
  }

  /**
   * Get useCsvNoSupValue
   * @return useCsvNoSupValue
   */
  @javax.annotation.Nullable
  public Boolean getUseCsvNoSupValue() {
    return useCsvNoSupValue;
  }

  public void setUseCsvNoSupValue(Boolean useCsvNoSupValue) {
    this.useCsvNoSupValue = useCsvNoSupValue;
  }


  public CreateEndpointMessageS3Settings csvNoSupValue(String csvNoSupValue) {
    this.csvNoSupValue = csvNoSupValue;
    return this;
  }

  /**
   * Get csvNoSupValue
   * @return csvNoSupValue
   */
  @javax.annotation.Nullable
  public String getCsvNoSupValue() {
    return csvNoSupValue;
  }

  public void setCsvNoSupValue(String csvNoSupValue) {
    this.csvNoSupValue = csvNoSupValue;
  }


  public CreateEndpointMessageS3Settings preserveTransactions(Boolean preserveTransactions) {
    this.preserveTransactions = preserveTransactions;
    return this;
  }

  /**
   * Get preserveTransactions
   * @return preserveTransactions
   */
  @javax.annotation.Nullable
  public Boolean getPreserveTransactions() {
    return preserveTransactions;
  }

  public void setPreserveTransactions(Boolean preserveTransactions) {
    this.preserveTransactions = preserveTransactions;
  }


  public CreateEndpointMessageS3Settings cdcPath(String cdcPath) {
    this.cdcPath = cdcPath;
    return this;
  }

  /**
   * Get cdcPath
   * @return cdcPath
   */
  @javax.annotation.Nullable
  public String getCdcPath() {
    return cdcPath;
  }

  public void setCdcPath(String cdcPath) {
    this.cdcPath = cdcPath;
  }


  public CreateEndpointMessageS3Settings useTaskStartTimeForFullLoadTimestamp(Boolean useTaskStartTimeForFullLoadTimestamp) {
    this.useTaskStartTimeForFullLoadTimestamp = useTaskStartTimeForFullLoadTimestamp;
    return this;
  }

  /**
   * Get useTaskStartTimeForFullLoadTimestamp
   * @return useTaskStartTimeForFullLoadTimestamp
   */
  @javax.annotation.Nullable
  public Boolean getUseTaskStartTimeForFullLoadTimestamp() {
    return useTaskStartTimeForFullLoadTimestamp;
  }

  public void setUseTaskStartTimeForFullLoadTimestamp(Boolean useTaskStartTimeForFullLoadTimestamp) {
    this.useTaskStartTimeForFullLoadTimestamp = useTaskStartTimeForFullLoadTimestamp;
  }


  public CreateEndpointMessageS3Settings cannedAclForObjects(CannedAclForObjectsValue cannedAclForObjects) {
    this.cannedAclForObjects = cannedAclForObjects;
    return this;
  }

  /**
   * Get cannedAclForObjects
   * @return cannedAclForObjects
   */
  @javax.annotation.Nullable
  public CannedAclForObjectsValue getCannedAclForObjects() {
    return cannedAclForObjects;
  }

  public void setCannedAclForObjects(CannedAclForObjectsValue cannedAclForObjects) {
    this.cannedAclForObjects = cannedAclForObjects;
  }


  public CreateEndpointMessageS3Settings addColumnName(Boolean addColumnName) {
    this.addColumnName = addColumnName;
    return this;
  }

  /**
   * Get addColumnName
   * @return addColumnName
   */
  @javax.annotation.Nullable
  public Boolean getAddColumnName() {
    return addColumnName;
  }

  public void setAddColumnName(Boolean addColumnName) {
    this.addColumnName = addColumnName;
  }


  public CreateEndpointMessageS3Settings cdcMaxBatchInterval(Integer cdcMaxBatchInterval) {
    this.cdcMaxBatchInterval = cdcMaxBatchInterval;
    return this;
  }

  /**
   * Get cdcMaxBatchInterval
   * @return cdcMaxBatchInterval
   */
  @javax.annotation.Nullable
  public Integer getCdcMaxBatchInterval() {
    return cdcMaxBatchInterval;
  }

  public void setCdcMaxBatchInterval(Integer cdcMaxBatchInterval) {
    this.cdcMaxBatchInterval = cdcMaxBatchInterval;
  }


  public CreateEndpointMessageS3Settings cdcMinFileSize(Integer cdcMinFileSize) {
    this.cdcMinFileSize = cdcMinFileSize;
    return this;
  }

  /**
   * Get cdcMinFileSize
   * @return cdcMinFileSize
   */
  @javax.annotation.Nullable
  public Integer getCdcMinFileSize() {
    return cdcMinFileSize;
  }

  public void setCdcMinFileSize(Integer cdcMinFileSize) {
    this.cdcMinFileSize = cdcMinFileSize;
  }


  public CreateEndpointMessageS3Settings csvNullValue(String csvNullValue) {
    this.csvNullValue = csvNullValue;
    return this;
  }

  /**
   * Get csvNullValue
   * @return csvNullValue
   */
  @javax.annotation.Nullable
  public String getCsvNullValue() {
    return csvNullValue;
  }

  public void setCsvNullValue(String csvNullValue) {
    this.csvNullValue = csvNullValue;
  }


  public CreateEndpointMessageS3Settings ignoreHeaderRows(Integer ignoreHeaderRows) {
    this.ignoreHeaderRows = ignoreHeaderRows;
    return this;
  }

  /**
   * Get ignoreHeaderRows
   * @return ignoreHeaderRows
   */
  @javax.annotation.Nullable
  public Integer getIgnoreHeaderRows() {
    return ignoreHeaderRows;
  }

  public void setIgnoreHeaderRows(Integer ignoreHeaderRows) {
    this.ignoreHeaderRows = ignoreHeaderRows;
  }


  public CreateEndpointMessageS3Settings maxFileSize(Integer maxFileSize) {
    this.maxFileSize = maxFileSize;
    return this;
  }

  /**
   * Get maxFileSize
   * @return maxFileSize
   */
  @javax.annotation.Nullable
  public Integer getMaxFileSize() {
    return maxFileSize;
  }

  public void setMaxFileSize(Integer maxFileSize) {
    this.maxFileSize = maxFileSize;
  }


  public CreateEndpointMessageS3Settings rfc4180(Boolean rfc4180) {
    this.rfc4180 = rfc4180;
    return this;
  }

  /**
   * Get rfc4180
   * @return rfc4180
   */
  @javax.annotation.Nullable
  public Boolean getRfc4180() {
    return rfc4180;
  }

  public void setRfc4180(Boolean rfc4180) {
    this.rfc4180 = rfc4180;
  }


  public CreateEndpointMessageS3Settings datePartitionTimezone(String datePartitionTimezone) {
    this.datePartitionTimezone = datePartitionTimezone;
    return this;
  }

  /**
   * Get datePartitionTimezone
   * @return datePartitionTimezone
   */
  @javax.annotation.Nullable
  public String getDatePartitionTimezone() {
    return datePartitionTimezone;
  }

  public void setDatePartitionTimezone(String datePartitionTimezone) {
    this.datePartitionTimezone = datePartitionTimezone;
  }


  public CreateEndpointMessageS3Settings addTrailingPaddingCharacter(Boolean addTrailingPaddingCharacter) {
    this.addTrailingPaddingCharacter = addTrailingPaddingCharacter;
    return this;
  }

  /**
   * Get addTrailingPaddingCharacter
   * @return addTrailingPaddingCharacter
   */
  @javax.annotation.Nullable
  public Boolean getAddTrailingPaddingCharacter() {
    return addTrailingPaddingCharacter;
  }

  public void setAddTrailingPaddingCharacter(Boolean addTrailingPaddingCharacter) {
    this.addTrailingPaddingCharacter = addTrailingPaddingCharacter;
  }


  public CreateEndpointMessageS3Settings expectedBucketOwner(String expectedBucketOwner) {
    this.expectedBucketOwner = expectedBucketOwner;
    return this;
  }

  /**
   * Get expectedBucketOwner
   * @return expectedBucketOwner
   */
  @javax.annotation.Nullable
  public String getExpectedBucketOwner() {
    return expectedBucketOwner;
  }

  public void setExpectedBucketOwner(String expectedBucketOwner) {
    this.expectedBucketOwner = expectedBucketOwner;
  }


  public CreateEndpointMessageS3Settings glueCatalogGeneration(Boolean glueCatalogGeneration) {
    this.glueCatalogGeneration = glueCatalogGeneration;
    return this;
  }

  /**
   * Get glueCatalogGeneration
   * @return glueCatalogGeneration
   */
  @javax.annotation.Nullable
  public Boolean getGlueCatalogGeneration() {
    return glueCatalogGeneration;
  }

  public void setGlueCatalogGeneration(Boolean glueCatalogGeneration) {
    this.glueCatalogGeneration = glueCatalogGeneration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEndpointMessageS3Settings createEndpointMessageS3Settings = (CreateEndpointMessageS3Settings) o;
    return Objects.equals(this.serviceAccessRoleArn, createEndpointMessageS3Settings.serviceAccessRoleArn) &&
        Objects.equals(this.externalTableDefinition, createEndpointMessageS3Settings.externalTableDefinition) &&
        Objects.equals(this.csvRowDelimiter, createEndpointMessageS3Settings.csvRowDelimiter) &&
        Objects.equals(this.csvDelimiter, createEndpointMessageS3Settings.csvDelimiter) &&
        Objects.equals(this.bucketFolder, createEndpointMessageS3Settings.bucketFolder) &&
        Objects.equals(this.bucketName, createEndpointMessageS3Settings.bucketName) &&
        Objects.equals(this.compressionType, createEndpointMessageS3Settings.compressionType) &&
        Objects.equals(this.encryptionMode, createEndpointMessageS3Settings.encryptionMode) &&
        Objects.equals(this.serverSideEncryptionKmsKeyId, createEndpointMessageS3Settings.serverSideEncryptionKmsKeyId) &&
        Objects.equals(this.dataFormat, createEndpointMessageS3Settings.dataFormat) &&
        Objects.equals(this.encodingType, createEndpointMessageS3Settings.encodingType) &&
        Objects.equals(this.dictPageSizeLimit, createEndpointMessageS3Settings.dictPageSizeLimit) &&
        Objects.equals(this.rowGroupLength, createEndpointMessageS3Settings.rowGroupLength) &&
        Objects.equals(this.dataPageSize, createEndpointMessageS3Settings.dataPageSize) &&
        Objects.equals(this.parquetVersion, createEndpointMessageS3Settings.parquetVersion) &&
        Objects.equals(this.enableStatistics, createEndpointMessageS3Settings.enableStatistics) &&
        Objects.equals(this.includeOpForFullLoad, createEndpointMessageS3Settings.includeOpForFullLoad) &&
        Objects.equals(this.cdcInsertsOnly, createEndpointMessageS3Settings.cdcInsertsOnly) &&
        Objects.equals(this.timestampColumnName, createEndpointMessageS3Settings.timestampColumnName) &&
        Objects.equals(this.parquetTimestampInMillisecond, createEndpointMessageS3Settings.parquetTimestampInMillisecond) &&
        Objects.equals(this.cdcInsertsAndUpdates, createEndpointMessageS3Settings.cdcInsertsAndUpdates) &&
        Objects.equals(this.datePartitionEnabled, createEndpointMessageS3Settings.datePartitionEnabled) &&
        Objects.equals(this.datePartitionSequence, createEndpointMessageS3Settings.datePartitionSequence) &&
        Objects.equals(this.datePartitionDelimiter, createEndpointMessageS3Settings.datePartitionDelimiter) &&
        Objects.equals(this.useCsvNoSupValue, createEndpointMessageS3Settings.useCsvNoSupValue) &&
        Objects.equals(this.csvNoSupValue, createEndpointMessageS3Settings.csvNoSupValue) &&
        Objects.equals(this.preserveTransactions, createEndpointMessageS3Settings.preserveTransactions) &&
        Objects.equals(this.cdcPath, createEndpointMessageS3Settings.cdcPath) &&
        Objects.equals(this.useTaskStartTimeForFullLoadTimestamp, createEndpointMessageS3Settings.useTaskStartTimeForFullLoadTimestamp) &&
        Objects.equals(this.cannedAclForObjects, createEndpointMessageS3Settings.cannedAclForObjects) &&
        Objects.equals(this.addColumnName, createEndpointMessageS3Settings.addColumnName) &&
        Objects.equals(this.cdcMaxBatchInterval, createEndpointMessageS3Settings.cdcMaxBatchInterval) &&
        Objects.equals(this.cdcMinFileSize, createEndpointMessageS3Settings.cdcMinFileSize) &&
        Objects.equals(this.csvNullValue, createEndpointMessageS3Settings.csvNullValue) &&
        Objects.equals(this.ignoreHeaderRows, createEndpointMessageS3Settings.ignoreHeaderRows) &&
        Objects.equals(this.maxFileSize, createEndpointMessageS3Settings.maxFileSize) &&
        Objects.equals(this.rfc4180, createEndpointMessageS3Settings.rfc4180) &&
        Objects.equals(this.datePartitionTimezone, createEndpointMessageS3Settings.datePartitionTimezone) &&
        Objects.equals(this.addTrailingPaddingCharacter, createEndpointMessageS3Settings.addTrailingPaddingCharacter) &&
        Objects.equals(this.expectedBucketOwner, createEndpointMessageS3Settings.expectedBucketOwner) &&
        Objects.equals(this.glueCatalogGeneration, createEndpointMessageS3Settings.glueCatalogGeneration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceAccessRoleArn, externalTableDefinition, csvRowDelimiter, csvDelimiter, bucketFolder, bucketName, compressionType, encryptionMode, serverSideEncryptionKmsKeyId, dataFormat, encodingType, dictPageSizeLimit, rowGroupLength, dataPageSize, parquetVersion, enableStatistics, includeOpForFullLoad, cdcInsertsOnly, timestampColumnName, parquetTimestampInMillisecond, cdcInsertsAndUpdates, datePartitionEnabled, datePartitionSequence, datePartitionDelimiter, useCsvNoSupValue, csvNoSupValue, preserveTransactions, cdcPath, useTaskStartTimeForFullLoadTimestamp, cannedAclForObjects, addColumnName, cdcMaxBatchInterval, cdcMinFileSize, csvNullValue, ignoreHeaderRows, maxFileSize, rfc4180, datePartitionTimezone, addTrailingPaddingCharacter, expectedBucketOwner, glueCatalogGeneration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEndpointMessageS3Settings {\n");
    sb.append("    serviceAccessRoleArn: ").append(toIndentedString(serviceAccessRoleArn)).append("\n");
    sb.append("    externalTableDefinition: ").append(toIndentedString(externalTableDefinition)).append("\n");
    sb.append("    csvRowDelimiter: ").append(toIndentedString(csvRowDelimiter)).append("\n");
    sb.append("    csvDelimiter: ").append(toIndentedString(csvDelimiter)).append("\n");
    sb.append("    bucketFolder: ").append(toIndentedString(bucketFolder)).append("\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    compressionType: ").append(toIndentedString(compressionType)).append("\n");
    sb.append("    encryptionMode: ").append(toIndentedString(encryptionMode)).append("\n");
    sb.append("    serverSideEncryptionKmsKeyId: ").append(toIndentedString(serverSideEncryptionKmsKeyId)).append("\n");
    sb.append("    dataFormat: ").append(toIndentedString(dataFormat)).append("\n");
    sb.append("    encodingType: ").append(toIndentedString(encodingType)).append("\n");
    sb.append("    dictPageSizeLimit: ").append(toIndentedString(dictPageSizeLimit)).append("\n");
    sb.append("    rowGroupLength: ").append(toIndentedString(rowGroupLength)).append("\n");
    sb.append("    dataPageSize: ").append(toIndentedString(dataPageSize)).append("\n");
    sb.append("    parquetVersion: ").append(toIndentedString(parquetVersion)).append("\n");
    sb.append("    enableStatistics: ").append(toIndentedString(enableStatistics)).append("\n");
    sb.append("    includeOpForFullLoad: ").append(toIndentedString(includeOpForFullLoad)).append("\n");
    sb.append("    cdcInsertsOnly: ").append(toIndentedString(cdcInsertsOnly)).append("\n");
    sb.append("    timestampColumnName: ").append(toIndentedString(timestampColumnName)).append("\n");
    sb.append("    parquetTimestampInMillisecond: ").append(toIndentedString(parquetTimestampInMillisecond)).append("\n");
    sb.append("    cdcInsertsAndUpdates: ").append(toIndentedString(cdcInsertsAndUpdates)).append("\n");
    sb.append("    datePartitionEnabled: ").append(toIndentedString(datePartitionEnabled)).append("\n");
    sb.append("    datePartitionSequence: ").append(toIndentedString(datePartitionSequence)).append("\n");
    sb.append("    datePartitionDelimiter: ").append(toIndentedString(datePartitionDelimiter)).append("\n");
    sb.append("    useCsvNoSupValue: ").append(toIndentedString(useCsvNoSupValue)).append("\n");
    sb.append("    csvNoSupValue: ").append(toIndentedString(csvNoSupValue)).append("\n");
    sb.append("    preserveTransactions: ").append(toIndentedString(preserveTransactions)).append("\n");
    sb.append("    cdcPath: ").append(toIndentedString(cdcPath)).append("\n");
    sb.append("    useTaskStartTimeForFullLoadTimestamp: ").append(toIndentedString(useTaskStartTimeForFullLoadTimestamp)).append("\n");
    sb.append("    cannedAclForObjects: ").append(toIndentedString(cannedAclForObjects)).append("\n");
    sb.append("    addColumnName: ").append(toIndentedString(addColumnName)).append("\n");
    sb.append("    cdcMaxBatchInterval: ").append(toIndentedString(cdcMaxBatchInterval)).append("\n");
    sb.append("    cdcMinFileSize: ").append(toIndentedString(cdcMinFileSize)).append("\n");
    sb.append("    csvNullValue: ").append(toIndentedString(csvNullValue)).append("\n");
    sb.append("    ignoreHeaderRows: ").append(toIndentedString(ignoreHeaderRows)).append("\n");
    sb.append("    maxFileSize: ").append(toIndentedString(maxFileSize)).append("\n");
    sb.append("    rfc4180: ").append(toIndentedString(rfc4180)).append("\n");
    sb.append("    datePartitionTimezone: ").append(toIndentedString(datePartitionTimezone)).append("\n");
    sb.append("    addTrailingPaddingCharacter: ").append(toIndentedString(addTrailingPaddingCharacter)).append("\n");
    sb.append("    expectedBucketOwner: ").append(toIndentedString(expectedBucketOwner)).append("\n");
    sb.append("    glueCatalogGeneration: ").append(toIndentedString(glueCatalogGeneration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ServiceAccessRoleArn");
    openapiFields.add("ExternalTableDefinition");
    openapiFields.add("CsvRowDelimiter");
    openapiFields.add("CsvDelimiter");
    openapiFields.add("BucketFolder");
    openapiFields.add("BucketName");
    openapiFields.add("CompressionType");
    openapiFields.add("EncryptionMode");
    openapiFields.add("ServerSideEncryptionKmsKeyId");
    openapiFields.add("DataFormat");
    openapiFields.add("EncodingType");
    openapiFields.add("DictPageSizeLimit");
    openapiFields.add("RowGroupLength");
    openapiFields.add("DataPageSize");
    openapiFields.add("ParquetVersion");
    openapiFields.add("EnableStatistics");
    openapiFields.add("IncludeOpForFullLoad");
    openapiFields.add("CdcInsertsOnly");
    openapiFields.add("TimestampColumnName");
    openapiFields.add("ParquetTimestampInMillisecond");
    openapiFields.add("CdcInsertsAndUpdates");
    openapiFields.add("DatePartitionEnabled");
    openapiFields.add("DatePartitionSequence");
    openapiFields.add("DatePartitionDelimiter");
    openapiFields.add("UseCsvNoSupValue");
    openapiFields.add("CsvNoSupValue");
    openapiFields.add("PreserveTransactions");
    openapiFields.add("CdcPath");
    openapiFields.add("UseTaskStartTimeForFullLoadTimestamp");
    openapiFields.add("CannedAclForObjects");
    openapiFields.add("AddColumnName");
    openapiFields.add("CdcMaxBatchInterval");
    openapiFields.add("CdcMinFileSize");
    openapiFields.add("CsvNullValue");
    openapiFields.add("IgnoreHeaderRows");
    openapiFields.add("MaxFileSize");
    openapiFields.add("Rfc4180");
    openapiFields.add("DatePartitionTimezone");
    openapiFields.add("AddTrailingPaddingCharacter");
    openapiFields.add("ExpectedBucketOwner");
    openapiFields.add("GlueCatalogGeneration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEndpointMessageS3Settings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateEndpointMessageS3Settings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEndpointMessageS3Settings is not found in the empty JSON string", CreateEndpointMessageS3Settings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEndpointMessageS3Settings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEndpointMessageS3Settings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ServiceAccessRoleArn`
      if (jsonObj.get("ServiceAccessRoleArn") != null && !jsonObj.get("ServiceAccessRoleArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServiceAccessRoleArn"));
      }
      // validate the optional field `ExternalTableDefinition`
      if (jsonObj.get("ExternalTableDefinition") != null && !jsonObj.get("ExternalTableDefinition").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExternalTableDefinition"));
      }
      // validate the optional field `CsvRowDelimiter`
      if (jsonObj.get("CsvRowDelimiter") != null && !jsonObj.get("CsvRowDelimiter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CsvRowDelimiter"));
      }
      // validate the optional field `CsvDelimiter`
      if (jsonObj.get("CsvDelimiter") != null && !jsonObj.get("CsvDelimiter").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CsvDelimiter"));
      }
      // validate the optional field `BucketFolder`
      if (jsonObj.get("BucketFolder") != null && !jsonObj.get("BucketFolder").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BucketFolder"));
      }
      // validate the optional field `BucketName`
      if (jsonObj.get("BucketName") != null && !jsonObj.get("BucketName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BucketName"));
      }
      // validate the optional field `CompressionType`
      if (jsonObj.get("CompressionType") != null && !jsonObj.get("CompressionType").isJsonNull()) {
        CompressionTypeValue.validateJsonElement(jsonObj.get("CompressionType"));
      }
      // validate the optional field `EncryptionMode`
      if (jsonObj.get("EncryptionMode") != null && !jsonObj.get("EncryptionMode").isJsonNull()) {
        EncryptionModeValue.validateJsonElement(jsonObj.get("EncryptionMode"));
      }
      // validate the optional field `ServerSideEncryptionKmsKeyId`
      if (jsonObj.get("ServerSideEncryptionKmsKeyId") != null && !jsonObj.get("ServerSideEncryptionKmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ServerSideEncryptionKmsKeyId"));
      }
      // validate the optional field `DataFormat`
      if (jsonObj.get("DataFormat") != null && !jsonObj.get("DataFormat").isJsonNull()) {
        DataFormatValue.validateJsonElement(jsonObj.get("DataFormat"));
      }
      // validate the optional field `EncodingType`
      if (jsonObj.get("EncodingType") != null && !jsonObj.get("EncodingType").isJsonNull()) {
        EncodingTypeValue.validateJsonElement(jsonObj.get("EncodingType"));
      }
      // validate the optional field `DictPageSizeLimit`
      if (jsonObj.get("DictPageSizeLimit") != null && !jsonObj.get("DictPageSizeLimit").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DictPageSizeLimit"));
      }
      // validate the optional field `RowGroupLength`
      if (jsonObj.get("RowGroupLength") != null && !jsonObj.get("RowGroupLength").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("RowGroupLength"));
      }
      // validate the optional field `DataPageSize`
      if (jsonObj.get("DataPageSize") != null && !jsonObj.get("DataPageSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DataPageSize"));
      }
      // validate the optional field `ParquetVersion`
      if (jsonObj.get("ParquetVersion") != null && !jsonObj.get("ParquetVersion").isJsonNull()) {
        ParquetVersionValue.validateJsonElement(jsonObj.get("ParquetVersion"));
      }
      // validate the optional field `EnableStatistics`
      if (jsonObj.get("EnableStatistics") != null && !jsonObj.get("EnableStatistics").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableStatistics"));
      }
      // validate the optional field `IncludeOpForFullLoad`
      if (jsonObj.get("IncludeOpForFullLoad") != null && !jsonObj.get("IncludeOpForFullLoad").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IncludeOpForFullLoad"));
      }
      // validate the optional field `CdcInsertsOnly`
      if (jsonObj.get("CdcInsertsOnly") != null && !jsonObj.get("CdcInsertsOnly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CdcInsertsOnly"));
      }
      // validate the optional field `TimestampColumnName`
      if (jsonObj.get("TimestampColumnName") != null && !jsonObj.get("TimestampColumnName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TimestampColumnName"));
      }
      // validate the optional field `ParquetTimestampInMillisecond`
      if (jsonObj.get("ParquetTimestampInMillisecond") != null && !jsonObj.get("ParquetTimestampInMillisecond").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ParquetTimestampInMillisecond"));
      }
      // validate the optional field `CdcInsertsAndUpdates`
      if (jsonObj.get("CdcInsertsAndUpdates") != null && !jsonObj.get("CdcInsertsAndUpdates").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CdcInsertsAndUpdates"));
      }
      // validate the optional field `DatePartitionEnabled`
      if (jsonObj.get("DatePartitionEnabled") != null && !jsonObj.get("DatePartitionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DatePartitionEnabled"));
      }
      // validate the optional field `DatePartitionSequence`
      if (jsonObj.get("DatePartitionSequence") != null && !jsonObj.get("DatePartitionSequence").isJsonNull()) {
        DatePartitionSequenceValue.validateJsonElement(jsonObj.get("DatePartitionSequence"));
      }
      // validate the optional field `DatePartitionDelimiter`
      if (jsonObj.get("DatePartitionDelimiter") != null && !jsonObj.get("DatePartitionDelimiter").isJsonNull()) {
        DatePartitionDelimiterValue.validateJsonElement(jsonObj.get("DatePartitionDelimiter"));
      }
      // validate the optional field `UseCsvNoSupValue`
      if (jsonObj.get("UseCsvNoSupValue") != null && !jsonObj.get("UseCsvNoSupValue").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseCsvNoSupValue"));
      }
      // validate the optional field `CsvNoSupValue`
      if (jsonObj.get("CsvNoSupValue") != null && !jsonObj.get("CsvNoSupValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CsvNoSupValue"));
      }
      // validate the optional field `PreserveTransactions`
      if (jsonObj.get("PreserveTransactions") != null && !jsonObj.get("PreserveTransactions").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("PreserveTransactions"));
      }
      // validate the optional field `CdcPath`
      if (jsonObj.get("CdcPath") != null && !jsonObj.get("CdcPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CdcPath"));
      }
      // validate the optional field `UseTaskStartTimeForFullLoadTimestamp`
      if (jsonObj.get("UseTaskStartTimeForFullLoadTimestamp") != null && !jsonObj.get("UseTaskStartTimeForFullLoadTimestamp").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseTaskStartTimeForFullLoadTimestamp"));
      }
      // validate the optional field `CannedAclForObjects`
      if (jsonObj.get("CannedAclForObjects") != null && !jsonObj.get("CannedAclForObjects").isJsonNull()) {
        CannedAclForObjectsValue.validateJsonElement(jsonObj.get("CannedAclForObjects"));
      }
      // validate the optional field `AddColumnName`
      if (jsonObj.get("AddColumnName") != null && !jsonObj.get("AddColumnName").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AddColumnName"));
      }
      // validate the optional field `CdcMaxBatchInterval`
      if (jsonObj.get("CdcMaxBatchInterval") != null && !jsonObj.get("CdcMaxBatchInterval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CdcMaxBatchInterval"));
      }
      // validate the optional field `CdcMinFileSize`
      if (jsonObj.get("CdcMinFileSize") != null && !jsonObj.get("CdcMinFileSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CdcMinFileSize"));
      }
      // validate the optional field `CsvNullValue`
      if (jsonObj.get("CsvNullValue") != null && !jsonObj.get("CsvNullValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CsvNullValue"));
      }
      // validate the optional field `IgnoreHeaderRows`
      if (jsonObj.get("IgnoreHeaderRows") != null && !jsonObj.get("IgnoreHeaderRows").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("IgnoreHeaderRows"));
      }
      // validate the optional field `MaxFileSize`
      if (jsonObj.get("MaxFileSize") != null && !jsonObj.get("MaxFileSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxFileSize"));
      }
      // validate the optional field `Rfc4180`
      if (jsonObj.get("Rfc4180") != null && !jsonObj.get("Rfc4180").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Rfc4180"));
      }
      // validate the optional field `DatePartitionTimezone`
      if (jsonObj.get("DatePartitionTimezone") != null && !jsonObj.get("DatePartitionTimezone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatePartitionTimezone"));
      }
      // validate the optional field `AddTrailingPaddingCharacter`
      if (jsonObj.get("AddTrailingPaddingCharacter") != null && !jsonObj.get("AddTrailingPaddingCharacter").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AddTrailingPaddingCharacter"));
      }
      // validate the optional field `ExpectedBucketOwner`
      if (jsonObj.get("ExpectedBucketOwner") != null && !jsonObj.get("ExpectedBucketOwner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExpectedBucketOwner"));
      }
      // validate the optional field `GlueCatalogGeneration`
      if (jsonObj.get("GlueCatalogGeneration") != null && !jsonObj.get("GlueCatalogGeneration").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("GlueCatalogGeneration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEndpointMessageS3Settings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEndpointMessageS3Settings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEndpointMessageS3Settings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEndpointMessageS3Settings.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEndpointMessageS3Settings>() {
           @Override
           public void write(JsonWriter out, CreateEndpointMessageS3Settings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEndpointMessageS3Settings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEndpointMessageS3Settings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEndpointMessageS3Settings
   * @throws IOException if the JSON string is invalid with respect to CreateEndpointMessageS3Settings
   */
  public static CreateEndpointMessageS3Settings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEndpointMessageS3Settings.class);
  }

  /**
   * Convert an instance of CreateEndpointMessageS3Settings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

