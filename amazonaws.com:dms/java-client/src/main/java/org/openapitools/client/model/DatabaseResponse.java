/*
 * AWS Database Migration Service
 * <fullname>Database Migration Service</fullname> <p>Database Migration Service (DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.</p> <p>For more information about DMS, see <a href=\"https://docs.aws.amazon.com/dms/latest/userguide/Welcome.html\">What Is Database Migration Service?</a> in the <i>Database Migration Service User Guide.</i> </p>
 *
 * The version of the OpenAPI document: 2016-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DatabaseResponseServer;
import org.openapitools.client.model.DatabaseResponseSoftwareDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a database in a Fleet Advisor collector inventory.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:13:34.502814-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseResponse {
  public static final String SERIALIZED_NAME_DATABASE_ID = "DatabaseId";
  @SerializedName(SERIALIZED_NAME_DATABASE_ID)
  private String databaseId;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "IpAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_NUMBER_OF_SCHEMAS = "NumberOfSchemas";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_SCHEMAS)
  private Integer numberOfSchemas;

  public static final String SERIALIZED_NAME_SERVER = "Server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private DatabaseResponseServer server;

  public static final String SERIALIZED_NAME_SOFTWARE_DETAILS = "SoftwareDetails";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_DETAILS)
  private DatabaseResponseSoftwareDetails softwareDetails;

  public static final String SERIALIZED_NAME_COLLECTORS = "Collectors";
  @SerializedName(SERIALIZED_NAME_COLLECTORS)
  private List collectors;

  public DatabaseResponse() {
  }

  public DatabaseResponse databaseId(String databaseId) {
    this.databaseId = databaseId;
    return this;
  }

  /**
   * Get databaseId
   * @return databaseId
   */
  @javax.annotation.Nullable
  public String getDatabaseId() {
    return databaseId;
  }

  public void setDatabaseId(String databaseId) {
    this.databaseId = databaseId;
  }


  public DatabaseResponse databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * Get databaseName
   * @return databaseName
   */
  @javax.annotation.Nullable
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public DatabaseResponse ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public DatabaseResponse numberOfSchemas(Integer numberOfSchemas) {
    this.numberOfSchemas = numberOfSchemas;
    return this;
  }

  /**
   * Get numberOfSchemas
   * @return numberOfSchemas
   */
  @javax.annotation.Nullable
  public Integer getNumberOfSchemas() {
    return numberOfSchemas;
  }

  public void setNumberOfSchemas(Integer numberOfSchemas) {
    this.numberOfSchemas = numberOfSchemas;
  }


  public DatabaseResponse server(DatabaseResponseServer server) {
    this.server = server;
    return this;
  }

  /**
   * Get server
   * @return server
   */
  @javax.annotation.Nullable
  public DatabaseResponseServer getServer() {
    return server;
  }

  public void setServer(DatabaseResponseServer server) {
    this.server = server;
  }


  public DatabaseResponse softwareDetails(DatabaseResponseSoftwareDetails softwareDetails) {
    this.softwareDetails = softwareDetails;
    return this;
  }

  /**
   * Get softwareDetails
   * @return softwareDetails
   */
  @javax.annotation.Nullable
  public DatabaseResponseSoftwareDetails getSoftwareDetails() {
    return softwareDetails;
  }

  public void setSoftwareDetails(DatabaseResponseSoftwareDetails softwareDetails) {
    this.softwareDetails = softwareDetails;
  }


  public DatabaseResponse collectors(List collectors) {
    this.collectors = collectors;
    return this;
  }

  /**
   * Get collectors
   * @return collectors
   */
  @javax.annotation.Nullable
  public List getCollectors() {
    return collectors;
  }

  public void setCollectors(List collectors) {
    this.collectors = collectors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseResponse databaseResponse = (DatabaseResponse) o;
    return Objects.equals(this.databaseId, databaseResponse.databaseId) &&
        Objects.equals(this.databaseName, databaseResponse.databaseName) &&
        Objects.equals(this.ipAddress, databaseResponse.ipAddress) &&
        Objects.equals(this.numberOfSchemas, databaseResponse.numberOfSchemas) &&
        Objects.equals(this.server, databaseResponse.server) &&
        Objects.equals(this.softwareDetails, databaseResponse.softwareDetails) &&
        Objects.equals(this.collectors, databaseResponse.collectors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(databaseId, databaseName, ipAddress, numberOfSchemas, server, softwareDetails, collectors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseResponse {\n");
    sb.append("    databaseId: ").append(toIndentedString(databaseId)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    numberOfSchemas: ").append(toIndentedString(numberOfSchemas)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    softwareDetails: ").append(toIndentedString(softwareDetails)).append("\n");
    sb.append("    collectors: ").append(toIndentedString(collectors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DatabaseId");
    openapiFields.add("DatabaseName");
    openapiFields.add("IpAddress");
    openapiFields.add("NumberOfSchemas");
    openapiFields.add("Server");
    openapiFields.add("SoftwareDetails");
    openapiFields.add("Collectors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseResponse is not found in the empty JSON string", DatabaseResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DatabaseId`
      if (jsonObj.get("DatabaseId") != null && !jsonObj.get("DatabaseId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseId"));
      }
      // validate the optional field `DatabaseName`
      if (jsonObj.get("DatabaseName") != null && !jsonObj.get("DatabaseName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatabaseName"));
      }
      // validate the optional field `IpAddress`
      if (jsonObj.get("IpAddress") != null && !jsonObj.get("IpAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IpAddress"));
      }
      // validate the optional field `NumberOfSchemas`
      if (jsonObj.get("NumberOfSchemas") != null && !jsonObj.get("NumberOfSchemas").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumberOfSchemas"));
      }
      // validate the optional field `Server`
      if (jsonObj.get("Server") != null && !jsonObj.get("Server").isJsonNull()) {
        DatabaseResponseServer.validateJsonElement(jsonObj.get("Server"));
      }
      // validate the optional field `SoftwareDetails`
      if (jsonObj.get("SoftwareDetails") != null && !jsonObj.get("SoftwareDetails").isJsonNull()) {
        DatabaseResponseSoftwareDetails.validateJsonElement(jsonObj.get("SoftwareDetails"));
      }
      // validate the optional field `Collectors`
      if (jsonObj.get("Collectors") != null && !jsonObj.get("Collectors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Collectors"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseResponse>() {
           @Override
           public void write(JsonWriter out, DatabaseResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseResponse
   * @throws IOException if the JSON string is invalid with respect to DatabaseResponse
   */
  public static DatabaseResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseResponse.class);
  }

  /**
   * Convert an instance of DatabaseResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

