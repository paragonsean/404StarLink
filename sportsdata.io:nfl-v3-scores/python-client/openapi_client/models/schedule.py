# coding: utf-8

"""
    NFL v3 Scores

    NFL schedules, scores, odds, weather, and news API.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.stadium import Stadium
from typing import Optional, Set
from typing_extensions import Self

class Schedule(BaseModel):
    """
    Schedule
    """ # noqa: E501
    away_team: Optional[StrictStr] = Field(default=None, alias="AwayTeam")
    away_team_money_line: Optional[StrictInt] = Field(default=None, alias="AwayTeamMoneyLine")
    canceled: Optional[StrictBool] = Field(default=None, alias="Canceled")
    channel: Optional[StrictStr] = Field(default=None, alias="Channel")
    var_date: Optional[StrictStr] = Field(default=None, alias="Date")
    date_time: Optional[StrictStr] = Field(default=None, alias="DateTime")
    day: Optional[StrictStr] = Field(default=None, alias="Day")
    forecast_description: Optional[StrictStr] = Field(default=None, alias="ForecastDescription")
    forecast_temp_high: Optional[StrictInt] = Field(default=None, alias="ForecastTempHigh")
    forecast_temp_low: Optional[StrictInt] = Field(default=None, alias="ForecastTempLow")
    forecast_wind_chill: Optional[StrictInt] = Field(default=None, alias="ForecastWindChill")
    forecast_wind_speed: Optional[StrictInt] = Field(default=None, alias="ForecastWindSpeed")
    game_key: Optional[StrictStr] = Field(default=None, alias="GameKey")
    geo_lat: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GeoLat")
    geo_long: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="GeoLong")
    global_away_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalAwayTeamID")
    global_game_id: Optional[StrictInt] = Field(default=None, alias="GlobalGameID")
    global_home_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalHomeTeamID")
    home_team: Optional[StrictStr] = Field(default=None, alias="HomeTeam")
    home_team_money_line: Optional[StrictInt] = Field(default=None, alias="HomeTeamMoneyLine")
    over_under: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="OverUnder")
    point_spread: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="PointSpread")
    score_id: Optional[StrictInt] = Field(default=None, alias="ScoreID")
    season: Optional[StrictInt] = Field(default=None, alias="Season")
    season_type: Optional[StrictInt] = Field(default=None, alias="SeasonType")
    stadium_details: Optional[Stadium] = Field(default=None, alias="StadiumDetails")
    stadium_id: Optional[StrictInt] = Field(default=None, alias="StadiumID")
    status: Optional[StrictStr] = Field(default=None, alias="Status")
    week: Optional[StrictInt] = Field(default=None, alias="Week")
    __properties: ClassVar[List[str]] = ["AwayTeam", "AwayTeamMoneyLine", "Canceled", "Channel", "Date", "DateTime", "Day", "ForecastDescription", "ForecastTempHigh", "ForecastTempLow", "ForecastWindChill", "ForecastWindSpeed", "GameKey", "GeoLat", "GeoLong", "GlobalAwayTeamID", "GlobalGameID", "GlobalHomeTeamID", "HomeTeam", "HomeTeamMoneyLine", "OverUnder", "PointSpread", "ScoreID", "Season", "SeasonType", "StadiumDetails", "StadiumID", "Status", "Week"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Schedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stadium_details
        if self.stadium_details:
            _dict['StadiumDetails'] = self.stadium_details.to_dict()
        # set to None if away_team (nullable) is None
        # and model_fields_set contains the field
        if self.away_team is None and "away_team" in self.model_fields_set:
            _dict['AwayTeam'] = None

        # set to None if away_team_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.away_team_money_line is None and "away_team_money_line" in self.model_fields_set:
            _dict['AwayTeamMoneyLine'] = None

        # set to None if canceled (nullable) is None
        # and model_fields_set contains the field
        if self.canceled is None and "canceled" in self.model_fields_set:
            _dict['Canceled'] = None

        # set to None if channel (nullable) is None
        # and model_fields_set contains the field
        if self.channel is None and "channel" in self.model_fields_set:
            _dict['Channel'] = None

        # set to None if var_date (nullable) is None
        # and model_fields_set contains the field
        if self.var_date is None and "var_date" in self.model_fields_set:
            _dict['Date'] = None

        # set to None if date_time (nullable) is None
        # and model_fields_set contains the field
        if self.date_time is None and "date_time" in self.model_fields_set:
            _dict['DateTime'] = None

        # set to None if day (nullable) is None
        # and model_fields_set contains the field
        if self.day is None and "day" in self.model_fields_set:
            _dict['Day'] = None

        # set to None if forecast_description (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_description is None and "forecast_description" in self.model_fields_set:
            _dict['ForecastDescription'] = None

        # set to None if forecast_temp_high (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_temp_high is None and "forecast_temp_high" in self.model_fields_set:
            _dict['ForecastTempHigh'] = None

        # set to None if forecast_temp_low (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_temp_low is None and "forecast_temp_low" in self.model_fields_set:
            _dict['ForecastTempLow'] = None

        # set to None if forecast_wind_chill (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_wind_chill is None and "forecast_wind_chill" in self.model_fields_set:
            _dict['ForecastWindChill'] = None

        # set to None if forecast_wind_speed (nullable) is None
        # and model_fields_set contains the field
        if self.forecast_wind_speed is None and "forecast_wind_speed" in self.model_fields_set:
            _dict['ForecastWindSpeed'] = None

        # set to None if game_key (nullable) is None
        # and model_fields_set contains the field
        if self.game_key is None and "game_key" in self.model_fields_set:
            _dict['GameKey'] = None

        # set to None if geo_lat (nullable) is None
        # and model_fields_set contains the field
        if self.geo_lat is None and "geo_lat" in self.model_fields_set:
            _dict['GeoLat'] = None

        # set to None if geo_long (nullable) is None
        # and model_fields_set contains the field
        if self.geo_long is None and "geo_long" in self.model_fields_set:
            _dict['GeoLong'] = None

        # set to None if global_away_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_away_team_id is None and "global_away_team_id" in self.model_fields_set:
            _dict['GlobalAwayTeamID'] = None

        # set to None if global_game_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_game_id is None and "global_game_id" in self.model_fields_set:
            _dict['GlobalGameID'] = None

        # set to None if global_home_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_home_team_id is None and "global_home_team_id" in self.model_fields_set:
            _dict['GlobalHomeTeamID'] = None

        # set to None if home_team (nullable) is None
        # and model_fields_set contains the field
        if self.home_team is None and "home_team" in self.model_fields_set:
            _dict['HomeTeam'] = None

        # set to None if home_team_money_line (nullable) is None
        # and model_fields_set contains the field
        if self.home_team_money_line is None and "home_team_money_line" in self.model_fields_set:
            _dict['HomeTeamMoneyLine'] = None

        # set to None if over_under (nullable) is None
        # and model_fields_set contains the field
        if self.over_under is None and "over_under" in self.model_fields_set:
            _dict['OverUnder'] = None

        # set to None if point_spread (nullable) is None
        # and model_fields_set contains the field
        if self.point_spread is None and "point_spread" in self.model_fields_set:
            _dict['PointSpread'] = None

        # set to None if stadium_id (nullable) is None
        # and model_fields_set contains the field
        if self.stadium_id is None and "stadium_id" in self.model_fields_set:
            _dict['StadiumID'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['Status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Schedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AwayTeam": obj.get("AwayTeam"),
            "AwayTeamMoneyLine": obj.get("AwayTeamMoneyLine"),
            "Canceled": obj.get("Canceled"),
            "Channel": obj.get("Channel"),
            "Date": obj.get("Date"),
            "DateTime": obj.get("DateTime"),
            "Day": obj.get("Day"),
            "ForecastDescription": obj.get("ForecastDescription"),
            "ForecastTempHigh": obj.get("ForecastTempHigh"),
            "ForecastTempLow": obj.get("ForecastTempLow"),
            "ForecastWindChill": obj.get("ForecastWindChill"),
            "ForecastWindSpeed": obj.get("ForecastWindSpeed"),
            "GameKey": obj.get("GameKey"),
            "GeoLat": obj.get("GeoLat"),
            "GeoLong": obj.get("GeoLong"),
            "GlobalAwayTeamID": obj.get("GlobalAwayTeamID"),
            "GlobalGameID": obj.get("GlobalGameID"),
            "GlobalHomeTeamID": obj.get("GlobalHomeTeamID"),
            "HomeTeam": obj.get("HomeTeam"),
            "HomeTeamMoneyLine": obj.get("HomeTeamMoneyLine"),
            "OverUnder": obj.get("OverUnder"),
            "PointSpread": obj.get("PointSpread"),
            "ScoreID": obj.get("ScoreID"),
            "Season": obj.get("Season"),
            "SeasonType": obj.get("SeasonType"),
            "StadiumDetails": Stadium.from_dict(obj["StadiumDetails"]) if obj.get("StadiumDetails") is not None else None,
            "StadiumID": obj.get("StadiumID"),
            "Status": obj.get("Status"),
            "Week": obj.get("Week")
        })
        return _obj


