# coding: utf-8

"""
    NFL v3 Scores

    NFL schedules, scores, odds, weather, and news API.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class News(BaseModel):
    """
    News
    """ # noqa: E501
    author: Optional[StrictStr] = Field(default=None, alias="Author")
    categories: Optional[StrictStr] = Field(default=None, alias="Categories")
    content: Optional[StrictStr] = Field(default=None, alias="Content")
    news_id: Optional[StrictInt] = Field(default=None, alias="NewsID")
    original_source: Optional[StrictStr] = Field(default=None, alias="OriginalSource")
    original_source_url: Optional[StrictStr] = Field(default=None, alias="OriginalSourceUrl")
    player_id: Optional[StrictInt] = Field(default=None, alias="PlayerID")
    player_id2: Optional[StrictInt] = Field(default=None, alias="PlayerID2")
    source: Optional[StrictStr] = Field(default=None, alias="Source")
    team: Optional[StrictStr] = Field(default=None, alias="Team")
    team2: Optional[StrictStr] = Field(default=None, alias="Team2")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamID")
    team_id2: Optional[StrictInt] = Field(default=None, alias="TeamID2")
    terms_of_use: Optional[StrictStr] = Field(default=None, alias="TermsOfUse")
    time_ago: Optional[StrictStr] = Field(default=None, alias="TimeAgo")
    title: Optional[StrictStr] = Field(default=None, alias="Title")
    updated: Optional[StrictStr] = Field(default=None, alias="Updated")
    url: Optional[StrictStr] = Field(default=None, alias="Url")
    __properties: ClassVar[List[str]] = ["Author", "Categories", "Content", "NewsID", "OriginalSource", "OriginalSourceUrl", "PlayerID", "PlayerID2", "Source", "Team", "Team2", "TeamID", "TeamID2", "TermsOfUse", "TimeAgo", "Title", "Updated", "Url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of News from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if author (nullable) is None
        # and model_fields_set contains the field
        if self.author is None and "author" in self.model_fields_set:
            _dict['Author'] = None

        # set to None if categories (nullable) is None
        # and model_fields_set contains the field
        if self.categories is None and "categories" in self.model_fields_set:
            _dict['Categories'] = None

        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['Content'] = None

        # set to None if original_source (nullable) is None
        # and model_fields_set contains the field
        if self.original_source is None and "original_source" in self.model_fields_set:
            _dict['OriginalSource'] = None

        # set to None if original_source_url (nullable) is None
        # and model_fields_set contains the field
        if self.original_source_url is None and "original_source_url" in self.model_fields_set:
            _dict['OriginalSourceUrl'] = None

        # set to None if player_id (nullable) is None
        # and model_fields_set contains the field
        if self.player_id is None and "player_id" in self.model_fields_set:
            _dict['PlayerID'] = None

        # set to None if player_id2 (nullable) is None
        # and model_fields_set contains the field
        if self.player_id2 is None and "player_id2" in self.model_fields_set:
            _dict['PlayerID2'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['Source'] = None

        # set to None if team (nullable) is None
        # and model_fields_set contains the field
        if self.team is None and "team" in self.model_fields_set:
            _dict['Team'] = None

        # set to None if team2 (nullable) is None
        # and model_fields_set contains the field
        if self.team2 is None and "team2" in self.model_fields_set:
            _dict['Team2'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['TeamID'] = None

        # set to None if team_id2 (nullable) is None
        # and model_fields_set contains the field
        if self.team_id2 is None and "team_id2" in self.model_fields_set:
            _dict['TeamID2'] = None

        # set to None if terms_of_use (nullable) is None
        # and model_fields_set contains the field
        if self.terms_of_use is None and "terms_of_use" in self.model_fields_set:
            _dict['TermsOfUse'] = None

        # set to None if time_ago (nullable) is None
        # and model_fields_set contains the field
        if self.time_ago is None and "time_ago" in self.model_fields_set:
            _dict['TimeAgo'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['Title'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['Updated'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['Url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of News from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Author": obj.get("Author"),
            "Categories": obj.get("Categories"),
            "Content": obj.get("Content"),
            "NewsID": obj.get("NewsID"),
            "OriginalSource": obj.get("OriginalSource"),
            "OriginalSourceUrl": obj.get("OriginalSourceUrl"),
            "PlayerID": obj.get("PlayerID"),
            "PlayerID2": obj.get("PlayerID2"),
            "Source": obj.get("Source"),
            "Team": obj.get("Team"),
            "Team2": obj.get("Team2"),
            "TeamID": obj.get("TeamID"),
            "TeamID2": obj.get("TeamID2"),
            "TermsOfUse": obj.get("TermsOfUse"),
            "TimeAgo": obj.get("TimeAgo"),
            "Title": obj.get("Title"),
            "Updated": obj.get("Updated"),
            "Url": obj.get("Url")
        })
        return _obj


