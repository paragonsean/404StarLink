# coding: utf-8

"""
    NFL v3 Scores

    NFL schedules, scores, odds, weather, and news API.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Player(BaseModel):
    """
    Player
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, alias="Active")
    age: Optional[StrictInt] = Field(default=None, alias="Age")
    average_draft_position: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="AverageDraftPosition")
    birth_date: Optional[StrictStr] = Field(default=None, alias="BirthDate")
    birth_date_string: Optional[StrictStr] = Field(default=None, alias="BirthDateString")
    bye_week: Optional[StrictInt] = Field(default=None, alias="ByeWeek")
    college: Optional[StrictStr] = Field(default=None, alias="College")
    college_draft_pick: Optional[StrictInt] = Field(default=None, alias="CollegeDraftPick")
    college_draft_round: Optional[StrictInt] = Field(default=None, alias="CollegeDraftRound")
    college_draft_team: Optional[StrictStr] = Field(default=None, alias="CollegeDraftTeam")
    college_draft_year: Optional[StrictInt] = Field(default=None, alias="CollegeDraftYear")
    current_status: Optional[StrictStr] = Field(default=None, alias="CurrentStatus")
    current_team: Optional[StrictStr] = Field(default=None, alias="CurrentTeam")
    declared_inactive: Optional[StrictBool] = Field(default=None, alias="DeclaredInactive")
    depth_display_order: Optional[StrictInt] = Field(default=None, alias="DepthDisplayOrder")
    depth_order: Optional[StrictInt] = Field(default=None, alias="DepthOrder")
    depth_position: Optional[StrictStr] = Field(default=None, alias="DepthPosition")
    depth_position_category: Optional[StrictStr] = Field(default=None, alias="DepthPositionCategory")
    draft_kings_name: Optional[StrictStr] = Field(default=None, alias="DraftKingsName")
    draft_kings_player_id: Optional[StrictInt] = Field(default=None, alias="DraftKingsPlayerID")
    experience: Optional[StrictInt] = Field(default=None, alias="Experience")
    experience_string: Optional[StrictStr] = Field(default=None, alias="ExperienceString")
    fan_duel_name: Optional[StrictStr] = Field(default=None, alias="FanDuelName")
    fan_duel_player_id: Optional[StrictInt] = Field(default=None, alias="FanDuelPlayerID")
    fantasy_alarm_player_id: Optional[StrictInt] = Field(default=None, alias="FantasyAlarmPlayerID")
    fantasy_draft_name: Optional[StrictStr] = Field(default=None, alias="FantasyDraftName")
    fantasy_draft_player_id: Optional[StrictInt] = Field(default=None, alias="FantasyDraftPlayerID")
    fantasy_position: Optional[StrictStr] = Field(default=None, alias="FantasyPosition")
    fantasy_position_depth_order: Optional[StrictInt] = Field(default=None, alias="FantasyPositionDepthOrder")
    first_name: Optional[StrictStr] = Field(default=None, alias="FirstName")
    global_team_id: Optional[StrictInt] = Field(default=None, alias="GlobalTeamID")
    height: Optional[StrictStr] = Field(default=None, alias="Height")
    height_feet: Optional[StrictInt] = Field(default=None, alias="HeightFeet")
    height_inches: Optional[StrictInt] = Field(default=None, alias="HeightInches")
    injury_body_part: Optional[StrictStr] = Field(default=None, alias="InjuryBodyPart")
    injury_notes: Optional[StrictStr] = Field(default=None, alias="InjuryNotes")
    injury_practice: Optional[StrictStr] = Field(default=None, alias="InjuryPractice")
    injury_practice_description: Optional[StrictStr] = Field(default=None, alias="InjuryPracticeDescription")
    injury_start_date: Optional[StrictStr] = Field(default=None, alias="InjuryStartDate")
    injury_status: Optional[StrictStr] = Field(default=None, alias="InjuryStatus")
    is_undrafted_free_agent: Optional[StrictBool] = Field(default=None, alias="IsUndraftedFreeAgent")
    last_name: Optional[StrictStr] = Field(default=None, alias="LastName")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    number: Optional[StrictInt] = Field(default=None, alias="Number")
    photo_url: Optional[StrictStr] = Field(default=None, alias="PhotoUrl")
    player_id: Optional[StrictInt] = Field(default=None, alias="PlayerID")
    position: Optional[StrictStr] = Field(default=None, alias="Position")
    position_category: Optional[StrictStr] = Field(default=None, alias="PositionCategory")
    roto_wire_player_id: Optional[StrictInt] = Field(default=None, alias="RotoWirePlayerID")
    rotoworld_player_id: Optional[StrictInt] = Field(default=None, alias="RotoworldPlayerID")
    short_name: Optional[StrictStr] = Field(default=None, alias="ShortName")
    sport_radar_player_id: Optional[StrictStr] = Field(default=None, alias="SportRadarPlayerID")
    sports_direct_player_id: Optional[StrictInt] = Field(default=None, alias="SportsDirectPlayerID")
    stats_player_id: Optional[StrictInt] = Field(default=None, alias="StatsPlayerID")
    status: Optional[StrictStr] = Field(default=None, alias="Status")
    team: Optional[StrictStr] = Field(default=None, alias="Team")
    team_id: Optional[StrictInt] = Field(default=None, alias="TeamID")
    upcoming_draft_kings_salary: Optional[StrictInt] = Field(default=None, alias="UpcomingDraftKingsSalary")
    upcoming_fan_duel_salary: Optional[StrictInt] = Field(default=None, alias="UpcomingFanDuelSalary")
    upcoming_game_opponent: Optional[StrictStr] = Field(default=None, alias="UpcomingGameOpponent")
    upcoming_game_week: Optional[StrictInt] = Field(default=None, alias="UpcomingGameWeek")
    upcoming_opponent_position_rank: Optional[StrictInt] = Field(default=None, alias="UpcomingOpponentPositionRank")
    upcoming_opponent_rank: Optional[StrictInt] = Field(default=None, alias="UpcomingOpponentRank")
    upcoming_salary: Optional[StrictInt] = Field(default=None, alias="UpcomingSalary")
    upcoming_yahoo_salary: Optional[StrictInt] = Field(default=None, alias="UpcomingYahooSalary")
    usa_today_headshot_no_background_updated: Optional[StrictStr] = Field(default=None, alias="UsaTodayHeadshotNoBackgroundUpdated")
    usa_today_headshot_no_background_url: Optional[StrictStr] = Field(default=None, alias="UsaTodayHeadshotNoBackgroundUrl")
    usa_today_headshot_updated: Optional[StrictStr] = Field(default=None, alias="UsaTodayHeadshotUpdated")
    usa_today_headshot_url: Optional[StrictStr] = Field(default=None, alias="UsaTodayHeadshotUrl")
    usa_today_player_id: Optional[StrictInt] = Field(default=None, alias="UsaTodayPlayerID")
    weight: Optional[StrictInt] = Field(default=None, alias="Weight")
    xml_team_player_id: Optional[StrictInt] = Field(default=None, alias="XmlTeamPlayerID")
    yahoo_name: Optional[StrictStr] = Field(default=None, alias="YahooName")
    yahoo_player_id: Optional[StrictInt] = Field(default=None, alias="YahooPlayerID")
    __properties: ClassVar[List[str]] = ["Active", "Age", "AverageDraftPosition", "BirthDate", "BirthDateString", "ByeWeek", "College", "CollegeDraftPick", "CollegeDraftRound", "CollegeDraftTeam", "CollegeDraftYear", "CurrentStatus", "CurrentTeam", "DeclaredInactive", "DepthDisplayOrder", "DepthOrder", "DepthPosition", "DepthPositionCategory", "DraftKingsName", "DraftKingsPlayerID", "Experience", "ExperienceString", "FanDuelName", "FanDuelPlayerID", "FantasyAlarmPlayerID", "FantasyDraftName", "FantasyDraftPlayerID", "FantasyPosition", "FantasyPositionDepthOrder", "FirstName", "GlobalTeamID", "Height", "HeightFeet", "HeightInches", "InjuryBodyPart", "InjuryNotes", "InjuryPractice", "InjuryPracticeDescription", "InjuryStartDate", "InjuryStatus", "IsUndraftedFreeAgent", "LastName", "Name", "Number", "PhotoUrl", "PlayerID", "Position", "PositionCategory", "RotoWirePlayerID", "RotoworldPlayerID", "ShortName", "SportRadarPlayerID", "SportsDirectPlayerID", "StatsPlayerID", "Status", "Team", "TeamID", "UpcomingDraftKingsSalary", "UpcomingFanDuelSalary", "UpcomingGameOpponent", "UpcomingGameWeek", "UpcomingOpponentPositionRank", "UpcomingOpponentRank", "UpcomingSalary", "UpcomingYahooSalary", "UsaTodayHeadshotNoBackgroundUpdated", "UsaTodayHeadshotNoBackgroundUrl", "UsaTodayHeadshotUpdated", "UsaTodayHeadshotUrl", "UsaTodayPlayerID", "Weight", "XmlTeamPlayerID", "YahooName", "YahooPlayerID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Player from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if active (nullable) is None
        # and model_fields_set contains the field
        if self.active is None and "active" in self.model_fields_set:
            _dict['Active'] = None

        # set to None if age (nullable) is None
        # and model_fields_set contains the field
        if self.age is None and "age" in self.model_fields_set:
            _dict['Age'] = None

        # set to None if average_draft_position (nullable) is None
        # and model_fields_set contains the field
        if self.average_draft_position is None and "average_draft_position" in self.model_fields_set:
            _dict['AverageDraftPosition'] = None

        # set to None if birth_date (nullable) is None
        # and model_fields_set contains the field
        if self.birth_date is None and "birth_date" in self.model_fields_set:
            _dict['BirthDate'] = None

        # set to None if birth_date_string (nullable) is None
        # and model_fields_set contains the field
        if self.birth_date_string is None and "birth_date_string" in self.model_fields_set:
            _dict['BirthDateString'] = None

        # set to None if bye_week (nullable) is None
        # and model_fields_set contains the field
        if self.bye_week is None and "bye_week" in self.model_fields_set:
            _dict['ByeWeek'] = None

        # set to None if college (nullable) is None
        # and model_fields_set contains the field
        if self.college is None and "college" in self.model_fields_set:
            _dict['College'] = None

        # set to None if college_draft_pick (nullable) is None
        # and model_fields_set contains the field
        if self.college_draft_pick is None and "college_draft_pick" in self.model_fields_set:
            _dict['CollegeDraftPick'] = None

        # set to None if college_draft_round (nullable) is None
        # and model_fields_set contains the field
        if self.college_draft_round is None and "college_draft_round" in self.model_fields_set:
            _dict['CollegeDraftRound'] = None

        # set to None if college_draft_team (nullable) is None
        # and model_fields_set contains the field
        if self.college_draft_team is None and "college_draft_team" in self.model_fields_set:
            _dict['CollegeDraftTeam'] = None

        # set to None if college_draft_year (nullable) is None
        # and model_fields_set contains the field
        if self.college_draft_year is None and "college_draft_year" in self.model_fields_set:
            _dict['CollegeDraftYear'] = None

        # set to None if current_status (nullable) is None
        # and model_fields_set contains the field
        if self.current_status is None and "current_status" in self.model_fields_set:
            _dict['CurrentStatus'] = None

        # set to None if current_team (nullable) is None
        # and model_fields_set contains the field
        if self.current_team is None and "current_team" in self.model_fields_set:
            _dict['CurrentTeam'] = None

        # set to None if depth_display_order (nullable) is None
        # and model_fields_set contains the field
        if self.depth_display_order is None and "depth_display_order" in self.model_fields_set:
            _dict['DepthDisplayOrder'] = None

        # set to None if depth_order (nullable) is None
        # and model_fields_set contains the field
        if self.depth_order is None and "depth_order" in self.model_fields_set:
            _dict['DepthOrder'] = None

        # set to None if depth_position (nullable) is None
        # and model_fields_set contains the field
        if self.depth_position is None and "depth_position" in self.model_fields_set:
            _dict['DepthPosition'] = None

        # set to None if depth_position_category (nullable) is None
        # and model_fields_set contains the field
        if self.depth_position_category is None and "depth_position_category" in self.model_fields_set:
            _dict['DepthPositionCategory'] = None

        # set to None if draft_kings_name (nullable) is None
        # and model_fields_set contains the field
        if self.draft_kings_name is None and "draft_kings_name" in self.model_fields_set:
            _dict['DraftKingsName'] = None

        # set to None if draft_kings_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.draft_kings_player_id is None and "draft_kings_player_id" in self.model_fields_set:
            _dict['DraftKingsPlayerID'] = None

        # set to None if experience (nullable) is None
        # and model_fields_set contains the field
        if self.experience is None and "experience" in self.model_fields_set:
            _dict['Experience'] = None

        # set to None if experience_string (nullable) is None
        # and model_fields_set contains the field
        if self.experience_string is None and "experience_string" in self.model_fields_set:
            _dict['ExperienceString'] = None

        # set to None if fan_duel_name (nullable) is None
        # and model_fields_set contains the field
        if self.fan_duel_name is None and "fan_duel_name" in self.model_fields_set:
            _dict['FanDuelName'] = None

        # set to None if fan_duel_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.fan_duel_player_id is None and "fan_duel_player_id" in self.model_fields_set:
            _dict['FanDuelPlayerID'] = None

        # set to None if fantasy_alarm_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_alarm_player_id is None and "fantasy_alarm_player_id" in self.model_fields_set:
            _dict['FantasyAlarmPlayerID'] = None

        # set to None if fantasy_draft_name (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_draft_name is None and "fantasy_draft_name" in self.model_fields_set:
            _dict['FantasyDraftName'] = None

        # set to None if fantasy_draft_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_draft_player_id is None and "fantasy_draft_player_id" in self.model_fields_set:
            _dict['FantasyDraftPlayerID'] = None

        # set to None if fantasy_position (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_position is None and "fantasy_position" in self.model_fields_set:
            _dict['FantasyPosition'] = None

        # set to None if fantasy_position_depth_order (nullable) is None
        # and model_fields_set contains the field
        if self.fantasy_position_depth_order is None and "fantasy_position_depth_order" in self.model_fields_set:
            _dict['FantasyPositionDepthOrder'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['FirstName'] = None

        # set to None if global_team_id (nullable) is None
        # and model_fields_set contains the field
        if self.global_team_id is None and "global_team_id" in self.model_fields_set:
            _dict['GlobalTeamID'] = None

        # set to None if height (nullable) is None
        # and model_fields_set contains the field
        if self.height is None and "height" in self.model_fields_set:
            _dict['Height'] = None

        # set to None if height_feet (nullable) is None
        # and model_fields_set contains the field
        if self.height_feet is None and "height_feet" in self.model_fields_set:
            _dict['HeightFeet'] = None

        # set to None if height_inches (nullable) is None
        # and model_fields_set contains the field
        if self.height_inches is None and "height_inches" in self.model_fields_set:
            _dict['HeightInches'] = None

        # set to None if injury_body_part (nullable) is None
        # and model_fields_set contains the field
        if self.injury_body_part is None and "injury_body_part" in self.model_fields_set:
            _dict['InjuryBodyPart'] = None

        # set to None if injury_notes (nullable) is None
        # and model_fields_set contains the field
        if self.injury_notes is None and "injury_notes" in self.model_fields_set:
            _dict['InjuryNotes'] = None

        # set to None if injury_practice (nullable) is None
        # and model_fields_set contains the field
        if self.injury_practice is None and "injury_practice" in self.model_fields_set:
            _dict['InjuryPractice'] = None

        # set to None if injury_practice_description (nullable) is None
        # and model_fields_set contains the field
        if self.injury_practice_description is None and "injury_practice_description" in self.model_fields_set:
            _dict['InjuryPracticeDescription'] = None

        # set to None if injury_start_date (nullable) is None
        # and model_fields_set contains the field
        if self.injury_start_date is None and "injury_start_date" in self.model_fields_set:
            _dict['InjuryStartDate'] = None

        # set to None if injury_status (nullable) is None
        # and model_fields_set contains the field
        if self.injury_status is None and "injury_status" in self.model_fields_set:
            _dict['InjuryStatus'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['LastName'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['Name'] = None

        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['Number'] = None

        # set to None if photo_url (nullable) is None
        # and model_fields_set contains the field
        if self.photo_url is None and "photo_url" in self.model_fields_set:
            _dict['PhotoUrl'] = None

        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['Position'] = None

        # set to None if position_category (nullable) is None
        # and model_fields_set contains the field
        if self.position_category is None and "position_category" in self.model_fields_set:
            _dict['PositionCategory'] = None

        # set to None if roto_wire_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.roto_wire_player_id is None and "roto_wire_player_id" in self.model_fields_set:
            _dict['RotoWirePlayerID'] = None

        # set to None if rotoworld_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.rotoworld_player_id is None and "rotoworld_player_id" in self.model_fields_set:
            _dict['RotoworldPlayerID'] = None

        # set to None if short_name (nullable) is None
        # and model_fields_set contains the field
        if self.short_name is None and "short_name" in self.model_fields_set:
            _dict['ShortName'] = None

        # set to None if sport_radar_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.sport_radar_player_id is None and "sport_radar_player_id" in self.model_fields_set:
            _dict['SportRadarPlayerID'] = None

        # set to None if sports_direct_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.sports_direct_player_id is None and "sports_direct_player_id" in self.model_fields_set:
            _dict['SportsDirectPlayerID'] = None

        # set to None if stats_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.stats_player_id is None and "stats_player_id" in self.model_fields_set:
            _dict['StatsPlayerID'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['Status'] = None

        # set to None if team (nullable) is None
        # and model_fields_set contains the field
        if self.team is None and "team" in self.model_fields_set:
            _dict['Team'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['TeamID'] = None

        # set to None if upcoming_draft_kings_salary (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_draft_kings_salary is None and "upcoming_draft_kings_salary" in self.model_fields_set:
            _dict['UpcomingDraftKingsSalary'] = None

        # set to None if upcoming_fan_duel_salary (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_fan_duel_salary is None and "upcoming_fan_duel_salary" in self.model_fields_set:
            _dict['UpcomingFanDuelSalary'] = None

        # set to None if upcoming_game_opponent (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_game_opponent is None and "upcoming_game_opponent" in self.model_fields_set:
            _dict['UpcomingGameOpponent'] = None

        # set to None if upcoming_opponent_position_rank (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_opponent_position_rank is None and "upcoming_opponent_position_rank" in self.model_fields_set:
            _dict['UpcomingOpponentPositionRank'] = None

        # set to None if upcoming_opponent_rank (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_opponent_rank is None and "upcoming_opponent_rank" in self.model_fields_set:
            _dict['UpcomingOpponentRank'] = None

        # set to None if upcoming_salary (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_salary is None and "upcoming_salary" in self.model_fields_set:
            _dict['UpcomingSalary'] = None

        # set to None if upcoming_yahoo_salary (nullable) is None
        # and model_fields_set contains the field
        if self.upcoming_yahoo_salary is None and "upcoming_yahoo_salary" in self.model_fields_set:
            _dict['UpcomingYahooSalary'] = None

        # set to None if usa_today_headshot_no_background_updated (nullable) is None
        # and model_fields_set contains the field
        if self.usa_today_headshot_no_background_updated is None and "usa_today_headshot_no_background_updated" in self.model_fields_set:
            _dict['UsaTodayHeadshotNoBackgroundUpdated'] = None

        # set to None if usa_today_headshot_no_background_url (nullable) is None
        # and model_fields_set contains the field
        if self.usa_today_headshot_no_background_url is None and "usa_today_headshot_no_background_url" in self.model_fields_set:
            _dict['UsaTodayHeadshotNoBackgroundUrl'] = None

        # set to None if usa_today_headshot_updated (nullable) is None
        # and model_fields_set contains the field
        if self.usa_today_headshot_updated is None and "usa_today_headshot_updated" in self.model_fields_set:
            _dict['UsaTodayHeadshotUpdated'] = None

        # set to None if usa_today_headshot_url (nullable) is None
        # and model_fields_set contains the field
        if self.usa_today_headshot_url is None and "usa_today_headshot_url" in self.model_fields_set:
            _dict['UsaTodayHeadshotUrl'] = None

        # set to None if usa_today_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.usa_today_player_id is None and "usa_today_player_id" in self.model_fields_set:
            _dict['UsaTodayPlayerID'] = None

        # set to None if weight (nullable) is None
        # and model_fields_set contains the field
        if self.weight is None and "weight" in self.model_fields_set:
            _dict['Weight'] = None

        # set to None if xml_team_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.xml_team_player_id is None and "xml_team_player_id" in self.model_fields_set:
            _dict['XmlTeamPlayerID'] = None

        # set to None if yahoo_name (nullable) is None
        # and model_fields_set contains the field
        if self.yahoo_name is None and "yahoo_name" in self.model_fields_set:
            _dict['YahooName'] = None

        # set to None if yahoo_player_id (nullable) is None
        # and model_fields_set contains the field
        if self.yahoo_player_id is None and "yahoo_player_id" in self.model_fields_set:
            _dict['YahooPlayerID'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Player from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Active": obj.get("Active"),
            "Age": obj.get("Age"),
            "AverageDraftPosition": obj.get("AverageDraftPosition"),
            "BirthDate": obj.get("BirthDate"),
            "BirthDateString": obj.get("BirthDateString"),
            "ByeWeek": obj.get("ByeWeek"),
            "College": obj.get("College"),
            "CollegeDraftPick": obj.get("CollegeDraftPick"),
            "CollegeDraftRound": obj.get("CollegeDraftRound"),
            "CollegeDraftTeam": obj.get("CollegeDraftTeam"),
            "CollegeDraftYear": obj.get("CollegeDraftYear"),
            "CurrentStatus": obj.get("CurrentStatus"),
            "CurrentTeam": obj.get("CurrentTeam"),
            "DeclaredInactive": obj.get("DeclaredInactive"),
            "DepthDisplayOrder": obj.get("DepthDisplayOrder"),
            "DepthOrder": obj.get("DepthOrder"),
            "DepthPosition": obj.get("DepthPosition"),
            "DepthPositionCategory": obj.get("DepthPositionCategory"),
            "DraftKingsName": obj.get("DraftKingsName"),
            "DraftKingsPlayerID": obj.get("DraftKingsPlayerID"),
            "Experience": obj.get("Experience"),
            "ExperienceString": obj.get("ExperienceString"),
            "FanDuelName": obj.get("FanDuelName"),
            "FanDuelPlayerID": obj.get("FanDuelPlayerID"),
            "FantasyAlarmPlayerID": obj.get("FantasyAlarmPlayerID"),
            "FantasyDraftName": obj.get("FantasyDraftName"),
            "FantasyDraftPlayerID": obj.get("FantasyDraftPlayerID"),
            "FantasyPosition": obj.get("FantasyPosition"),
            "FantasyPositionDepthOrder": obj.get("FantasyPositionDepthOrder"),
            "FirstName": obj.get("FirstName"),
            "GlobalTeamID": obj.get("GlobalTeamID"),
            "Height": obj.get("Height"),
            "HeightFeet": obj.get("HeightFeet"),
            "HeightInches": obj.get("HeightInches"),
            "InjuryBodyPart": obj.get("InjuryBodyPart"),
            "InjuryNotes": obj.get("InjuryNotes"),
            "InjuryPractice": obj.get("InjuryPractice"),
            "InjuryPracticeDescription": obj.get("InjuryPracticeDescription"),
            "InjuryStartDate": obj.get("InjuryStartDate"),
            "InjuryStatus": obj.get("InjuryStatus"),
            "IsUndraftedFreeAgent": obj.get("IsUndraftedFreeAgent"),
            "LastName": obj.get("LastName"),
            "Name": obj.get("Name"),
            "Number": obj.get("Number"),
            "PhotoUrl": obj.get("PhotoUrl"),
            "PlayerID": obj.get("PlayerID"),
            "Position": obj.get("Position"),
            "PositionCategory": obj.get("PositionCategory"),
            "RotoWirePlayerID": obj.get("RotoWirePlayerID"),
            "RotoworldPlayerID": obj.get("RotoworldPlayerID"),
            "ShortName": obj.get("ShortName"),
            "SportRadarPlayerID": obj.get("SportRadarPlayerID"),
            "SportsDirectPlayerID": obj.get("SportsDirectPlayerID"),
            "StatsPlayerID": obj.get("StatsPlayerID"),
            "Status": obj.get("Status"),
            "Team": obj.get("Team"),
            "TeamID": obj.get("TeamID"),
            "UpcomingDraftKingsSalary": obj.get("UpcomingDraftKingsSalary"),
            "UpcomingFanDuelSalary": obj.get("UpcomingFanDuelSalary"),
            "UpcomingGameOpponent": obj.get("UpcomingGameOpponent"),
            "UpcomingGameWeek": obj.get("UpcomingGameWeek"),
            "UpcomingOpponentPositionRank": obj.get("UpcomingOpponentPositionRank"),
            "UpcomingOpponentRank": obj.get("UpcomingOpponentRank"),
            "UpcomingSalary": obj.get("UpcomingSalary"),
            "UpcomingYahooSalary": obj.get("UpcomingYahooSalary"),
            "UsaTodayHeadshotNoBackgroundUpdated": obj.get("UsaTodayHeadshotNoBackgroundUpdated"),
            "UsaTodayHeadshotNoBackgroundUrl": obj.get("UsaTodayHeadshotNoBackgroundUrl"),
            "UsaTodayHeadshotUpdated": obj.get("UsaTodayHeadshotUpdated"),
            "UsaTodayHeadshotUrl": obj.get("UsaTodayHeadshotUrl"),
            "UsaTodayPlayerID": obj.get("UsaTodayPlayerID"),
            "Weight": obj.get("Weight"),
            "XmlTeamPlayerID": obj.get("XmlTeamPlayerID"),
            "YahooName": obj.get("YahooName"),
            "YahooPlayerID": obj.get("YahooPlayerID")
        })
        return _obj


