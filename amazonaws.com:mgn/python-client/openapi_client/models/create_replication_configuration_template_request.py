# coding: utf-8

"""
    Application Migration Service

    The Application Migration Service service.

    The version of the OpenAPI document: 2020-02-26
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateReplicationConfigurationTemplateRequest(BaseModel):
    """
    CreateReplicationConfigurationTemplateRequest
    """ # noqa: E501
    associate_default_security_group: StrictBool = Field(description="Request to associate the default Application Migration Service Security group with the Replication Settings template.", alias="associateDefaultSecurityGroup")
    bandwidth_throttling: Annotated[int, Field(strict=True, ge=0)] = Field(description="Request to configure bandwidth throttling during Replication Settings template creation.", alias="bandwidthThrottling")
    create_public_ip: StrictBool = Field(description="Request to create Public IP during Replication Settings template creation.", alias="createPublicIP")
    data_plane_routing: StrictStr = Field(description="Request to configure data plane routing during Replication Settings template creation.", alias="dataPlaneRouting")
    default_large_staging_disk_type: StrictStr = Field(description="Request to configure the default large staging disk EBS volume type during Replication Settings template creation.", alias="defaultLargeStagingDiskType")
    ebs_encryption: StrictStr = Field(description="Request to configure EBS encryption during Replication Settings template creation.", alias="ebsEncryption")
    ebs_encryption_key_arn: Optional[Annotated[str, Field(min_length=20, strict=True, max_length=2048)]] = Field(default=None, description="Request to configure an EBS encryption key during Replication Settings template creation.", alias="ebsEncryptionKeyArn")
    replication_server_instance_type: Annotated[str, Field(min_length=0, strict=True, max_length=255)] = Field(description="Request to configure the Replication Server instance type during Replication Settings template creation.", alias="replicationServerInstanceType")
    replication_servers_security_groups_ids: Annotated[List[Annotated[str, Field(min_length=0, strict=True, max_length=255)]], Field(min_length=0, max_length=32)] = Field(description="Request to configure the Replication Server Security group ID during Replication Settings template creation.", alias="replicationServersSecurityGroupsIDs")
    staging_area_subnet_id: Annotated[str, Field(min_length=0, strict=True, max_length=255)] = Field(description="Request to configure the Staging Area subnet ID during Replication Settings template creation.", alias="stagingAreaSubnetId")
    staging_area_tags: Dict[str, Annotated[str, Field(min_length=0, strict=True, max_length=256)]] = Field(description="Request to configure Staging Area tags during Replication Settings template creation.", alias="stagingAreaTags")
    tags: Optional[Dict[str, Annotated[str, Field(min_length=0, strict=True, max_length=256)]]] = Field(default=None, description="Request to configure tags during Replication Settings template creation.")
    use_dedicated_replication_server: StrictBool = Field(description="Request to use Dedicated Replication Servers during Replication Settings template creation.", alias="useDedicatedReplicationServer")
    __properties: ClassVar[List[str]] = ["associateDefaultSecurityGroup", "bandwidthThrottling", "createPublicIP", "dataPlaneRouting", "defaultLargeStagingDiskType", "ebsEncryption", "ebsEncryptionKeyArn", "replicationServerInstanceType", "replicationServersSecurityGroupsIDs", "stagingAreaSubnetId", "stagingAreaTags", "tags", "useDedicatedReplicationServer"]

    @field_validator('data_plane_routing')
    def data_plane_routing_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['PRIVATE_IP', 'PUBLIC_IP']):
            raise ValueError("must be one of enum values ('PRIVATE_IP', 'PUBLIC_IP')")
        return value

    @field_validator('default_large_staging_disk_type')
    def default_large_staging_disk_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['GP2', 'ST1', 'GP3']):
            raise ValueError("must be one of enum values ('GP2', 'ST1', 'GP3')")
        return value

    @field_validator('ebs_encryption')
    def ebs_encryption_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DEFAULT', 'CUSTOM']):
            raise ValueError("must be one of enum values ('DEFAULT', 'CUSTOM')")
        return value

    @field_validator('staging_area_subnet_id')
    def staging_area_subnet_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^subnet-[0-9a-fA-F]{8,}$", value):
            raise ValueError(r"must validate the regular expression /^subnet-[0-9a-fA-F]{8,}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateReplicationConfigurationTemplateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateReplicationConfigurationTemplateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associateDefaultSecurityGroup": obj.get("associateDefaultSecurityGroup"),
            "bandwidthThrottling": obj.get("bandwidthThrottling"),
            "createPublicIP": obj.get("createPublicIP"),
            "dataPlaneRouting": obj.get("dataPlaneRouting"),
            "defaultLargeStagingDiskType": obj.get("defaultLargeStagingDiskType"),
            "ebsEncryption": obj.get("ebsEncryption"),
            "ebsEncryptionKeyArn": obj.get("ebsEncryptionKeyArn"),
            "replicationServerInstanceType": obj.get("replicationServerInstanceType"),
            "replicationServersSecurityGroupsIDs": obj.get("replicationServersSecurityGroupsIDs"),
            "stagingAreaSubnetId": obj.get("stagingAreaSubnetId"),
            "stagingAreaTags": obj.get("stagingAreaTags"),
            "tags": obj.get("tags"),
            "useDedicatedReplicationServer": obj.get("useDedicatedReplicationServer")
        })
        return _obj


