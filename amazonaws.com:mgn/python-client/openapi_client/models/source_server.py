# coding: utf-8

"""
    Application Migration Service

    The Application Migration Service service.

    The version of the OpenAPI document: 2020-02-26
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.source_server_data_replication_info import SourceServerDataReplicationInfo
from openapi_client.models.source_server_launched_instance import SourceServerLaunchedInstance
from openapi_client.models.source_server_life_cycle import SourceServerLifeCycle
from openapi_client.models.source_server_source_properties import SourceServerSourceProperties
from typing import Optional, Set
from typing_extensions import Self

class SourceServer(BaseModel):
    """
    SourceServer
    """ # noqa: E501
    application_id: Optional[Any] = Field(default=None, alias="applicationID")
    arn: Optional[Any] = None
    data_replication_info: Optional[SourceServerDataReplicationInfo] = Field(default=None, alias="dataReplicationInfo")
    fqdn_for_action_framework: Optional[Any] = Field(default=None, alias="fqdnForActionFramework")
    is_archived: Optional[Any] = Field(default=None, alias="isArchived")
    launched_instance: Optional[SourceServerLaunchedInstance] = Field(default=None, alias="launchedInstance")
    life_cycle: Optional[SourceServerLifeCycle] = Field(default=None, alias="lifeCycle")
    replication_type: Optional[Any] = Field(default=None, alias="replicationType")
    source_properties: Optional[SourceServerSourceProperties] = Field(default=None, alias="sourceProperties")
    source_server_id: Optional[Any] = Field(default=None, alias="sourceServerID")
    tags: Optional[Any] = None
    user_provided_id: Optional[Any] = Field(default=None, alias="userProvidedID")
    vcenter_client_id: Optional[Any] = Field(default=None, alias="vcenterClientID")
    __properties: ClassVar[List[str]] = ["applicationID", "arn", "dataReplicationInfo", "fqdnForActionFramework", "isArchived", "launchedInstance", "lifeCycle", "replicationType", "sourceProperties", "sourceServerID", "tags", "userProvidedID", "vcenterClientID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SourceServer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_replication_info
        if self.data_replication_info:
            _dict['dataReplicationInfo'] = self.data_replication_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of launched_instance
        if self.launched_instance:
            _dict['launchedInstance'] = self.launched_instance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of life_cycle
        if self.life_cycle:
            _dict['lifeCycle'] = self.life_cycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replication_type
        if self.replication_type:
            _dict['replicationType'] = self.replication_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_properties
        if self.source_properties:
            _dict['sourceProperties'] = self.source_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SourceServer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationID": obj.get("applicationID"),
            "arn": obj.get("arn"),
            "dataReplicationInfo": SourceServerDataReplicationInfo.from_dict(obj["dataReplicationInfo"]) if obj.get("dataReplicationInfo") is not None else None,
            "fqdnForActionFramework": obj.get("fqdnForActionFramework"),
            "isArchived": obj.get("isArchived"),
            "launchedInstance": SourceServerLaunchedInstance.from_dict(obj["launchedInstance"]) if obj.get("launchedInstance") is not None else None,
            "lifeCycle": SourceServerLifeCycle.from_dict(obj["lifeCycle"]) if obj.get("lifeCycle") is not None else None,
            "replicationType": ReplicationType.from_dict(obj["replicationType"]) if obj.get("replicationType") is not None else None,
            "sourceProperties": SourceServerSourceProperties.from_dict(obj["sourceProperties"]) if obj.get("sourceProperties") is not None else None,
            "sourceServerID": obj.get("sourceServerID"),
            "tags": obj.get("tags"),
            "userProvidedID": obj.get("userProvidedID"),
            "vcenterClientID": obj.get("vcenterClientID")
        })
        return _obj


