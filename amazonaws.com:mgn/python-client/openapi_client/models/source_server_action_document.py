# coding: utf-8

"""
    Application Migration Service

    The Application Migration Service service.

    The version of the OpenAPI document: 2020-02-26
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SourceServerActionDocument(BaseModel):
    """
    SourceServerActionDocument
    """ # noqa: E501
    action_id: Optional[Any] = Field(default=None, alias="actionID")
    action_name: Optional[Any] = Field(default=None, alias="actionName")
    active: Optional[Any] = None
    category: Optional[Any] = None
    description: Optional[Any] = None
    document_identifier: Optional[Any] = Field(default=None, alias="documentIdentifier")
    document_version: Optional[Any] = Field(default=None, alias="documentVersion")
    external_parameters: Optional[Any] = Field(default=None, alias="externalParameters")
    must_succeed_for_cutover: Optional[Any] = Field(default=None, alias="mustSucceedForCutover")
    order: Optional[Any] = None
    parameters: Optional[Any] = None
    timeout_seconds: Optional[Any] = Field(default=None, alias="timeoutSeconds")
    __properties: ClassVar[List[str]] = ["actionID", "actionName", "active", "category", "description", "documentIdentifier", "documentVersion", "externalParameters", "mustSucceedForCutover", "order", "parameters", "timeoutSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SourceServerActionDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict['category'] = self.category.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SourceServerActionDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionID": obj.get("actionID"),
            "actionName": obj.get("actionName"),
            "active": obj.get("active"),
            "category": ActionCategory.from_dict(obj["category"]) if obj.get("category") is not None else None,
            "description": obj.get("description"),
            "documentIdentifier": obj.get("documentIdentifier"),
            "documentVersion": obj.get("documentVersion"),
            "externalParameters": obj.get("externalParameters"),
            "mustSucceedForCutover": obj.get("mustSucceedForCutover"),
            "order": obj.get("order"),
            "parameters": obj.get("parameters"),
            "timeoutSeconds": obj.get("timeoutSeconds")
        })
        return _obj


