# coding: utf-8

"""
    AWS IoT Wireless

    <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>

    The version of the OpenAPI document: 2020-11-22
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.start_single_wireless_device_import_task_request_sidewalk import StartSingleWirelessDeviceImportTaskRequestSidewalk
from openapi_client.models.tag import Tag
from typing import Optional, Set
from typing_extensions import Self

class StartSingleWirelessDeviceImportTaskRequest(BaseModel):
    """
    StartSingleWirelessDeviceImportTaskRequest
    """ # noqa: E501
    destination_name: Annotated[str, Field(strict=True, max_length=128)] = Field(description="The name of the Sidewalk destination that describes the IoT rule to route messages from the device in the import task that will be onboarded to AWS IoT Wireless.", alias="DestinationName")
    client_request_token: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=64)]] = Field(default=None, description="Each resource must have a unique client request token. If you try to create a new resource with the same token as a resource that already exists, an exception occurs. If you omit this value, AWS SDKs will automatically generate a unique client request.", alias="ClientRequestToken")
    device_name: Optional[StrictStr] = Field(default=None, description="The name of the wireless device for which an import task is being started.", alias="DeviceName")
    tags: Optional[Annotated[List[Tag], Field(min_length=0, max_length=200)]] = Field(default=None, description="The tag to attach to the specified resource. Tags are metadata that you can use to manage a resource.", alias="Tags")
    sidewalk: StartSingleWirelessDeviceImportTaskRequestSidewalk = Field(alias="Sidewalk")
    __properties: ClassVar[List[str]] = ["DestinationName", "ClientRequestToken", "DeviceName", "Tags", "Sidewalk"]

    @field_validator('destination_name')
    def destination_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[a-zA-Z0-9-_]+", value):
            raise ValueError(r"must validate the regular expression /[a-zA-Z0-9-_]+/")
        return value

    @field_validator('client_request_token')
    def client_request_token_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9-_]+$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9-_]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StartSingleWirelessDeviceImportTaskRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item_tags in self.tags:
                if _item_tags:
                    _items.append(_item_tags.to_dict())
            _dict['Tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of sidewalk
        if self.sidewalk:
            _dict['Sidewalk'] = self.sidewalk.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StartSingleWirelessDeviceImportTaskRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DestinationName": obj.get("DestinationName"),
            "ClientRequestToken": obj.get("ClientRequestToken"),
            "DeviceName": obj.get("DeviceName"),
            "Tags": [Tag.from_dict(_item) for _item in obj["Tags"]] if obj.get("Tags") is not None else None,
            "Sidewalk": StartSingleWirelessDeviceImportTaskRequestSidewalk.from_dict(obj["Sidewalk"]) if obj.get("Sidewalk") is not None else None
        })
        return _obj


