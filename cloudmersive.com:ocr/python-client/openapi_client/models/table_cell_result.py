# coding: utf-8

"""
    ocrapi

    The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ocr_photo_text_element import OcrPhotoTextElement
from typing import Optional, Set
from typing_extensions import Self

class TableCellResult(BaseModel):
    """
    The recognition result of one cell in one row in a table of a form
    """ # noqa: E501
    cell_values: Optional[List[OcrPhotoTextElement]] = Field(default=None, description="Result cell value(s) extracted", alias="CellValues")
    column_id: Optional[StrictStr] = Field(default=None, description="The ID of the column", alias="ColumnID")
    __properties: ClassVar[List[str]] = ["CellValues", "ColumnID"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableCellResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cell_values (list)
        _items = []
        if self.cell_values:
            for _item_cell_values in self.cell_values:
                if _item_cell_values:
                    _items.append(_item_cell_values.to_dict())
            _dict['CellValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableCellResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "CellValues": [OcrPhotoTextElement.from_dict(_item) for _item in obj["CellValues"]] if obj.get("CellValues") is not None else None,
            "ColumnID": obj.get("ColumnID")
        })
        return _obj


