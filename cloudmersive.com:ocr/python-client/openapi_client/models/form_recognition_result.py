# coding: utf-8

"""
    ocrapi

    The powerful Optical Character Recognition (OCR) APIs let you convert scanned images of pages into recognized text.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.field_result import FieldResult
from openapi_client.models.table_result import TableResult
from typing import Optional, Set
from typing_extensions import Self

class FormRecognitionResult(BaseModel):
    """
    The result of extracting form field values
    """ # noqa: E501
    best_match_form_setting_name: Optional[StrictStr] = Field(default=None, description="Optional; populated when using photo/recognize/form/advanced with the Setting Name of the best-matching highest-relevance form", alias="BestMatchFormSettingName")
    diagnostics: Optional[List[StrictStr]] = Field(default=None, description="Diagnostic images - default is null, enable diagnostics=true to populate this parameter with one image per field", alias="Diagnostics")
    field_value_extraction_result: Optional[List[FieldResult]] = Field(default=None, description="Result of form field OCR data extraction", alias="FieldValueExtractionResult")
    successful: Optional[StrictBool] = Field(default=None, description="True if the operation was successful, false otherwise", alias="Successful")
    table_value_extraction_results: Optional[List[TableResult]] = Field(default=None, description="Result of form table OCR data extraction", alias="TableValueExtractionResults")
    __properties: ClassVar[List[str]] = ["BestMatchFormSettingName", "Diagnostics", "FieldValueExtractionResult", "Successful", "TableValueExtractionResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormRecognitionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in field_value_extraction_result (list)
        _items = []
        if self.field_value_extraction_result:
            for _item_field_value_extraction_result in self.field_value_extraction_result:
                if _item_field_value_extraction_result:
                    _items.append(_item_field_value_extraction_result.to_dict())
            _dict['FieldValueExtractionResult'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in table_value_extraction_results (list)
        _items = []
        if self.table_value_extraction_results:
            for _item_table_value_extraction_results in self.table_value_extraction_results:
                if _item_table_value_extraction_results:
                    _items.append(_item_table_value_extraction_results.to_dict())
            _dict['TableValueExtractionResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormRecognitionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BestMatchFormSettingName": obj.get("BestMatchFormSettingName"),
            "Diagnostics": obj.get("Diagnostics"),
            "FieldValueExtractionResult": [FieldResult.from_dict(_item) for _item in obj["FieldValueExtractionResult"]] if obj.get("FieldValueExtractionResult") is not None else None,
            "Successful": obj.get("Successful"),
            "TableValueExtractionResults": [TableResult.from_dict(_item) for _item in obj["TableValueExtractionResults"]] if obj.get("TableValueExtractionResults") is not None else None
        })
        return _obj


