# coding: utf-8

"""
    Routing

    Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.calculate_reachable_range_post_data_parameters_avoid_areas import CalculateReachableRangePostDataParametersAvoidAreas
from openapi_client.models.calculate_route_post_data_parameters_supporting_points_inner import CalculateRoutePostDataParametersSupportingPointsInner
from typing import Optional, Set
from typing_extensions import Self

class CalculateRoutePostDataParameters(BaseModel):
    """
    CalculateRoutePostDataParameters
    """ # noqa: E501
    allow_vignette: Optional[List[StrictStr]] = Field(default=None, alias="allowVignette")
    avoid_areas: Optional[CalculateReachableRangePostDataParametersAvoidAreas] = Field(default=None, alias="avoidAreas")
    avoid_vignette: Optional[List[StrictStr]] = Field(default=None, alias="avoidVignette")
    supporting_points: Optional[List[CalculateRoutePostDataParametersSupportingPointsInner]] = Field(default=None, alias="supportingPoints")
    __properties: ClassVar[List[str]] = ["allowVignette", "avoidAreas", "avoidVignette", "supportingPoints"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalculateRoutePostDataParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of avoid_areas
        if self.avoid_areas:
            _dict['avoidAreas'] = self.avoid_areas.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in supporting_points (list)
        _items = []
        if self.supporting_points:
            for _item_supporting_points in self.supporting_points:
                if _item_supporting_points:
                    _items.append(_item_supporting_points.to_dict())
            _dict['supportingPoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalculateRoutePostDataParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowVignette": obj.get("allowVignette"),
            "avoidAreas": CalculateReachableRangePostDataParametersAvoidAreas.from_dict(obj["avoidAreas"]) if obj.get("avoidAreas") is not None else None,
            "avoidVignette": obj.get("avoidVignette"),
            "supportingPoints": [CalculateRoutePostDataParametersSupportingPointsInner.from_dict(_item) for _item in obj["supportingPoints"]] if obj.get("supportingPoints") is not None else None
        })
        return _obj


