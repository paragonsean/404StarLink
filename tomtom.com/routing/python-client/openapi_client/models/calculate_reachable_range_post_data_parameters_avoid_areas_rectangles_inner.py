# coding: utf-8

"""
    Routing

    Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.calculate_reachable_range_post_data_parameters_avoid_areas_rectangles_inner_north_east_corner import CalculateReachableRangePostDataParametersAvoidAreasRectanglesInnerNorthEastCorner
from typing import Optional, Set
from typing_extensions import Self

class CalculateReachableRangePostDataParametersAvoidAreasRectanglesInner(BaseModel):
    """
    CalculateReachableRangePostDataParametersAvoidAreasRectanglesInner
    """ # noqa: E501
    north_east_corner: Optional[CalculateReachableRangePostDataParametersAvoidAreasRectanglesInnerNorthEastCorner] = Field(default=None, alias="northEastCorner")
    south_west_corner: Optional[CalculateReachableRangePostDataParametersAvoidAreasRectanglesInnerNorthEastCorner] = Field(default=None, alias="southWestCorner")
    __properties: ClassVar[List[str]] = ["northEastCorner", "southWestCorner"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalculateReachableRangePostDataParametersAvoidAreasRectanglesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of north_east_corner
        if self.north_east_corner:
            _dict['northEastCorner'] = self.north_east_corner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of south_west_corner
        if self.south_west_corner:
            _dict['southWestCorner'] = self.south_west_corner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalculateReachableRangePostDataParametersAvoidAreasRectanglesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "northEastCorner": CalculateReachableRangePostDataParametersAvoidAreasRectanglesInnerNorthEastCorner.from_dict(obj["northEastCorner"]) if obj.get("northEastCorner") is not None else None,
            "southWestCorner": CalculateReachableRangePostDataParametersAvoidAreasRectanglesInnerNorthEastCorner.from_dict(obj["southWestCorner"]) if obj.get("southWestCorner") is not None else None
        })
        return _obj


