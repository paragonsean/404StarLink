# coding: utf-8

"""
    Routing

    Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.calculate_reachable_range_post_data_parameters import CalculateReachableRangePostDataParameters
from openapi_client.models.calculate_route_post_data_parameters import CalculateRoutePostDataParameters

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class RoutingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def routing_version_number_calculate_reachable_range_origin_content_type_get(
        self,
        version_number: Annotated[StrictInt, Field(description="Service version number. The current value is 1.")],
        origin: Annotated[StrictStr, Field(description="Point from which the range calculation should start.")],
        content_type: Annotated[StrictStr, Field(description="The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.")],
        fuel_budget_in_liters: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.")] = None,
        energy_budget_ink_wh: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.")] = None,
        time_budget_in_sec: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method.")] = None,
        report: Annotated[Optional[StrictStr], Field(description="Specifies which data should be reported for diagnosis purposes.")] = None,
        depart_at: Annotated[Optional[StrictStr], Field(description="The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.")] = None,
        arrive_at: Annotated[Optional[StrictStr], Field(description="The date and time of arrival at the destination point. It must be specified as a dateTime.")] = None,
        route_type: Annotated[Optional[StrictStr], Field(description="The type of route requested.")] = None,
        traffic: Annotated[Optional[StrictBool], Field(description="Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.")] = None,
        avoid: Annotated[Optional[StrictStr], Field(description="Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools")] = None,
        travel_mode: Annotated[Optional[StrictStr], Field(description="The mode of travel for the requested route.")] = None,
        hilliness: Annotated[Optional[StrictStr], Field(description="Degree of hilliness for calculating a thrilling route.")] = None,
        windingness: Annotated[Optional[StrictStr], Field(description="Amount that a thrilling route should wind.")] = None,
        vehicle_max_speed: Annotated[Optional[StrictInt], Field(description="Maximum speed of the vehicle in km/hour.")] = None,
        vehicle_weight: Annotated[Optional[StrictInt], Field(description="Weight of the vehicle in kilograms.")] = None,
        vehicle_axle_weight: Annotated[Optional[StrictInt], Field(description="Weight per axle of the vehicle in kg.")] = None,
        vehicle_length: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Length of the vehicle in meters.")] = None,
        vehicle_width: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Width of the vehicle in meters.")] = None,
        vehicle_height: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Height of the vehicle in meters.")] = None,
        vehicle_commercial: Annotated[Optional[StrictBool], Field(description="Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.")] = None,
        vehicle_load_type: Annotated[Optional[StrictStr], Field(description="Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.")] = None,
        constant_speed_consumption_in_liters_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        current_fuel_in_liters: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the current supply of fuel in liters.")] = None,
        auxiliary_power_in_liters_per_hour: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.")] = None,
        fuel_energy_density_in_m_joules_per_liter: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).")] = None,
        acceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).")] = None,
        deceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).")] = None,
        uphill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).")] = None,
        downhill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).")] = None,
        vehicle_engine_type: Annotated[Optional[StrictStr], Field(description="Engine type of the vehicle.")] = None,
        constant_speed_consumption_ink_wh_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Reachable Range

        Calculates a set of locations that can be reached from the origin point.

        :param version_number: Service version number. The current value is 1. (required)
        :type version_number: int
        :param origin: Point from which the range calculation should start. (required)
        :type origin: str
        :param content_type: The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
        :type content_type: str
        :param fuel_budget_in_liters: Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
        :type fuel_budget_in_liters: float
        :param energy_budget_ink_wh: Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
        :type energy_budget_ink_wh: float
        :param time_budget_in_sec: Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
        :type time_budget_in_sec: float
        :param param_callback: Specifies the jsonp callback method.
        :type param_callback: str
        :param report: Specifies which data should be reported for diagnosis purposes.
        :type report: str
        :param depart_at: The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
        :type depart_at: str
        :param arrive_at: The date and time of arrival at the destination point. It must be specified as a dateTime.
        :type arrive_at: str
        :param route_type: The type of route requested.
        :type route_type: str
        :param traffic: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
        :type traffic: bool
        :param avoid: Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools
        :type avoid: str
        :param travel_mode: The mode of travel for the requested route.
        :type travel_mode: str
        :param hilliness: Degree of hilliness for calculating a thrilling route.
        :type hilliness: str
        :param windingness: Amount that a thrilling route should wind.
        :type windingness: str
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters.
        :type vehicle_length: float
        :param vehicle_width: Width of the vehicle in meters.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters.
        :type vehicle_height: float
        :param vehicle_commercial: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
        :type vehicle_load_type: str
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_in_liters_per_hundredkm: str
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
        :type downhill_efficiency: float
        :param vehicle_engine_type: Engine type of the vehicle.
        :type vehicle_engine_type: str
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._routing_version_number_calculate_reachable_range_origin_content_type_get_serialize(
            version_number=version_number,
            origin=origin,
            content_type=content_type,
            fuel_budget_in_liters=fuel_budget_in_liters,
            energy_budget_ink_wh=energy_budget_ink_wh,
            time_budget_in_sec=time_budget_in_sec,
            param_callback=param_callback,
            report=report,
            depart_at=depart_at,
            arrive_at=arrive_at,
            route_type=route_type,
            traffic=traffic,
            avoid=avoid,
            travel_mode=travel_mode,
            hilliness=hilliness,
            windingness=windingness,
            vehicle_max_speed=vehicle_max_speed,
            vehicle_weight=vehicle_weight,
            vehicle_axle_weight=vehicle_axle_weight,
            vehicle_length=vehicle_length,
            vehicle_width=vehicle_width,
            vehicle_height=vehicle_height,
            vehicle_commercial=vehicle_commercial,
            vehicle_load_type=vehicle_load_type,
            constant_speed_consumption_in_liters_per_hundredkm=constant_speed_consumption_in_liters_per_hundredkm,
            current_fuel_in_liters=current_fuel_in_liters,
            auxiliary_power_in_liters_per_hour=auxiliary_power_in_liters_per_hour,
            fuel_energy_density_in_m_joules_per_liter=fuel_energy_density_in_m_joules_per_liter,
            acceleration_efficiency=acceleration_efficiency,
            deceleration_efficiency=deceleration_efficiency,
            uphill_efficiency=uphill_efficiency,
            downhill_efficiency=downhill_efficiency,
            vehicle_engine_type=vehicle_engine_type,
            constant_speed_consumption_ink_wh_per_hundredkm=constant_speed_consumption_ink_wh_per_hundredkm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '408': None,
            '414': None,
            '500': None,
            '502': None,
            '503': None,
            '504': None,
            '596': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def routing_version_number_calculate_reachable_range_origin_content_type_get_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Service version number. The current value is 1.")],
        origin: Annotated[StrictStr, Field(description="Point from which the range calculation should start.")],
        content_type: Annotated[StrictStr, Field(description="The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.")],
        fuel_budget_in_liters: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.")] = None,
        energy_budget_ink_wh: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.")] = None,
        time_budget_in_sec: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method.")] = None,
        report: Annotated[Optional[StrictStr], Field(description="Specifies which data should be reported for diagnosis purposes.")] = None,
        depart_at: Annotated[Optional[StrictStr], Field(description="The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.")] = None,
        arrive_at: Annotated[Optional[StrictStr], Field(description="The date and time of arrival at the destination point. It must be specified as a dateTime.")] = None,
        route_type: Annotated[Optional[StrictStr], Field(description="The type of route requested.")] = None,
        traffic: Annotated[Optional[StrictBool], Field(description="Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.")] = None,
        avoid: Annotated[Optional[StrictStr], Field(description="Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools")] = None,
        travel_mode: Annotated[Optional[StrictStr], Field(description="The mode of travel for the requested route.")] = None,
        hilliness: Annotated[Optional[StrictStr], Field(description="Degree of hilliness for calculating a thrilling route.")] = None,
        windingness: Annotated[Optional[StrictStr], Field(description="Amount that a thrilling route should wind.")] = None,
        vehicle_max_speed: Annotated[Optional[StrictInt], Field(description="Maximum speed of the vehicle in km/hour.")] = None,
        vehicle_weight: Annotated[Optional[StrictInt], Field(description="Weight of the vehicle in kilograms.")] = None,
        vehicle_axle_weight: Annotated[Optional[StrictInt], Field(description="Weight per axle of the vehicle in kg.")] = None,
        vehicle_length: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Length of the vehicle in meters.")] = None,
        vehicle_width: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Width of the vehicle in meters.")] = None,
        vehicle_height: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Height of the vehicle in meters.")] = None,
        vehicle_commercial: Annotated[Optional[StrictBool], Field(description="Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.")] = None,
        vehicle_load_type: Annotated[Optional[StrictStr], Field(description="Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.")] = None,
        constant_speed_consumption_in_liters_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        current_fuel_in_liters: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the current supply of fuel in liters.")] = None,
        auxiliary_power_in_liters_per_hour: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.")] = None,
        fuel_energy_density_in_m_joules_per_liter: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).")] = None,
        acceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).")] = None,
        deceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).")] = None,
        uphill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).")] = None,
        downhill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).")] = None,
        vehicle_engine_type: Annotated[Optional[StrictStr], Field(description="Engine type of the vehicle.")] = None,
        constant_speed_consumption_ink_wh_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Reachable Range

        Calculates a set of locations that can be reached from the origin point.

        :param version_number: Service version number. The current value is 1. (required)
        :type version_number: int
        :param origin: Point from which the range calculation should start. (required)
        :type origin: str
        :param content_type: The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
        :type content_type: str
        :param fuel_budget_in_liters: Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
        :type fuel_budget_in_liters: float
        :param energy_budget_ink_wh: Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
        :type energy_budget_ink_wh: float
        :param time_budget_in_sec: Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
        :type time_budget_in_sec: float
        :param param_callback: Specifies the jsonp callback method.
        :type param_callback: str
        :param report: Specifies which data should be reported for diagnosis purposes.
        :type report: str
        :param depart_at: The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
        :type depart_at: str
        :param arrive_at: The date and time of arrival at the destination point. It must be specified as a dateTime.
        :type arrive_at: str
        :param route_type: The type of route requested.
        :type route_type: str
        :param traffic: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
        :type traffic: bool
        :param avoid: Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools
        :type avoid: str
        :param travel_mode: The mode of travel for the requested route.
        :type travel_mode: str
        :param hilliness: Degree of hilliness for calculating a thrilling route.
        :type hilliness: str
        :param windingness: Amount that a thrilling route should wind.
        :type windingness: str
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters.
        :type vehicle_length: float
        :param vehicle_width: Width of the vehicle in meters.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters.
        :type vehicle_height: float
        :param vehicle_commercial: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
        :type vehicle_load_type: str
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_in_liters_per_hundredkm: str
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
        :type downhill_efficiency: float
        :param vehicle_engine_type: Engine type of the vehicle.
        :type vehicle_engine_type: str
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._routing_version_number_calculate_reachable_range_origin_content_type_get_serialize(
            version_number=version_number,
            origin=origin,
            content_type=content_type,
            fuel_budget_in_liters=fuel_budget_in_liters,
            energy_budget_ink_wh=energy_budget_ink_wh,
            time_budget_in_sec=time_budget_in_sec,
            param_callback=param_callback,
            report=report,
            depart_at=depart_at,
            arrive_at=arrive_at,
            route_type=route_type,
            traffic=traffic,
            avoid=avoid,
            travel_mode=travel_mode,
            hilliness=hilliness,
            windingness=windingness,
            vehicle_max_speed=vehicle_max_speed,
            vehicle_weight=vehicle_weight,
            vehicle_axle_weight=vehicle_axle_weight,
            vehicle_length=vehicle_length,
            vehicle_width=vehicle_width,
            vehicle_height=vehicle_height,
            vehicle_commercial=vehicle_commercial,
            vehicle_load_type=vehicle_load_type,
            constant_speed_consumption_in_liters_per_hundredkm=constant_speed_consumption_in_liters_per_hundredkm,
            current_fuel_in_liters=current_fuel_in_liters,
            auxiliary_power_in_liters_per_hour=auxiliary_power_in_liters_per_hour,
            fuel_energy_density_in_m_joules_per_liter=fuel_energy_density_in_m_joules_per_liter,
            acceleration_efficiency=acceleration_efficiency,
            deceleration_efficiency=deceleration_efficiency,
            uphill_efficiency=uphill_efficiency,
            downhill_efficiency=downhill_efficiency,
            vehicle_engine_type=vehicle_engine_type,
            constant_speed_consumption_ink_wh_per_hundredkm=constant_speed_consumption_ink_wh_per_hundredkm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '408': None,
            '414': None,
            '500': None,
            '502': None,
            '503': None,
            '504': None,
            '596': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def routing_version_number_calculate_reachable_range_origin_content_type_get_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Service version number. The current value is 1.")],
        origin: Annotated[StrictStr, Field(description="Point from which the range calculation should start.")],
        content_type: Annotated[StrictStr, Field(description="The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.")],
        fuel_budget_in_liters: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.")] = None,
        energy_budget_ink_wh: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.")] = None,
        time_budget_in_sec: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method.")] = None,
        report: Annotated[Optional[StrictStr], Field(description="Specifies which data should be reported for diagnosis purposes.")] = None,
        depart_at: Annotated[Optional[StrictStr], Field(description="The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.")] = None,
        arrive_at: Annotated[Optional[StrictStr], Field(description="The date and time of arrival at the destination point. It must be specified as a dateTime.")] = None,
        route_type: Annotated[Optional[StrictStr], Field(description="The type of route requested.")] = None,
        traffic: Annotated[Optional[StrictBool], Field(description="Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.")] = None,
        avoid: Annotated[Optional[StrictStr], Field(description="Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools")] = None,
        travel_mode: Annotated[Optional[StrictStr], Field(description="The mode of travel for the requested route.")] = None,
        hilliness: Annotated[Optional[StrictStr], Field(description="Degree of hilliness for calculating a thrilling route.")] = None,
        windingness: Annotated[Optional[StrictStr], Field(description="Amount that a thrilling route should wind.")] = None,
        vehicle_max_speed: Annotated[Optional[StrictInt], Field(description="Maximum speed of the vehicle in km/hour.")] = None,
        vehicle_weight: Annotated[Optional[StrictInt], Field(description="Weight of the vehicle in kilograms.")] = None,
        vehicle_axle_weight: Annotated[Optional[StrictInt], Field(description="Weight per axle of the vehicle in kg.")] = None,
        vehicle_length: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Length of the vehicle in meters.")] = None,
        vehicle_width: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Width of the vehicle in meters.")] = None,
        vehicle_height: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Height of the vehicle in meters.")] = None,
        vehicle_commercial: Annotated[Optional[StrictBool], Field(description="Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.")] = None,
        vehicle_load_type: Annotated[Optional[StrictStr], Field(description="Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.")] = None,
        constant_speed_consumption_in_liters_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        current_fuel_in_liters: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the current supply of fuel in liters.")] = None,
        auxiliary_power_in_liters_per_hour: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.")] = None,
        fuel_energy_density_in_m_joules_per_liter: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).")] = None,
        acceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).")] = None,
        deceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).")] = None,
        uphill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).")] = None,
        downhill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).")] = None,
        vehicle_engine_type: Annotated[Optional[StrictStr], Field(description="Engine type of the vehicle.")] = None,
        constant_speed_consumption_ink_wh_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reachable Range

        Calculates a set of locations that can be reached from the origin point.

        :param version_number: Service version number. The current value is 1. (required)
        :type version_number: int
        :param origin: Point from which the range calculation should start. (required)
        :type origin: str
        :param content_type: The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
        :type content_type: str
        :param fuel_budget_in_liters: Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
        :type fuel_budget_in_liters: float
        :param energy_budget_ink_wh: Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
        :type energy_budget_ink_wh: float
        :param time_budget_in_sec: Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
        :type time_budget_in_sec: float
        :param param_callback: Specifies the jsonp callback method.
        :type param_callback: str
        :param report: Specifies which data should be reported for diagnosis purposes.
        :type report: str
        :param depart_at: The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
        :type depart_at: str
        :param arrive_at: The date and time of arrival at the destination point. It must be specified as a dateTime.
        :type arrive_at: str
        :param route_type: The type of route requested.
        :type route_type: str
        :param traffic: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
        :type traffic: bool
        :param avoid: Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools
        :type avoid: str
        :param travel_mode: The mode of travel for the requested route.
        :type travel_mode: str
        :param hilliness: Degree of hilliness for calculating a thrilling route.
        :type hilliness: str
        :param windingness: Amount that a thrilling route should wind.
        :type windingness: str
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters.
        :type vehicle_length: float
        :param vehicle_width: Width of the vehicle in meters.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters.
        :type vehicle_height: float
        :param vehicle_commercial: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
        :type vehicle_load_type: str
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_in_liters_per_hundredkm: str
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
        :type downhill_efficiency: float
        :param vehicle_engine_type: Engine type of the vehicle.
        :type vehicle_engine_type: str
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._routing_version_number_calculate_reachable_range_origin_content_type_get_serialize(
            version_number=version_number,
            origin=origin,
            content_type=content_type,
            fuel_budget_in_liters=fuel_budget_in_liters,
            energy_budget_ink_wh=energy_budget_ink_wh,
            time_budget_in_sec=time_budget_in_sec,
            param_callback=param_callback,
            report=report,
            depart_at=depart_at,
            arrive_at=arrive_at,
            route_type=route_type,
            traffic=traffic,
            avoid=avoid,
            travel_mode=travel_mode,
            hilliness=hilliness,
            windingness=windingness,
            vehicle_max_speed=vehicle_max_speed,
            vehicle_weight=vehicle_weight,
            vehicle_axle_weight=vehicle_axle_weight,
            vehicle_length=vehicle_length,
            vehicle_width=vehicle_width,
            vehicle_height=vehicle_height,
            vehicle_commercial=vehicle_commercial,
            vehicle_load_type=vehicle_load_type,
            constant_speed_consumption_in_liters_per_hundredkm=constant_speed_consumption_in_liters_per_hundredkm,
            current_fuel_in_liters=current_fuel_in_liters,
            auxiliary_power_in_liters_per_hour=auxiliary_power_in_liters_per_hour,
            fuel_energy_density_in_m_joules_per_liter=fuel_energy_density_in_m_joules_per_liter,
            acceleration_efficiency=acceleration_efficiency,
            deceleration_efficiency=deceleration_efficiency,
            uphill_efficiency=uphill_efficiency,
            downhill_efficiency=downhill_efficiency,
            vehicle_engine_type=vehicle_engine_type,
            constant_speed_consumption_ink_wh_per_hundredkm=constant_speed_consumption_ink_wh_per_hundredkm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '408': None,
            '414': None,
            '500': None,
            '502': None,
            '503': None,
            '504': None,
            '596': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _routing_version_number_calculate_reachable_range_origin_content_type_get_serialize(
        self,
        version_number,
        origin,
        content_type,
        fuel_budget_in_liters,
        energy_budget_ink_wh,
        time_budget_in_sec,
        param_callback,
        report,
        depart_at,
        arrive_at,
        route_type,
        traffic,
        avoid,
        travel_mode,
        hilliness,
        windingness,
        vehicle_max_speed,
        vehicle_weight,
        vehicle_axle_weight,
        vehicle_length,
        vehicle_width,
        vehicle_height,
        vehicle_commercial,
        vehicle_load_type,
        constant_speed_consumption_in_liters_per_hundredkm,
        current_fuel_in_liters,
        auxiliary_power_in_liters_per_hour,
        fuel_energy_density_in_m_joules_per_liter,
        acceleration_efficiency,
        deceleration_efficiency,
        uphill_efficiency,
        downhill_efficiency,
        vehicle_engine_type,
        constant_speed_consumption_ink_wh_per_hundredkm,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        if origin is not None:
            _path_params['origin'] = origin
        if content_type is not None:
            _path_params['contentType'] = content_type
        # process the query parameters
        if fuel_budget_in_liters is not None:
            
            _query_params.append(('fuelBudgetInLiters', fuel_budget_in_liters))
            
        if energy_budget_ink_wh is not None:
            
            _query_params.append(('energyBudgetInkWh', energy_budget_ink_wh))
            
        if time_budget_in_sec is not None:
            
            _query_params.append(('timeBudgetInSec', time_budget_in_sec))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if report is not None:
            
            _query_params.append(('report', report))
            
        if depart_at is not None:
            
            _query_params.append(('departAt', depart_at))
            
        if arrive_at is not None:
            
            _query_params.append(('arriveAt', arrive_at))
            
        if route_type is not None:
            
            _query_params.append(('routeType', route_type))
            
        if traffic is not None:
            
            _query_params.append(('traffic', traffic))
            
        if avoid is not None:
            
            _query_params.append(('avoid', avoid))
            
        if travel_mode is not None:
            
            _query_params.append(('travelMode', travel_mode))
            
        if hilliness is not None:
            
            _query_params.append(('hilliness', hilliness))
            
        if windingness is not None:
            
            _query_params.append(('windingness', windingness))
            
        if vehicle_max_speed is not None:
            
            _query_params.append(('vehicleMaxSpeed', vehicle_max_speed))
            
        if vehicle_weight is not None:
            
            _query_params.append(('vehicleWeight', vehicle_weight))
            
        if vehicle_axle_weight is not None:
            
            _query_params.append(('vehicleAxleWeight', vehicle_axle_weight))
            
        if vehicle_length is not None:
            
            _query_params.append(('vehicleLength', vehicle_length))
            
        if vehicle_width is not None:
            
            _query_params.append(('vehicleWidth', vehicle_width))
            
        if vehicle_height is not None:
            
            _query_params.append(('vehicleHeight', vehicle_height))
            
        if vehicle_commercial is not None:
            
            _query_params.append(('vehicleCommercial', vehicle_commercial))
            
        if vehicle_load_type is not None:
            
            _query_params.append(('vehicleLoadType', vehicle_load_type))
            
        if constant_speed_consumption_in_liters_per_hundredkm is not None:
            
            _query_params.append(('constantSpeedConsumptionInLitersPerHundredkm', constant_speed_consumption_in_liters_per_hundredkm))
            
        if current_fuel_in_liters is not None:
            
            _query_params.append(('currentFuelInLiters', current_fuel_in_liters))
            
        if auxiliary_power_in_liters_per_hour is not None:
            
            _query_params.append(('auxiliaryPowerInLitersPerHour', auxiliary_power_in_liters_per_hour))
            
        if fuel_energy_density_in_m_joules_per_liter is not None:
            
            _query_params.append(('fuelEnergyDensityInMJoulesPerLiter', fuel_energy_density_in_m_joules_per_liter))
            
        if acceleration_efficiency is not None:
            
            _query_params.append(('accelerationEfficiency', acceleration_efficiency))
            
        if deceleration_efficiency is not None:
            
            _query_params.append(('decelerationEfficiency', deceleration_efficiency))
            
        if uphill_efficiency is not None:
            
            _query_params.append(('uphillEfficiency', uphill_efficiency))
            
        if downhill_efficiency is not None:
            
            _query_params.append(('downhillEfficiency', downhill_efficiency))
            
        if vehicle_engine_type is not None:
            
            _query_params.append(('vehicleEngineType', vehicle_engine_type))
            
        if constant_speed_consumption_ink_wh_per_hundredkm is not None:
            
            _query_params.append(('constantSpeedConsumptionInkWhPerHundredkm', constant_speed_consumption_ink_wh_per_hundredkm))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def routing_version_number_calculate_reachable_range_origin_content_type_post(
        self,
        version_number: Annotated[StrictInt, Field(description="Service version number. The current value is 1.")],
        origin: Annotated[StrictStr, Field(description="Point from which the range calculation should start.")],
        content_type: Annotated[StrictStr, Field(description="The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.")],
        fuel_budget_in_liters: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.")] = None,
        energy_budget_ink_wh: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.")] = None,
        time_budget_in_sec: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method.")] = None,
        report: Annotated[Optional[StrictStr], Field(description="Specifies which data should be reported for diagnosis purposes.")] = None,
        depart_at: Annotated[Optional[StrictStr], Field(description="The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.")] = None,
        arrive_at: Annotated[Optional[StrictStr], Field(description="The date and time of arrival at the destination point. It must be specified as a dateTime.")] = None,
        route_type: Annotated[Optional[StrictStr], Field(description="The type of route requested.")] = None,
        traffic: Annotated[Optional[StrictBool], Field(description="Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.")] = None,
        avoid: Annotated[Optional[StrictStr], Field(description="Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools")] = None,
        travel_mode: Annotated[Optional[StrictStr], Field(description="The mode of travel for the requested route.")] = None,
        hilliness: Annotated[Optional[StrictStr], Field(description="Degree of hilliness for calculating a thrilling route.")] = None,
        windingness: Annotated[Optional[StrictStr], Field(description="Amount that a thrilling route should wind.")] = None,
        vehicle_max_speed: Annotated[Optional[StrictInt], Field(description="Maximum speed of the vehicle in km/hour.")] = None,
        vehicle_weight: Annotated[Optional[StrictInt], Field(description="Weight of the vehicle in kilograms.")] = None,
        vehicle_axle_weight: Annotated[Optional[StrictInt], Field(description="Weight per axle of the vehicle in kg.")] = None,
        vehicle_length: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Length of the vehicle in meters.")] = None,
        vehicle_width: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Width of the vehicle in meters.")] = None,
        vehicle_height: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Height of the vehicle in meters.")] = None,
        vehicle_commercial: Annotated[Optional[StrictBool], Field(description="Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.")] = None,
        vehicle_load_type: Annotated[Optional[StrictStr], Field(description="Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.")] = None,
        constant_speed_consumption_in_liters_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        current_fuel_in_liters: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the current supply of fuel in liters.")] = None,
        auxiliary_power_in_liters_per_hour: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.")] = None,
        fuel_energy_density_in_m_joules_per_liter: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).")] = None,
        acceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).")] = None,
        deceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).")] = None,
        uphill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).")] = None,
        downhill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).")] = None,
        vehicle_engine_type: Annotated[Optional[StrictStr], Field(description="Engine type of the vehicle.")] = None,
        constant_speed_consumption_ink_wh_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        calculate_reachable_range_post_data_parameters: Optional[CalculateReachableRangePostDataParameters] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Reachable Range

        Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.

        :param version_number: Service version number. The current value is 1. (required)
        :type version_number: int
        :param origin: Point from which the range calculation should start. (required)
        :type origin: str
        :param content_type: The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
        :type content_type: str
        :param fuel_budget_in_liters: Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
        :type fuel_budget_in_liters: float
        :param energy_budget_ink_wh: Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
        :type energy_budget_ink_wh: float
        :param time_budget_in_sec: Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
        :type time_budget_in_sec: float
        :param param_callback: Specifies the jsonp callback method.
        :type param_callback: str
        :param report: Specifies which data should be reported for diagnosis purposes.
        :type report: str
        :param depart_at: The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
        :type depart_at: str
        :param arrive_at: The date and time of arrival at the destination point. It must be specified as a dateTime.
        :type arrive_at: str
        :param route_type: The type of route requested.
        :type route_type: str
        :param traffic: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
        :type traffic: bool
        :param avoid: Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools
        :type avoid: str
        :param travel_mode: The mode of travel for the requested route.
        :type travel_mode: str
        :param hilliness: Degree of hilliness for calculating a thrilling route.
        :type hilliness: str
        :param windingness: Amount that a thrilling route should wind.
        :type windingness: str
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters.
        :type vehicle_length: float
        :param vehicle_width: Width of the vehicle in meters.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters.
        :type vehicle_height: float
        :param vehicle_commercial: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
        :type vehicle_load_type: str
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_in_liters_per_hundredkm: str
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
        :type downhill_efficiency: float
        :param vehicle_engine_type: Engine type of the vehicle.
        :type vehicle_engine_type: str
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param calculate_reachable_range_post_data_parameters:
        :type calculate_reachable_range_post_data_parameters: CalculateReachableRangePostDataParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._routing_version_number_calculate_reachable_range_origin_content_type_post_serialize(
            version_number=version_number,
            origin=origin,
            content_type=content_type,
            fuel_budget_in_liters=fuel_budget_in_liters,
            energy_budget_ink_wh=energy_budget_ink_wh,
            time_budget_in_sec=time_budget_in_sec,
            param_callback=param_callback,
            report=report,
            depart_at=depart_at,
            arrive_at=arrive_at,
            route_type=route_type,
            traffic=traffic,
            avoid=avoid,
            travel_mode=travel_mode,
            hilliness=hilliness,
            windingness=windingness,
            vehicle_max_speed=vehicle_max_speed,
            vehicle_weight=vehicle_weight,
            vehicle_axle_weight=vehicle_axle_weight,
            vehicle_length=vehicle_length,
            vehicle_width=vehicle_width,
            vehicle_height=vehicle_height,
            vehicle_commercial=vehicle_commercial,
            vehicle_load_type=vehicle_load_type,
            constant_speed_consumption_in_liters_per_hundredkm=constant_speed_consumption_in_liters_per_hundredkm,
            current_fuel_in_liters=current_fuel_in_liters,
            auxiliary_power_in_liters_per_hour=auxiliary_power_in_liters_per_hour,
            fuel_energy_density_in_m_joules_per_liter=fuel_energy_density_in_m_joules_per_liter,
            acceleration_efficiency=acceleration_efficiency,
            deceleration_efficiency=deceleration_efficiency,
            uphill_efficiency=uphill_efficiency,
            downhill_efficiency=downhill_efficiency,
            vehicle_engine_type=vehicle_engine_type,
            constant_speed_consumption_ink_wh_per_hundredkm=constant_speed_consumption_ink_wh_per_hundredkm,
            calculate_reachable_range_post_data_parameters=calculate_reachable_range_post_data_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '408': None,
            '414': None,
            '500': None,
            '502': None,
            '503': None,
            '504': None,
            '596': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def routing_version_number_calculate_reachable_range_origin_content_type_post_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Service version number. The current value is 1.")],
        origin: Annotated[StrictStr, Field(description="Point from which the range calculation should start.")],
        content_type: Annotated[StrictStr, Field(description="The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.")],
        fuel_budget_in_liters: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.")] = None,
        energy_budget_ink_wh: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.")] = None,
        time_budget_in_sec: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method.")] = None,
        report: Annotated[Optional[StrictStr], Field(description="Specifies which data should be reported for diagnosis purposes.")] = None,
        depart_at: Annotated[Optional[StrictStr], Field(description="The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.")] = None,
        arrive_at: Annotated[Optional[StrictStr], Field(description="The date and time of arrival at the destination point. It must be specified as a dateTime.")] = None,
        route_type: Annotated[Optional[StrictStr], Field(description="The type of route requested.")] = None,
        traffic: Annotated[Optional[StrictBool], Field(description="Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.")] = None,
        avoid: Annotated[Optional[StrictStr], Field(description="Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools")] = None,
        travel_mode: Annotated[Optional[StrictStr], Field(description="The mode of travel for the requested route.")] = None,
        hilliness: Annotated[Optional[StrictStr], Field(description="Degree of hilliness for calculating a thrilling route.")] = None,
        windingness: Annotated[Optional[StrictStr], Field(description="Amount that a thrilling route should wind.")] = None,
        vehicle_max_speed: Annotated[Optional[StrictInt], Field(description="Maximum speed of the vehicle in km/hour.")] = None,
        vehicle_weight: Annotated[Optional[StrictInt], Field(description="Weight of the vehicle in kilograms.")] = None,
        vehicle_axle_weight: Annotated[Optional[StrictInt], Field(description="Weight per axle of the vehicle in kg.")] = None,
        vehicle_length: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Length of the vehicle in meters.")] = None,
        vehicle_width: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Width of the vehicle in meters.")] = None,
        vehicle_height: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Height of the vehicle in meters.")] = None,
        vehicle_commercial: Annotated[Optional[StrictBool], Field(description="Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.")] = None,
        vehicle_load_type: Annotated[Optional[StrictStr], Field(description="Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.")] = None,
        constant_speed_consumption_in_liters_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        current_fuel_in_liters: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the current supply of fuel in liters.")] = None,
        auxiliary_power_in_liters_per_hour: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.")] = None,
        fuel_energy_density_in_m_joules_per_liter: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).")] = None,
        acceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).")] = None,
        deceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).")] = None,
        uphill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).")] = None,
        downhill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).")] = None,
        vehicle_engine_type: Annotated[Optional[StrictStr], Field(description="Engine type of the vehicle.")] = None,
        constant_speed_consumption_ink_wh_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        calculate_reachable_range_post_data_parameters: Optional[CalculateReachableRangePostDataParameters] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Reachable Range

        Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.

        :param version_number: Service version number. The current value is 1. (required)
        :type version_number: int
        :param origin: Point from which the range calculation should start. (required)
        :type origin: str
        :param content_type: The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
        :type content_type: str
        :param fuel_budget_in_liters: Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
        :type fuel_budget_in_liters: float
        :param energy_budget_ink_wh: Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
        :type energy_budget_ink_wh: float
        :param time_budget_in_sec: Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
        :type time_budget_in_sec: float
        :param param_callback: Specifies the jsonp callback method.
        :type param_callback: str
        :param report: Specifies which data should be reported for diagnosis purposes.
        :type report: str
        :param depart_at: The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
        :type depart_at: str
        :param arrive_at: The date and time of arrival at the destination point. It must be specified as a dateTime.
        :type arrive_at: str
        :param route_type: The type of route requested.
        :type route_type: str
        :param traffic: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
        :type traffic: bool
        :param avoid: Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools
        :type avoid: str
        :param travel_mode: The mode of travel for the requested route.
        :type travel_mode: str
        :param hilliness: Degree of hilliness for calculating a thrilling route.
        :type hilliness: str
        :param windingness: Amount that a thrilling route should wind.
        :type windingness: str
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters.
        :type vehicle_length: float
        :param vehicle_width: Width of the vehicle in meters.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters.
        :type vehicle_height: float
        :param vehicle_commercial: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
        :type vehicle_load_type: str
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_in_liters_per_hundredkm: str
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
        :type downhill_efficiency: float
        :param vehicle_engine_type: Engine type of the vehicle.
        :type vehicle_engine_type: str
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param calculate_reachable_range_post_data_parameters:
        :type calculate_reachable_range_post_data_parameters: CalculateReachableRangePostDataParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._routing_version_number_calculate_reachable_range_origin_content_type_post_serialize(
            version_number=version_number,
            origin=origin,
            content_type=content_type,
            fuel_budget_in_liters=fuel_budget_in_liters,
            energy_budget_ink_wh=energy_budget_ink_wh,
            time_budget_in_sec=time_budget_in_sec,
            param_callback=param_callback,
            report=report,
            depart_at=depart_at,
            arrive_at=arrive_at,
            route_type=route_type,
            traffic=traffic,
            avoid=avoid,
            travel_mode=travel_mode,
            hilliness=hilliness,
            windingness=windingness,
            vehicle_max_speed=vehicle_max_speed,
            vehicle_weight=vehicle_weight,
            vehicle_axle_weight=vehicle_axle_weight,
            vehicle_length=vehicle_length,
            vehicle_width=vehicle_width,
            vehicle_height=vehicle_height,
            vehicle_commercial=vehicle_commercial,
            vehicle_load_type=vehicle_load_type,
            constant_speed_consumption_in_liters_per_hundredkm=constant_speed_consumption_in_liters_per_hundredkm,
            current_fuel_in_liters=current_fuel_in_liters,
            auxiliary_power_in_liters_per_hour=auxiliary_power_in_liters_per_hour,
            fuel_energy_density_in_m_joules_per_liter=fuel_energy_density_in_m_joules_per_liter,
            acceleration_efficiency=acceleration_efficiency,
            deceleration_efficiency=deceleration_efficiency,
            uphill_efficiency=uphill_efficiency,
            downhill_efficiency=downhill_efficiency,
            vehicle_engine_type=vehicle_engine_type,
            constant_speed_consumption_ink_wh_per_hundredkm=constant_speed_consumption_ink_wh_per_hundredkm,
            calculate_reachable_range_post_data_parameters=calculate_reachable_range_post_data_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '408': None,
            '414': None,
            '500': None,
            '502': None,
            '503': None,
            '504': None,
            '596': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def routing_version_number_calculate_reachable_range_origin_content_type_post_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Service version number. The current value is 1.")],
        origin: Annotated[StrictStr, Field(description="Point from which the range calculation should start.")],
        content_type: Annotated[StrictStr, Field(description="The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.")],
        fuel_budget_in_liters: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.")] = None,
        energy_budget_ink_wh: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.")] = None,
        time_budget_in_sec: Annotated[Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]], Field(description="Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method.")] = None,
        report: Annotated[Optional[StrictStr], Field(description="Specifies which data should be reported for diagnosis purposes.")] = None,
        depart_at: Annotated[Optional[StrictStr], Field(description="The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.")] = None,
        arrive_at: Annotated[Optional[StrictStr], Field(description="The date and time of arrival at the destination point. It must be specified as a dateTime.")] = None,
        route_type: Annotated[Optional[StrictStr], Field(description="The type of route requested.")] = None,
        traffic: Annotated[Optional[StrictBool], Field(description="Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.")] = None,
        avoid: Annotated[Optional[StrictStr], Field(description="Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools")] = None,
        travel_mode: Annotated[Optional[StrictStr], Field(description="The mode of travel for the requested route.")] = None,
        hilliness: Annotated[Optional[StrictStr], Field(description="Degree of hilliness for calculating a thrilling route.")] = None,
        windingness: Annotated[Optional[StrictStr], Field(description="Amount that a thrilling route should wind.")] = None,
        vehicle_max_speed: Annotated[Optional[StrictInt], Field(description="Maximum speed of the vehicle in km/hour.")] = None,
        vehicle_weight: Annotated[Optional[StrictInt], Field(description="Weight of the vehicle in kilograms.")] = None,
        vehicle_axle_weight: Annotated[Optional[StrictInt], Field(description="Weight per axle of the vehicle in kg.")] = None,
        vehicle_length: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Length of the vehicle in meters.")] = None,
        vehicle_width: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Width of the vehicle in meters.")] = None,
        vehicle_height: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Height of the vehicle in meters.")] = None,
        vehicle_commercial: Annotated[Optional[StrictBool], Field(description="Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.")] = None,
        vehicle_load_type: Annotated[Optional[StrictStr], Field(description="Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.")] = None,
        constant_speed_consumption_in_liters_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        current_fuel_in_liters: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the current supply of fuel in liters.")] = None,
        auxiliary_power_in_liters_per_hour: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.")] = None,
        fuel_energy_density_in_m_joules_per_liter: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).")] = None,
        acceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).")] = None,
        deceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).")] = None,
        uphill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).")] = None,
        downhill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).")] = None,
        vehicle_engine_type: Annotated[Optional[StrictStr], Field(description="Engine type of the vehicle.")] = None,
        constant_speed_consumption_ink_wh_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        calculate_reachable_range_post_data_parameters: Optional[CalculateReachableRangePostDataParameters] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Reachable Range

        Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.

        :param version_number: Service version number. The current value is 1. (required)
        :type version_number: int
        :param origin: Point from which the range calculation should start. (required)
        :type origin: str
        :param content_type: The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
        :type content_type: str
        :param fuel_budget_in_liters: Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
        :type fuel_budget_in_liters: float
        :param energy_budget_ink_wh: Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
        :type energy_budget_ink_wh: float
        :param time_budget_in_sec: Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
        :type time_budget_in_sec: float
        :param param_callback: Specifies the jsonp callback method.
        :type param_callback: str
        :param report: Specifies which data should be reported for diagnosis purposes.
        :type report: str
        :param depart_at: The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
        :type depart_at: str
        :param arrive_at: The date and time of arrival at the destination point. It must be specified as a dateTime.
        :type arrive_at: str
        :param route_type: The type of route requested.
        :type route_type: str
        :param traffic: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
        :type traffic: bool
        :param avoid: Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools
        :type avoid: str
        :param travel_mode: The mode of travel for the requested route.
        :type travel_mode: str
        :param hilliness: Degree of hilliness for calculating a thrilling route.
        :type hilliness: str
        :param windingness: Amount that a thrilling route should wind.
        :type windingness: str
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters.
        :type vehicle_length: float
        :param vehicle_width: Width of the vehicle in meters.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters.
        :type vehicle_height: float
        :param vehicle_commercial: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
        :type vehicle_load_type: str
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_in_liters_per_hundredkm: str
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
        :type downhill_efficiency: float
        :param vehicle_engine_type: Engine type of the vehicle.
        :type vehicle_engine_type: str
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param calculate_reachable_range_post_data_parameters:
        :type calculate_reachable_range_post_data_parameters: CalculateReachableRangePostDataParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._routing_version_number_calculate_reachable_range_origin_content_type_post_serialize(
            version_number=version_number,
            origin=origin,
            content_type=content_type,
            fuel_budget_in_liters=fuel_budget_in_liters,
            energy_budget_ink_wh=energy_budget_ink_wh,
            time_budget_in_sec=time_budget_in_sec,
            param_callback=param_callback,
            report=report,
            depart_at=depart_at,
            arrive_at=arrive_at,
            route_type=route_type,
            traffic=traffic,
            avoid=avoid,
            travel_mode=travel_mode,
            hilliness=hilliness,
            windingness=windingness,
            vehicle_max_speed=vehicle_max_speed,
            vehicle_weight=vehicle_weight,
            vehicle_axle_weight=vehicle_axle_weight,
            vehicle_length=vehicle_length,
            vehicle_width=vehicle_width,
            vehicle_height=vehicle_height,
            vehicle_commercial=vehicle_commercial,
            vehicle_load_type=vehicle_load_type,
            constant_speed_consumption_in_liters_per_hundredkm=constant_speed_consumption_in_liters_per_hundredkm,
            current_fuel_in_liters=current_fuel_in_liters,
            auxiliary_power_in_liters_per_hour=auxiliary_power_in_liters_per_hour,
            fuel_energy_density_in_m_joules_per_liter=fuel_energy_density_in_m_joules_per_liter,
            acceleration_efficiency=acceleration_efficiency,
            deceleration_efficiency=deceleration_efficiency,
            uphill_efficiency=uphill_efficiency,
            downhill_efficiency=downhill_efficiency,
            vehicle_engine_type=vehicle_engine_type,
            constant_speed_consumption_ink_wh_per_hundredkm=constant_speed_consumption_ink_wh_per_hundredkm,
            calculate_reachable_range_post_data_parameters=calculate_reachable_range_post_data_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '408': None,
            '414': None,
            '500': None,
            '502': None,
            '503': None,
            '504': None,
            '596': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _routing_version_number_calculate_reachable_range_origin_content_type_post_serialize(
        self,
        version_number,
        origin,
        content_type,
        fuel_budget_in_liters,
        energy_budget_ink_wh,
        time_budget_in_sec,
        param_callback,
        report,
        depart_at,
        arrive_at,
        route_type,
        traffic,
        avoid,
        travel_mode,
        hilliness,
        windingness,
        vehicle_max_speed,
        vehicle_weight,
        vehicle_axle_weight,
        vehicle_length,
        vehicle_width,
        vehicle_height,
        vehicle_commercial,
        vehicle_load_type,
        constant_speed_consumption_in_liters_per_hundredkm,
        current_fuel_in_liters,
        auxiliary_power_in_liters_per_hour,
        fuel_energy_density_in_m_joules_per_liter,
        acceleration_efficiency,
        deceleration_efficiency,
        uphill_efficiency,
        downhill_efficiency,
        vehicle_engine_type,
        constant_speed_consumption_ink_wh_per_hundredkm,
        calculate_reachable_range_post_data_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        if origin is not None:
            _path_params['origin'] = origin
        if content_type is not None:
            _path_params['contentType'] = content_type
        # process the query parameters
        if fuel_budget_in_liters is not None:
            
            _query_params.append(('fuelBudgetInLiters', fuel_budget_in_liters))
            
        if energy_budget_ink_wh is not None:
            
            _query_params.append(('energyBudgetInkWh', energy_budget_ink_wh))
            
        if time_budget_in_sec is not None:
            
            _query_params.append(('timeBudgetInSec', time_budget_in_sec))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if report is not None:
            
            _query_params.append(('report', report))
            
        if depart_at is not None:
            
            _query_params.append(('departAt', depart_at))
            
        if arrive_at is not None:
            
            _query_params.append(('arriveAt', arrive_at))
            
        if route_type is not None:
            
            _query_params.append(('routeType', route_type))
            
        if traffic is not None:
            
            _query_params.append(('traffic', traffic))
            
        if avoid is not None:
            
            _query_params.append(('avoid', avoid))
            
        if travel_mode is not None:
            
            _query_params.append(('travelMode', travel_mode))
            
        if hilliness is not None:
            
            _query_params.append(('hilliness', hilliness))
            
        if windingness is not None:
            
            _query_params.append(('windingness', windingness))
            
        if vehicle_max_speed is not None:
            
            _query_params.append(('vehicleMaxSpeed', vehicle_max_speed))
            
        if vehicle_weight is not None:
            
            _query_params.append(('vehicleWeight', vehicle_weight))
            
        if vehicle_axle_weight is not None:
            
            _query_params.append(('vehicleAxleWeight', vehicle_axle_weight))
            
        if vehicle_length is not None:
            
            _query_params.append(('vehicleLength', vehicle_length))
            
        if vehicle_width is not None:
            
            _query_params.append(('vehicleWidth', vehicle_width))
            
        if vehicle_height is not None:
            
            _query_params.append(('vehicleHeight', vehicle_height))
            
        if vehicle_commercial is not None:
            
            _query_params.append(('vehicleCommercial', vehicle_commercial))
            
        if vehicle_load_type is not None:
            
            _query_params.append(('vehicleLoadType', vehicle_load_type))
            
        if constant_speed_consumption_in_liters_per_hundredkm is not None:
            
            _query_params.append(('constantSpeedConsumptionInLitersPerHundredkm', constant_speed_consumption_in_liters_per_hundredkm))
            
        if current_fuel_in_liters is not None:
            
            _query_params.append(('currentFuelInLiters', current_fuel_in_liters))
            
        if auxiliary_power_in_liters_per_hour is not None:
            
            _query_params.append(('auxiliaryPowerInLitersPerHour', auxiliary_power_in_liters_per_hour))
            
        if fuel_energy_density_in_m_joules_per_liter is not None:
            
            _query_params.append(('fuelEnergyDensityInMJoulesPerLiter', fuel_energy_density_in_m_joules_per_liter))
            
        if acceleration_efficiency is not None:
            
            _query_params.append(('accelerationEfficiency', acceleration_efficiency))
            
        if deceleration_efficiency is not None:
            
            _query_params.append(('decelerationEfficiency', deceleration_efficiency))
            
        if uphill_efficiency is not None:
            
            _query_params.append(('uphillEfficiency', uphill_efficiency))
            
        if downhill_efficiency is not None:
            
            _query_params.append(('downhillEfficiency', downhill_efficiency))
            
        if vehicle_engine_type is not None:
            
            _query_params.append(('vehicleEngineType', vehicle_engine_type))
            
        if constant_speed_consumption_ink_wh_per_hundredkm is not None:
            
            _query_params.append(('constantSpeedConsumptionInkWhPerHundredkm', constant_speed_consumption_ink_wh_per_hundredkm))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if calculate_reachable_range_post_data_parameters is not None:
            _body_params = calculate_reachable_range_post_data_parameters



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/xml'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def routing_version_number_calculate_route_locations_content_type_get(
        self,
        version_number: Annotated[StrictInt, Field(description="Service version number. The current value is 1.")],
        locations: Annotated[StrictStr, Field(description="Locations through which the calculated route must pass.")],
        content_type: Annotated[StrictStr, Field(description="The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.")],
        max_alternatives: Annotated[Optional[Annotated[int, Field(le=5, strict=True, ge=0)]], Field(description="Number of alternative routes to be calculated.")] = None,
        alternative_type: Annotated[Optional[StrictStr], Field(description="Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.")] = None,
        min_deviation_distance: Annotated[Optional[StrictInt], Field(description="All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.")] = None,
        min_deviation_time: Annotated[Optional[StrictInt], Field(description="All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.")] = None,
        instructions_type: Annotated[Optional[StrictStr], Field(description="If specified, guidance instructions will be returned (if available).")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language parameter determines the language of the guidance messages.")] = None,
        compute_best_order: Annotated[Optional[StrictBool], Field(description="Re-order the route waypoints to reduce the route length.")] = None,
        route_representation: Annotated[Optional[StrictStr], Field(description="Specifies the representation of the set of routes provided as a response.")] = None,
        compute_travel_time_for: Annotated[Optional[StrictStr], Field(description="Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.")] = None,
        vehicle_heading: Annotated[Optional[Annotated[int, Field(le=359, strict=True, ge=0)]], Field(description="The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).")] = None,
        section_type: Annotated[Optional[StrictStr], Field(description="Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method.")] = None,
        report: Annotated[Optional[StrictStr], Field(description="Specifies which data should be reported for diagnosis purposes.")] = None,
        depart_at: Annotated[Optional[StrictStr], Field(description="The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.")] = None,
        arrive_at: Annotated[Optional[StrictStr], Field(description="The date and time of arrival at the destination point. It must be specified as a dateTime.")] = None,
        route_type: Annotated[Optional[StrictStr], Field(description="The type of route requested.")] = None,
        traffic: Annotated[Optional[StrictBool], Field(description="Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.")] = None,
        avoid: Annotated[Optional[StrictStr], Field(description="Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads")] = None,
        travel_mode: Annotated[Optional[StrictStr], Field(description="The mode of travel for the requested route.")] = None,
        hilliness: Annotated[Optional[StrictStr], Field(description="Degree of hilliness for calculating a thrilling route.")] = None,
        windingness: Annotated[Optional[StrictStr], Field(description="Amount that a thrilling route should wind.")] = None,
        vehicle_max_speed: Annotated[Optional[StrictInt], Field(description="Maximum speed of the vehicle in km/hour.")] = None,
        vehicle_weight: Annotated[Optional[StrictInt], Field(description="Weight of the vehicle in kilograms.")] = None,
        vehicle_axle_weight: Annotated[Optional[StrictInt], Field(description="Weight per axle of the vehicle in kg.")] = None,
        vehicle_length: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Length of the vehicle in meters.")] = None,
        vehicle_width: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Width of the vehicle in meters.")] = None,
        vehicle_height: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Height of the vehicle in meters.")] = None,
        vehicle_commercial: Annotated[Optional[StrictBool], Field(description="Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.")] = None,
        vehicle_load_type: Annotated[Optional[StrictStr], Field(description="Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.")] = None,
        vehicle_engine_type: Annotated[Optional[StrictStr], Field(description="Engine type of the vehicle.")] = None,
        constant_speed_consumption_in_liters_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        current_fuel_in_liters: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the current supply of fuel in liters.")] = None,
        auxiliary_power_in_liters_per_hour: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.")] = None,
        fuel_energy_density_in_m_joules_per_liter: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).")] = None,
        acceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).")] = None,
        deceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).")] = None,
        uphill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).")] = None,
        downhill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).")] = None,
        constant_speed_consumption_ink_wh_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Calculate Route

        Calculates a route between an origin and a destination.

        :param version_number: Service version number. The current value is 1. (required)
        :type version_number: int
        :param locations: Locations through which the calculated route must pass. (required)
        :type locations: str
        :param content_type: The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
        :type content_type: str
        :param max_alternatives: Number of alternative routes to be calculated.
        :type max_alternatives: int
        :param alternative_type: Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.
        :type alternative_type: str
        :param min_deviation_distance: All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.
        :type min_deviation_distance: int
        :param min_deviation_time: All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.
        :type min_deviation_time: int
        :param instructions_type: If specified, guidance instructions will be returned (if available).
        :type instructions_type: str
        :param language: The language parameter determines the language of the guidance messages.
        :type language: str
        :param compute_best_order: Re-order the route waypoints to reduce the route length.
        :type compute_best_order: bool
        :param route_representation: Specifies the representation of the set of routes provided as a response.
        :type route_representation: str
        :param compute_travel_time_for: Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
        :type compute_travel_time_for: str
        :param vehicle_heading: The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).
        :type vehicle_heading: int
        :param section_type: Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic
        :type section_type: str
        :param param_callback: Specifies the jsonp callback method.
        :type param_callback: str
        :param report: Specifies which data should be reported for diagnosis purposes.
        :type report: str
        :param depart_at: The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
        :type depart_at: str
        :param arrive_at: The date and time of arrival at the destination point. It must be specified as a dateTime.
        :type arrive_at: str
        :param route_type: The type of route requested.
        :type route_type: str
        :param traffic: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
        :type traffic: bool
        :param avoid: Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads
        :type avoid: str
        :param travel_mode: The mode of travel for the requested route.
        :type travel_mode: str
        :param hilliness: Degree of hilliness for calculating a thrilling route.
        :type hilliness: str
        :param windingness: Amount that a thrilling route should wind.
        :type windingness: str
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters.
        :type vehicle_length: float
        :param vehicle_width: Width of the vehicle in meters.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters.
        :type vehicle_height: float
        :param vehicle_commercial: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
        :type vehicle_load_type: str
        :param vehicle_engine_type: Engine type of the vehicle.
        :type vehicle_engine_type: str
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_in_liters_per_hundredkm: str
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
        :type downhill_efficiency: float
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._routing_version_number_calculate_route_locations_content_type_get_serialize(
            version_number=version_number,
            locations=locations,
            content_type=content_type,
            max_alternatives=max_alternatives,
            alternative_type=alternative_type,
            min_deviation_distance=min_deviation_distance,
            min_deviation_time=min_deviation_time,
            instructions_type=instructions_type,
            language=language,
            compute_best_order=compute_best_order,
            route_representation=route_representation,
            compute_travel_time_for=compute_travel_time_for,
            vehicle_heading=vehicle_heading,
            section_type=section_type,
            param_callback=param_callback,
            report=report,
            depart_at=depart_at,
            arrive_at=arrive_at,
            route_type=route_type,
            traffic=traffic,
            avoid=avoid,
            travel_mode=travel_mode,
            hilliness=hilliness,
            windingness=windingness,
            vehicle_max_speed=vehicle_max_speed,
            vehicle_weight=vehicle_weight,
            vehicle_axle_weight=vehicle_axle_weight,
            vehicle_length=vehicle_length,
            vehicle_width=vehicle_width,
            vehicle_height=vehicle_height,
            vehicle_commercial=vehicle_commercial,
            vehicle_load_type=vehicle_load_type,
            vehicle_engine_type=vehicle_engine_type,
            constant_speed_consumption_in_liters_per_hundredkm=constant_speed_consumption_in_liters_per_hundredkm,
            current_fuel_in_liters=current_fuel_in_liters,
            auxiliary_power_in_liters_per_hour=auxiliary_power_in_liters_per_hour,
            fuel_energy_density_in_m_joules_per_liter=fuel_energy_density_in_m_joules_per_liter,
            acceleration_efficiency=acceleration_efficiency,
            deceleration_efficiency=deceleration_efficiency,
            uphill_efficiency=uphill_efficiency,
            downhill_efficiency=downhill_efficiency,
            constant_speed_consumption_ink_wh_per_hundredkm=constant_speed_consumption_ink_wh_per_hundredkm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '408': None,
            '414': None,
            '500': None,
            '502': None,
            '503': None,
            '504': None,
            '596': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def routing_version_number_calculate_route_locations_content_type_get_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Service version number. The current value is 1.")],
        locations: Annotated[StrictStr, Field(description="Locations through which the calculated route must pass.")],
        content_type: Annotated[StrictStr, Field(description="The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.")],
        max_alternatives: Annotated[Optional[Annotated[int, Field(le=5, strict=True, ge=0)]], Field(description="Number of alternative routes to be calculated.")] = None,
        alternative_type: Annotated[Optional[StrictStr], Field(description="Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.")] = None,
        min_deviation_distance: Annotated[Optional[StrictInt], Field(description="All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.")] = None,
        min_deviation_time: Annotated[Optional[StrictInt], Field(description="All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.")] = None,
        instructions_type: Annotated[Optional[StrictStr], Field(description="If specified, guidance instructions will be returned (if available).")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language parameter determines the language of the guidance messages.")] = None,
        compute_best_order: Annotated[Optional[StrictBool], Field(description="Re-order the route waypoints to reduce the route length.")] = None,
        route_representation: Annotated[Optional[StrictStr], Field(description="Specifies the representation of the set of routes provided as a response.")] = None,
        compute_travel_time_for: Annotated[Optional[StrictStr], Field(description="Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.")] = None,
        vehicle_heading: Annotated[Optional[Annotated[int, Field(le=359, strict=True, ge=0)]], Field(description="The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).")] = None,
        section_type: Annotated[Optional[StrictStr], Field(description="Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method.")] = None,
        report: Annotated[Optional[StrictStr], Field(description="Specifies which data should be reported for diagnosis purposes.")] = None,
        depart_at: Annotated[Optional[StrictStr], Field(description="The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.")] = None,
        arrive_at: Annotated[Optional[StrictStr], Field(description="The date and time of arrival at the destination point. It must be specified as a dateTime.")] = None,
        route_type: Annotated[Optional[StrictStr], Field(description="The type of route requested.")] = None,
        traffic: Annotated[Optional[StrictBool], Field(description="Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.")] = None,
        avoid: Annotated[Optional[StrictStr], Field(description="Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads")] = None,
        travel_mode: Annotated[Optional[StrictStr], Field(description="The mode of travel for the requested route.")] = None,
        hilliness: Annotated[Optional[StrictStr], Field(description="Degree of hilliness for calculating a thrilling route.")] = None,
        windingness: Annotated[Optional[StrictStr], Field(description="Amount that a thrilling route should wind.")] = None,
        vehicle_max_speed: Annotated[Optional[StrictInt], Field(description="Maximum speed of the vehicle in km/hour.")] = None,
        vehicle_weight: Annotated[Optional[StrictInt], Field(description="Weight of the vehicle in kilograms.")] = None,
        vehicle_axle_weight: Annotated[Optional[StrictInt], Field(description="Weight per axle of the vehicle in kg.")] = None,
        vehicle_length: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Length of the vehicle in meters.")] = None,
        vehicle_width: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Width of the vehicle in meters.")] = None,
        vehicle_height: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Height of the vehicle in meters.")] = None,
        vehicle_commercial: Annotated[Optional[StrictBool], Field(description="Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.")] = None,
        vehicle_load_type: Annotated[Optional[StrictStr], Field(description="Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.")] = None,
        vehicle_engine_type: Annotated[Optional[StrictStr], Field(description="Engine type of the vehicle.")] = None,
        constant_speed_consumption_in_liters_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        current_fuel_in_liters: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the current supply of fuel in liters.")] = None,
        auxiliary_power_in_liters_per_hour: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.")] = None,
        fuel_energy_density_in_m_joules_per_liter: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).")] = None,
        acceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).")] = None,
        deceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).")] = None,
        uphill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).")] = None,
        downhill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).")] = None,
        constant_speed_consumption_ink_wh_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Calculate Route

        Calculates a route between an origin and a destination.

        :param version_number: Service version number. The current value is 1. (required)
        :type version_number: int
        :param locations: Locations through which the calculated route must pass. (required)
        :type locations: str
        :param content_type: The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
        :type content_type: str
        :param max_alternatives: Number of alternative routes to be calculated.
        :type max_alternatives: int
        :param alternative_type: Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.
        :type alternative_type: str
        :param min_deviation_distance: All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.
        :type min_deviation_distance: int
        :param min_deviation_time: All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.
        :type min_deviation_time: int
        :param instructions_type: If specified, guidance instructions will be returned (if available).
        :type instructions_type: str
        :param language: The language parameter determines the language of the guidance messages.
        :type language: str
        :param compute_best_order: Re-order the route waypoints to reduce the route length.
        :type compute_best_order: bool
        :param route_representation: Specifies the representation of the set of routes provided as a response.
        :type route_representation: str
        :param compute_travel_time_for: Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
        :type compute_travel_time_for: str
        :param vehicle_heading: The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).
        :type vehicle_heading: int
        :param section_type: Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic
        :type section_type: str
        :param param_callback: Specifies the jsonp callback method.
        :type param_callback: str
        :param report: Specifies which data should be reported for diagnosis purposes.
        :type report: str
        :param depart_at: The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
        :type depart_at: str
        :param arrive_at: The date and time of arrival at the destination point. It must be specified as a dateTime.
        :type arrive_at: str
        :param route_type: The type of route requested.
        :type route_type: str
        :param traffic: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
        :type traffic: bool
        :param avoid: Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads
        :type avoid: str
        :param travel_mode: The mode of travel for the requested route.
        :type travel_mode: str
        :param hilliness: Degree of hilliness for calculating a thrilling route.
        :type hilliness: str
        :param windingness: Amount that a thrilling route should wind.
        :type windingness: str
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters.
        :type vehicle_length: float
        :param vehicle_width: Width of the vehicle in meters.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters.
        :type vehicle_height: float
        :param vehicle_commercial: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
        :type vehicle_load_type: str
        :param vehicle_engine_type: Engine type of the vehicle.
        :type vehicle_engine_type: str
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_in_liters_per_hundredkm: str
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
        :type downhill_efficiency: float
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._routing_version_number_calculate_route_locations_content_type_get_serialize(
            version_number=version_number,
            locations=locations,
            content_type=content_type,
            max_alternatives=max_alternatives,
            alternative_type=alternative_type,
            min_deviation_distance=min_deviation_distance,
            min_deviation_time=min_deviation_time,
            instructions_type=instructions_type,
            language=language,
            compute_best_order=compute_best_order,
            route_representation=route_representation,
            compute_travel_time_for=compute_travel_time_for,
            vehicle_heading=vehicle_heading,
            section_type=section_type,
            param_callback=param_callback,
            report=report,
            depart_at=depart_at,
            arrive_at=arrive_at,
            route_type=route_type,
            traffic=traffic,
            avoid=avoid,
            travel_mode=travel_mode,
            hilliness=hilliness,
            windingness=windingness,
            vehicle_max_speed=vehicle_max_speed,
            vehicle_weight=vehicle_weight,
            vehicle_axle_weight=vehicle_axle_weight,
            vehicle_length=vehicle_length,
            vehicle_width=vehicle_width,
            vehicle_height=vehicle_height,
            vehicle_commercial=vehicle_commercial,
            vehicle_load_type=vehicle_load_type,
            vehicle_engine_type=vehicle_engine_type,
            constant_speed_consumption_in_liters_per_hundredkm=constant_speed_consumption_in_liters_per_hundredkm,
            current_fuel_in_liters=current_fuel_in_liters,
            auxiliary_power_in_liters_per_hour=auxiliary_power_in_liters_per_hour,
            fuel_energy_density_in_m_joules_per_liter=fuel_energy_density_in_m_joules_per_liter,
            acceleration_efficiency=acceleration_efficiency,
            deceleration_efficiency=deceleration_efficiency,
            uphill_efficiency=uphill_efficiency,
            downhill_efficiency=downhill_efficiency,
            constant_speed_consumption_ink_wh_per_hundredkm=constant_speed_consumption_ink_wh_per_hundredkm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '408': None,
            '414': None,
            '500': None,
            '502': None,
            '503': None,
            '504': None,
            '596': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def routing_version_number_calculate_route_locations_content_type_get_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Service version number. The current value is 1.")],
        locations: Annotated[StrictStr, Field(description="Locations through which the calculated route must pass.")],
        content_type: Annotated[StrictStr, Field(description="The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.")],
        max_alternatives: Annotated[Optional[Annotated[int, Field(le=5, strict=True, ge=0)]], Field(description="Number of alternative routes to be calculated.")] = None,
        alternative_type: Annotated[Optional[StrictStr], Field(description="Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.")] = None,
        min_deviation_distance: Annotated[Optional[StrictInt], Field(description="All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.")] = None,
        min_deviation_time: Annotated[Optional[StrictInt], Field(description="All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.")] = None,
        instructions_type: Annotated[Optional[StrictStr], Field(description="If specified, guidance instructions will be returned (if available).")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language parameter determines the language of the guidance messages.")] = None,
        compute_best_order: Annotated[Optional[StrictBool], Field(description="Re-order the route waypoints to reduce the route length.")] = None,
        route_representation: Annotated[Optional[StrictStr], Field(description="Specifies the representation of the set of routes provided as a response.")] = None,
        compute_travel_time_for: Annotated[Optional[StrictStr], Field(description="Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.")] = None,
        vehicle_heading: Annotated[Optional[Annotated[int, Field(le=359, strict=True, ge=0)]], Field(description="The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).")] = None,
        section_type: Annotated[Optional[StrictStr], Field(description="Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method.")] = None,
        report: Annotated[Optional[StrictStr], Field(description="Specifies which data should be reported for diagnosis purposes.")] = None,
        depart_at: Annotated[Optional[StrictStr], Field(description="The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.")] = None,
        arrive_at: Annotated[Optional[StrictStr], Field(description="The date and time of arrival at the destination point. It must be specified as a dateTime.")] = None,
        route_type: Annotated[Optional[StrictStr], Field(description="The type of route requested.")] = None,
        traffic: Annotated[Optional[StrictBool], Field(description="Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.")] = None,
        avoid: Annotated[Optional[StrictStr], Field(description="Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads")] = None,
        travel_mode: Annotated[Optional[StrictStr], Field(description="The mode of travel for the requested route.")] = None,
        hilliness: Annotated[Optional[StrictStr], Field(description="Degree of hilliness for calculating a thrilling route.")] = None,
        windingness: Annotated[Optional[StrictStr], Field(description="Amount that a thrilling route should wind.")] = None,
        vehicle_max_speed: Annotated[Optional[StrictInt], Field(description="Maximum speed of the vehicle in km/hour.")] = None,
        vehicle_weight: Annotated[Optional[StrictInt], Field(description="Weight of the vehicle in kilograms.")] = None,
        vehicle_axle_weight: Annotated[Optional[StrictInt], Field(description="Weight per axle of the vehicle in kg.")] = None,
        vehicle_length: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Length of the vehicle in meters.")] = None,
        vehicle_width: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Width of the vehicle in meters.")] = None,
        vehicle_height: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Height of the vehicle in meters.")] = None,
        vehicle_commercial: Annotated[Optional[StrictBool], Field(description="Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.")] = None,
        vehicle_load_type: Annotated[Optional[StrictStr], Field(description="Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.")] = None,
        vehicle_engine_type: Annotated[Optional[StrictStr], Field(description="Engine type of the vehicle.")] = None,
        constant_speed_consumption_in_liters_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        current_fuel_in_liters: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the current supply of fuel in liters.")] = None,
        auxiliary_power_in_liters_per_hour: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.")] = None,
        fuel_energy_density_in_m_joules_per_liter: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).")] = None,
        acceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).")] = None,
        deceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).")] = None,
        uphill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).")] = None,
        downhill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).")] = None,
        constant_speed_consumption_ink_wh_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Calculate Route

        Calculates a route between an origin and a destination.

        :param version_number: Service version number. The current value is 1. (required)
        :type version_number: int
        :param locations: Locations through which the calculated route must pass. (required)
        :type locations: str
        :param content_type: The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
        :type content_type: str
        :param max_alternatives: Number of alternative routes to be calculated.
        :type max_alternatives: int
        :param alternative_type: Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.
        :type alternative_type: str
        :param min_deviation_distance: All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.
        :type min_deviation_distance: int
        :param min_deviation_time: All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.
        :type min_deviation_time: int
        :param instructions_type: If specified, guidance instructions will be returned (if available).
        :type instructions_type: str
        :param language: The language parameter determines the language of the guidance messages.
        :type language: str
        :param compute_best_order: Re-order the route waypoints to reduce the route length.
        :type compute_best_order: bool
        :param route_representation: Specifies the representation of the set of routes provided as a response.
        :type route_representation: str
        :param compute_travel_time_for: Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
        :type compute_travel_time_for: str
        :param vehicle_heading: The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).
        :type vehicle_heading: int
        :param section_type: Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic
        :type section_type: str
        :param param_callback: Specifies the jsonp callback method.
        :type param_callback: str
        :param report: Specifies which data should be reported for diagnosis purposes.
        :type report: str
        :param depart_at: The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
        :type depart_at: str
        :param arrive_at: The date and time of arrival at the destination point. It must be specified as a dateTime.
        :type arrive_at: str
        :param route_type: The type of route requested.
        :type route_type: str
        :param traffic: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
        :type traffic: bool
        :param avoid: Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads
        :type avoid: str
        :param travel_mode: The mode of travel for the requested route.
        :type travel_mode: str
        :param hilliness: Degree of hilliness for calculating a thrilling route.
        :type hilliness: str
        :param windingness: Amount that a thrilling route should wind.
        :type windingness: str
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters.
        :type vehicle_length: float
        :param vehicle_width: Width of the vehicle in meters.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters.
        :type vehicle_height: float
        :param vehicle_commercial: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
        :type vehicle_load_type: str
        :param vehicle_engine_type: Engine type of the vehicle.
        :type vehicle_engine_type: str
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_in_liters_per_hundredkm: str
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
        :type downhill_efficiency: float
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._routing_version_number_calculate_route_locations_content_type_get_serialize(
            version_number=version_number,
            locations=locations,
            content_type=content_type,
            max_alternatives=max_alternatives,
            alternative_type=alternative_type,
            min_deviation_distance=min_deviation_distance,
            min_deviation_time=min_deviation_time,
            instructions_type=instructions_type,
            language=language,
            compute_best_order=compute_best_order,
            route_representation=route_representation,
            compute_travel_time_for=compute_travel_time_for,
            vehicle_heading=vehicle_heading,
            section_type=section_type,
            param_callback=param_callback,
            report=report,
            depart_at=depart_at,
            arrive_at=arrive_at,
            route_type=route_type,
            traffic=traffic,
            avoid=avoid,
            travel_mode=travel_mode,
            hilliness=hilliness,
            windingness=windingness,
            vehicle_max_speed=vehicle_max_speed,
            vehicle_weight=vehicle_weight,
            vehicle_axle_weight=vehicle_axle_weight,
            vehicle_length=vehicle_length,
            vehicle_width=vehicle_width,
            vehicle_height=vehicle_height,
            vehicle_commercial=vehicle_commercial,
            vehicle_load_type=vehicle_load_type,
            vehicle_engine_type=vehicle_engine_type,
            constant_speed_consumption_in_liters_per_hundredkm=constant_speed_consumption_in_liters_per_hundredkm,
            current_fuel_in_liters=current_fuel_in_liters,
            auxiliary_power_in_liters_per_hour=auxiliary_power_in_liters_per_hour,
            fuel_energy_density_in_m_joules_per_liter=fuel_energy_density_in_m_joules_per_liter,
            acceleration_efficiency=acceleration_efficiency,
            deceleration_efficiency=deceleration_efficiency,
            uphill_efficiency=uphill_efficiency,
            downhill_efficiency=downhill_efficiency,
            constant_speed_consumption_ink_wh_per_hundredkm=constant_speed_consumption_ink_wh_per_hundredkm,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '408': None,
            '414': None,
            '500': None,
            '502': None,
            '503': None,
            '504': None,
            '596': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _routing_version_number_calculate_route_locations_content_type_get_serialize(
        self,
        version_number,
        locations,
        content_type,
        max_alternatives,
        alternative_type,
        min_deviation_distance,
        min_deviation_time,
        instructions_type,
        language,
        compute_best_order,
        route_representation,
        compute_travel_time_for,
        vehicle_heading,
        section_type,
        param_callback,
        report,
        depart_at,
        arrive_at,
        route_type,
        traffic,
        avoid,
        travel_mode,
        hilliness,
        windingness,
        vehicle_max_speed,
        vehicle_weight,
        vehicle_axle_weight,
        vehicle_length,
        vehicle_width,
        vehicle_height,
        vehicle_commercial,
        vehicle_load_type,
        vehicle_engine_type,
        constant_speed_consumption_in_liters_per_hundredkm,
        current_fuel_in_liters,
        auxiliary_power_in_liters_per_hour,
        fuel_energy_density_in_m_joules_per_liter,
        acceleration_efficiency,
        deceleration_efficiency,
        uphill_efficiency,
        downhill_efficiency,
        constant_speed_consumption_ink_wh_per_hundredkm,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        if locations is not None:
            _path_params['locations'] = locations
        if content_type is not None:
            _path_params['contentType'] = content_type
        # process the query parameters
        if max_alternatives is not None:
            
            _query_params.append(('maxAlternatives', max_alternatives))
            
        if alternative_type is not None:
            
            _query_params.append(('alternativeType', alternative_type))
            
        if min_deviation_distance is not None:
            
            _query_params.append(('minDeviationDistance', min_deviation_distance))
            
        if min_deviation_time is not None:
            
            _query_params.append(('minDeviationTime', min_deviation_time))
            
        if instructions_type is not None:
            
            _query_params.append(('instructionsType', instructions_type))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if compute_best_order is not None:
            
            _query_params.append(('computeBestOrder', compute_best_order))
            
        if route_representation is not None:
            
            _query_params.append(('routeRepresentation', route_representation))
            
        if compute_travel_time_for is not None:
            
            _query_params.append(('computeTravelTimeFor', compute_travel_time_for))
            
        if vehicle_heading is not None:
            
            _query_params.append(('vehicleHeading', vehicle_heading))
            
        if section_type is not None:
            
            _query_params.append(('sectionType', section_type))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if report is not None:
            
            _query_params.append(('report', report))
            
        if depart_at is not None:
            
            _query_params.append(('departAt', depart_at))
            
        if arrive_at is not None:
            
            _query_params.append(('arriveAt', arrive_at))
            
        if route_type is not None:
            
            _query_params.append(('routeType', route_type))
            
        if traffic is not None:
            
            _query_params.append(('traffic', traffic))
            
        if avoid is not None:
            
            _query_params.append(('avoid', avoid))
            
        if travel_mode is not None:
            
            _query_params.append(('travelMode', travel_mode))
            
        if hilliness is not None:
            
            _query_params.append(('hilliness', hilliness))
            
        if windingness is not None:
            
            _query_params.append(('windingness', windingness))
            
        if vehicle_max_speed is not None:
            
            _query_params.append(('vehicleMaxSpeed', vehicle_max_speed))
            
        if vehicle_weight is not None:
            
            _query_params.append(('vehicleWeight', vehicle_weight))
            
        if vehicle_axle_weight is not None:
            
            _query_params.append(('vehicleAxleWeight', vehicle_axle_weight))
            
        if vehicle_length is not None:
            
            _query_params.append(('vehicleLength', vehicle_length))
            
        if vehicle_width is not None:
            
            _query_params.append(('vehicleWidth', vehicle_width))
            
        if vehicle_height is not None:
            
            _query_params.append(('vehicleHeight', vehicle_height))
            
        if vehicle_commercial is not None:
            
            _query_params.append(('vehicleCommercial', vehicle_commercial))
            
        if vehicle_load_type is not None:
            
            _query_params.append(('vehicleLoadType', vehicle_load_type))
            
        if vehicle_engine_type is not None:
            
            _query_params.append(('vehicleEngineType', vehicle_engine_type))
            
        if constant_speed_consumption_in_liters_per_hundredkm is not None:
            
            _query_params.append(('constantSpeedConsumptionInLitersPerHundredkm', constant_speed_consumption_in_liters_per_hundredkm))
            
        if current_fuel_in_liters is not None:
            
            _query_params.append(('currentFuelInLiters', current_fuel_in_liters))
            
        if auxiliary_power_in_liters_per_hour is not None:
            
            _query_params.append(('auxiliaryPowerInLitersPerHour', auxiliary_power_in_liters_per_hour))
            
        if fuel_energy_density_in_m_joules_per_liter is not None:
            
            _query_params.append(('fuelEnergyDensityInMJoulesPerLiter', fuel_energy_density_in_m_joules_per_liter))
            
        if acceleration_efficiency is not None:
            
            _query_params.append(('accelerationEfficiency', acceleration_efficiency))
            
        if deceleration_efficiency is not None:
            
            _query_params.append(('decelerationEfficiency', deceleration_efficiency))
            
        if uphill_efficiency is not None:
            
            _query_params.append(('uphillEfficiency', uphill_efficiency))
            
        if downhill_efficiency is not None:
            
            _query_params.append(('downhillEfficiency', downhill_efficiency))
            
        if constant_speed_consumption_ink_wh_per_hundredkm is not None:
            
            _query_params.append(('constantSpeedConsumptionInkWhPerHundredkm', constant_speed_consumption_ink_wh_per_hundredkm))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/routing/{versionNumber}/calculateRoute/{locations}/{contentType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def routing_version_number_calculate_route_locations_content_type_post(
        self,
        version_number: Annotated[StrictInt, Field(description="Service version number. The current value is 1.")],
        locations: Annotated[StrictStr, Field(description="Locations through which the calculated route must pass.")],
        content_type: Annotated[StrictStr, Field(description="The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.")],
        max_alternatives: Annotated[Optional[Annotated[int, Field(le=5, strict=True, ge=0)]], Field(description="Number of alternative routes to be calculated.")] = None,
        alternative_type: Annotated[Optional[StrictStr], Field(description="Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.")] = None,
        min_deviation_distance: Annotated[Optional[StrictInt], Field(description="All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.")] = None,
        min_deviation_time: Annotated[Optional[StrictInt], Field(description="All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.")] = None,
        instructions_type: Annotated[Optional[StrictStr], Field(description="If specified, guidance instructions will be returned (if available).")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language parameter determines the language of the guidance messages.")] = None,
        compute_best_order: Annotated[Optional[StrictBool], Field(description="Re-order the route waypoints to reduce the route length.")] = None,
        route_representation: Annotated[Optional[StrictStr], Field(description="Specifies the representation of the set of routes provided as a response.")] = None,
        compute_travel_time_for: Annotated[Optional[StrictStr], Field(description="Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.")] = None,
        vehicle_heading: Annotated[Optional[Annotated[int, Field(le=359, strict=True, ge=0)]], Field(description="The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).")] = None,
        section_type: Annotated[Optional[StrictStr], Field(description="Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method.")] = None,
        report: Annotated[Optional[StrictStr], Field(description="Specifies which data should be reported for diagnosis purposes.")] = None,
        depart_at: Annotated[Optional[StrictStr], Field(description="The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.")] = None,
        arrive_at: Annotated[Optional[StrictStr], Field(description="The date and time of arrival at the destination point. It must be specified as a dateTime.")] = None,
        route_type: Annotated[Optional[StrictStr], Field(description="The type of route requested.")] = None,
        traffic: Annotated[Optional[StrictBool], Field(description="Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.")] = None,
        avoid: Annotated[Optional[StrictStr], Field(description="Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads")] = None,
        travel_mode: Annotated[Optional[StrictStr], Field(description="The mode of travel for the requested route.")] = None,
        hilliness: Annotated[Optional[StrictStr], Field(description="Degree of hilliness for calculating a thrilling route.")] = None,
        windingness: Annotated[Optional[StrictStr], Field(description="Amount that a thrilling route should wind.")] = None,
        vehicle_max_speed: Annotated[Optional[StrictInt], Field(description="Maximum speed of the vehicle in km/hour.")] = None,
        vehicle_weight: Annotated[Optional[StrictInt], Field(description="Weight of the vehicle in kilograms.")] = None,
        vehicle_axle_weight: Annotated[Optional[StrictInt], Field(description="Weight per axle of the vehicle in kg.")] = None,
        vehicle_length: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Length of the vehicle in meters.")] = None,
        vehicle_width: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Width of the vehicle in meters.")] = None,
        vehicle_height: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Height of the vehicle in meters.")] = None,
        vehicle_commercial: Annotated[Optional[StrictBool], Field(description="Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.")] = None,
        vehicle_load_type: Annotated[Optional[StrictStr], Field(description="Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.")] = None,
        vehicle_engine_type: Annotated[Optional[StrictStr], Field(description="Engine type of the vehicle.")] = None,
        constant_speed_consumption_in_liters_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        current_fuel_in_liters: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the current supply of fuel in liters.")] = None,
        auxiliary_power_in_liters_per_hour: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.")] = None,
        fuel_energy_density_in_m_joules_per_liter: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).")] = None,
        acceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).")] = None,
        deceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).")] = None,
        uphill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).")] = None,
        downhill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).")] = None,
        constant_speed_consumption_ink_wh_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        calculate_route_post_data_parameters: Optional[CalculateRoutePostDataParameters] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Calculate Route

        Calculates a route between an origin and a destination. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.

        :param version_number: Service version number. The current value is 1. (required)
        :type version_number: int
        :param locations: Locations through which the calculated route must pass. (required)
        :type locations: str
        :param content_type: The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
        :type content_type: str
        :param max_alternatives: Number of alternative routes to be calculated.
        :type max_alternatives: int
        :param alternative_type: Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.
        :type alternative_type: str
        :param min_deviation_distance: All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.
        :type min_deviation_distance: int
        :param min_deviation_time: All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.
        :type min_deviation_time: int
        :param instructions_type: If specified, guidance instructions will be returned (if available).
        :type instructions_type: str
        :param language: The language parameter determines the language of the guidance messages.
        :type language: str
        :param compute_best_order: Re-order the route waypoints to reduce the route length.
        :type compute_best_order: bool
        :param route_representation: Specifies the representation of the set of routes provided as a response.
        :type route_representation: str
        :param compute_travel_time_for: Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
        :type compute_travel_time_for: str
        :param vehicle_heading: The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).
        :type vehicle_heading: int
        :param section_type: Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic
        :type section_type: str
        :param param_callback: Specifies the jsonp callback method.
        :type param_callback: str
        :param report: Specifies which data should be reported for diagnosis purposes.
        :type report: str
        :param depart_at: The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
        :type depart_at: str
        :param arrive_at: The date and time of arrival at the destination point. It must be specified as a dateTime.
        :type arrive_at: str
        :param route_type: The type of route requested.
        :type route_type: str
        :param traffic: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
        :type traffic: bool
        :param avoid: Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads
        :type avoid: str
        :param travel_mode: The mode of travel for the requested route.
        :type travel_mode: str
        :param hilliness: Degree of hilliness for calculating a thrilling route.
        :type hilliness: str
        :param windingness: Amount that a thrilling route should wind.
        :type windingness: str
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters.
        :type vehicle_length: float
        :param vehicle_width: Width of the vehicle in meters.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters.
        :type vehicle_height: float
        :param vehicle_commercial: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
        :type vehicle_load_type: str
        :param vehicle_engine_type: Engine type of the vehicle.
        :type vehicle_engine_type: str
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_in_liters_per_hundredkm: str
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
        :type downhill_efficiency: float
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param calculate_route_post_data_parameters:
        :type calculate_route_post_data_parameters: CalculateRoutePostDataParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._routing_version_number_calculate_route_locations_content_type_post_serialize(
            version_number=version_number,
            locations=locations,
            content_type=content_type,
            max_alternatives=max_alternatives,
            alternative_type=alternative_type,
            min_deviation_distance=min_deviation_distance,
            min_deviation_time=min_deviation_time,
            instructions_type=instructions_type,
            language=language,
            compute_best_order=compute_best_order,
            route_representation=route_representation,
            compute_travel_time_for=compute_travel_time_for,
            vehicle_heading=vehicle_heading,
            section_type=section_type,
            param_callback=param_callback,
            report=report,
            depart_at=depart_at,
            arrive_at=arrive_at,
            route_type=route_type,
            traffic=traffic,
            avoid=avoid,
            travel_mode=travel_mode,
            hilliness=hilliness,
            windingness=windingness,
            vehicle_max_speed=vehicle_max_speed,
            vehicle_weight=vehicle_weight,
            vehicle_axle_weight=vehicle_axle_weight,
            vehicle_length=vehicle_length,
            vehicle_width=vehicle_width,
            vehicle_height=vehicle_height,
            vehicle_commercial=vehicle_commercial,
            vehicle_load_type=vehicle_load_type,
            vehicle_engine_type=vehicle_engine_type,
            constant_speed_consumption_in_liters_per_hundredkm=constant_speed_consumption_in_liters_per_hundredkm,
            current_fuel_in_liters=current_fuel_in_liters,
            auxiliary_power_in_liters_per_hour=auxiliary_power_in_liters_per_hour,
            fuel_energy_density_in_m_joules_per_liter=fuel_energy_density_in_m_joules_per_liter,
            acceleration_efficiency=acceleration_efficiency,
            deceleration_efficiency=deceleration_efficiency,
            uphill_efficiency=uphill_efficiency,
            downhill_efficiency=downhill_efficiency,
            constant_speed_consumption_ink_wh_per_hundredkm=constant_speed_consumption_ink_wh_per_hundredkm,
            calculate_route_post_data_parameters=calculate_route_post_data_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '408': None,
            '414': None,
            '500': None,
            '502': None,
            '503': None,
            '504': None,
            '596': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def routing_version_number_calculate_route_locations_content_type_post_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Service version number. The current value is 1.")],
        locations: Annotated[StrictStr, Field(description="Locations through which the calculated route must pass.")],
        content_type: Annotated[StrictStr, Field(description="The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.")],
        max_alternatives: Annotated[Optional[Annotated[int, Field(le=5, strict=True, ge=0)]], Field(description="Number of alternative routes to be calculated.")] = None,
        alternative_type: Annotated[Optional[StrictStr], Field(description="Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.")] = None,
        min_deviation_distance: Annotated[Optional[StrictInt], Field(description="All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.")] = None,
        min_deviation_time: Annotated[Optional[StrictInt], Field(description="All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.")] = None,
        instructions_type: Annotated[Optional[StrictStr], Field(description="If specified, guidance instructions will be returned (if available).")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language parameter determines the language of the guidance messages.")] = None,
        compute_best_order: Annotated[Optional[StrictBool], Field(description="Re-order the route waypoints to reduce the route length.")] = None,
        route_representation: Annotated[Optional[StrictStr], Field(description="Specifies the representation of the set of routes provided as a response.")] = None,
        compute_travel_time_for: Annotated[Optional[StrictStr], Field(description="Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.")] = None,
        vehicle_heading: Annotated[Optional[Annotated[int, Field(le=359, strict=True, ge=0)]], Field(description="The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).")] = None,
        section_type: Annotated[Optional[StrictStr], Field(description="Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method.")] = None,
        report: Annotated[Optional[StrictStr], Field(description="Specifies which data should be reported for diagnosis purposes.")] = None,
        depart_at: Annotated[Optional[StrictStr], Field(description="The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.")] = None,
        arrive_at: Annotated[Optional[StrictStr], Field(description="The date and time of arrival at the destination point. It must be specified as a dateTime.")] = None,
        route_type: Annotated[Optional[StrictStr], Field(description="The type of route requested.")] = None,
        traffic: Annotated[Optional[StrictBool], Field(description="Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.")] = None,
        avoid: Annotated[Optional[StrictStr], Field(description="Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads")] = None,
        travel_mode: Annotated[Optional[StrictStr], Field(description="The mode of travel for the requested route.")] = None,
        hilliness: Annotated[Optional[StrictStr], Field(description="Degree of hilliness for calculating a thrilling route.")] = None,
        windingness: Annotated[Optional[StrictStr], Field(description="Amount that a thrilling route should wind.")] = None,
        vehicle_max_speed: Annotated[Optional[StrictInt], Field(description="Maximum speed of the vehicle in km/hour.")] = None,
        vehicle_weight: Annotated[Optional[StrictInt], Field(description="Weight of the vehicle in kilograms.")] = None,
        vehicle_axle_weight: Annotated[Optional[StrictInt], Field(description="Weight per axle of the vehicle in kg.")] = None,
        vehicle_length: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Length of the vehicle in meters.")] = None,
        vehicle_width: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Width of the vehicle in meters.")] = None,
        vehicle_height: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Height of the vehicle in meters.")] = None,
        vehicle_commercial: Annotated[Optional[StrictBool], Field(description="Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.")] = None,
        vehicle_load_type: Annotated[Optional[StrictStr], Field(description="Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.")] = None,
        vehicle_engine_type: Annotated[Optional[StrictStr], Field(description="Engine type of the vehicle.")] = None,
        constant_speed_consumption_in_liters_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        current_fuel_in_liters: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the current supply of fuel in liters.")] = None,
        auxiliary_power_in_liters_per_hour: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.")] = None,
        fuel_energy_density_in_m_joules_per_liter: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).")] = None,
        acceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).")] = None,
        deceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).")] = None,
        uphill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).")] = None,
        downhill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).")] = None,
        constant_speed_consumption_ink_wh_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        calculate_route_post_data_parameters: Optional[CalculateRoutePostDataParameters] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Calculate Route

        Calculates a route between an origin and a destination. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.

        :param version_number: Service version number. The current value is 1. (required)
        :type version_number: int
        :param locations: Locations through which the calculated route must pass. (required)
        :type locations: str
        :param content_type: The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
        :type content_type: str
        :param max_alternatives: Number of alternative routes to be calculated.
        :type max_alternatives: int
        :param alternative_type: Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.
        :type alternative_type: str
        :param min_deviation_distance: All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.
        :type min_deviation_distance: int
        :param min_deviation_time: All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.
        :type min_deviation_time: int
        :param instructions_type: If specified, guidance instructions will be returned (if available).
        :type instructions_type: str
        :param language: The language parameter determines the language of the guidance messages.
        :type language: str
        :param compute_best_order: Re-order the route waypoints to reduce the route length.
        :type compute_best_order: bool
        :param route_representation: Specifies the representation of the set of routes provided as a response.
        :type route_representation: str
        :param compute_travel_time_for: Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
        :type compute_travel_time_for: str
        :param vehicle_heading: The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).
        :type vehicle_heading: int
        :param section_type: Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic
        :type section_type: str
        :param param_callback: Specifies the jsonp callback method.
        :type param_callback: str
        :param report: Specifies which data should be reported for diagnosis purposes.
        :type report: str
        :param depart_at: The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
        :type depart_at: str
        :param arrive_at: The date and time of arrival at the destination point. It must be specified as a dateTime.
        :type arrive_at: str
        :param route_type: The type of route requested.
        :type route_type: str
        :param traffic: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
        :type traffic: bool
        :param avoid: Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads
        :type avoid: str
        :param travel_mode: The mode of travel for the requested route.
        :type travel_mode: str
        :param hilliness: Degree of hilliness for calculating a thrilling route.
        :type hilliness: str
        :param windingness: Amount that a thrilling route should wind.
        :type windingness: str
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters.
        :type vehicle_length: float
        :param vehicle_width: Width of the vehicle in meters.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters.
        :type vehicle_height: float
        :param vehicle_commercial: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
        :type vehicle_load_type: str
        :param vehicle_engine_type: Engine type of the vehicle.
        :type vehicle_engine_type: str
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_in_liters_per_hundredkm: str
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
        :type downhill_efficiency: float
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param calculate_route_post_data_parameters:
        :type calculate_route_post_data_parameters: CalculateRoutePostDataParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._routing_version_number_calculate_route_locations_content_type_post_serialize(
            version_number=version_number,
            locations=locations,
            content_type=content_type,
            max_alternatives=max_alternatives,
            alternative_type=alternative_type,
            min_deviation_distance=min_deviation_distance,
            min_deviation_time=min_deviation_time,
            instructions_type=instructions_type,
            language=language,
            compute_best_order=compute_best_order,
            route_representation=route_representation,
            compute_travel_time_for=compute_travel_time_for,
            vehicle_heading=vehicle_heading,
            section_type=section_type,
            param_callback=param_callback,
            report=report,
            depart_at=depart_at,
            arrive_at=arrive_at,
            route_type=route_type,
            traffic=traffic,
            avoid=avoid,
            travel_mode=travel_mode,
            hilliness=hilliness,
            windingness=windingness,
            vehicle_max_speed=vehicle_max_speed,
            vehicle_weight=vehicle_weight,
            vehicle_axle_weight=vehicle_axle_weight,
            vehicle_length=vehicle_length,
            vehicle_width=vehicle_width,
            vehicle_height=vehicle_height,
            vehicle_commercial=vehicle_commercial,
            vehicle_load_type=vehicle_load_type,
            vehicle_engine_type=vehicle_engine_type,
            constant_speed_consumption_in_liters_per_hundredkm=constant_speed_consumption_in_liters_per_hundredkm,
            current_fuel_in_liters=current_fuel_in_liters,
            auxiliary_power_in_liters_per_hour=auxiliary_power_in_liters_per_hour,
            fuel_energy_density_in_m_joules_per_liter=fuel_energy_density_in_m_joules_per_liter,
            acceleration_efficiency=acceleration_efficiency,
            deceleration_efficiency=deceleration_efficiency,
            uphill_efficiency=uphill_efficiency,
            downhill_efficiency=downhill_efficiency,
            constant_speed_consumption_ink_wh_per_hundredkm=constant_speed_consumption_ink_wh_per_hundredkm,
            calculate_route_post_data_parameters=calculate_route_post_data_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '408': None,
            '414': None,
            '500': None,
            '502': None,
            '503': None,
            '504': None,
            '596': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def routing_version_number_calculate_route_locations_content_type_post_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Service version number. The current value is 1.")],
        locations: Annotated[StrictStr, Field(description="Locations through which the calculated route must pass.")],
        content_type: Annotated[StrictStr, Field(description="The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.")],
        max_alternatives: Annotated[Optional[Annotated[int, Field(le=5, strict=True, ge=0)]], Field(description="Number of alternative routes to be calculated.")] = None,
        alternative_type: Annotated[Optional[StrictStr], Field(description="Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.")] = None,
        min_deviation_distance: Annotated[Optional[StrictInt], Field(description="All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.")] = None,
        min_deviation_time: Annotated[Optional[StrictInt], Field(description="All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.")] = None,
        instructions_type: Annotated[Optional[StrictStr], Field(description="If specified, guidance instructions will be returned (if available).")] = None,
        language: Annotated[Optional[StrictStr], Field(description="The language parameter determines the language of the guidance messages.")] = None,
        compute_best_order: Annotated[Optional[StrictBool], Field(description="Re-order the route waypoints to reduce the route length.")] = None,
        route_representation: Annotated[Optional[StrictStr], Field(description="Specifies the representation of the set of routes provided as a response.")] = None,
        compute_travel_time_for: Annotated[Optional[StrictStr], Field(description="Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.")] = None,
        vehicle_heading: Annotated[Optional[Annotated[int, Field(le=359, strict=True, ge=0)]], Field(description="The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).")] = None,
        section_type: Annotated[Optional[StrictStr], Field(description="Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="Specifies the jsonp callback method.")] = None,
        report: Annotated[Optional[StrictStr], Field(description="Specifies which data should be reported for diagnosis purposes.")] = None,
        depart_at: Annotated[Optional[StrictStr], Field(description="The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.")] = None,
        arrive_at: Annotated[Optional[StrictStr], Field(description="The date and time of arrival at the destination point. It must be specified as a dateTime.")] = None,
        route_type: Annotated[Optional[StrictStr], Field(description="The type of route requested.")] = None,
        traffic: Annotated[Optional[StrictBool], Field(description="Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.")] = None,
        avoid: Annotated[Optional[StrictStr], Field(description="Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads")] = None,
        travel_mode: Annotated[Optional[StrictStr], Field(description="The mode of travel for the requested route.")] = None,
        hilliness: Annotated[Optional[StrictStr], Field(description="Degree of hilliness for calculating a thrilling route.")] = None,
        windingness: Annotated[Optional[StrictStr], Field(description="Amount that a thrilling route should wind.")] = None,
        vehicle_max_speed: Annotated[Optional[StrictInt], Field(description="Maximum speed of the vehicle in km/hour.")] = None,
        vehicle_weight: Annotated[Optional[StrictInt], Field(description="Weight of the vehicle in kilograms.")] = None,
        vehicle_axle_weight: Annotated[Optional[StrictInt], Field(description="Weight per axle of the vehicle in kg.")] = None,
        vehicle_length: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Length of the vehicle in meters.")] = None,
        vehicle_width: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Width of the vehicle in meters.")] = None,
        vehicle_height: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Height of the vehicle in meters.")] = None,
        vehicle_commercial: Annotated[Optional[StrictBool], Field(description="Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.")] = None,
        vehicle_load_type: Annotated[Optional[StrictStr], Field(description="Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.")] = None,
        vehicle_engine_type: Annotated[Optional[StrictStr], Field(description="Engine type of the vehicle.")] = None,
        constant_speed_consumption_in_liters_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        current_fuel_in_liters: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the current supply of fuel in liters.")] = None,
        auxiliary_power_in_liters_per_hour: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.")] = None,
        fuel_energy_density_in_m_joules_per_liter: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).")] = None,
        acceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).")] = None,
        deceleration_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).")] = None,
        uphill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).")] = None,
        downhill_efficiency: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).")] = None,
        constant_speed_consumption_ink_wh_per_hundredkm: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.")] = None,
        calculate_route_post_data_parameters: Optional[CalculateRoutePostDataParameters] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Calculate Route

        Calculates a route between an origin and a destination. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.

        :param version_number: Service version number. The current value is 1. (required)
        :type version_number: int
        :param locations: Locations through which the calculated route must pass. (required)
        :type locations: str
        :param content_type: The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
        :type content_type: str
        :param max_alternatives: Number of alternative routes to be calculated.
        :type max_alternatives: int
        :param alternative_type: Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.
        :type alternative_type: str
        :param min_deviation_distance: All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.
        :type min_deviation_distance: int
        :param min_deviation_time: All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.
        :type min_deviation_time: int
        :param instructions_type: If specified, guidance instructions will be returned (if available).
        :type instructions_type: str
        :param language: The language parameter determines the language of the guidance messages.
        :type language: str
        :param compute_best_order: Re-order the route waypoints to reduce the route length.
        :type compute_best_order: bool
        :param route_representation: Specifies the representation of the set of routes provided as a response.
        :type route_representation: str
        :param compute_travel_time_for: Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
        :type compute_travel_time_for: str
        :param vehicle_heading: The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).
        :type vehicle_heading: int
        :param section_type: Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic
        :type section_type: str
        :param param_callback: Specifies the jsonp callback method.
        :type param_callback: str
        :param report: Specifies which data should be reported for diagnosis purposes.
        :type report: str
        :param depart_at: The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
        :type depart_at: str
        :param arrive_at: The date and time of arrival at the destination point. It must be specified as a dateTime.
        :type arrive_at: str
        :param route_type: The type of route requested.
        :type route_type: str
        :param traffic: Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
        :type traffic: bool
        :param avoid: Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads
        :type avoid: str
        :param travel_mode: The mode of travel for the requested route.
        :type travel_mode: str
        :param hilliness: Degree of hilliness for calculating a thrilling route.
        :type hilliness: str
        :param windingness: Amount that a thrilling route should wind.
        :type windingness: str
        :param vehicle_max_speed: Maximum speed of the vehicle in km/hour.
        :type vehicle_max_speed: int
        :param vehicle_weight: Weight of the vehicle in kilograms.
        :type vehicle_weight: int
        :param vehicle_axle_weight: Weight per axle of the vehicle in kg.
        :type vehicle_axle_weight: int
        :param vehicle_length: Length of the vehicle in meters.
        :type vehicle_length: float
        :param vehicle_width: Width of the vehicle in meters.
        :type vehicle_width: float
        :param vehicle_height: Height of the vehicle in meters.
        :type vehicle_height: float
        :param vehicle_commercial: Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
        :type vehicle_commercial: bool
        :param vehicle_load_type: Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
        :type vehicle_load_type: str
        :param vehicle_engine_type: Engine type of the vehicle.
        :type vehicle_engine_type: str
        :param constant_speed_consumption_in_liters_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_in_liters_per_hundredkm: str
        :param current_fuel_in_liters: Specifies the current supply of fuel in liters.
        :type current_fuel_in_liters: float
        :param auxiliary_power_in_liters_per_hour: Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
        :type auxiliary_power_in_liters_per_hour: float
        :param fuel_energy_density_in_m_joules_per_liter: Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
        :type fuel_energy_density_in_m_joules_per_liter: float
        :param acceleration_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
        :type acceleration_efficiency: float
        :param deceleration_efficiency: Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
        :type deceleration_efficiency: float
        :param uphill_efficiency: Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
        :type uphill_efficiency: float
        :param downhill_efficiency: Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
        :type downhill_efficiency: float
        :param constant_speed_consumption_ink_wh_per_hundredkm: Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
        :type constant_speed_consumption_ink_wh_per_hundredkm: str
        :param calculate_route_post_data_parameters:
        :type calculate_route_post_data_parameters: CalculateRoutePostDataParameters
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._routing_version_number_calculate_route_locations_content_type_post_serialize(
            version_number=version_number,
            locations=locations,
            content_type=content_type,
            max_alternatives=max_alternatives,
            alternative_type=alternative_type,
            min_deviation_distance=min_deviation_distance,
            min_deviation_time=min_deviation_time,
            instructions_type=instructions_type,
            language=language,
            compute_best_order=compute_best_order,
            route_representation=route_representation,
            compute_travel_time_for=compute_travel_time_for,
            vehicle_heading=vehicle_heading,
            section_type=section_type,
            param_callback=param_callback,
            report=report,
            depart_at=depart_at,
            arrive_at=arrive_at,
            route_type=route_type,
            traffic=traffic,
            avoid=avoid,
            travel_mode=travel_mode,
            hilliness=hilliness,
            windingness=windingness,
            vehicle_max_speed=vehicle_max_speed,
            vehicle_weight=vehicle_weight,
            vehicle_axle_weight=vehicle_axle_weight,
            vehicle_length=vehicle_length,
            vehicle_width=vehicle_width,
            vehicle_height=vehicle_height,
            vehicle_commercial=vehicle_commercial,
            vehicle_load_type=vehicle_load_type,
            vehicle_engine_type=vehicle_engine_type,
            constant_speed_consumption_in_liters_per_hundredkm=constant_speed_consumption_in_liters_per_hundredkm,
            current_fuel_in_liters=current_fuel_in_liters,
            auxiliary_power_in_liters_per_hour=auxiliary_power_in_liters_per_hour,
            fuel_energy_density_in_m_joules_per_liter=fuel_energy_density_in_m_joules_per_liter,
            acceleration_efficiency=acceleration_efficiency,
            deceleration_efficiency=deceleration_efficiency,
            uphill_efficiency=uphill_efficiency,
            downhill_efficiency=downhill_efficiency,
            constant_speed_consumption_ink_wh_per_hundredkm=constant_speed_consumption_ink_wh_per_hundredkm,
            calculate_route_post_data_parameters=calculate_route_post_data_parameters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '408': None,
            '414': None,
            '500': None,
            '502': None,
            '503': None,
            '504': None,
            '596': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _routing_version_number_calculate_route_locations_content_type_post_serialize(
        self,
        version_number,
        locations,
        content_type,
        max_alternatives,
        alternative_type,
        min_deviation_distance,
        min_deviation_time,
        instructions_type,
        language,
        compute_best_order,
        route_representation,
        compute_travel_time_for,
        vehicle_heading,
        section_type,
        param_callback,
        report,
        depart_at,
        arrive_at,
        route_type,
        traffic,
        avoid,
        travel_mode,
        hilliness,
        windingness,
        vehicle_max_speed,
        vehicle_weight,
        vehicle_axle_weight,
        vehicle_length,
        vehicle_width,
        vehicle_height,
        vehicle_commercial,
        vehicle_load_type,
        vehicle_engine_type,
        constant_speed_consumption_in_liters_per_hundredkm,
        current_fuel_in_liters,
        auxiliary_power_in_liters_per_hour,
        fuel_energy_density_in_m_joules_per_liter,
        acceleration_efficiency,
        deceleration_efficiency,
        uphill_efficiency,
        downhill_efficiency,
        constant_speed_consumption_ink_wh_per_hundredkm,
        calculate_route_post_data_parameters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        if locations is not None:
            _path_params['locations'] = locations
        if content_type is not None:
            _path_params['contentType'] = content_type
        # process the query parameters
        if max_alternatives is not None:
            
            _query_params.append(('maxAlternatives', max_alternatives))
            
        if alternative_type is not None:
            
            _query_params.append(('alternativeType', alternative_type))
            
        if min_deviation_distance is not None:
            
            _query_params.append(('minDeviationDistance', min_deviation_distance))
            
        if min_deviation_time is not None:
            
            _query_params.append(('minDeviationTime', min_deviation_time))
            
        if instructions_type is not None:
            
            _query_params.append(('instructionsType', instructions_type))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        if compute_best_order is not None:
            
            _query_params.append(('computeBestOrder', compute_best_order))
            
        if route_representation is not None:
            
            _query_params.append(('routeRepresentation', route_representation))
            
        if compute_travel_time_for is not None:
            
            _query_params.append(('computeTravelTimeFor', compute_travel_time_for))
            
        if vehicle_heading is not None:
            
            _query_params.append(('vehicleHeading', vehicle_heading))
            
        if section_type is not None:
            
            _query_params.append(('sectionType', section_type))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if report is not None:
            
            _query_params.append(('report', report))
            
        if depart_at is not None:
            
            _query_params.append(('departAt', depart_at))
            
        if arrive_at is not None:
            
            _query_params.append(('arriveAt', arrive_at))
            
        if route_type is not None:
            
            _query_params.append(('routeType', route_type))
            
        if traffic is not None:
            
            _query_params.append(('traffic', traffic))
            
        if avoid is not None:
            
            _query_params.append(('avoid', avoid))
            
        if travel_mode is not None:
            
            _query_params.append(('travelMode', travel_mode))
            
        if hilliness is not None:
            
            _query_params.append(('hilliness', hilliness))
            
        if windingness is not None:
            
            _query_params.append(('windingness', windingness))
            
        if vehicle_max_speed is not None:
            
            _query_params.append(('vehicleMaxSpeed', vehicle_max_speed))
            
        if vehicle_weight is not None:
            
            _query_params.append(('vehicleWeight', vehicle_weight))
            
        if vehicle_axle_weight is not None:
            
            _query_params.append(('vehicleAxleWeight', vehicle_axle_weight))
            
        if vehicle_length is not None:
            
            _query_params.append(('vehicleLength', vehicle_length))
            
        if vehicle_width is not None:
            
            _query_params.append(('vehicleWidth', vehicle_width))
            
        if vehicle_height is not None:
            
            _query_params.append(('vehicleHeight', vehicle_height))
            
        if vehicle_commercial is not None:
            
            _query_params.append(('vehicleCommercial', vehicle_commercial))
            
        if vehicle_load_type is not None:
            
            _query_params.append(('vehicleLoadType', vehicle_load_type))
            
        if vehicle_engine_type is not None:
            
            _query_params.append(('vehicleEngineType', vehicle_engine_type))
            
        if constant_speed_consumption_in_liters_per_hundredkm is not None:
            
            _query_params.append(('constantSpeedConsumptionInLitersPerHundredkm', constant_speed_consumption_in_liters_per_hundredkm))
            
        if current_fuel_in_liters is not None:
            
            _query_params.append(('currentFuelInLiters', current_fuel_in_liters))
            
        if auxiliary_power_in_liters_per_hour is not None:
            
            _query_params.append(('auxiliaryPowerInLitersPerHour', auxiliary_power_in_liters_per_hour))
            
        if fuel_energy_density_in_m_joules_per_liter is not None:
            
            _query_params.append(('fuelEnergyDensityInMJoulesPerLiter', fuel_energy_density_in_m_joules_per_liter))
            
        if acceleration_efficiency is not None:
            
            _query_params.append(('accelerationEfficiency', acceleration_efficiency))
            
        if deceleration_efficiency is not None:
            
            _query_params.append(('decelerationEfficiency', deceleration_efficiency))
            
        if uphill_efficiency is not None:
            
            _query_params.append(('uphillEfficiency', uphill_efficiency))
            
        if downhill_efficiency is not None:
            
            _query_params.append(('downhillEfficiency', downhill_efficiency))
            
        if constant_speed_consumption_ink_wh_per_hundredkm is not None:
            
            _query_params.append(('constantSpeedConsumptionInkWhPerHundredkm', constant_speed_consumption_ink_wh_per_hundredkm))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if calculate_route_post_data_parameters is not None:
            _body_params = calculate_route_post_data_parameters



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json', 
                        'application/xml'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/routing/{versionNumber}/calculateRoute/{locations}/{contentType}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


