# coding: utf-8

"""
    Maps

    The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class WMSWMTSApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_capabilities(
        self,
        version_number: StrictInt,
        service: StrictStr,
        request: StrictStr,
        version: Annotated[Optional[StrictStr], Field(description="WMS service version")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """GetCapabilities

        The GetCapabilities call is part of TomTom's implementation of version 1.1.1 the Web Map Service (WMS). It provides descriptions of the other calls that are available in the implementation.

        :param version_number: (required)
        :type version_number: int
        :param service: (required)
        :type service: str
        :param request: (required)
        :type request: str
        :param version: WMS service version
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_capabilities_serialize(
            version_number=version_number,
            service=service,
            request=request,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
            '401': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_capabilities_with_http_info(
        self,
        version_number: StrictInt,
        service: StrictStr,
        request: StrictStr,
        version: Annotated[Optional[StrictStr], Field(description="WMS service version")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """GetCapabilities

        The GetCapabilities call is part of TomTom's implementation of version 1.1.1 the Web Map Service (WMS). It provides descriptions of the other calls that are available in the implementation.

        :param version_number: (required)
        :type version_number: int
        :param service: (required)
        :type service: str
        :param request: (required)
        :type request: str
        :param version: WMS service version
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_capabilities_serialize(
            version_number=version_number,
            service=service,
            request=request,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
            '401': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_capabilities_without_preload_content(
        self,
        version_number: StrictInt,
        service: StrictStr,
        request: StrictStr,
        version: Annotated[Optional[StrictStr], Field(description="WMS service version")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GetCapabilities

        The GetCapabilities call is part of TomTom's implementation of version 1.1.1 the Web Map Service (WMS). It provides descriptions of the other calls that are available in the implementation.

        :param version_number: (required)
        :type version_number: int
        :param service: (required)
        :type service: str
        :param request: (required)
        :type request: str
        :param version: WMS service version
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_capabilities_serialize(
            version_number=version_number,
            service=service,
            request=request,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
            '401': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_capabilities_serialize(
        self,
        version_number,
        service,
        request,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        # process the query parameters
        if service is not None:
            
            _query_params.append(('service', service))
            
        if request is not None:
            
            _query_params.append(('request', request))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/map/{versionNumber}/wms//',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_map(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        request: Annotated[StrictStr, Field(description="Request type")],
        srs: Annotated[StrictStr, Field(description="Projection used in describing the <b>bbox</b> EPSG:3857 is recommended, particularly at higher zoom levels. (Note that EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785)")],
        bbox: Annotated[str, Field(strict=True, description="Bounding box in the projection stated in <b>srs</b> (minLon,minLat,maxLon,maxLat)")],
        width: Annotated[StrictInt, Field(description="Width of the resulting image, in pixels Maximum value is 2048")],
        height: Annotated[StrictInt, Field(description="Height of the resulting image, in pixels Maximum value is 2048")],
        format: Annotated[StrictStr, Field(description="Image format to be returned")],
        layers: Annotated[StrictStr, Field(description="Map layers requested Currently only the basic layer is available")],
        version: Annotated[StrictStr, Field(description="WMS service version")],
        styles: Annotated[Optional[StrictStr], Field(description="Map styles to be returned. Currently, no styles are available. This parameter is present for forward compatibility; it must be used and left blank.")] = None,
        service: Annotated[Optional[StrictStr], Field(description="Service type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """GetMap

        The GetMap call implements the Web Map Service 1.1.1 standard to access TomTom raster map tiles. This service is described in the response to the GetCapabilities API call.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param request: Request type (required)
        :type request: str
        :param srs: Projection used in describing the <b>bbox</b> EPSG:3857 is recommended, particularly at higher zoom levels. (Note that EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785) (required)
        :type srs: str
        :param bbox: Bounding box in the projection stated in <b>srs</b> (minLon,minLat,maxLon,maxLat) (required)
        :type bbox: str
        :param width: Width of the resulting image, in pixels Maximum value is 2048 (required)
        :type width: int
        :param height: Height of the resulting image, in pixels Maximum value is 2048 (required)
        :type height: int
        :param format: Image format to be returned (required)
        :type format: str
        :param layers: Map layers requested Currently only the basic layer is available (required)
        :type layers: str
        :param version: WMS service version (required)
        :type version: str
        :param styles: Map styles to be returned. Currently, no styles are available. This parameter is present for forward compatibility; it must be used and left blank.
        :type styles: str
        :param service: Service type
        :type service: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_map_serialize(
            version_number=version_number,
            request=request,
            srs=srs,
            bbox=bbox,
            width=width,
            height=height,
            format=format,
            layers=layers,
            version=version,
            styles=styles,
            service=service,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
            '401': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_map_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        request: Annotated[StrictStr, Field(description="Request type")],
        srs: Annotated[StrictStr, Field(description="Projection used in describing the <b>bbox</b> EPSG:3857 is recommended, particularly at higher zoom levels. (Note that EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785)")],
        bbox: Annotated[str, Field(strict=True, description="Bounding box in the projection stated in <b>srs</b> (minLon,minLat,maxLon,maxLat)")],
        width: Annotated[StrictInt, Field(description="Width of the resulting image, in pixels Maximum value is 2048")],
        height: Annotated[StrictInt, Field(description="Height of the resulting image, in pixels Maximum value is 2048")],
        format: Annotated[StrictStr, Field(description="Image format to be returned")],
        layers: Annotated[StrictStr, Field(description="Map layers requested Currently only the basic layer is available")],
        version: Annotated[StrictStr, Field(description="WMS service version")],
        styles: Annotated[Optional[StrictStr], Field(description="Map styles to be returned. Currently, no styles are available. This parameter is present for forward compatibility; it must be used and left blank.")] = None,
        service: Annotated[Optional[StrictStr], Field(description="Service type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """GetMap

        The GetMap call implements the Web Map Service 1.1.1 standard to access TomTom raster map tiles. This service is described in the response to the GetCapabilities API call.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param request: Request type (required)
        :type request: str
        :param srs: Projection used in describing the <b>bbox</b> EPSG:3857 is recommended, particularly at higher zoom levels. (Note that EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785) (required)
        :type srs: str
        :param bbox: Bounding box in the projection stated in <b>srs</b> (minLon,minLat,maxLon,maxLat) (required)
        :type bbox: str
        :param width: Width of the resulting image, in pixels Maximum value is 2048 (required)
        :type width: int
        :param height: Height of the resulting image, in pixels Maximum value is 2048 (required)
        :type height: int
        :param format: Image format to be returned (required)
        :type format: str
        :param layers: Map layers requested Currently only the basic layer is available (required)
        :type layers: str
        :param version: WMS service version (required)
        :type version: str
        :param styles: Map styles to be returned. Currently, no styles are available. This parameter is present for forward compatibility; it must be used and left blank.
        :type styles: str
        :param service: Service type
        :type service: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_map_serialize(
            version_number=version_number,
            request=request,
            srs=srs,
            bbox=bbox,
            width=width,
            height=height,
            format=format,
            layers=layers,
            version=version,
            styles=styles,
            service=service,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
            '401': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_map_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        request: Annotated[StrictStr, Field(description="Request type")],
        srs: Annotated[StrictStr, Field(description="Projection used in describing the <b>bbox</b> EPSG:3857 is recommended, particularly at higher zoom levels. (Note that EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785)")],
        bbox: Annotated[str, Field(strict=True, description="Bounding box in the projection stated in <b>srs</b> (minLon,minLat,maxLon,maxLat)")],
        width: Annotated[StrictInt, Field(description="Width of the resulting image, in pixels Maximum value is 2048")],
        height: Annotated[StrictInt, Field(description="Height of the resulting image, in pixels Maximum value is 2048")],
        format: Annotated[StrictStr, Field(description="Image format to be returned")],
        layers: Annotated[StrictStr, Field(description="Map layers requested Currently only the basic layer is available")],
        version: Annotated[StrictStr, Field(description="WMS service version")],
        styles: Annotated[Optional[StrictStr], Field(description="Map styles to be returned. Currently, no styles are available. This parameter is present for forward compatibility; it must be used and left blank.")] = None,
        service: Annotated[Optional[StrictStr], Field(description="Service type")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """GetMap

        The GetMap call implements the Web Map Service 1.1.1 standard to access TomTom raster map tiles. This service is described in the response to the GetCapabilities API call.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param request: Request type (required)
        :type request: str
        :param srs: Projection used in describing the <b>bbox</b> EPSG:3857 is recommended, particularly at higher zoom levels. (Note that EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785) (required)
        :type srs: str
        :param bbox: Bounding box in the projection stated in <b>srs</b> (minLon,minLat,maxLon,maxLat) (required)
        :type bbox: str
        :param width: Width of the resulting image, in pixels Maximum value is 2048 (required)
        :type width: int
        :param height: Height of the resulting image, in pixels Maximum value is 2048 (required)
        :type height: int
        :param format: Image format to be returned (required)
        :type format: str
        :param layers: Map layers requested Currently only the basic layer is available (required)
        :type layers: str
        :param version: WMS service version (required)
        :type version: str
        :param styles: Map styles to be returned. Currently, no styles are available. This parameter is present for forward compatibility; it must be used and left blank.
        :type styles: str
        :param service: Service type
        :type service: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_map_serialize(
            version_number=version_number,
            request=request,
            srs=srs,
            bbox=bbox,
            width=width,
            height=height,
            format=format,
            layers=layers,
            version=version,
            styles=styles,
            service=service,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '202': None,
            '401': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_map_serialize(
        self,
        version_number,
        request,
        srs,
        bbox,
        width,
        height,
        format,
        layers,
        version,
        styles,
        service,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        # process the query parameters
        if request is not None:
            
            _query_params.append(('request', request))
            
        if srs is not None:
            
            _query_params.append(('srs', srs))
            
        if bbox is not None:
            
            _query_params.append(('bbox', bbox))
            
        if width is not None:
            
            _query_params.append(('width', width))
            
        if height is not None:
            
            _query_params.append(('height', height))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        if layers is not None:
            
            _query_params.append(('layers', layers))
            
        if styles is not None:
            
            _query_params.append(('styles', styles))
            
        if service is not None:
            
            _query_params.append(('service', service))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/map/{versionNumber}/wms/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def map_version_number_wmts_key_wmts_version_wmts_capabilities_xml_get(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        key: Annotated[StrictStr, Field(description="Your API key for calling this service.")],
        wmts_version: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """WMTS

        The WMTS GetCapabilities call implements version 1.0.0 of the <a href=\"http://www.opengeospatial.org/standards/wmts\">Web Map Tile Service</a> (WMTS) standard. It returns metadata that allows compatible calling systems to construct calls to TomTom's raster map tile service. See the <a href=\"/maps-api/maps-api-documentation-raster/wmts\">documentation</a> for more information on WMTS.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param key: Your API key for calling this service. (required)
        :type key: str
        :param wmts_version: (required)
        :type wmts_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_wmts_key_wmts_version_wmts_capabilities_xml_get_serialize(
            version_number=version_number,
            key=key,
            wmts_version=wmts_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def map_version_number_wmts_key_wmts_version_wmts_capabilities_xml_get_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        key: Annotated[StrictStr, Field(description="Your API key for calling this service.")],
        wmts_version: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """WMTS

        The WMTS GetCapabilities call implements version 1.0.0 of the <a href=\"http://www.opengeospatial.org/standards/wmts\">Web Map Tile Service</a> (WMTS) standard. It returns metadata that allows compatible calling systems to construct calls to TomTom's raster map tile service. See the <a href=\"/maps-api/maps-api-documentation-raster/wmts\">documentation</a> for more information on WMTS.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param key: Your API key for calling this service. (required)
        :type key: str
        :param wmts_version: (required)
        :type wmts_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_wmts_key_wmts_version_wmts_capabilities_xml_get_serialize(
            version_number=version_number,
            key=key,
            wmts_version=wmts_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def map_version_number_wmts_key_wmts_version_wmts_capabilities_xml_get_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        key: Annotated[StrictStr, Field(description="Your API key for calling this service.")],
        wmts_version: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """WMTS

        The WMTS GetCapabilities call implements version 1.0.0 of the <a href=\"http://www.opengeospatial.org/standards/wmts\">Web Map Tile Service</a> (WMTS) standard. It returns metadata that allows compatible calling systems to construct calls to TomTom's raster map tile service. See the <a href=\"/maps-api/maps-api-documentation-raster/wmts\">documentation</a> for more information on WMTS.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param key: Your API key for calling this service. (required)
        :type key: str
        :param wmts_version: (required)
        :type wmts_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_wmts_key_wmts_version_wmts_capabilities_xml_get_serialize(
            version_number=version_number,
            key=key,
            wmts_version=wmts_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '401': None,
            '500': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _map_version_number_wmts_key_wmts_version_wmts_capabilities_xml_get_serialize(
        self,
        version_number,
        key,
        wmts_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        if key is not None:
            _path_params['key'] = key
        if wmts_version is not None:
            _path_params['wmtsVersion'] = wmts_version
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/map/{versionNumber}/wmts/{key}/{wmtsVersion}/WMTSCapabilities.xml',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


