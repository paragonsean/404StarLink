# coding: utf-8

"""
    Maps

    The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class VectorApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def map_version_number_tile_layer_style_zoom_xy_pbf_get(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        layer: Annotated[StrictStr, Field(description="Layer of tile to be rendered")],
        style: Annotated[StrictStr, Field(description="Style of tile to be rendered")],
        zoom: Annotated[StrictInt, Field(description="Zoom level of tile to be rendered")],
        x: Annotated[StrictInt, Field(description="x coordinate of tile on zoom grid")],
        y: Annotated[StrictInt, Field(description="y coordinate of tile on zoom grid")],
        view: Annotated[Optional[StrictStr], Field(description="Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for an explanation of how this works in live services.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Language to be used for labels in the response. The default is NGT: Neutral Ground Truth, which uses each place's local official language and script (where available). See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for a full list of options.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Tile

        The Maps API Vector Service delivers vector tiles, which are representations of square sections of map data.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param layer: Layer of tile to be rendered (required)
        :type layer: str
        :param style: Style of tile to be rendered (required)
        :type style: str
        :param zoom: Zoom level of tile to be rendered (required)
        :type zoom: int
        :param x: x coordinate of tile on zoom grid (required)
        :type x: int
        :param y: y coordinate of tile on zoom grid (required)
        :type y: int
        :param view: Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for an explanation of how this works in live services.
        :type view: str
        :param language: Language to be used for labels in the response. The default is NGT: Neutral Ground Truth, which uses each place's local official language and script (where available). See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for a full list of options.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_tile_layer_style_zoom_xy_pbf_get_serialize(
            version_number=version_number,
            layer=layer,
            style=style,
            zoom=zoom,
            x=x,
            y=y,
            view=view,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '500': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def map_version_number_tile_layer_style_zoom_xy_pbf_get_with_http_info(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        layer: Annotated[StrictStr, Field(description="Layer of tile to be rendered")],
        style: Annotated[StrictStr, Field(description="Style of tile to be rendered")],
        zoom: Annotated[StrictInt, Field(description="Zoom level of tile to be rendered")],
        x: Annotated[StrictInt, Field(description="x coordinate of tile on zoom grid")],
        y: Annotated[StrictInt, Field(description="y coordinate of tile on zoom grid")],
        view: Annotated[Optional[StrictStr], Field(description="Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for an explanation of how this works in live services.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Language to be used for labels in the response. The default is NGT: Neutral Ground Truth, which uses each place's local official language and script (where available). See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for a full list of options.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Tile

        The Maps API Vector Service delivers vector tiles, which are representations of square sections of map data.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param layer: Layer of tile to be rendered (required)
        :type layer: str
        :param style: Style of tile to be rendered (required)
        :type style: str
        :param zoom: Zoom level of tile to be rendered (required)
        :type zoom: int
        :param x: x coordinate of tile on zoom grid (required)
        :type x: int
        :param y: y coordinate of tile on zoom grid (required)
        :type y: int
        :param view: Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for an explanation of how this works in live services.
        :type view: str
        :param language: Language to be used for labels in the response. The default is NGT: Neutral Ground Truth, which uses each place's local official language and script (where available). See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for a full list of options.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_tile_layer_style_zoom_xy_pbf_get_serialize(
            version_number=version_number,
            layer=layer,
            style=style,
            zoom=zoom,
            x=x,
            y=y,
            view=view,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '500': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def map_version_number_tile_layer_style_zoom_xy_pbf_get_without_preload_content(
        self,
        version_number: Annotated[StrictInt, Field(description="Version of the service to call. The current version is 1")],
        layer: Annotated[StrictStr, Field(description="Layer of tile to be rendered")],
        style: Annotated[StrictStr, Field(description="Style of tile to be rendered")],
        zoom: Annotated[StrictInt, Field(description="Zoom level of tile to be rendered")],
        x: Annotated[StrictInt, Field(description="x coordinate of tile on zoom grid")],
        y: Annotated[StrictInt, Field(description="y coordinate of tile on zoom grid")],
        view: Annotated[Optional[StrictStr], Field(description="Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for an explanation of how this works in live services.")] = None,
        language: Annotated[Optional[StrictStr], Field(description="Language to be used for labels in the response. The default is NGT: Neutral Ground Truth, which uses each place's local official language and script (where available). See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for a full list of options.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Tile

        The Maps API Vector Service delivers vector tiles, which are representations of square sections of map data.

        :param version_number: Version of the service to call. The current version is 1 (required)
        :type version_number: int
        :param layer: Layer of tile to be rendered (required)
        :type layer: str
        :param style: Style of tile to be rendered (required)
        :type style: str
        :param zoom: Zoom level of tile to be rendered (required)
        :type zoom: int
        :param x: x coordinate of tile on zoom grid (required)
        :type x: int
        :param y: y coordinate of tile on zoom grid (required)
        :type y: int
        :param view: Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for an explanation of how this works in live services.
        :type view: str
        :param language: Language to be used for labels in the response. The default is NGT: Neutral Ground Truth, which uses each place's local official language and script (where available). See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for a full list of options.
        :type language: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._map_version_number_tile_layer_style_zoom_xy_pbf_get_serialize(
            version_number=version_number,
            layer=layer,
            style=style,
            zoom=zoom,
            x=x,
            y=y,
            view=view,
            language=language,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': None,
            '403': None,
            '500': None,
            '503': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _map_version_number_tile_layer_style_zoom_xy_pbf_get_serialize(
        self,
        version_number,
        layer,
        style,
        zoom,
        x,
        y,
        view,
        language,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if version_number is not None:
            _path_params['versionNumber'] = version_number
        if layer is not None:
            _path_params['layer'] = layer
        if style is not None:
            _path_params['style'] = style
        if zoom is not None:
            _path_params['zoom'] = zoom
        if x is not None:
            _path_params['X'] = x
        if y is not None:
            _path_params['Y'] = y
        # process the query parameters
        if view is not None:
            
            _query_params.append(('view', view))
            
        if language is not None:
            
            _query_params.append(('language', language))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/map/{versionNumber}/tile/{layer}/{style}/{zoom}/{X}/{Y}.pbf',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


