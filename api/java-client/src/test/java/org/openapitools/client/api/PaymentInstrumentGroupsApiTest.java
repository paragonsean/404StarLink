/*
 * Configuration API
 * The Configuration API enables you to create a platform where you can onboard your users as account holders and create balance accounts, cards, and business accounts.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Versioning The Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/bcl/v1/accountHolders ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v1`.
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PaymentInstrumentGroup;
import org.openapitools.client.model.PaymentInstrumentGroupInfo;
import org.openapitools.client.model.RestServiceError;
import org.openapitools.client.model.TransactionRulesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentInstrumentGroupsApi
 */
@Disabled
public class PaymentInstrumentGroupsApiTest {

    private final PaymentInstrumentGroupsApi api = new PaymentInstrumentGroupsApi();

    /**
     * Get a payment instrument group
     *
     * Returns the details of a payment instrument group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentInstrumentGroupsIdTest() throws ApiException {
        String id = null;
        PaymentInstrumentGroup response = api.getPaymentInstrumentGroupsId(id);
        // TODO: test validations
    }

    /**
     * Get all transaction rules for a payment instrument group
     *
     * Returns a list of all the transaction rules associated with a payment instrument group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentInstrumentGroupsIdTransactionRulesTest() throws ApiException {
        String id = null;
        TransactionRulesResponse response = api.getPaymentInstrumentGroupsIdTransactionRules(id);
        // TODO: test validations
    }

    /**
     * Create a payment instrument group
     *
     * Creates a payment instrument group to associate and group payment instrument resources together. You can apply a transaction rule to a payment instrument group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPaymentInstrumentGroupsTest() throws ApiException {
        PaymentInstrumentGroupInfo paymentInstrumentGroupInfo = null;
        PaymentInstrumentGroup response = api.postPaymentInstrumentGroups(paymentInstrumentGroupInfo);
        // TODO: test validations
    }

}
