/*
 * AWS Security Token Service
 * <fullname>Security Token Service</fullname> <p>Security Token Service (STS) enables you to request temporary, limited-privilege credentials for Identity and Access Management (IAM) users or for users that you authenticate (federated users). This guide provides descriptions of the STS API. For more information about using this service, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html\">Temporary Security Credentials</a>.</p>
 *
 * The version of the OpenAPI document: 2011-06-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AssumeRoleResponseAssumedRoleUser;
import org.openapitools.client.model.AssumeRoleWithWebIdentityResponseCredentials;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the response to a successful &lt;a&gt;AssumeRoleWithWebIdentity&lt;/a&gt; request, including temporary Amazon Web Services credentials that can be used to make Amazon Web Services requests. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:55:56.639241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssumeRoleWithWebIdentityResponse {
  public static final String SERIALIZED_NAME_CREDENTIALS = "Credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private AssumeRoleWithWebIdentityResponseCredentials credentials;

  public static final String SERIALIZED_NAME_SUBJECT_FROM_WEB_IDENTITY_TOKEN = "SubjectFromWebIdentityToken";
  @SerializedName(SERIALIZED_NAME_SUBJECT_FROM_WEB_IDENTITY_TOKEN)
  private String subjectFromWebIdentityToken;

  public static final String SERIALIZED_NAME_ASSUMED_ROLE_USER = "AssumedRoleUser";
  @SerializedName(SERIALIZED_NAME_ASSUMED_ROLE_USER)
  private AssumeRoleResponseAssumedRoleUser assumedRoleUser;

  public static final String SERIALIZED_NAME_PACKED_POLICY_SIZE = "PackedPolicySize";
  @SerializedName(SERIALIZED_NAME_PACKED_POLICY_SIZE)
  private Integer packedPolicySize;

  public static final String SERIALIZED_NAME_PROVIDER = "Provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_AUDIENCE = "Audience";
  @SerializedName(SERIALIZED_NAME_AUDIENCE)
  private String audience;

  public static final String SERIALIZED_NAME_SOURCE_IDENTITY = "SourceIdentity";
  @SerializedName(SERIALIZED_NAME_SOURCE_IDENTITY)
  private String sourceIdentity;

  public AssumeRoleWithWebIdentityResponse() {
  }

  public AssumeRoleWithWebIdentityResponse credentials(AssumeRoleWithWebIdentityResponseCredentials credentials) {
    this.credentials = credentials;
    return this;
  }

  /**
   * Get credentials
   * @return credentials
   */
  @javax.annotation.Nullable
  public AssumeRoleWithWebIdentityResponseCredentials getCredentials() {
    return credentials;
  }

  public void setCredentials(AssumeRoleWithWebIdentityResponseCredentials credentials) {
    this.credentials = credentials;
  }


  public AssumeRoleWithWebIdentityResponse subjectFromWebIdentityToken(String subjectFromWebIdentityToken) {
    this.subjectFromWebIdentityToken = subjectFromWebIdentityToken;
    return this;
  }

  /**
   * Get subjectFromWebIdentityToken
   * @return subjectFromWebIdentityToken
   */
  @javax.annotation.Nullable
  public String getSubjectFromWebIdentityToken() {
    return subjectFromWebIdentityToken;
  }

  public void setSubjectFromWebIdentityToken(String subjectFromWebIdentityToken) {
    this.subjectFromWebIdentityToken = subjectFromWebIdentityToken;
  }


  public AssumeRoleWithWebIdentityResponse assumedRoleUser(AssumeRoleResponseAssumedRoleUser assumedRoleUser) {
    this.assumedRoleUser = assumedRoleUser;
    return this;
  }

  /**
   * Get assumedRoleUser
   * @return assumedRoleUser
   */
  @javax.annotation.Nullable
  public AssumeRoleResponseAssumedRoleUser getAssumedRoleUser() {
    return assumedRoleUser;
  }

  public void setAssumedRoleUser(AssumeRoleResponseAssumedRoleUser assumedRoleUser) {
    this.assumedRoleUser = assumedRoleUser;
  }


  public AssumeRoleWithWebIdentityResponse packedPolicySize(Integer packedPolicySize) {
    this.packedPolicySize = packedPolicySize;
    return this;
  }

  /**
   * Get packedPolicySize
   * @return packedPolicySize
   */
  @javax.annotation.Nullable
  public Integer getPackedPolicySize() {
    return packedPolicySize;
  }

  public void setPackedPolicySize(Integer packedPolicySize) {
    this.packedPolicySize = packedPolicySize;
  }


  public AssumeRoleWithWebIdentityResponse provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public AssumeRoleWithWebIdentityResponse audience(String audience) {
    this.audience = audience;
    return this;
  }

  /**
   * Get audience
   * @return audience
   */
  @javax.annotation.Nullable
  public String getAudience() {
    return audience;
  }

  public void setAudience(String audience) {
    this.audience = audience;
  }


  public AssumeRoleWithWebIdentityResponse sourceIdentity(String sourceIdentity) {
    this.sourceIdentity = sourceIdentity;
    return this;
  }

  /**
   * Get sourceIdentity
   * @return sourceIdentity
   */
  @javax.annotation.Nullable
  public String getSourceIdentity() {
    return sourceIdentity;
  }

  public void setSourceIdentity(String sourceIdentity) {
    this.sourceIdentity = sourceIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssumeRoleWithWebIdentityResponse assumeRoleWithWebIdentityResponse = (AssumeRoleWithWebIdentityResponse) o;
    return Objects.equals(this.credentials, assumeRoleWithWebIdentityResponse.credentials) &&
        Objects.equals(this.subjectFromWebIdentityToken, assumeRoleWithWebIdentityResponse.subjectFromWebIdentityToken) &&
        Objects.equals(this.assumedRoleUser, assumeRoleWithWebIdentityResponse.assumedRoleUser) &&
        Objects.equals(this.packedPolicySize, assumeRoleWithWebIdentityResponse.packedPolicySize) &&
        Objects.equals(this.provider, assumeRoleWithWebIdentityResponse.provider) &&
        Objects.equals(this.audience, assumeRoleWithWebIdentityResponse.audience) &&
        Objects.equals(this.sourceIdentity, assumeRoleWithWebIdentityResponse.sourceIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credentials, subjectFromWebIdentityToken, assumedRoleUser, packedPolicySize, provider, audience, sourceIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssumeRoleWithWebIdentityResponse {\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    subjectFromWebIdentityToken: ").append(toIndentedString(subjectFromWebIdentityToken)).append("\n");
    sb.append("    assumedRoleUser: ").append(toIndentedString(assumedRoleUser)).append("\n");
    sb.append("    packedPolicySize: ").append(toIndentedString(packedPolicySize)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    audience: ").append(toIndentedString(audience)).append("\n");
    sb.append("    sourceIdentity: ").append(toIndentedString(sourceIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Credentials");
    openapiFields.add("SubjectFromWebIdentityToken");
    openapiFields.add("AssumedRoleUser");
    openapiFields.add("PackedPolicySize");
    openapiFields.add("Provider");
    openapiFields.add("Audience");
    openapiFields.add("SourceIdentity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssumeRoleWithWebIdentityResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssumeRoleWithWebIdentityResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssumeRoleWithWebIdentityResponse is not found in the empty JSON string", AssumeRoleWithWebIdentityResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssumeRoleWithWebIdentityResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssumeRoleWithWebIdentityResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Credentials`
      if (jsonObj.get("Credentials") != null && !jsonObj.get("Credentials").isJsonNull()) {
        AssumeRoleWithWebIdentityResponseCredentials.validateJsonElement(jsonObj.get("Credentials"));
      }
      // validate the optional field `SubjectFromWebIdentityToken`
      if (jsonObj.get("SubjectFromWebIdentityToken") != null && !jsonObj.get("SubjectFromWebIdentityToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubjectFromWebIdentityToken"));
      }
      // validate the optional field `AssumedRoleUser`
      if (jsonObj.get("AssumedRoleUser") != null && !jsonObj.get("AssumedRoleUser").isJsonNull()) {
        AssumeRoleResponseAssumedRoleUser.validateJsonElement(jsonObj.get("AssumedRoleUser"));
      }
      // validate the optional field `PackedPolicySize`
      if (jsonObj.get("PackedPolicySize") != null && !jsonObj.get("PackedPolicySize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("PackedPolicySize"));
      }
      // validate the optional field `Provider`
      if (jsonObj.get("Provider") != null && !jsonObj.get("Provider").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Provider"));
      }
      // validate the optional field `Audience`
      if (jsonObj.get("Audience") != null && !jsonObj.get("Audience").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Audience"));
      }
      // validate the optional field `SourceIdentity`
      if (jsonObj.get("SourceIdentity") != null && !jsonObj.get("SourceIdentity").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceIdentity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssumeRoleWithWebIdentityResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssumeRoleWithWebIdentityResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssumeRoleWithWebIdentityResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssumeRoleWithWebIdentityResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AssumeRoleWithWebIdentityResponse>() {
           @Override
           public void write(JsonWriter out, AssumeRoleWithWebIdentityResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssumeRoleWithWebIdentityResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssumeRoleWithWebIdentityResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssumeRoleWithWebIdentityResponse
   * @throws IOException if the JSON string is invalid with respect to AssumeRoleWithWebIdentityResponse
   */
  public static AssumeRoleWithWebIdentityResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssumeRoleWithWebIdentityResponse.class);
  }

  /**
   * Convert an instance of AssumeRoleWithWebIdentityResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

