/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComparisonOperator;
import org.openapitools.client.model.MetricName;
import org.openapitools.client.model.TreatMissingData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutAlarmRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:45.376997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutAlarmRequest {
  public static final String SERIALIZED_NAME_ALARM_NAME = "alarmName";
  @SerializedName(SERIALIZED_NAME_ALARM_NAME)
  private String alarmName;

  public static final String SERIALIZED_NAME_METRIC_NAME = "metricName";
  @SerializedName(SERIALIZED_NAME_METRIC_NAME)
  private MetricName metricName;

  public static final String SERIALIZED_NAME_MONITORED_RESOURCE_NAME = "monitoredResourceName";
  @SerializedName(SERIALIZED_NAME_MONITORED_RESOURCE_NAME)
  private String monitoredResourceName;

  public static final String SERIALIZED_NAME_COMPARISON_OPERATOR = "comparisonOperator";
  @SerializedName(SERIALIZED_NAME_COMPARISON_OPERATOR)
  private ComparisonOperator comparisonOperator;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private Double threshold;

  public static final String SERIALIZED_NAME_EVALUATION_PERIODS = "evaluationPeriods";
  @SerializedName(SERIALIZED_NAME_EVALUATION_PERIODS)
  private Integer evaluationPeriods;

  public static final String SERIALIZED_NAME_DATAPOINTS_TO_ALARM = "datapointsToAlarm";
  @SerializedName(SERIALIZED_NAME_DATAPOINTS_TO_ALARM)
  private Integer datapointsToAlarm;

  public static final String SERIALIZED_NAME_TREAT_MISSING_DATA = "treatMissingData";
  @SerializedName(SERIALIZED_NAME_TREAT_MISSING_DATA)
  private TreatMissingData treatMissingData;

  public static final String SERIALIZED_NAME_CONTACT_PROTOCOLS = "contactProtocols";
  @SerializedName(SERIALIZED_NAME_CONTACT_PROTOCOLS)
  private List contactProtocols;

  public static final String SERIALIZED_NAME_NOTIFICATION_TRIGGERS = "notificationTriggers";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TRIGGERS)
  private List notificationTriggers;

  public static final String SERIALIZED_NAME_NOTIFICATION_ENABLED = "notificationEnabled";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_ENABLED)
  private Boolean notificationEnabled;

  public PutAlarmRequest() {
  }

  public PutAlarmRequest alarmName(String alarmName) {
    this.alarmName = alarmName;
    return this;
  }

  /**
   * Get alarmName
   * @return alarmName
   */
  @javax.annotation.Nonnull
  public String getAlarmName() {
    return alarmName;
  }

  public void setAlarmName(String alarmName) {
    this.alarmName = alarmName;
  }


  public PutAlarmRequest metricName(MetricName metricName) {
    this.metricName = metricName;
    return this;
  }

  /**
   * Get metricName
   * @return metricName
   */
  @javax.annotation.Nonnull
  public MetricName getMetricName() {
    return metricName;
  }

  public void setMetricName(MetricName metricName) {
    this.metricName = metricName;
  }


  public PutAlarmRequest monitoredResourceName(String monitoredResourceName) {
    this.monitoredResourceName = monitoredResourceName;
    return this;
  }

  /**
   * Get monitoredResourceName
   * @return monitoredResourceName
   */
  @javax.annotation.Nonnull
  public String getMonitoredResourceName() {
    return monitoredResourceName;
  }

  public void setMonitoredResourceName(String monitoredResourceName) {
    this.monitoredResourceName = monitoredResourceName;
  }


  public PutAlarmRequest comparisonOperator(ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
    return this;
  }

  /**
   * Get comparisonOperator
   * @return comparisonOperator
   */
  @javax.annotation.Nonnull
  public ComparisonOperator getComparisonOperator() {
    return comparisonOperator;
  }

  public void setComparisonOperator(ComparisonOperator comparisonOperator) {
    this.comparisonOperator = comparisonOperator;
  }


  public PutAlarmRequest threshold(Double threshold) {
    this.threshold = threshold;
    return this;
  }

  /**
   * Get threshold
   * @return threshold
   */
  @javax.annotation.Nonnull
  public Double getThreshold() {
    return threshold;
  }

  public void setThreshold(Double threshold) {
    this.threshold = threshold;
  }


  public PutAlarmRequest evaluationPeriods(Integer evaluationPeriods) {
    this.evaluationPeriods = evaluationPeriods;
    return this;
  }

  /**
   * Get evaluationPeriods
   * @return evaluationPeriods
   */
  @javax.annotation.Nonnull
  public Integer getEvaluationPeriods() {
    return evaluationPeriods;
  }

  public void setEvaluationPeriods(Integer evaluationPeriods) {
    this.evaluationPeriods = evaluationPeriods;
  }


  public PutAlarmRequest datapointsToAlarm(Integer datapointsToAlarm) {
    this.datapointsToAlarm = datapointsToAlarm;
    return this;
  }

  /**
   * Get datapointsToAlarm
   * @return datapointsToAlarm
   */
  @javax.annotation.Nullable
  public Integer getDatapointsToAlarm() {
    return datapointsToAlarm;
  }

  public void setDatapointsToAlarm(Integer datapointsToAlarm) {
    this.datapointsToAlarm = datapointsToAlarm;
  }


  public PutAlarmRequest treatMissingData(TreatMissingData treatMissingData) {
    this.treatMissingData = treatMissingData;
    return this;
  }

  /**
   * Get treatMissingData
   * @return treatMissingData
   */
  @javax.annotation.Nullable
  public TreatMissingData getTreatMissingData() {
    return treatMissingData;
  }

  public void setTreatMissingData(TreatMissingData treatMissingData) {
    this.treatMissingData = treatMissingData;
  }


  public PutAlarmRequest contactProtocols(List contactProtocols) {
    this.contactProtocols = contactProtocols;
    return this;
  }

  /**
   * Get contactProtocols
   * @return contactProtocols
   */
  @javax.annotation.Nullable
  public List getContactProtocols() {
    return contactProtocols;
  }

  public void setContactProtocols(List contactProtocols) {
    this.contactProtocols = contactProtocols;
  }


  public PutAlarmRequest notificationTriggers(List notificationTriggers) {
    this.notificationTriggers = notificationTriggers;
    return this;
  }

  /**
   * Get notificationTriggers
   * @return notificationTriggers
   */
  @javax.annotation.Nullable
  public List getNotificationTriggers() {
    return notificationTriggers;
  }

  public void setNotificationTriggers(List notificationTriggers) {
    this.notificationTriggers = notificationTriggers;
  }


  public PutAlarmRequest notificationEnabled(Boolean notificationEnabled) {
    this.notificationEnabled = notificationEnabled;
    return this;
  }

  /**
   * Get notificationEnabled
   * @return notificationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getNotificationEnabled() {
    return notificationEnabled;
  }

  public void setNotificationEnabled(Boolean notificationEnabled) {
    this.notificationEnabled = notificationEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutAlarmRequest putAlarmRequest = (PutAlarmRequest) o;
    return Objects.equals(this.alarmName, putAlarmRequest.alarmName) &&
        Objects.equals(this.metricName, putAlarmRequest.metricName) &&
        Objects.equals(this.monitoredResourceName, putAlarmRequest.monitoredResourceName) &&
        Objects.equals(this.comparisonOperator, putAlarmRequest.comparisonOperator) &&
        Objects.equals(this.threshold, putAlarmRequest.threshold) &&
        Objects.equals(this.evaluationPeriods, putAlarmRequest.evaluationPeriods) &&
        Objects.equals(this.datapointsToAlarm, putAlarmRequest.datapointsToAlarm) &&
        Objects.equals(this.treatMissingData, putAlarmRequest.treatMissingData) &&
        Objects.equals(this.contactProtocols, putAlarmRequest.contactProtocols) &&
        Objects.equals(this.notificationTriggers, putAlarmRequest.notificationTriggers) &&
        Objects.equals(this.notificationEnabled, putAlarmRequest.notificationEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alarmName, metricName, monitoredResourceName, comparisonOperator, threshold, evaluationPeriods, datapointsToAlarm, treatMissingData, contactProtocols, notificationTriggers, notificationEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutAlarmRequest {\n");
    sb.append("    alarmName: ").append(toIndentedString(alarmName)).append("\n");
    sb.append("    metricName: ").append(toIndentedString(metricName)).append("\n");
    sb.append("    monitoredResourceName: ").append(toIndentedString(monitoredResourceName)).append("\n");
    sb.append("    comparisonOperator: ").append(toIndentedString(comparisonOperator)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("    evaluationPeriods: ").append(toIndentedString(evaluationPeriods)).append("\n");
    sb.append("    datapointsToAlarm: ").append(toIndentedString(datapointsToAlarm)).append("\n");
    sb.append("    treatMissingData: ").append(toIndentedString(treatMissingData)).append("\n");
    sb.append("    contactProtocols: ").append(toIndentedString(contactProtocols)).append("\n");
    sb.append("    notificationTriggers: ").append(toIndentedString(notificationTriggers)).append("\n");
    sb.append("    notificationEnabled: ").append(toIndentedString(notificationEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alarmName");
    openapiFields.add("metricName");
    openapiFields.add("monitoredResourceName");
    openapiFields.add("comparisonOperator");
    openapiFields.add("threshold");
    openapiFields.add("evaluationPeriods");
    openapiFields.add("datapointsToAlarm");
    openapiFields.add("treatMissingData");
    openapiFields.add("contactProtocols");
    openapiFields.add("notificationTriggers");
    openapiFields.add("notificationEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("alarmName");
    openapiRequiredFields.add("metricName");
    openapiRequiredFields.add("monitoredResourceName");
    openapiRequiredFields.add("comparisonOperator");
    openapiRequiredFields.add("threshold");
    openapiRequiredFields.add("evaluationPeriods");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutAlarmRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutAlarmRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutAlarmRequest is not found in the empty JSON string", PutAlarmRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutAlarmRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutAlarmRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutAlarmRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `alarmName`
      String.validateJsonElement(jsonObj.get("alarmName"));
      // validate the required field `metricName`
      MetricName.validateJsonElement(jsonObj.get("metricName"));
      // validate the required field `monitoredResourceName`
      String.validateJsonElement(jsonObj.get("monitoredResourceName"));
      // validate the required field `comparisonOperator`
      ComparisonOperator.validateJsonElement(jsonObj.get("comparisonOperator"));
      // validate the required field `threshold`
      Double.validateJsonElement(jsonObj.get("threshold"));
      // validate the required field `evaluationPeriods`
      Integer.validateJsonElement(jsonObj.get("evaluationPeriods"));
      // validate the optional field `datapointsToAlarm`
      if (jsonObj.get("datapointsToAlarm") != null && !jsonObj.get("datapointsToAlarm").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("datapointsToAlarm"));
      }
      // validate the optional field `treatMissingData`
      if (jsonObj.get("treatMissingData") != null && !jsonObj.get("treatMissingData").isJsonNull()) {
        TreatMissingData.validateJsonElement(jsonObj.get("treatMissingData"));
      }
      // validate the optional field `contactProtocols`
      if (jsonObj.get("contactProtocols") != null && !jsonObj.get("contactProtocols").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("contactProtocols"));
      }
      // validate the optional field `notificationTriggers`
      if (jsonObj.get("notificationTriggers") != null && !jsonObj.get("notificationTriggers").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("notificationTriggers"));
      }
      // validate the optional field `notificationEnabled`
      if (jsonObj.get("notificationEnabled") != null && !jsonObj.get("notificationEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("notificationEnabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutAlarmRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutAlarmRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutAlarmRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutAlarmRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutAlarmRequest>() {
           @Override
           public void write(JsonWriter out, PutAlarmRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutAlarmRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutAlarmRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutAlarmRequest
   * @throws IOException if the JSON string is invalid with respect to PutAlarmRequest
   */
  public static PutAlarmRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutAlarmRequest.class);
  }

  /**
   * Convert an instance of PutAlarmRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

