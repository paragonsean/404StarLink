/*
 * AWS OpsWorks
 * <fullname>AWS OpsWorks</fullname> <p>Welcome to the <i>AWS OpsWorks Stacks API Reference</i>. This guide provides descriptions, syntax, and usage examples for AWS OpsWorks Stacks actions and data types, including common parameters and error codes. </p> <p>AWS OpsWorks Stacks is an application management service that provides an integrated experience for overseeing the complete application lifecycle. For information about this product, go to the <a href=\"http://aws.amazon.com/opsworks/\">AWS OpsWorks</a> details page. </p> <p> <b>SDKs and CLI</b> </p> <p>The most common way to use the AWS OpsWorks Stacks API is by using the AWS Command Line Interface (CLI) or by using one of the AWS SDKs to implement applications in your preferred language. For more information, see:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html\">AWS CLI</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/opsworks/AWSOpsWorksClient.html\">AWS SDK for Java</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sdkfornet/latest/apidocs/html/N_Amazon_OpsWorks.htm\">AWS SDK for .NET</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/aws-sdk-php-2/latest/class-Aws.OpsWorks.OpsWorksClient.html\">AWS SDK for PHP 2</a> </p> </li> <li> <p> <a href=\"http://docs.aws.amazon.com/sdkforruby/api/\">AWS SDK for Ruby</a> </p> </li> <li> <p> <a href=\"http://aws.amazon.com/documentation/sdkforjavascript/\">AWS SDK for Node.js</a> </p> </li> <li> <p> <a href=\"http://docs.pythonboto.org/en/latest/ref/opsworks.html\">AWS SDK for Python(Boto)</a> </p> </li> </ul> <p> <b>Endpoints</b> </p> <p>AWS OpsWorks Stacks supports the following endpoints, all HTTPS. You must connect to one of the following endpoints. Stacks can only be accessed or managed within the endpoint in which they are created.</p> <ul> <li> <p>opsworks.us-east-1.amazonaws.com</p> </li> <li> <p>opsworks.us-east-2.amazonaws.com</p> </li> <li> <p>opsworks.us-west-1.amazonaws.com</p> </li> <li> <p>opsworks.us-west-2.amazonaws.com</p> </li> <li> <p>opsworks.ca-central-1.amazonaws.com (API only; not available in the AWS console)</p> </li> <li> <p>opsworks.eu-west-1.amazonaws.com</p> </li> <li> <p>opsworks.eu-west-2.amazonaws.com</p> </li> <li> <p>opsworks.eu-west-3.amazonaws.com</p> </li> <li> <p>opsworks.eu-central-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-northeast-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-northeast-2.amazonaws.com</p> </li> <li> <p>opsworks.ap-south-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-southeast-1.amazonaws.com</p> </li> <li> <p>opsworks.ap-southeast-2.amazonaws.com</p> </li> <li> <p>opsworks.sa-east-1.amazonaws.com</p> </li> </ul> <p> <b>Chef Versions</b> </p> <p>When you call <a>CreateStack</a>, <a>CloneStack</a>, or <a>UpdateStack</a> we recommend you use the <code>ConfigurationManager</code> parameter to specify the Chef version. The recommended and default value for Linux stacks is currently 12. Windows stacks use Chef 12.2. For more information, see <a href=\"https://docs.aws.amazon.com/opsworks/latest/userguide/workingcookbook-chef11.html\">Chef Versions</a>.</p> <note> <p>You can specify Chef 12, 11.10, or 11.4 for your Linux stack. We recommend migrating your existing Linux stacks to Chef 12 as soon as possible.</p> </note>
 *
 * The version of the OpenAPI document: 2013-02-18
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Architecture;
import org.openapitools.client.model.AutoScalingType;
import org.openapitools.client.model.RootDeviceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateInstanceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:05:31.623912-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateInstanceRequest {
  public static final String SERIALIZED_NAME_STACK_ID = "StackId";
  @SerializedName(SERIALIZED_NAME_STACK_ID)
  private String stackId;

  public static final String SERIALIZED_NAME_LAYER_IDS = "LayerIds";
  @SerializedName(SERIALIZED_NAME_LAYER_IDS)
  private List layerIds;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "InstanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_AUTO_SCALING_TYPE = "AutoScalingType";
  @SerializedName(SERIALIZED_NAME_AUTO_SCALING_TYPE)
  private AutoScalingType autoScalingType;

  public static final String SERIALIZED_NAME_HOSTNAME = "Hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_OS = "Os";
  @SerializedName(SERIALIZED_NAME_OS)
  private String os;

  public static final String SERIALIZED_NAME_AMI_ID = "AmiId";
  @SerializedName(SERIALIZED_NAME_AMI_ID)
  private String amiId;

  public static final String SERIALIZED_NAME_SSH_KEY_NAME = "SshKeyName";
  @SerializedName(SERIALIZED_NAME_SSH_KEY_NAME)
  private String sshKeyName;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "AvailabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_VIRTUALIZATION_TYPE = "VirtualizationType";
  @SerializedName(SERIALIZED_NAME_VIRTUALIZATION_TYPE)
  private String virtualizationType;

  public static final String SERIALIZED_NAME_SUBNET_ID = "SubnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_ARCHITECTURE = "Architecture";
  @SerializedName(SERIALIZED_NAME_ARCHITECTURE)
  private Architecture architecture;

  public static final String SERIALIZED_NAME_ROOT_DEVICE_TYPE = "RootDeviceType";
  @SerializedName(SERIALIZED_NAME_ROOT_DEVICE_TYPE)
  private RootDeviceType rootDeviceType;

  public static final String SERIALIZED_NAME_BLOCK_DEVICE_MAPPINGS = "BlockDeviceMappings";
  @SerializedName(SERIALIZED_NAME_BLOCK_DEVICE_MAPPINGS)
  private List blockDeviceMappings;

  public static final String SERIALIZED_NAME_INSTALL_UPDATES_ON_BOOT = "InstallUpdatesOnBoot";
  @SerializedName(SERIALIZED_NAME_INSTALL_UPDATES_ON_BOOT)
  private Boolean installUpdatesOnBoot;

  public static final String SERIALIZED_NAME_EBS_OPTIMIZED = "EbsOptimized";
  @SerializedName(SERIALIZED_NAME_EBS_OPTIMIZED)
  private Boolean ebsOptimized;

  public static final String SERIALIZED_NAME_AGENT_VERSION = "AgentVersion";
  @SerializedName(SERIALIZED_NAME_AGENT_VERSION)
  private String agentVersion;

  public static final String SERIALIZED_NAME_TENANCY = "Tenancy";
  @SerializedName(SERIALIZED_NAME_TENANCY)
  private String tenancy;

  public CreateInstanceRequest() {
  }

  public CreateInstanceRequest stackId(String stackId) {
    this.stackId = stackId;
    return this;
  }

  /**
   * Get stackId
   * @return stackId
   */
  @javax.annotation.Nonnull
  public String getStackId() {
    return stackId;
  }

  public void setStackId(String stackId) {
    this.stackId = stackId;
  }


  public CreateInstanceRequest layerIds(List layerIds) {
    this.layerIds = layerIds;
    return this;
  }

  /**
   * Get layerIds
   * @return layerIds
   */
  @javax.annotation.Nonnull
  public List getLayerIds() {
    return layerIds;
  }

  public void setLayerIds(List layerIds) {
    this.layerIds = layerIds;
  }


  public CreateInstanceRequest instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nonnull
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public CreateInstanceRequest autoScalingType(AutoScalingType autoScalingType) {
    this.autoScalingType = autoScalingType;
    return this;
  }

  /**
   * Get autoScalingType
   * @return autoScalingType
   */
  @javax.annotation.Nullable
  public AutoScalingType getAutoScalingType() {
    return autoScalingType;
  }

  public void setAutoScalingType(AutoScalingType autoScalingType) {
    this.autoScalingType = autoScalingType;
  }


  public CreateInstanceRequest hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Get hostname
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public CreateInstanceRequest os(String os) {
    this.os = os;
    return this;
  }

  /**
   * Get os
   * @return os
   */
  @javax.annotation.Nullable
  public String getOs() {
    return os;
  }

  public void setOs(String os) {
    this.os = os;
  }


  public CreateInstanceRequest amiId(String amiId) {
    this.amiId = amiId;
    return this;
  }

  /**
   * Get amiId
   * @return amiId
   */
  @javax.annotation.Nullable
  public String getAmiId() {
    return amiId;
  }

  public void setAmiId(String amiId) {
    this.amiId = amiId;
  }


  public CreateInstanceRequest sshKeyName(String sshKeyName) {
    this.sshKeyName = sshKeyName;
    return this;
  }

  /**
   * Get sshKeyName
   * @return sshKeyName
   */
  @javax.annotation.Nullable
  public String getSshKeyName() {
    return sshKeyName;
  }

  public void setSshKeyName(String sshKeyName) {
    this.sshKeyName = sshKeyName;
  }


  public CreateInstanceRequest availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nullable
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public CreateInstanceRequest virtualizationType(String virtualizationType) {
    this.virtualizationType = virtualizationType;
    return this;
  }

  /**
   * Get virtualizationType
   * @return virtualizationType
   */
  @javax.annotation.Nullable
  public String getVirtualizationType() {
    return virtualizationType;
  }

  public void setVirtualizationType(String virtualizationType) {
    this.virtualizationType = virtualizationType;
  }


  public CreateInstanceRequest subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * Get subnetId
   * @return subnetId
   */
  @javax.annotation.Nullable
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  public CreateInstanceRequest architecture(Architecture architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * Get architecture
   * @return architecture
   */
  @javax.annotation.Nullable
  public Architecture getArchitecture() {
    return architecture;
  }

  public void setArchitecture(Architecture architecture) {
    this.architecture = architecture;
  }


  public CreateInstanceRequest rootDeviceType(RootDeviceType rootDeviceType) {
    this.rootDeviceType = rootDeviceType;
    return this;
  }

  /**
   * Get rootDeviceType
   * @return rootDeviceType
   */
  @javax.annotation.Nullable
  public RootDeviceType getRootDeviceType() {
    return rootDeviceType;
  }

  public void setRootDeviceType(RootDeviceType rootDeviceType) {
    this.rootDeviceType = rootDeviceType;
  }


  public CreateInstanceRequest blockDeviceMappings(List blockDeviceMappings) {
    this.blockDeviceMappings = blockDeviceMappings;
    return this;
  }

  /**
   * Get blockDeviceMappings
   * @return blockDeviceMappings
   */
  @javax.annotation.Nullable
  public List getBlockDeviceMappings() {
    return blockDeviceMappings;
  }

  public void setBlockDeviceMappings(List blockDeviceMappings) {
    this.blockDeviceMappings = blockDeviceMappings;
  }


  public CreateInstanceRequest installUpdatesOnBoot(Boolean installUpdatesOnBoot) {
    this.installUpdatesOnBoot = installUpdatesOnBoot;
    return this;
  }

  /**
   * Get installUpdatesOnBoot
   * @return installUpdatesOnBoot
   */
  @javax.annotation.Nullable
  public Boolean getInstallUpdatesOnBoot() {
    return installUpdatesOnBoot;
  }

  public void setInstallUpdatesOnBoot(Boolean installUpdatesOnBoot) {
    this.installUpdatesOnBoot = installUpdatesOnBoot;
  }


  public CreateInstanceRequest ebsOptimized(Boolean ebsOptimized) {
    this.ebsOptimized = ebsOptimized;
    return this;
  }

  /**
   * Get ebsOptimized
   * @return ebsOptimized
   */
  @javax.annotation.Nullable
  public Boolean getEbsOptimized() {
    return ebsOptimized;
  }

  public void setEbsOptimized(Boolean ebsOptimized) {
    this.ebsOptimized = ebsOptimized;
  }


  public CreateInstanceRequest agentVersion(String agentVersion) {
    this.agentVersion = agentVersion;
    return this;
  }

  /**
   * Get agentVersion
   * @return agentVersion
   */
  @javax.annotation.Nullable
  public String getAgentVersion() {
    return agentVersion;
  }

  public void setAgentVersion(String agentVersion) {
    this.agentVersion = agentVersion;
  }


  public CreateInstanceRequest tenancy(String tenancy) {
    this.tenancy = tenancy;
    return this;
  }

  /**
   * Get tenancy
   * @return tenancy
   */
  @javax.annotation.Nullable
  public String getTenancy() {
    return tenancy;
  }

  public void setTenancy(String tenancy) {
    this.tenancy = tenancy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateInstanceRequest createInstanceRequest = (CreateInstanceRequest) o;
    return Objects.equals(this.stackId, createInstanceRequest.stackId) &&
        Objects.equals(this.layerIds, createInstanceRequest.layerIds) &&
        Objects.equals(this.instanceType, createInstanceRequest.instanceType) &&
        Objects.equals(this.autoScalingType, createInstanceRequest.autoScalingType) &&
        Objects.equals(this.hostname, createInstanceRequest.hostname) &&
        Objects.equals(this.os, createInstanceRequest.os) &&
        Objects.equals(this.amiId, createInstanceRequest.amiId) &&
        Objects.equals(this.sshKeyName, createInstanceRequest.sshKeyName) &&
        Objects.equals(this.availabilityZone, createInstanceRequest.availabilityZone) &&
        Objects.equals(this.virtualizationType, createInstanceRequest.virtualizationType) &&
        Objects.equals(this.subnetId, createInstanceRequest.subnetId) &&
        Objects.equals(this.architecture, createInstanceRequest.architecture) &&
        Objects.equals(this.rootDeviceType, createInstanceRequest.rootDeviceType) &&
        Objects.equals(this.blockDeviceMappings, createInstanceRequest.blockDeviceMappings) &&
        Objects.equals(this.installUpdatesOnBoot, createInstanceRequest.installUpdatesOnBoot) &&
        Objects.equals(this.ebsOptimized, createInstanceRequest.ebsOptimized) &&
        Objects.equals(this.agentVersion, createInstanceRequest.agentVersion) &&
        Objects.equals(this.tenancy, createInstanceRequest.tenancy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackId, layerIds, instanceType, autoScalingType, hostname, os, amiId, sshKeyName, availabilityZone, virtualizationType, subnetId, architecture, rootDeviceType, blockDeviceMappings, installUpdatesOnBoot, ebsOptimized, agentVersion, tenancy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateInstanceRequest {\n");
    sb.append("    stackId: ").append(toIndentedString(stackId)).append("\n");
    sb.append("    layerIds: ").append(toIndentedString(layerIds)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    autoScalingType: ").append(toIndentedString(autoScalingType)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    amiId: ").append(toIndentedString(amiId)).append("\n");
    sb.append("    sshKeyName: ").append(toIndentedString(sshKeyName)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    virtualizationType: ").append(toIndentedString(virtualizationType)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    rootDeviceType: ").append(toIndentedString(rootDeviceType)).append("\n");
    sb.append("    blockDeviceMappings: ").append(toIndentedString(blockDeviceMappings)).append("\n");
    sb.append("    installUpdatesOnBoot: ").append(toIndentedString(installUpdatesOnBoot)).append("\n");
    sb.append("    ebsOptimized: ").append(toIndentedString(ebsOptimized)).append("\n");
    sb.append("    agentVersion: ").append(toIndentedString(agentVersion)).append("\n");
    sb.append("    tenancy: ").append(toIndentedString(tenancy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StackId");
    openapiFields.add("LayerIds");
    openapiFields.add("InstanceType");
    openapiFields.add("AutoScalingType");
    openapiFields.add("Hostname");
    openapiFields.add("Os");
    openapiFields.add("AmiId");
    openapiFields.add("SshKeyName");
    openapiFields.add("AvailabilityZone");
    openapiFields.add("VirtualizationType");
    openapiFields.add("SubnetId");
    openapiFields.add("Architecture");
    openapiFields.add("RootDeviceType");
    openapiFields.add("BlockDeviceMappings");
    openapiFields.add("InstallUpdatesOnBoot");
    openapiFields.add("EbsOptimized");
    openapiFields.add("AgentVersion");
    openapiFields.add("Tenancy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StackId");
    openapiRequiredFields.add("LayerIds");
    openapiRequiredFields.add("InstanceType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateInstanceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateInstanceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateInstanceRequest is not found in the empty JSON string", CreateInstanceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateInstanceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateInstanceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateInstanceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `StackId`
      String.validateJsonElement(jsonObj.get("StackId"));
      // validate the required field `LayerIds`
      List.validateJsonElement(jsonObj.get("LayerIds"));
      // validate the required field `InstanceType`
      String.validateJsonElement(jsonObj.get("InstanceType"));
      // validate the optional field `AutoScalingType`
      if (jsonObj.get("AutoScalingType") != null && !jsonObj.get("AutoScalingType").isJsonNull()) {
        AutoScalingType.validateJsonElement(jsonObj.get("AutoScalingType"));
      }
      // validate the optional field `Hostname`
      if (jsonObj.get("Hostname") != null && !jsonObj.get("Hostname").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Hostname"));
      }
      // validate the optional field `Os`
      if (jsonObj.get("Os") != null && !jsonObj.get("Os").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Os"));
      }
      // validate the optional field `AmiId`
      if (jsonObj.get("AmiId") != null && !jsonObj.get("AmiId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AmiId"));
      }
      // validate the optional field `SshKeyName`
      if (jsonObj.get("SshKeyName") != null && !jsonObj.get("SshKeyName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SshKeyName"));
      }
      // validate the optional field `AvailabilityZone`
      if (jsonObj.get("AvailabilityZone") != null && !jsonObj.get("AvailabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailabilityZone"));
      }
      // validate the optional field `VirtualizationType`
      if (jsonObj.get("VirtualizationType") != null && !jsonObj.get("VirtualizationType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VirtualizationType"));
      }
      // validate the optional field `SubnetId`
      if (jsonObj.get("SubnetId") != null && !jsonObj.get("SubnetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubnetId"));
      }
      // validate the optional field `Architecture`
      if (jsonObj.get("Architecture") != null && !jsonObj.get("Architecture").isJsonNull()) {
        Architecture.validateJsonElement(jsonObj.get("Architecture"));
      }
      // validate the optional field `RootDeviceType`
      if (jsonObj.get("RootDeviceType") != null && !jsonObj.get("RootDeviceType").isJsonNull()) {
        RootDeviceType.validateJsonElement(jsonObj.get("RootDeviceType"));
      }
      // validate the optional field `BlockDeviceMappings`
      if (jsonObj.get("BlockDeviceMappings") != null && !jsonObj.get("BlockDeviceMappings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("BlockDeviceMappings"));
      }
      // validate the optional field `InstallUpdatesOnBoot`
      if (jsonObj.get("InstallUpdatesOnBoot") != null && !jsonObj.get("InstallUpdatesOnBoot").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("InstallUpdatesOnBoot"));
      }
      // validate the optional field `EbsOptimized`
      if (jsonObj.get("EbsOptimized") != null && !jsonObj.get("EbsOptimized").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EbsOptimized"));
      }
      // validate the optional field `AgentVersion`
      if (jsonObj.get("AgentVersion") != null && !jsonObj.get("AgentVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AgentVersion"));
      }
      // validate the optional field `Tenancy`
      if (jsonObj.get("Tenancy") != null && !jsonObj.get("Tenancy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Tenancy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateInstanceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateInstanceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateInstanceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateInstanceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateInstanceRequest>() {
           @Override
           public void write(JsonWriter out, CreateInstanceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateInstanceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateInstanceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateInstanceRequest
   * @throws IOException if the JSON string is invalid with respect to CreateInstanceRequest
   */
  public static CreateInstanceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateInstanceRequest.class);
  }

  /**
   * Convert an instance of CreateInstanceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

