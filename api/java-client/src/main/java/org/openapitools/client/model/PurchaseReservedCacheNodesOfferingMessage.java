/*
 * Amazon ElastiCache
 * <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
 *
 * The version of the OpenAPI document: 2015-02-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input of a &lt;code&gt;PurchaseReservedCacheNodesOffering&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:56:05.565321-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PurchaseReservedCacheNodesOfferingMessage {
  public static final String SERIALIZED_NAME_RESERVED_CACHE_NODES_OFFERING_ID = "ReservedCacheNodesOfferingId";
  @SerializedName(SERIALIZED_NAME_RESERVED_CACHE_NODES_OFFERING_ID)
  private String reservedCacheNodesOfferingId;

  public static final String SERIALIZED_NAME_RESERVED_CACHE_NODE_ID = "ReservedCacheNodeId";
  @SerializedName(SERIALIZED_NAME_RESERVED_CACHE_NODE_ID)
  private String reservedCacheNodeId;

  public static final String SERIALIZED_NAME_CACHE_NODE_COUNT = "CacheNodeCount";
  @SerializedName(SERIALIZED_NAME_CACHE_NODE_COUNT)
  private Integer cacheNodeCount;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public PurchaseReservedCacheNodesOfferingMessage() {
  }

  public PurchaseReservedCacheNodesOfferingMessage reservedCacheNodesOfferingId(String reservedCacheNodesOfferingId) {
    this.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId;
    return this;
  }

  /**
   * Get reservedCacheNodesOfferingId
   * @return reservedCacheNodesOfferingId
   */
  @javax.annotation.Nonnull
  public String getReservedCacheNodesOfferingId() {
    return reservedCacheNodesOfferingId;
  }

  public void setReservedCacheNodesOfferingId(String reservedCacheNodesOfferingId) {
    this.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId;
  }


  public PurchaseReservedCacheNodesOfferingMessage reservedCacheNodeId(String reservedCacheNodeId) {
    this.reservedCacheNodeId = reservedCacheNodeId;
    return this;
  }

  /**
   * Get reservedCacheNodeId
   * @return reservedCacheNodeId
   */
  @javax.annotation.Nullable
  public String getReservedCacheNodeId() {
    return reservedCacheNodeId;
  }

  public void setReservedCacheNodeId(String reservedCacheNodeId) {
    this.reservedCacheNodeId = reservedCacheNodeId;
  }


  public PurchaseReservedCacheNodesOfferingMessage cacheNodeCount(Integer cacheNodeCount) {
    this.cacheNodeCount = cacheNodeCount;
    return this;
  }

  /**
   * Get cacheNodeCount
   * @return cacheNodeCount
   */
  @javax.annotation.Nullable
  public Integer getCacheNodeCount() {
    return cacheNodeCount;
  }

  public void setCacheNodeCount(Integer cacheNodeCount) {
    this.cacheNodeCount = cacheNodeCount;
  }


  public PurchaseReservedCacheNodesOfferingMessage tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseReservedCacheNodesOfferingMessage purchaseReservedCacheNodesOfferingMessage = (PurchaseReservedCacheNodesOfferingMessage) o;
    return Objects.equals(this.reservedCacheNodesOfferingId, purchaseReservedCacheNodesOfferingMessage.reservedCacheNodesOfferingId) &&
        Objects.equals(this.reservedCacheNodeId, purchaseReservedCacheNodesOfferingMessage.reservedCacheNodeId) &&
        Objects.equals(this.cacheNodeCount, purchaseReservedCacheNodesOfferingMessage.cacheNodeCount) &&
        Objects.equals(this.tags, purchaseReservedCacheNodesOfferingMessage.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reservedCacheNodesOfferingId, reservedCacheNodeId, cacheNodeCount, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseReservedCacheNodesOfferingMessage {\n");
    sb.append("    reservedCacheNodesOfferingId: ").append(toIndentedString(reservedCacheNodesOfferingId)).append("\n");
    sb.append("    reservedCacheNodeId: ").append(toIndentedString(reservedCacheNodeId)).append("\n");
    sb.append("    cacheNodeCount: ").append(toIndentedString(cacheNodeCount)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReservedCacheNodesOfferingId");
    openapiFields.add("ReservedCacheNodeId");
    openapiFields.add("CacheNodeCount");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ReservedCacheNodesOfferingId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PurchaseReservedCacheNodesOfferingMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PurchaseReservedCacheNodesOfferingMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseReservedCacheNodesOfferingMessage is not found in the empty JSON string", PurchaseReservedCacheNodesOfferingMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PurchaseReservedCacheNodesOfferingMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PurchaseReservedCacheNodesOfferingMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PurchaseReservedCacheNodesOfferingMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ReservedCacheNodesOfferingId`
      String.validateJsonElement(jsonObj.get("ReservedCacheNodesOfferingId"));
      // validate the optional field `ReservedCacheNodeId`
      if (jsonObj.get("ReservedCacheNodeId") != null && !jsonObj.get("ReservedCacheNodeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReservedCacheNodeId"));
      }
      // validate the optional field `CacheNodeCount`
      if (jsonObj.get("CacheNodeCount") != null && !jsonObj.get("CacheNodeCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CacheNodeCount"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseReservedCacheNodesOfferingMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseReservedCacheNodesOfferingMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseReservedCacheNodesOfferingMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseReservedCacheNodesOfferingMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseReservedCacheNodesOfferingMessage>() {
           @Override
           public void write(JsonWriter out, PurchaseReservedCacheNodesOfferingMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseReservedCacheNodesOfferingMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PurchaseReservedCacheNodesOfferingMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PurchaseReservedCacheNodesOfferingMessage
   * @throws IOException if the JSON string is invalid with respect to PurchaseReservedCacheNodesOfferingMessage
   */
  public static PurchaseReservedCacheNodesOfferingMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseReservedCacheNodesOfferingMessage.class);
  }

  /**
   * Convert an instance of PurchaseReservedCacheNodesOfferingMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

