/*
 * Amazon QLDB
 * The control plane for Amazon QLDB
 *
 * The version of the OpenAPI document: 2019-01-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.StreamJournalToKinesisRequestKinesisConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StreamJournalToKinesisRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:03:23.217080-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StreamJournalToKinesisRequest {
  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_INCLUSIVE_START_TIME = "InclusiveStartTime";
  @SerializedName(SERIALIZED_NAME_INCLUSIVE_START_TIME)
  private OffsetDateTime inclusiveStartTime;

  public static final String SERIALIZED_NAME_EXCLUSIVE_END_TIME = "ExclusiveEndTime";
  @SerializedName(SERIALIZED_NAME_EXCLUSIVE_END_TIME)
  private OffsetDateTime exclusiveEndTime;

  public static final String SERIALIZED_NAME_KINESIS_CONFIGURATION = "KinesisConfiguration";
  @SerializedName(SERIALIZED_NAME_KINESIS_CONFIGURATION)
  private StreamJournalToKinesisRequestKinesisConfiguration kinesisConfiguration;

  public static final String SERIALIZED_NAME_STREAM_NAME = "StreamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public StreamJournalToKinesisRequest() {
  }

  public StreamJournalToKinesisRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * &lt;p&gt;The Amazon Resource Name (ARN) of the IAM role that grants QLDB permissions for a journal stream to write data records to a Kinesis Data Streams resource.&lt;/p&gt; &lt;p&gt;To pass a role to QLDB when requesting a journal stream, you must have permissions to perform the &lt;code&gt;iam:PassRole&lt;/code&gt; action on the IAM role resource. This is required for all journal stream requests.&lt;/p&gt;
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public StreamJournalToKinesisRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public StreamJournalToKinesisRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The key-value pairs to add as tags to the stream that you want to create. Tag keys are case sensitive. Tag values are case sensitive and can be null.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public StreamJournalToKinesisRequest inclusiveStartTime(OffsetDateTime inclusiveStartTime) {
    this.inclusiveStartTime = inclusiveStartTime;
    return this;
  }

  /**
   * &lt;p&gt;The inclusive start date and time from which to start streaming journal data. This parameter must be in &lt;code&gt;ISO 8601&lt;/code&gt; date and time format and in Universal Coordinated Time (UTC). For example: &lt;code&gt;2019-06-13T21:36:34Z&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;InclusiveStartTime&lt;/code&gt; cannot be in the future and must be before &lt;code&gt;ExclusiveEndTime&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you provide an &lt;code&gt;InclusiveStartTime&lt;/code&gt; that is before the ledger&#39;s &lt;code&gt;CreationDateTime&lt;/code&gt;, QLDB effectively defaults it to the ledger&#39;s &lt;code&gt;CreationDateTime&lt;/code&gt;.&lt;/p&gt;
   * @return inclusiveStartTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getInclusiveStartTime() {
    return inclusiveStartTime;
  }

  public void setInclusiveStartTime(OffsetDateTime inclusiveStartTime) {
    this.inclusiveStartTime = inclusiveStartTime;
  }


  public StreamJournalToKinesisRequest exclusiveEndTime(OffsetDateTime exclusiveEndTime) {
    this.exclusiveEndTime = exclusiveEndTime;
    return this;
  }

  /**
   * &lt;p&gt;The exclusive date and time that specifies when the stream ends. If you don&#39;t define this parameter, the stream runs indefinitely until you cancel it.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;ExclusiveEndTime&lt;/code&gt; must be in &lt;code&gt;ISO 8601&lt;/code&gt; date and time format and in Universal Coordinated Time (UTC). For example: &lt;code&gt;2019-06-13T21:36:34Z&lt;/code&gt;.&lt;/p&gt;
   * @return exclusiveEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExclusiveEndTime() {
    return exclusiveEndTime;
  }

  public void setExclusiveEndTime(OffsetDateTime exclusiveEndTime) {
    this.exclusiveEndTime = exclusiveEndTime;
  }


  public StreamJournalToKinesisRequest kinesisConfiguration(StreamJournalToKinesisRequestKinesisConfiguration kinesisConfiguration) {
    this.kinesisConfiguration = kinesisConfiguration;
    return this;
  }

  /**
   * Get kinesisConfiguration
   * @return kinesisConfiguration
   */
  @javax.annotation.Nonnull
  public StreamJournalToKinesisRequestKinesisConfiguration getKinesisConfiguration() {
    return kinesisConfiguration;
  }

  public void setKinesisConfiguration(StreamJournalToKinesisRequestKinesisConfiguration kinesisConfiguration) {
    this.kinesisConfiguration = kinesisConfiguration;
  }


  public StreamJournalToKinesisRequest streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * &lt;p&gt;The name that you want to assign to the QLDB journal stream. User-defined names can help identify and indicate the purpose of a stream.&lt;/p&gt; &lt;p&gt;Your stream name must be unique among other &lt;i&gt;active&lt;/i&gt; streams for a given ledger. Stream names have the same naming constraints as ledger names, as defined in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/qldb/latest/developerguide/limits.html#limits.naming\&quot;&gt;Quotas in Amazon QLDB&lt;/a&gt; in the &lt;i&gt;Amazon QLDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
   * @return streamName
   */
  @javax.annotation.Nonnull
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamJournalToKinesisRequest streamJournalToKinesisRequest = (StreamJournalToKinesisRequest) o;
    return Objects.equals(this.roleArn, streamJournalToKinesisRequest.roleArn) &&
        Objects.equals(this.tags, streamJournalToKinesisRequest.tags) &&
        Objects.equals(this.inclusiveStartTime, streamJournalToKinesisRequest.inclusiveStartTime) &&
        Objects.equals(this.exclusiveEndTime, streamJournalToKinesisRequest.exclusiveEndTime) &&
        Objects.equals(this.kinesisConfiguration, streamJournalToKinesisRequest.kinesisConfiguration) &&
        Objects.equals(this.streamName, streamJournalToKinesisRequest.streamName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(roleArn, tags, inclusiveStartTime, exclusiveEndTime, kinesisConfiguration, streamName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamJournalToKinesisRequest {\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    inclusiveStartTime: ").append(toIndentedString(inclusiveStartTime)).append("\n");
    sb.append("    exclusiveEndTime: ").append(toIndentedString(exclusiveEndTime)).append("\n");
    sb.append("    kinesisConfiguration: ").append(toIndentedString(kinesisConfiguration)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RoleArn");
    openapiFields.add("Tags");
    openapiFields.add("InclusiveStartTime");
    openapiFields.add("ExclusiveEndTime");
    openapiFields.add("KinesisConfiguration");
    openapiFields.add("StreamName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RoleArn");
    openapiRequiredFields.add("InclusiveStartTime");
    openapiRequiredFields.add("KinesisConfiguration");
    openapiRequiredFields.add("StreamName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StreamJournalToKinesisRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StreamJournalToKinesisRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StreamJournalToKinesisRequest is not found in the empty JSON string", StreamJournalToKinesisRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StreamJournalToKinesisRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StreamJournalToKinesisRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StreamJournalToKinesisRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("RoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleArn").toString()));
      }
      // validate the required field `KinesisConfiguration`
      StreamJournalToKinesisRequestKinesisConfiguration.validateJsonElement(jsonObj.get("KinesisConfiguration"));
      if (!jsonObj.get("StreamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StreamName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StreamJournalToKinesisRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StreamJournalToKinesisRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StreamJournalToKinesisRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StreamJournalToKinesisRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StreamJournalToKinesisRequest>() {
           @Override
           public void write(JsonWriter out, StreamJournalToKinesisRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StreamJournalToKinesisRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StreamJournalToKinesisRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StreamJournalToKinesisRequest
   * @throws IOException if the JSON string is invalid with respect to StreamJournalToKinesisRequest
   */
  public static StreamJournalToKinesisRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StreamJournalToKinesisRequest.class);
  }

  /**
   * Convert an instance of StreamJournalToKinesisRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

