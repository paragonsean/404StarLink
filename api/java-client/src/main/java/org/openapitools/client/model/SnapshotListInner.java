/*
 * Amazon ElastiCache
 * <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
 *
 * The version of the OpenAPI document: 2015-02-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AutomaticFailoverStatus;
import org.openapitools.client.model.DataTieringStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SnapshotListInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:03:41.807787-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SnapshotListInner {
  public static final String SERIALIZED_NAME_SNAPSHOT_NAME = "SnapshotName";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_NAME)
  private String snapshotName;

  public static final String SERIALIZED_NAME_REPLICATION_GROUP_ID = "ReplicationGroupId";
  @SerializedName(SERIALIZED_NAME_REPLICATION_GROUP_ID)
  private String replicationGroupId;

  public static final String SERIALIZED_NAME_REPLICATION_GROUP_DESCRIPTION = "ReplicationGroupDescription";
  @SerializedName(SERIALIZED_NAME_REPLICATION_GROUP_DESCRIPTION)
  private String replicationGroupDescription;

  public static final String SERIALIZED_NAME_CACHE_CLUSTER_ID = "CacheClusterId";
  @SerializedName(SERIALIZED_NAME_CACHE_CLUSTER_ID)
  private String cacheClusterId;

  public static final String SERIALIZED_NAME_SNAPSHOT_STATUS = "SnapshotStatus";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_STATUS)
  private String snapshotStatus;

  public static final String SERIALIZED_NAME_SNAPSHOT_SOURCE = "SnapshotSource";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_SOURCE)
  private String snapshotSource;

  public static final String SERIALIZED_NAME_CACHE_NODE_TYPE = "CacheNodeType";
  @SerializedName(SERIALIZED_NAME_CACHE_NODE_TYPE)
  private String cacheNodeType;

  public static final String SERIALIZED_NAME_ENGINE = "Engine";
  @SerializedName(SERIALIZED_NAME_ENGINE)
  private String engine;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_NUM_CACHE_NODES = "NumCacheNodes";
  @SerializedName(SERIALIZED_NAME_NUM_CACHE_NODES)
  private Integer numCacheNodes;

  public static final String SERIALIZED_NAME_PREFERRED_AVAILABILITY_ZONE = "PreferredAvailabilityZone";
  @SerializedName(SERIALIZED_NAME_PREFERRED_AVAILABILITY_ZONE)
  private String preferredAvailabilityZone;

  public static final String SERIALIZED_NAME_PREFERRED_OUTPOST_ARN = "PreferredOutpostArn";
  @SerializedName(SERIALIZED_NAME_PREFERRED_OUTPOST_ARN)
  private String preferredOutpostArn;

  public static final String SERIALIZED_NAME_CACHE_CLUSTER_CREATE_TIME = "CacheClusterCreateTime";
  @SerializedName(SERIALIZED_NAME_CACHE_CLUSTER_CREATE_TIME)
  private OffsetDateTime cacheClusterCreateTime;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "PreferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_TOPIC_ARN = "TopicArn";
  @SerializedName(SERIALIZED_NAME_TOPIC_ARN)
  private String topicArn;

  public static final String SERIALIZED_NAME_PORT = "Port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_CACHE_PARAMETER_GROUP_NAME = "CacheParameterGroupName";
  @SerializedName(SERIALIZED_NAME_CACHE_PARAMETER_GROUP_NAME)
  private String cacheParameterGroupName;

  public static final String SERIALIZED_NAME_CACHE_SUBNET_GROUP_NAME = "CacheSubnetGroupName";
  @SerializedName(SERIALIZED_NAME_CACHE_SUBNET_GROUP_NAME)
  private String cacheSubnetGroupName;

  public static final String SERIALIZED_NAME_VPC_ID = "VpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_AUTO_MINOR_VERSION_UPGRADE = "AutoMinorVersionUpgrade";
  @SerializedName(SERIALIZED_NAME_AUTO_MINOR_VERSION_UPGRADE)
  private Boolean autoMinorVersionUpgrade;

  public static final String SERIALIZED_NAME_SNAPSHOT_RETENTION_LIMIT = "SnapshotRetentionLimit";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_RETENTION_LIMIT)
  private Integer snapshotRetentionLimit;

  public static final String SERIALIZED_NAME_SNAPSHOT_WINDOW = "SnapshotWindow";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_WINDOW)
  private String snapshotWindow;

  public static final String SERIALIZED_NAME_NUM_NODE_GROUPS = "NumNodeGroups";
  @SerializedName(SERIALIZED_NAME_NUM_NODE_GROUPS)
  private Integer numNodeGroups;

  public static final String SERIALIZED_NAME_AUTOMATIC_FAILOVER = "AutomaticFailover";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_FAILOVER)
  private AutomaticFailoverStatus automaticFailover;

  public static final String SERIALIZED_NAME_NODE_SNAPSHOTS = "NodeSnapshots";
  @SerializedName(SERIALIZED_NAME_NODE_SNAPSHOTS)
  private List nodeSnapshots;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "KmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public static final String SERIALIZED_NAME_A_R_N = "ARN";
  @SerializedName(SERIALIZED_NAME_A_R_N)
  private String ARN;

  public static final String SERIALIZED_NAME_DATA_TIERING = "DataTiering";
  @SerializedName(SERIALIZED_NAME_DATA_TIERING)
  private DataTieringStatus dataTiering;

  public SnapshotListInner() {
  }

  public SnapshotListInner snapshotName(String snapshotName) {
    this.snapshotName = snapshotName;
    return this;
  }

  /**
   * Get snapshotName
   * @return snapshotName
   */
  @javax.annotation.Nullable
  public String getSnapshotName() {
    return snapshotName;
  }

  public void setSnapshotName(String snapshotName) {
    this.snapshotName = snapshotName;
  }


  public SnapshotListInner replicationGroupId(String replicationGroupId) {
    this.replicationGroupId = replicationGroupId;
    return this;
  }

  /**
   * Get replicationGroupId
   * @return replicationGroupId
   */
  @javax.annotation.Nullable
  public String getReplicationGroupId() {
    return replicationGroupId;
  }

  public void setReplicationGroupId(String replicationGroupId) {
    this.replicationGroupId = replicationGroupId;
  }


  public SnapshotListInner replicationGroupDescription(String replicationGroupDescription) {
    this.replicationGroupDescription = replicationGroupDescription;
    return this;
  }

  /**
   * Get replicationGroupDescription
   * @return replicationGroupDescription
   */
  @javax.annotation.Nullable
  public String getReplicationGroupDescription() {
    return replicationGroupDescription;
  }

  public void setReplicationGroupDescription(String replicationGroupDescription) {
    this.replicationGroupDescription = replicationGroupDescription;
  }


  public SnapshotListInner cacheClusterId(String cacheClusterId) {
    this.cacheClusterId = cacheClusterId;
    return this;
  }

  /**
   * Get cacheClusterId
   * @return cacheClusterId
   */
  @javax.annotation.Nullable
  public String getCacheClusterId() {
    return cacheClusterId;
  }

  public void setCacheClusterId(String cacheClusterId) {
    this.cacheClusterId = cacheClusterId;
  }


  public SnapshotListInner snapshotStatus(String snapshotStatus) {
    this.snapshotStatus = snapshotStatus;
    return this;
  }

  /**
   * Get snapshotStatus
   * @return snapshotStatus
   */
  @javax.annotation.Nullable
  public String getSnapshotStatus() {
    return snapshotStatus;
  }

  public void setSnapshotStatus(String snapshotStatus) {
    this.snapshotStatus = snapshotStatus;
  }


  public SnapshotListInner snapshotSource(String snapshotSource) {
    this.snapshotSource = snapshotSource;
    return this;
  }

  /**
   * Get snapshotSource
   * @return snapshotSource
   */
  @javax.annotation.Nullable
  public String getSnapshotSource() {
    return snapshotSource;
  }

  public void setSnapshotSource(String snapshotSource) {
    this.snapshotSource = snapshotSource;
  }


  public SnapshotListInner cacheNodeType(String cacheNodeType) {
    this.cacheNodeType = cacheNodeType;
    return this;
  }

  /**
   * Get cacheNodeType
   * @return cacheNodeType
   */
  @javax.annotation.Nullable
  public String getCacheNodeType() {
    return cacheNodeType;
  }

  public void setCacheNodeType(String cacheNodeType) {
    this.cacheNodeType = cacheNodeType;
  }


  public SnapshotListInner engine(String engine) {
    this.engine = engine;
    return this;
  }

  /**
   * Get engine
   * @return engine
   */
  @javax.annotation.Nullable
  public String getEngine() {
    return engine;
  }

  public void setEngine(String engine) {
    this.engine = engine;
  }


  public SnapshotListInner engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public SnapshotListInner numCacheNodes(Integer numCacheNodes) {
    this.numCacheNodes = numCacheNodes;
    return this;
  }

  /**
   * Get numCacheNodes
   * @return numCacheNodes
   */
  @javax.annotation.Nullable
  public Integer getNumCacheNodes() {
    return numCacheNodes;
  }

  public void setNumCacheNodes(Integer numCacheNodes) {
    this.numCacheNodes = numCacheNodes;
  }


  public SnapshotListInner preferredAvailabilityZone(String preferredAvailabilityZone) {
    this.preferredAvailabilityZone = preferredAvailabilityZone;
    return this;
  }

  /**
   * Get preferredAvailabilityZone
   * @return preferredAvailabilityZone
   */
  @javax.annotation.Nullable
  public String getPreferredAvailabilityZone() {
    return preferredAvailabilityZone;
  }

  public void setPreferredAvailabilityZone(String preferredAvailabilityZone) {
    this.preferredAvailabilityZone = preferredAvailabilityZone;
  }


  public SnapshotListInner preferredOutpostArn(String preferredOutpostArn) {
    this.preferredOutpostArn = preferredOutpostArn;
    return this;
  }

  /**
   * Get preferredOutpostArn
   * @return preferredOutpostArn
   */
  @javax.annotation.Nullable
  public String getPreferredOutpostArn() {
    return preferredOutpostArn;
  }

  public void setPreferredOutpostArn(String preferredOutpostArn) {
    this.preferredOutpostArn = preferredOutpostArn;
  }


  public SnapshotListInner cacheClusterCreateTime(OffsetDateTime cacheClusterCreateTime) {
    this.cacheClusterCreateTime = cacheClusterCreateTime;
    return this;
  }

  /**
   * Get cacheClusterCreateTime
   * @return cacheClusterCreateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCacheClusterCreateTime() {
    return cacheClusterCreateTime;
  }

  public void setCacheClusterCreateTime(OffsetDateTime cacheClusterCreateTime) {
    this.cacheClusterCreateTime = cacheClusterCreateTime;
  }


  public SnapshotListInner preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Get preferredMaintenanceWindow
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public SnapshotListInner topicArn(String topicArn) {
    this.topicArn = topicArn;
    return this;
  }

  /**
   * Get topicArn
   * @return topicArn
   */
  @javax.annotation.Nullable
  public String getTopicArn() {
    return topicArn;
  }

  public void setTopicArn(String topicArn) {
    this.topicArn = topicArn;
  }


  public SnapshotListInner port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public SnapshotListInner cacheParameterGroupName(String cacheParameterGroupName) {
    this.cacheParameterGroupName = cacheParameterGroupName;
    return this;
  }

  /**
   * Get cacheParameterGroupName
   * @return cacheParameterGroupName
   */
  @javax.annotation.Nullable
  public String getCacheParameterGroupName() {
    return cacheParameterGroupName;
  }

  public void setCacheParameterGroupName(String cacheParameterGroupName) {
    this.cacheParameterGroupName = cacheParameterGroupName;
  }


  public SnapshotListInner cacheSubnetGroupName(String cacheSubnetGroupName) {
    this.cacheSubnetGroupName = cacheSubnetGroupName;
    return this;
  }

  /**
   * Get cacheSubnetGroupName
   * @return cacheSubnetGroupName
   */
  @javax.annotation.Nullable
  public String getCacheSubnetGroupName() {
    return cacheSubnetGroupName;
  }

  public void setCacheSubnetGroupName(String cacheSubnetGroupName) {
    this.cacheSubnetGroupName = cacheSubnetGroupName;
  }


  public SnapshotListInner vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

  /**
   * Get vpcId
   * @return vpcId
   */
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public SnapshotListInner autoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
    this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
    return this;
  }

  /**
   * Get autoMinorVersionUpgrade
   * @return autoMinorVersionUpgrade
   */
  @javax.annotation.Nullable
  public Boolean getAutoMinorVersionUpgrade() {
    return autoMinorVersionUpgrade;
  }

  public void setAutoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
    this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
  }


  public SnapshotListInner snapshotRetentionLimit(Integer snapshotRetentionLimit) {
    this.snapshotRetentionLimit = snapshotRetentionLimit;
    return this;
  }

  /**
   * Get snapshotRetentionLimit
   * @return snapshotRetentionLimit
   */
  @javax.annotation.Nullable
  public Integer getSnapshotRetentionLimit() {
    return snapshotRetentionLimit;
  }

  public void setSnapshotRetentionLimit(Integer snapshotRetentionLimit) {
    this.snapshotRetentionLimit = snapshotRetentionLimit;
  }


  public SnapshotListInner snapshotWindow(String snapshotWindow) {
    this.snapshotWindow = snapshotWindow;
    return this;
  }

  /**
   * Get snapshotWindow
   * @return snapshotWindow
   */
  @javax.annotation.Nullable
  public String getSnapshotWindow() {
    return snapshotWindow;
  }

  public void setSnapshotWindow(String snapshotWindow) {
    this.snapshotWindow = snapshotWindow;
  }


  public SnapshotListInner numNodeGroups(Integer numNodeGroups) {
    this.numNodeGroups = numNodeGroups;
    return this;
  }

  /**
   * Get numNodeGroups
   * @return numNodeGroups
   */
  @javax.annotation.Nullable
  public Integer getNumNodeGroups() {
    return numNodeGroups;
  }

  public void setNumNodeGroups(Integer numNodeGroups) {
    this.numNodeGroups = numNodeGroups;
  }


  public SnapshotListInner automaticFailover(AutomaticFailoverStatus automaticFailover) {
    this.automaticFailover = automaticFailover;
    return this;
  }

  /**
   * Get automaticFailover
   * @return automaticFailover
   */
  @javax.annotation.Nullable
  public AutomaticFailoverStatus getAutomaticFailover() {
    return automaticFailover;
  }

  public void setAutomaticFailover(AutomaticFailoverStatus automaticFailover) {
    this.automaticFailover = automaticFailover;
  }


  public SnapshotListInner nodeSnapshots(List nodeSnapshots) {
    this.nodeSnapshots = nodeSnapshots;
    return this;
  }

  /**
   * Get nodeSnapshots
   * @return nodeSnapshots
   */
  @javax.annotation.Nullable
  public List getNodeSnapshots() {
    return nodeSnapshots;
  }

  public void setNodeSnapshots(List nodeSnapshots) {
    this.nodeSnapshots = nodeSnapshots;
  }


  public SnapshotListInner kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }


  public SnapshotListInner ARN(String ARN) {
    this.ARN = ARN;
    return this;
  }

  /**
   * Get ARN
   * @return ARN
   */
  @javax.annotation.Nullable
  public String getARN() {
    return ARN;
  }

  public void setARN(String ARN) {
    this.ARN = ARN;
  }


  public SnapshotListInner dataTiering(DataTieringStatus dataTiering) {
    this.dataTiering = dataTiering;
    return this;
  }

  /**
   * Get dataTiering
   * @return dataTiering
   */
  @javax.annotation.Nullable
  public DataTieringStatus getDataTiering() {
    return dataTiering;
  }

  public void setDataTiering(DataTieringStatus dataTiering) {
    this.dataTiering = dataTiering;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnapshotListInner snapshotListInner = (SnapshotListInner) o;
    return Objects.equals(this.snapshotName, snapshotListInner.snapshotName) &&
        Objects.equals(this.replicationGroupId, snapshotListInner.replicationGroupId) &&
        Objects.equals(this.replicationGroupDescription, snapshotListInner.replicationGroupDescription) &&
        Objects.equals(this.cacheClusterId, snapshotListInner.cacheClusterId) &&
        Objects.equals(this.snapshotStatus, snapshotListInner.snapshotStatus) &&
        Objects.equals(this.snapshotSource, snapshotListInner.snapshotSource) &&
        Objects.equals(this.cacheNodeType, snapshotListInner.cacheNodeType) &&
        Objects.equals(this.engine, snapshotListInner.engine) &&
        Objects.equals(this.engineVersion, snapshotListInner.engineVersion) &&
        Objects.equals(this.numCacheNodes, snapshotListInner.numCacheNodes) &&
        Objects.equals(this.preferredAvailabilityZone, snapshotListInner.preferredAvailabilityZone) &&
        Objects.equals(this.preferredOutpostArn, snapshotListInner.preferredOutpostArn) &&
        Objects.equals(this.cacheClusterCreateTime, snapshotListInner.cacheClusterCreateTime) &&
        Objects.equals(this.preferredMaintenanceWindow, snapshotListInner.preferredMaintenanceWindow) &&
        Objects.equals(this.topicArn, snapshotListInner.topicArn) &&
        Objects.equals(this.port, snapshotListInner.port) &&
        Objects.equals(this.cacheParameterGroupName, snapshotListInner.cacheParameterGroupName) &&
        Objects.equals(this.cacheSubnetGroupName, snapshotListInner.cacheSubnetGroupName) &&
        Objects.equals(this.vpcId, snapshotListInner.vpcId) &&
        Objects.equals(this.autoMinorVersionUpgrade, snapshotListInner.autoMinorVersionUpgrade) &&
        Objects.equals(this.snapshotRetentionLimit, snapshotListInner.snapshotRetentionLimit) &&
        Objects.equals(this.snapshotWindow, snapshotListInner.snapshotWindow) &&
        Objects.equals(this.numNodeGroups, snapshotListInner.numNodeGroups) &&
        Objects.equals(this.automaticFailover, snapshotListInner.automaticFailover) &&
        Objects.equals(this.nodeSnapshots, snapshotListInner.nodeSnapshots) &&
        Objects.equals(this.kmsKeyId, snapshotListInner.kmsKeyId) &&
        Objects.equals(this.ARN, snapshotListInner.ARN) &&
        Objects.equals(this.dataTiering, snapshotListInner.dataTiering);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snapshotName, replicationGroupId, replicationGroupDescription, cacheClusterId, snapshotStatus, snapshotSource, cacheNodeType, engine, engineVersion, numCacheNodes, preferredAvailabilityZone, preferredOutpostArn, cacheClusterCreateTime, preferredMaintenanceWindow, topicArn, port, cacheParameterGroupName, cacheSubnetGroupName, vpcId, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, numNodeGroups, automaticFailover, nodeSnapshots, kmsKeyId, ARN, dataTiering);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnapshotListInner {\n");
    sb.append("    snapshotName: ").append(toIndentedString(snapshotName)).append("\n");
    sb.append("    replicationGroupId: ").append(toIndentedString(replicationGroupId)).append("\n");
    sb.append("    replicationGroupDescription: ").append(toIndentedString(replicationGroupDescription)).append("\n");
    sb.append("    cacheClusterId: ").append(toIndentedString(cacheClusterId)).append("\n");
    sb.append("    snapshotStatus: ").append(toIndentedString(snapshotStatus)).append("\n");
    sb.append("    snapshotSource: ").append(toIndentedString(snapshotSource)).append("\n");
    sb.append("    cacheNodeType: ").append(toIndentedString(cacheNodeType)).append("\n");
    sb.append("    engine: ").append(toIndentedString(engine)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    numCacheNodes: ").append(toIndentedString(numCacheNodes)).append("\n");
    sb.append("    preferredAvailabilityZone: ").append(toIndentedString(preferredAvailabilityZone)).append("\n");
    sb.append("    preferredOutpostArn: ").append(toIndentedString(preferredOutpostArn)).append("\n");
    sb.append("    cacheClusterCreateTime: ").append(toIndentedString(cacheClusterCreateTime)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    topicArn: ").append(toIndentedString(topicArn)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    cacheParameterGroupName: ").append(toIndentedString(cacheParameterGroupName)).append("\n");
    sb.append("    cacheSubnetGroupName: ").append(toIndentedString(cacheSubnetGroupName)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    autoMinorVersionUpgrade: ").append(toIndentedString(autoMinorVersionUpgrade)).append("\n");
    sb.append("    snapshotRetentionLimit: ").append(toIndentedString(snapshotRetentionLimit)).append("\n");
    sb.append("    snapshotWindow: ").append(toIndentedString(snapshotWindow)).append("\n");
    sb.append("    numNodeGroups: ").append(toIndentedString(numNodeGroups)).append("\n");
    sb.append("    automaticFailover: ").append(toIndentedString(automaticFailover)).append("\n");
    sb.append("    nodeSnapshots: ").append(toIndentedString(nodeSnapshots)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("    ARN: ").append(toIndentedString(ARN)).append("\n");
    sb.append("    dataTiering: ").append(toIndentedString(dataTiering)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SnapshotName");
    openapiFields.add("ReplicationGroupId");
    openapiFields.add("ReplicationGroupDescription");
    openapiFields.add("CacheClusterId");
    openapiFields.add("SnapshotStatus");
    openapiFields.add("SnapshotSource");
    openapiFields.add("CacheNodeType");
    openapiFields.add("Engine");
    openapiFields.add("EngineVersion");
    openapiFields.add("NumCacheNodes");
    openapiFields.add("PreferredAvailabilityZone");
    openapiFields.add("PreferredOutpostArn");
    openapiFields.add("CacheClusterCreateTime");
    openapiFields.add("PreferredMaintenanceWindow");
    openapiFields.add("TopicArn");
    openapiFields.add("Port");
    openapiFields.add("CacheParameterGroupName");
    openapiFields.add("CacheSubnetGroupName");
    openapiFields.add("VpcId");
    openapiFields.add("AutoMinorVersionUpgrade");
    openapiFields.add("SnapshotRetentionLimit");
    openapiFields.add("SnapshotWindow");
    openapiFields.add("NumNodeGroups");
    openapiFields.add("AutomaticFailover");
    openapiFields.add("NodeSnapshots");
    openapiFields.add("KmsKeyId");
    openapiFields.add("ARN");
    openapiFields.add("DataTiering");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SnapshotListInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SnapshotListInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnapshotListInner is not found in the empty JSON string", SnapshotListInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SnapshotListInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SnapshotListInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SnapshotName`
      if (jsonObj.get("SnapshotName") != null && !jsonObj.get("SnapshotName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotName"));
      }
      // validate the optional field `ReplicationGroupId`
      if (jsonObj.get("ReplicationGroupId") != null && !jsonObj.get("ReplicationGroupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationGroupId"));
      }
      // validate the optional field `ReplicationGroupDescription`
      if (jsonObj.get("ReplicationGroupDescription") != null && !jsonObj.get("ReplicationGroupDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationGroupDescription"));
      }
      // validate the optional field `CacheClusterId`
      if (jsonObj.get("CacheClusterId") != null && !jsonObj.get("CacheClusterId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CacheClusterId"));
      }
      // validate the optional field `SnapshotStatus`
      if (jsonObj.get("SnapshotStatus") != null && !jsonObj.get("SnapshotStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotStatus"));
      }
      // validate the optional field `SnapshotSource`
      if (jsonObj.get("SnapshotSource") != null && !jsonObj.get("SnapshotSource").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotSource"));
      }
      // validate the optional field `CacheNodeType`
      if (jsonObj.get("CacheNodeType") != null && !jsonObj.get("CacheNodeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CacheNodeType"));
      }
      // validate the optional field `Engine`
      if (jsonObj.get("Engine") != null && !jsonObj.get("Engine").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Engine"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `NumCacheNodes`
      if (jsonObj.get("NumCacheNodes") != null && !jsonObj.get("NumCacheNodes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumCacheNodes"));
      }
      // validate the optional field `PreferredAvailabilityZone`
      if (jsonObj.get("PreferredAvailabilityZone") != null && !jsonObj.get("PreferredAvailabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredAvailabilityZone"));
      }
      // validate the optional field `PreferredOutpostArn`
      if (jsonObj.get("PreferredOutpostArn") != null && !jsonObj.get("PreferredOutpostArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredOutpostArn"));
      }
      // validate the optional field `CacheClusterCreateTime`
      if (jsonObj.get("CacheClusterCreateTime") != null && !jsonObj.get("CacheClusterCreateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CacheClusterCreateTime"));
      }
      // validate the optional field `PreferredMaintenanceWindow`
      if (jsonObj.get("PreferredMaintenanceWindow") != null && !jsonObj.get("PreferredMaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredMaintenanceWindow"));
      }
      // validate the optional field `TopicArn`
      if (jsonObj.get("TopicArn") != null && !jsonObj.get("TopicArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TopicArn"));
      }
      // validate the optional field `Port`
      if (jsonObj.get("Port") != null && !jsonObj.get("Port").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Port"));
      }
      // validate the optional field `CacheParameterGroupName`
      if (jsonObj.get("CacheParameterGroupName") != null && !jsonObj.get("CacheParameterGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CacheParameterGroupName"));
      }
      // validate the optional field `CacheSubnetGroupName`
      if (jsonObj.get("CacheSubnetGroupName") != null && !jsonObj.get("CacheSubnetGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CacheSubnetGroupName"));
      }
      // validate the optional field `VpcId`
      if (jsonObj.get("VpcId") != null && !jsonObj.get("VpcId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VpcId"));
      }
      // validate the optional field `AutoMinorVersionUpgrade`
      if (jsonObj.get("AutoMinorVersionUpgrade") != null && !jsonObj.get("AutoMinorVersionUpgrade").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoMinorVersionUpgrade"));
      }
      // validate the optional field `SnapshotRetentionLimit`
      if (jsonObj.get("SnapshotRetentionLimit") != null && !jsonObj.get("SnapshotRetentionLimit").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SnapshotRetentionLimit"));
      }
      // validate the optional field `SnapshotWindow`
      if (jsonObj.get("SnapshotWindow") != null && !jsonObj.get("SnapshotWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotWindow"));
      }
      // validate the optional field `NumNodeGroups`
      if (jsonObj.get("NumNodeGroups") != null && !jsonObj.get("NumNodeGroups").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumNodeGroups"));
      }
      // validate the optional field `AutomaticFailover`
      if (jsonObj.get("AutomaticFailover") != null && !jsonObj.get("AutomaticFailover").isJsonNull()) {
        AutomaticFailoverStatus.validateJsonElement(jsonObj.get("AutomaticFailover"));
      }
      // validate the optional field `NodeSnapshots`
      if (jsonObj.get("NodeSnapshots") != null && !jsonObj.get("NodeSnapshots").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NodeSnapshots"));
      }
      // validate the optional field `KmsKeyId`
      if (jsonObj.get("KmsKeyId") != null && !jsonObj.get("KmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KmsKeyId"));
      }
      // validate the optional field `ARN`
      if (jsonObj.get("ARN") != null && !jsonObj.get("ARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ARN"));
      }
      // validate the optional field `DataTiering`
      if (jsonObj.get("DataTiering") != null && !jsonObj.get("DataTiering").isJsonNull()) {
        DataTieringStatus.validateJsonElement(jsonObj.get("DataTiering"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnapshotListInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnapshotListInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnapshotListInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnapshotListInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SnapshotListInner>() {
           @Override
           public void write(JsonWriter out, SnapshotListInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SnapshotListInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SnapshotListInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SnapshotListInner
   * @throws IOException if the JSON string is invalid with respect to SnapshotListInner
   */
  public static SnapshotListInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnapshotListInner.class);
  }

  /**
   * Convert an instance of SnapshotListInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

