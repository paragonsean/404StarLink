/*
 * Configuration API
 * The Configuration API enables you to create a platform where you can onboard your users as account holders and create balance accounts, cards, and business accounts.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Versioning The Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/bcl/v1/accountHolders ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v1`.
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CronSweepSchedule;
import org.openapitools.client.model.SweepSchedule;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:18:10.044537-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SweepConfigurationSchedule extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SweepConfigurationSchedule.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SweepConfigurationSchedule.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SweepConfigurationSchedule' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CronSweepSchedule> adapterCronSweepSchedule = gson.getDelegateAdapter(this, TypeToken.get(CronSweepSchedule.class));
            final TypeAdapter<SweepSchedule> adapterSweepSchedule = gson.getDelegateAdapter(this, TypeToken.get(SweepSchedule.class));

            return (TypeAdapter<T>) new TypeAdapter<SweepConfigurationSchedule>() {
                @Override
                public void write(JsonWriter out, SweepConfigurationSchedule value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CronSweepSchedule`
                    if (value.getActualInstance() instanceof CronSweepSchedule) {
                        JsonElement element = adapterCronSweepSchedule.toJsonTree((CronSweepSchedule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SweepSchedule`
                    if (value.getActualInstance() instanceof SweepSchedule) {
                        JsonElement element = adapterSweepSchedule.toJsonTree((SweepSchedule)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CronSweepSchedule, SweepSchedule");
                }

                @Override
                public SweepConfigurationSchedule read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CronSweepSchedule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CronSweepSchedule.validateJsonElement(jsonElement);
                        actualAdapter = adapterCronSweepSchedule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CronSweepSchedule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CronSweepSchedule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CronSweepSchedule'", e);
                    }
                    // deserialize SweepSchedule
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SweepSchedule.validateJsonElement(jsonElement);
                        actualAdapter = adapterSweepSchedule;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SweepSchedule'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SweepSchedule failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SweepSchedule'", e);
                    }

                    if (match == 1) {
                        SweepConfigurationSchedule ret = new SweepConfigurationSchedule();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for SweepConfigurationSchedule: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public SweepConfigurationSchedule() {
        super("oneOf", Boolean.FALSE);
    }

    public SweepConfigurationSchedule(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CronSweepSchedule", CronSweepSchedule.class);
        schemas.put("SweepSchedule", SweepSchedule.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return SweepConfigurationSchedule.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CronSweepSchedule, SweepSchedule
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CronSweepSchedule) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SweepSchedule) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CronSweepSchedule, SweepSchedule");
    }

    /**
     * Get the actual instance, which can be the following:
     * CronSweepSchedule, SweepSchedule
     *
     * @return The actual instance (CronSweepSchedule, SweepSchedule)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CronSweepSchedule`. If the actual instance is not `CronSweepSchedule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CronSweepSchedule`
     * @throws ClassCastException if the instance is not `CronSweepSchedule`
     */
    public CronSweepSchedule getCronSweepSchedule() throws ClassCastException {
        return (CronSweepSchedule)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SweepSchedule`. If the actual instance is not `SweepSchedule`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SweepSchedule`
     * @throws ClassCastException if the instance is not `SweepSchedule`
     */
    public SweepSchedule getSweepSchedule() throws ClassCastException {
        return (SweepSchedule)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SweepConfigurationSchedule
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with CronSweepSchedule
        try {
            CronSweepSchedule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CronSweepSchedule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SweepSchedule
        try {
            SweepSchedule.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SweepSchedule failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for SweepConfigurationSchedule with oneOf schemas: CronSweepSchedule, SweepSchedule. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of SweepConfigurationSchedule given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SweepConfigurationSchedule
     * @throws IOException if the JSON string is invalid with respect to SweepConfigurationSchedule
     */
    public static SweepConfigurationSchedule fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SweepConfigurationSchedule.class);
    }

    /**
     * Convert an instance of SweepConfigurationSchedule to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

