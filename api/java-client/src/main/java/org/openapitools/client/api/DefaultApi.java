/*
 * Amazon ElastiCache
 * <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
 *
 * The version of the OpenAPI document: 2015-02-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddTagsToResourceMessage;
import org.openapitools.client.model.AllowedNodeTypeModificationsMessage;
import org.openapitools.client.model.AuthorizeCacheSecurityGroupIngressMessage;
import org.openapitools.client.model.AuthorizeCacheSecurityGroupIngressResult;
import org.openapitools.client.model.BatchApplyUpdateActionMessage;
import org.openapitools.client.model.BatchStopUpdateActionMessage;
import org.openapitools.client.model.CacheClusterMessage;
import org.openapitools.client.model.CacheEngineVersionMessage;
import org.openapitools.client.model.CacheParameterGroupDetails;
import org.openapitools.client.model.CacheParameterGroupNameMessage;
import org.openapitools.client.model.CacheParameterGroupsMessage;
import org.openapitools.client.model.CacheSecurityGroupMessage;
import org.openapitools.client.model.CacheSubnetGroupMessage;
import org.openapitools.client.model.CompleteMigrationMessage;
import org.openapitools.client.model.CompleteMigrationResponse;
import org.openapitools.client.model.CopySnapshotMessage;
import org.openapitools.client.model.CopySnapshotResult;
import org.openapitools.client.model.CreateCacheClusterMessage;
import org.openapitools.client.model.CreateCacheClusterResult;
import org.openapitools.client.model.CreateCacheParameterGroupMessage;
import org.openapitools.client.model.CreateCacheParameterGroupResult;
import org.openapitools.client.model.CreateCacheSecurityGroupMessage;
import org.openapitools.client.model.CreateCacheSecurityGroupResult;
import org.openapitools.client.model.CreateCacheSubnetGroupMessage;
import org.openapitools.client.model.CreateCacheSubnetGroupResult;
import org.openapitools.client.model.CreateGlobalReplicationGroupMessage;
import org.openapitools.client.model.CreateGlobalReplicationGroupResult;
import org.openapitools.client.model.CreateReplicationGroupMessage;
import org.openapitools.client.model.CreateReplicationGroupResult;
import org.openapitools.client.model.CreateSnapshotMessage;
import org.openapitools.client.model.CreateSnapshotResult;
import org.openapitools.client.model.CreateUserGroupMessage;
import org.openapitools.client.model.CreateUserMessage;
import org.openapitools.client.model.CustomerNodeEndpoint;
import org.openapitools.client.model.DecreaseNodeGroupsInGlobalReplicationGroupMessage;
import org.openapitools.client.model.DecreaseNodeGroupsInGlobalReplicationGroupResult;
import org.openapitools.client.model.DecreaseReplicaCountMessage;
import org.openapitools.client.model.DecreaseReplicaCountResult;
import org.openapitools.client.model.DeleteCacheClusterMessage;
import org.openapitools.client.model.DeleteCacheClusterResult;
import org.openapitools.client.model.DeleteCacheParameterGroupMessage;
import org.openapitools.client.model.DeleteCacheSecurityGroupMessage;
import org.openapitools.client.model.DeleteCacheSubnetGroupMessage;
import org.openapitools.client.model.DeleteGlobalReplicationGroupMessage;
import org.openapitools.client.model.DeleteGlobalReplicationGroupResult;
import org.openapitools.client.model.DeleteReplicationGroupMessage;
import org.openapitools.client.model.DeleteReplicationGroupResult;
import org.openapitools.client.model.DeleteSnapshotMessage;
import org.openapitools.client.model.DeleteSnapshotResult;
import org.openapitools.client.model.DeleteUserGroupMessage;
import org.openapitools.client.model.DeleteUserMessage;
import org.openapitools.client.model.DescribeCacheClustersMessage;
import org.openapitools.client.model.DescribeCacheEngineVersionsMessage;
import org.openapitools.client.model.DescribeCacheParameterGroupsMessage;
import org.openapitools.client.model.DescribeCacheParametersMessage;
import org.openapitools.client.model.DescribeCacheSecurityGroupsMessage;
import org.openapitools.client.model.DescribeCacheSubnetGroupsMessage;
import org.openapitools.client.model.DescribeEngineDefaultParametersMessage;
import org.openapitools.client.model.DescribeEngineDefaultParametersResult;
import org.openapitools.client.model.DescribeEventsMessage;
import org.openapitools.client.model.DescribeGlobalReplicationGroupsMessage;
import org.openapitools.client.model.DescribeGlobalReplicationGroupsResult;
import org.openapitools.client.model.DescribeReplicationGroupsMessage;
import org.openapitools.client.model.DescribeReservedCacheNodesMessage;
import org.openapitools.client.model.DescribeReservedCacheNodesOfferingsMessage;
import org.openapitools.client.model.DescribeServiceUpdatesMessage;
import org.openapitools.client.model.DescribeSnapshotsListMessage;
import org.openapitools.client.model.DescribeSnapshotsMessage;
import org.openapitools.client.model.DescribeUpdateActionsMessage;
import org.openapitools.client.model.DescribeUserGroupsMessage;
import org.openapitools.client.model.DescribeUserGroupsResult;
import org.openapitools.client.model.DescribeUsersMessage;
import org.openapitools.client.model.DescribeUsersResult;
import org.openapitools.client.model.DisassociateGlobalReplicationGroupMessage;
import org.openapitools.client.model.DisassociateGlobalReplicationGroupResult;
import org.openapitools.client.model.EventsMessage;
import org.openapitools.client.model.FailoverGlobalReplicationGroupMessage;
import org.openapitools.client.model.FailoverGlobalReplicationGroupResult;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.GETAddTagsToResourceTagsParameterInner;
import org.openapitools.client.model.GETCreateCacheClusterLogDeliveryConfigurationsParameterInner;
import org.openapitools.client.model.GETCreateReplicationGroupNodeGroupConfigurationParameterInner;
import org.openapitools.client.model.GETCreateUserAuthenticationModeParameter;
import org.openapitools.client.model.GETDecreaseReplicaCountReplicaConfigurationParameterInner;
import org.openapitools.client.model.GETDescribeUpdateActionsServiceUpdateTimeRangeParameter;
import org.openapitools.client.model.GETIncreaseNodeGroupsInGlobalReplicationGroupRegionalConfigurationsParameterInner;
import org.openapitools.client.model.GETModifyCacheParameterGroupParameterNameValuesParameterInner;
import org.openapitools.client.model.GETModifyReplicationGroupShardConfigurationReshardingConfigurationParameterInner;
import org.openapitools.client.model.IncreaseNodeGroupsInGlobalReplicationGroupMessage;
import org.openapitools.client.model.IncreaseNodeGroupsInGlobalReplicationGroupResult;
import org.openapitools.client.model.IncreaseReplicaCountMessage;
import org.openapitools.client.model.IncreaseReplicaCountResult;
import org.openapitools.client.model.ListAllowedNodeTypeModificationsMessage;
import org.openapitools.client.model.ListTagsForResourceMessage;
import org.openapitools.client.model.ModifyCacheClusterMessage;
import org.openapitools.client.model.ModifyCacheClusterResult;
import org.openapitools.client.model.ModifyCacheParameterGroupMessage;
import org.openapitools.client.model.ModifyCacheSubnetGroupMessage;
import org.openapitools.client.model.ModifyCacheSubnetGroupResult;
import org.openapitools.client.model.ModifyGlobalReplicationGroupMessage;
import org.openapitools.client.model.ModifyGlobalReplicationGroupResult;
import org.openapitools.client.model.ModifyReplicationGroupMessage;
import org.openapitools.client.model.ModifyReplicationGroupResult;
import org.openapitools.client.model.ModifyReplicationGroupShardConfigurationMessage;
import org.openapitools.client.model.ModifyReplicationGroupShardConfigurationResult;
import org.openapitools.client.model.ModifyUserGroupMessage;
import org.openapitools.client.model.ModifyUserMessage;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PurchaseReservedCacheNodesOfferingMessage;
import org.openapitools.client.model.PurchaseReservedCacheNodesOfferingResult;
import org.openapitools.client.model.RebalanceSlotsInGlobalReplicationGroupMessage;
import org.openapitools.client.model.RebalanceSlotsInGlobalReplicationGroupResult;
import org.openapitools.client.model.RebootCacheClusterMessage;
import org.openapitools.client.model.RebootCacheClusterResult;
import org.openapitools.client.model.RemoveTagsFromResourceMessage;
import org.openapitools.client.model.ReplicationGroupMessage;
import org.openapitools.client.model.ReservedCacheNodeMessage;
import org.openapitools.client.model.ReservedCacheNodesOfferingMessage;
import org.openapitools.client.model.ResetCacheParameterGroupMessage;
import org.openapitools.client.model.RevokeCacheSecurityGroupIngressMessage;
import org.openapitools.client.model.RevokeCacheSecurityGroupIngressResult;
import org.openapitools.client.model.ServiceUpdateStatus;
import org.openapitools.client.model.ServiceUpdatesMessage;
import org.openapitools.client.model.StartMigrationMessage;
import org.openapitools.client.model.StartMigrationResponse;
import org.openapitools.client.model.TagListMessage;
import org.openapitools.client.model.TestFailoverMessage;
import org.openapitools.client.model.TestFailoverResult;
import org.openapitools.client.model.UpdateActionResultsMessage;
import org.openapitools.client.model.UpdateActionStatus;
import org.openapitools.client.model.UpdateActionsMessage;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserGroup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for gETAddTagsToResource
     * @param resourceName &lt;p&gt;The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster&lt;/code&gt; or &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot&lt;/code&gt;. ElastiCache resources are &lt;i&gt;cluster&lt;/i&gt; and &lt;i&gt;snapshot&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs) and Amazon Service Namespaces&lt;/a&gt;.&lt;/p&gt; (required)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddTagsToResourceCall(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AddTagsToResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceName", resourceName));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAddTagsToResourceValidateBeforeCall(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling gETAddTagsToResource(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling gETAddTagsToResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAddTagsToResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAddTagsToResource(Async)");
        }

        return gETAddTagsToResourceCall(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html\&quot;&gt;Using Cost Allocation Tags in Amazon ElastiCache&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param resourceName &lt;p&gt;The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster&lt;/code&gt; or &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot&lt;/code&gt;. ElastiCache resources are &lt;i&gt;cluster&lt;/i&gt; and &lt;i&gt;snapshot&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs) and Amazon Service Namespaces&lt;/a&gt;.&lt;/p&gt; (required)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return TagListMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public TagListMessage gETAddTagsToResource(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<TagListMessage> localVarResp = gETAddTagsToResourceWithHttpInfo(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html\&quot;&gt;Using Cost Allocation Tags in Amazon ElastiCache&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param resourceName &lt;p&gt;The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster&lt;/code&gt; or &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot&lt;/code&gt;. ElastiCache resources are &lt;i&gt;cluster&lt;/i&gt; and &lt;i&gt;snapshot&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs) and Amazon Service Namespaces&lt;/a&gt;.&lt;/p&gt; (required)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;TagListMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagListMessage> gETAddTagsToResourceWithHttpInfo(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAddTagsToResourceValidateBeforeCall(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html\&quot;&gt;Using Cost Allocation Tags in Amazon ElastiCache&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param resourceName &lt;p&gt;The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster&lt;/code&gt; or &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot&lt;/code&gt;. ElastiCache resources are &lt;i&gt;cluster&lt;/i&gt; and &lt;i&gt;snapshot&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs) and Amazon Service Namespaces&lt;/a&gt;.&lt;/p&gt; (required)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAddTagsToResourceAsync(String resourceName, List<GETAddTagsToResourceTagsParameterInner> tags, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<TagListMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAddTagsToResourceValidateBeforeCall(resourceName, tags, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETAuthorizeCacheSecurityGroupIngress
     * @param cacheSecurityGroupName The cache security group that allows network ingress. (required)
     * @param ec2SecurityGroupName The Amazon EC2 security group to be authorized for ingress to the cache security group. (required)
     * @param ec2SecurityGroupOwnerId The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAuthorizeCacheSecurityGroupIngressCall(String cacheSecurityGroupName, String ec2SecurityGroupName, String ec2SecurityGroupOwnerId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=AuthorizeCacheSecurityGroupIngress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheSecurityGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSecurityGroupName", cacheSecurityGroupName));
        }

        if (ec2SecurityGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EC2SecurityGroupName", ec2SecurityGroupName));
        }

        if (ec2SecurityGroupOwnerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EC2SecurityGroupOwnerId", ec2SecurityGroupOwnerId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETAuthorizeCacheSecurityGroupIngressValidateBeforeCall(String cacheSecurityGroupName, String ec2SecurityGroupName, String ec2SecurityGroupOwnerId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheSecurityGroupName' is set
        if (cacheSecurityGroupName == null) {
            throw new ApiException("Missing the required parameter 'cacheSecurityGroupName' when calling gETAuthorizeCacheSecurityGroupIngress(Async)");
        }

        // verify the required parameter 'ec2SecurityGroupName' is set
        if (ec2SecurityGroupName == null) {
            throw new ApiException("Missing the required parameter 'ec2SecurityGroupName' when calling gETAuthorizeCacheSecurityGroupIngress(Async)");
        }

        // verify the required parameter 'ec2SecurityGroupOwnerId' is set
        if (ec2SecurityGroupOwnerId == null) {
            throw new ApiException("Missing the required parameter 'ec2SecurityGroupOwnerId' when calling gETAuthorizeCacheSecurityGroupIngress(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETAuthorizeCacheSecurityGroupIngress(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETAuthorizeCacheSecurityGroupIngress(Async)");
        }

        return gETAuthorizeCacheSecurityGroupIngressCall(cacheSecurityGroupName, ec2SecurityGroupName, ec2SecurityGroupOwnerId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.&lt;/p&gt; &lt;/note&gt;
     * @param cacheSecurityGroupName The cache security group that allows network ingress. (required)
     * @param ec2SecurityGroupName The Amazon EC2 security group to be authorized for ingress to the cache security group. (required)
     * @param ec2SecurityGroupOwnerId The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AuthorizeCacheSecurityGroupIngressResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizeCacheSecurityGroupIngressResult gETAuthorizeCacheSecurityGroupIngress(String cacheSecurityGroupName, String ec2SecurityGroupName, String ec2SecurityGroupOwnerId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AuthorizeCacheSecurityGroupIngressResult> localVarResp = gETAuthorizeCacheSecurityGroupIngressWithHttpInfo(cacheSecurityGroupName, ec2SecurityGroupName, ec2SecurityGroupOwnerId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.&lt;/p&gt; &lt;/note&gt;
     * @param cacheSecurityGroupName The cache security group that allows network ingress. (required)
     * @param ec2SecurityGroupName The Amazon EC2 security group to be authorized for ingress to the cache security group. (required)
     * @param ec2SecurityGroupOwnerId The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AuthorizeCacheSecurityGroupIngressResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizeCacheSecurityGroupIngressResult> gETAuthorizeCacheSecurityGroupIngressWithHttpInfo(String cacheSecurityGroupName, String ec2SecurityGroupName, String ec2SecurityGroupOwnerId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETAuthorizeCacheSecurityGroupIngressValidateBeforeCall(cacheSecurityGroupName, ec2SecurityGroupName, ec2SecurityGroupOwnerId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AuthorizeCacheSecurityGroupIngressResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.&lt;/p&gt; &lt;/note&gt;
     * @param cacheSecurityGroupName The cache security group that allows network ingress. (required)
     * @param ec2SecurityGroupName The Amazon EC2 security group to be authorized for ingress to the cache security group. (required)
     * @param ec2SecurityGroupOwnerId The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETAuthorizeCacheSecurityGroupIngressAsync(String cacheSecurityGroupName, String ec2SecurityGroupName, String ec2SecurityGroupOwnerId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AuthorizeCacheSecurityGroupIngressResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETAuthorizeCacheSecurityGroupIngressValidateBeforeCall(cacheSecurityGroupName, ec2SecurityGroupName, ec2SecurityGroupOwnerId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AuthorizeCacheSecurityGroupIngressResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETBatchApplyUpdateAction
     * @param serviceUpdateName The unique ID of the service update (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupIds The replication group IDs (optional)
     * @param cacheClusterIds The cache cluster IDs (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchApplyUpdateActionCall(String serviceUpdateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> replicationGroupIds, List<String> cacheClusterIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=BatchApplyUpdateAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ReplicationGroupIds", replicationGroupIds));
        }

        if (cacheClusterIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "CacheClusterIds", cacheClusterIds));
        }

        if (serviceUpdateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServiceUpdateName", serviceUpdateName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETBatchApplyUpdateActionValidateBeforeCall(String serviceUpdateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> replicationGroupIds, List<String> cacheClusterIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceUpdateName' is set
        if (serviceUpdateName == null) {
            throw new ApiException("Missing the required parameter 'serviceUpdateName' when calling gETBatchApplyUpdateAction(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETBatchApplyUpdateAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETBatchApplyUpdateAction(Async)");
        }

        return gETBatchApplyUpdateActionCall(serviceUpdateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupIds, cacheClusterIds, _callback);

    }

    /**
     * 
     * Apply the service update. For more information on service updates and applying them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html\&quot;&gt;Applying Service Updates&lt;/a&gt;.
     * @param serviceUpdateName The unique ID of the service update (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupIds The replication group IDs (optional)
     * @param cacheClusterIds The cache cluster IDs (optional)
     * @return UpdateActionResultsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateActionResultsMessage gETBatchApplyUpdateAction(String serviceUpdateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> replicationGroupIds, List<String> cacheClusterIds) throws ApiException {
        ApiResponse<UpdateActionResultsMessage> localVarResp = gETBatchApplyUpdateActionWithHttpInfo(serviceUpdateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupIds, cacheClusterIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Apply the service update. For more information on service updates and applying them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html\&quot;&gt;Applying Service Updates&lt;/a&gt;.
     * @param serviceUpdateName The unique ID of the service update (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupIds The replication group IDs (optional)
     * @param cacheClusterIds The cache cluster IDs (optional)
     * @return ApiResponse&lt;UpdateActionResultsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateActionResultsMessage> gETBatchApplyUpdateActionWithHttpInfo(String serviceUpdateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> replicationGroupIds, List<String> cacheClusterIds) throws ApiException {
        okhttp3.Call localVarCall = gETBatchApplyUpdateActionValidateBeforeCall(serviceUpdateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupIds, cacheClusterIds, null);
        Type localVarReturnType = new TypeToken<UpdateActionResultsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Apply the service update. For more information on service updates and applying them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html\&quot;&gt;Applying Service Updates&lt;/a&gt;.
     * @param serviceUpdateName The unique ID of the service update (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupIds The replication group IDs (optional)
     * @param cacheClusterIds The cache cluster IDs (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchApplyUpdateActionAsync(String serviceUpdateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> replicationGroupIds, List<String> cacheClusterIds, final ApiCallback<UpdateActionResultsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETBatchApplyUpdateActionValidateBeforeCall(serviceUpdateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupIds, cacheClusterIds, _callback);
        Type localVarReturnType = new TypeToken<UpdateActionResultsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETBatchStopUpdateAction
     * @param serviceUpdateName The unique ID of the service update (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupIds The replication group IDs (optional)
     * @param cacheClusterIds The cache cluster IDs (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchStopUpdateActionCall(String serviceUpdateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> replicationGroupIds, List<String> cacheClusterIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=BatchStopUpdateAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ReplicationGroupIds", replicationGroupIds));
        }

        if (cacheClusterIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "CacheClusterIds", cacheClusterIds));
        }

        if (serviceUpdateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServiceUpdateName", serviceUpdateName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETBatchStopUpdateActionValidateBeforeCall(String serviceUpdateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> replicationGroupIds, List<String> cacheClusterIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceUpdateName' is set
        if (serviceUpdateName == null) {
            throw new ApiException("Missing the required parameter 'serviceUpdateName' when calling gETBatchStopUpdateAction(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETBatchStopUpdateAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETBatchStopUpdateAction(Async)");
        }

        return gETBatchStopUpdateActionCall(serviceUpdateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupIds, cacheClusterIds, _callback);

    }

    /**
     * 
     * Stop the service update. For more information on service updates and stopping them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html\&quot;&gt;Stopping Service Updates&lt;/a&gt;.
     * @param serviceUpdateName The unique ID of the service update (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupIds The replication group IDs (optional)
     * @param cacheClusterIds The cache cluster IDs (optional)
     * @return UpdateActionResultsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateActionResultsMessage gETBatchStopUpdateAction(String serviceUpdateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> replicationGroupIds, List<String> cacheClusterIds) throws ApiException {
        ApiResponse<UpdateActionResultsMessage> localVarResp = gETBatchStopUpdateActionWithHttpInfo(serviceUpdateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupIds, cacheClusterIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Stop the service update. For more information on service updates and stopping them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html\&quot;&gt;Stopping Service Updates&lt;/a&gt;.
     * @param serviceUpdateName The unique ID of the service update (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupIds The replication group IDs (optional)
     * @param cacheClusterIds The cache cluster IDs (optional)
     * @return ApiResponse&lt;UpdateActionResultsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateActionResultsMessage> gETBatchStopUpdateActionWithHttpInfo(String serviceUpdateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> replicationGroupIds, List<String> cacheClusterIds) throws ApiException {
        okhttp3.Call localVarCall = gETBatchStopUpdateActionValidateBeforeCall(serviceUpdateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupIds, cacheClusterIds, null);
        Type localVarReturnType = new TypeToken<UpdateActionResultsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stop the service update. For more information on service updates and stopping them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html\&quot;&gt;Stopping Service Updates&lt;/a&gt;.
     * @param serviceUpdateName The unique ID of the service update (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupIds The replication group IDs (optional)
     * @param cacheClusterIds The cache cluster IDs (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETBatchStopUpdateActionAsync(String serviceUpdateName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> replicationGroupIds, List<String> cacheClusterIds, final ApiCallback<UpdateActionResultsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETBatchStopUpdateActionValidateBeforeCall(serviceUpdateName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupIds, cacheClusterIds, _callback);
        Type localVarReturnType = new TypeToken<UpdateActionResultsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCompleteMigration
     * @param replicationGroupId The ID of the replication group to which data is being migrated. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param force Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotUnderMigrationFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCompleteMigrationCall(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean force, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CompleteMigration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Force", force));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCompleteMigrationValidateBeforeCall(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean force, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicationGroupId' is set
        if (replicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'replicationGroupId' when calling gETCompleteMigration(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCompleteMigration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCompleteMigration(Async)");
        }

        return gETCompleteMigrationCall(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, force, _callback);

    }

    /**
     * 
     * Complete the migration of data.
     * @param replicationGroupId The ID of the replication group to which data is being migrated. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param force Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache. (optional)
     * @return CompleteMigrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotUnderMigrationFault </td><td>  -  </td></tr>
     </table>
     */
    public CompleteMigrationResponse gETCompleteMigration(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean force) throws ApiException {
        ApiResponse<CompleteMigrationResponse> localVarResp = gETCompleteMigrationWithHttpInfo(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, force);
        return localVarResp.getData();
    }

    /**
     * 
     * Complete the migration of data.
     * @param replicationGroupId The ID of the replication group to which data is being migrated. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param force Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache. (optional)
     * @return ApiResponse&lt;CompleteMigrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotUnderMigrationFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompleteMigrationResponse> gETCompleteMigrationWithHttpInfo(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean force) throws ApiException {
        okhttp3.Call localVarCall = gETCompleteMigrationValidateBeforeCall(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, force, null);
        Type localVarReturnType = new TypeToken<CompleteMigrationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Complete the migration of data.
     * @param replicationGroupId The ID of the replication group to which data is being migrated. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param force Forces the migration to stop without ensuring that data is in sync. It is recommended to use this option only to abort the migration and not recommended when application wants to continue migration to ElastiCache. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotUnderMigrationFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCompleteMigrationAsync(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean force, final ApiCallback<CompleteMigrationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCompleteMigrationValidateBeforeCall(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, force, _callback);
        Type localVarReturnType = new TypeToken<CompleteMigrationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCopySnapshot
     * @param sourceSnapshotName The name of an existing snapshot from which to make a copy. (required)
     * @param targetSnapshotName A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param targetBucket &lt;p&gt;The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.&lt;/p&gt; &lt;p&gt;When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the &lt;i&gt;Amazon ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\&quot;&gt;Exporting a Snapshot&lt;/a&gt; in the &lt;i&gt;Amazon ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param kmsKeyId The ID of the KMS key used to encrypt the target snapshot. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCopySnapshotCall(String sourceSnapshotName, String targetSnapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String targetBucket, String kmsKeyId, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CopySnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceSnapshotName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceSnapshotName", sourceSnapshotName));
        }

        if (targetSnapshotName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetSnapshotName", targetSnapshotName));
        }

        if (targetBucket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TargetBucket", targetBucket));
        }

        if (kmsKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KmsKeyId", kmsKeyId));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCopySnapshotValidateBeforeCall(String sourceSnapshotName, String targetSnapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String targetBucket, String kmsKeyId, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceSnapshotName' is set
        if (sourceSnapshotName == null) {
            throw new ApiException("Missing the required parameter 'sourceSnapshotName' when calling gETCopySnapshot(Async)");
        }

        // verify the required parameter 'targetSnapshotName' is set
        if (targetSnapshotName == null) {
            throw new ApiException("Missing the required parameter 'targetSnapshotName' when calling gETCopySnapshot(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCopySnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCopySnapshot(Async)");
        }

        return gETCopySnapshotCall(sourceSnapshotName, targetSnapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targetBucket, kmsKeyId, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Makes a copy of an existing snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Users or groups that have permissions to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation. For more information about using IAM to control the use of ElastiCache operations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\&quot;&gt;Exporting Snapshots&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html\&quot;&gt;Authentication &amp;amp; Access Control&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You could receive the following error messages.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Error Messages&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is outside of the region.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s does not exist.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is not owned by the authenticated user.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The authenticated user does not have sufficient permissions to perform the desired activity.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Contact your system administrator to get the needed permissions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s already contains an object with key %s.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Give the &lt;code&gt;TargetSnapshotName&lt;/code&gt; a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for &lt;code&gt;TargetSnapshotName&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add List and Read permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add Upload/Delete permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add View Permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param sourceSnapshotName The name of an existing snapshot from which to make a copy. (required)
     * @param targetSnapshotName A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param targetBucket &lt;p&gt;The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.&lt;/p&gt; &lt;p&gt;When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the &lt;i&gt;Amazon ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\&quot;&gt;Exporting a Snapshot&lt;/a&gt; in the &lt;i&gt;Amazon ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param kmsKeyId The ID of the KMS key used to encrypt the target snapshot. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return CopySnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CopySnapshotResult gETCopySnapshot(String sourceSnapshotName, String targetSnapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String targetBucket, String kmsKeyId, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CopySnapshotResult> localVarResp = gETCopySnapshotWithHttpInfo(sourceSnapshotName, targetSnapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targetBucket, kmsKeyId, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Makes a copy of an existing snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Users or groups that have permissions to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation. For more information about using IAM to control the use of ElastiCache operations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\&quot;&gt;Exporting Snapshots&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html\&quot;&gt;Authentication &amp;amp; Access Control&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You could receive the following error messages.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Error Messages&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is outside of the region.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s does not exist.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is not owned by the authenticated user.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The authenticated user does not have sufficient permissions to perform the desired activity.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Contact your system administrator to get the needed permissions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s already contains an object with key %s.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Give the &lt;code&gt;TargetSnapshotName&lt;/code&gt; a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for &lt;code&gt;TargetSnapshotName&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add List and Read permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add Upload/Delete permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add View Permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param sourceSnapshotName The name of an existing snapshot from which to make a copy. (required)
     * @param targetSnapshotName A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param targetBucket &lt;p&gt;The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.&lt;/p&gt; &lt;p&gt;When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the &lt;i&gt;Amazon ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\&quot;&gt;Exporting a Snapshot&lt;/a&gt; in the &lt;i&gt;Amazon ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param kmsKeyId The ID of the KMS key used to encrypt the target snapshot. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return ApiResponse&lt;CopySnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopySnapshotResult> gETCopySnapshotWithHttpInfo(String sourceSnapshotName, String targetSnapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String targetBucket, String kmsKeyId, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCopySnapshotValidateBeforeCall(sourceSnapshotName, targetSnapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targetBucket, kmsKeyId, tags, null);
        Type localVarReturnType = new TypeToken<CopySnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Makes a copy of an existing snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Users or groups that have permissions to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation. For more information about using IAM to control the use of ElastiCache operations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\&quot;&gt;Exporting Snapshots&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html\&quot;&gt;Authentication &amp;amp; Access Control&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You could receive the following error messages.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Error Messages&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is outside of the region.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s does not exist.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is not owned by the authenticated user.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The authenticated user does not have sufficient permissions to perform the desired activity.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Contact your system administrator to get the needed permissions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s already contains an object with key %s.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Give the &lt;code&gt;TargetSnapshotName&lt;/code&gt; a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for &lt;code&gt;TargetSnapshotName&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add List and Read permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add Upload/Delete permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add View Permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param sourceSnapshotName The name of an existing snapshot from which to make a copy. (required)
     * @param targetSnapshotName A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param targetBucket &lt;p&gt;The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access.&lt;/p&gt; &lt;p&gt;When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the &lt;i&gt;Amazon ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\&quot;&gt;Exporting a Snapshot&lt;/a&gt; in the &lt;i&gt;Amazon ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; (optional)
     * @param kmsKeyId The ID of the KMS key used to encrypt the target snapshot. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCopySnapshotAsync(String sourceSnapshotName, String targetSnapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String targetBucket, String kmsKeyId, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CopySnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCopySnapshotValidateBeforeCall(sourceSnapshotName, targetSnapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targetBucket, kmsKeyId, tags, _callback);
        Type localVarReturnType = new TypeToken<CopySnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateCacheCluster
     * @param cacheClusterId &lt;p&gt;The node group (shard) identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Constraints:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A name must contain from 1 to 50 alphanumeric characters or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A name cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId &lt;p&gt;The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.&lt;/p&gt; &lt;p&gt;If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param azMode &lt;p&gt;Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster&#39;s region.&lt;/p&gt; &lt;p&gt;This parameter is only supported for Memcached clusters.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;AZMode&lt;/code&gt; and &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt; are not specified, ElastiCache assumes &lt;code&gt;single-az&lt;/code&gt; mode.&lt;/p&gt; (optional)
     * @param preferredAvailabilityZone &lt;p&gt;The EC2 Availability Zone in which the cluster is created.&lt;/p&gt; &lt;p&gt;All nodes belonging to this cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Default: System chosen Availability Zone.&lt;/p&gt; (optional)
     * @param preferredAvailabilityZones &lt;p&gt;A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.&lt;/p&gt; &lt;p&gt;This option is only supported on Memcached.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.&lt;/p&gt; &lt;p&gt;The number of Availability Zones listed must equal the value of &lt;code&gt;NumCacheNodes&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;If you want all the nodes in the same Availability Zone, use &lt;code&gt;PreferredAvailabilityZone&lt;/code&gt; instead, or repeat the Availability Zone multiple times in the list.&lt;/p&gt; &lt;p&gt;Default: System chosen Availability Zones.&lt;/p&gt; (optional)
     * @param numCacheNodes &lt;p&gt;The initial number of cache nodes that the cluster has.&lt;/p&gt; &lt;p&gt;For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.&lt;/p&gt; &lt;p&gt;If you need more than 40 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at &lt;a href&#x3D;\&quot;http://aws.amazon.com/contact-us/elasticache-node-limit-request/\&quot;&gt;http://aws.amazon.com/contact-us/elasticache-node-limit-request/&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param cacheNodeType &lt;p&gt;The compute and memory capacity of the nodes in the node group (shard).&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param engine &lt;p&gt;The name of the cache engine to be used for this cluster.&lt;/p&gt; &lt;p&gt;Valid values for this parameter are: &lt;code&gt;memcached&lt;/code&gt; | &lt;code&gt;redis&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param cacheParameterGroupName The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has &lt;code&gt;cluster-enabled&#x3D;&#39;yes&#39;&lt;/code&gt; when creating a cluster. (optional)
     * @param cacheSubnetGroupName &lt;p&gt;The name of the subnet group to be used for the cluster.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you&#39;re going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html\&quot;&gt;Subnets and Subnet Groups&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param cacheSecurityGroupNames &lt;p&gt;A list of security group names to associate with this cluster.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param securityGroupIds &lt;p&gt;One or more VPC security groups associated with the cluster.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param tags A list of tags to be added to this resource. (optional)
     * @param snapshotArns &lt;p&gt;A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Example of an Amazon S3 ARN: &lt;code&gt;arn:aws:s3:::my_bucket/snapshot1.rdb&lt;/code&gt; &lt;/p&gt; (optional)
     * @param snapshotName &lt;p&gt;The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to &lt;code&gt;restoring&lt;/code&gt; while the new node group (shard) is being created.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param preferredMaintenanceWindow Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.  (optional)
     * @param port The port number on which each of the cache nodes accepts connections. (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be the same as the cluster owner.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: 0 (i.e., automatic backups are disabled for this cache cluster).&lt;/p&gt; (optional)
     * @param snapshotWindow &lt;p&gt;The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;05:00-09:00&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param authToken &lt;p&gt; &lt;b&gt;Reserved parameter.&lt;/b&gt; The password used to access a password protected server.&lt;/p&gt; &lt;p&gt;Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The only permitted printable special characters are !, &amp;amp;, #, $, ^, &amp;lt;, &amp;gt;, and -. Other printable special characters cannot be used in the AUTH token.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH password&lt;/a&gt; at http://redis.io/commands/AUTH.&lt;/p&gt; (optional)
     * @param outpostMode Specifies whether the nodes in the cluster are created in a single outpost or across multiple outposts. (optional)
     * @param preferredOutpostArn The outpost ARN in which the cache cluster is created. (optional)
     * @param preferredOutpostArns The outpost ARNs in which the cache cluster is created. (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs.  (optional)
     * @param transitEncryptionEnabled &lt;p&gt;A flag that enables in-transit encryption when set to true.&lt;/p&gt; &lt;p&gt; Only available when creating a cache cluster in an Amazon VPC using Memcached version 1.6.12 or later.&lt;/p&gt; (optional)
     * @param networkType Must be either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt; | &lt;code&gt;dual_stack&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;.  (optional)
     * @param ipDiscovery The network type you choose when modifying a cluster, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateCacheClusterCall(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String azMode, String preferredAvailabilityZone, List<String> preferredAvailabilityZones, Integer numCacheNodes, String cacheNodeType, String engine, String engineVersion, String cacheParameterGroupName, String cacheSubnetGroupName, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, List<String> snapshotArns, String snapshotName, String preferredMaintenanceWindow, Integer port, String notificationTopicArn, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String authToken, String outpostMode, String preferredOutpostArn, List<String> preferredOutpostArns, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, Boolean transitEncryptionEnabled, String networkType, String ipDiscovery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateCacheCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheClusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheClusterId", cacheClusterId));
        }

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (azMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AZMode", azMode));
        }

        if (preferredAvailabilityZone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredAvailabilityZone", preferredAvailabilityZone));
        }

        if (preferredAvailabilityZones != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "PreferredAvailabilityZones", preferredAvailabilityZones));
        }

        if (numCacheNodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NumCacheNodes", numCacheNodes));
        }

        if (cacheNodeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheNodeType", cacheNodeType));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (cacheParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupName", cacheParameterGroupName));
        }

        if (cacheSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSubnetGroupName", cacheSubnetGroupName));
        }

        if (cacheSecurityGroupNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "CacheSecurityGroupNames", cacheSecurityGroupNames));
        }

        if (securityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SecurityGroupIds", securityGroupIds));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (snapshotArns != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SnapshotArns", snapshotArns));
        }

        if (snapshotName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotName", snapshotName));
        }

        if (preferredMaintenanceWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredMaintenanceWindow", preferredMaintenanceWindow));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (notificationTopicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NotificationTopicArn", notificationTopicArn));
        }

        if (autoMinorVersionUpgrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoMinorVersionUpgrade", autoMinorVersionUpgrade));
        }

        if (snapshotRetentionLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotRetentionLimit", snapshotRetentionLimit));
        }

        if (snapshotWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotWindow", snapshotWindow));
        }

        if (authToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AuthToken", authToken));
        }

        if (outpostMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OutpostMode", outpostMode));
        }

        if (preferredOutpostArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredOutpostArn", preferredOutpostArn));
        }

        if (preferredOutpostArns != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "PreferredOutpostArns", preferredOutpostArns));
        }

        if (logDeliveryConfigurations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LogDeliveryConfigurations", logDeliveryConfigurations));
        }

        if (transitEncryptionEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransitEncryptionEnabled", transitEncryptionEnabled));
        }

        if (networkType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NetworkType", networkType));
        }

        if (ipDiscovery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IpDiscovery", ipDiscovery));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateCacheClusterValidateBeforeCall(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String azMode, String preferredAvailabilityZone, List<String> preferredAvailabilityZones, Integer numCacheNodes, String cacheNodeType, String engine, String engineVersion, String cacheParameterGroupName, String cacheSubnetGroupName, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, List<String> snapshotArns, String snapshotName, String preferredMaintenanceWindow, Integer port, String notificationTopicArn, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String authToken, String outpostMode, String preferredOutpostArn, List<String> preferredOutpostArns, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, Boolean transitEncryptionEnabled, String networkType, String ipDiscovery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheClusterId' is set
        if (cacheClusterId == null) {
            throw new ApiException("Missing the required parameter 'cacheClusterId' when calling gETCreateCacheCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateCacheCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateCacheCluster(Async)");
        }

        return gETCreateCacheClusterCall(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, azMode, preferredAvailabilityZone, preferredAvailabilityZones, numCacheNodes, cacheNodeType, engine, engineVersion, cacheParameterGroupName, cacheSubnetGroupName, cacheSecurityGroupNames, securityGroupIds, tags, snapshotArns, snapshotName, preferredMaintenanceWindow, port, notificationTopicArn, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, authToken, outpostMode, preferredOutpostArn, preferredOutpostArns, logDeliveryConfigurations, transitEncryptionEnabled, networkType, ipDiscovery, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.&lt;/p&gt; &lt;p&gt;This operation is not supported for Redis (cluster mode enabled) clusters.&lt;/p&gt;
     * @param cacheClusterId &lt;p&gt;The node group (shard) identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Constraints:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A name must contain from 1 to 50 alphanumeric characters or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A name cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId &lt;p&gt;The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.&lt;/p&gt; &lt;p&gt;If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param azMode &lt;p&gt;Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster&#39;s region.&lt;/p&gt; &lt;p&gt;This parameter is only supported for Memcached clusters.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;AZMode&lt;/code&gt; and &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt; are not specified, ElastiCache assumes &lt;code&gt;single-az&lt;/code&gt; mode.&lt;/p&gt; (optional)
     * @param preferredAvailabilityZone &lt;p&gt;The EC2 Availability Zone in which the cluster is created.&lt;/p&gt; &lt;p&gt;All nodes belonging to this cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Default: System chosen Availability Zone.&lt;/p&gt; (optional)
     * @param preferredAvailabilityZones &lt;p&gt;A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.&lt;/p&gt; &lt;p&gt;This option is only supported on Memcached.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.&lt;/p&gt; &lt;p&gt;The number of Availability Zones listed must equal the value of &lt;code&gt;NumCacheNodes&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;If you want all the nodes in the same Availability Zone, use &lt;code&gt;PreferredAvailabilityZone&lt;/code&gt; instead, or repeat the Availability Zone multiple times in the list.&lt;/p&gt; &lt;p&gt;Default: System chosen Availability Zones.&lt;/p&gt; (optional)
     * @param numCacheNodes &lt;p&gt;The initial number of cache nodes that the cluster has.&lt;/p&gt; &lt;p&gt;For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.&lt;/p&gt; &lt;p&gt;If you need more than 40 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at &lt;a href&#x3D;\&quot;http://aws.amazon.com/contact-us/elasticache-node-limit-request/\&quot;&gt;http://aws.amazon.com/contact-us/elasticache-node-limit-request/&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param cacheNodeType &lt;p&gt;The compute and memory capacity of the nodes in the node group (shard).&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param engine &lt;p&gt;The name of the cache engine to be used for this cluster.&lt;/p&gt; &lt;p&gt;Valid values for this parameter are: &lt;code&gt;memcached&lt;/code&gt; | &lt;code&gt;redis&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param cacheParameterGroupName The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has &lt;code&gt;cluster-enabled&#x3D;&#39;yes&#39;&lt;/code&gt; when creating a cluster. (optional)
     * @param cacheSubnetGroupName &lt;p&gt;The name of the subnet group to be used for the cluster.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you&#39;re going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html\&quot;&gt;Subnets and Subnet Groups&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param cacheSecurityGroupNames &lt;p&gt;A list of security group names to associate with this cluster.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param securityGroupIds &lt;p&gt;One or more VPC security groups associated with the cluster.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param tags A list of tags to be added to this resource. (optional)
     * @param snapshotArns &lt;p&gt;A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Example of an Amazon S3 ARN: &lt;code&gt;arn:aws:s3:::my_bucket/snapshot1.rdb&lt;/code&gt; &lt;/p&gt; (optional)
     * @param snapshotName &lt;p&gt;The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to &lt;code&gt;restoring&lt;/code&gt; while the new node group (shard) is being created.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param preferredMaintenanceWindow Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.  (optional)
     * @param port The port number on which each of the cache nodes accepts connections. (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be the same as the cluster owner.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: 0 (i.e., automatic backups are disabled for this cache cluster).&lt;/p&gt; (optional)
     * @param snapshotWindow &lt;p&gt;The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;05:00-09:00&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param authToken &lt;p&gt; &lt;b&gt;Reserved parameter.&lt;/b&gt; The password used to access a password protected server.&lt;/p&gt; &lt;p&gt;Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The only permitted printable special characters are !, &amp;amp;, #, $, ^, &amp;lt;, &amp;gt;, and -. Other printable special characters cannot be used in the AUTH token.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH password&lt;/a&gt; at http://redis.io/commands/AUTH.&lt;/p&gt; (optional)
     * @param outpostMode Specifies whether the nodes in the cluster are created in a single outpost or across multiple outposts. (optional)
     * @param preferredOutpostArn The outpost ARN in which the cache cluster is created. (optional)
     * @param preferredOutpostArns The outpost ARNs in which the cache cluster is created. (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs.  (optional)
     * @param transitEncryptionEnabled &lt;p&gt;A flag that enables in-transit encryption when set to true.&lt;/p&gt; &lt;p&gt; Only available when creating a cache cluster in an Amazon VPC using Memcached version 1.6.12 or later.&lt;/p&gt; (optional)
     * @param networkType Must be either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt; | &lt;code&gt;dual_stack&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;.  (optional)
     * @param ipDiscovery The network type you choose when modifying a cluster, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @return CreateCacheClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CreateCacheClusterResult gETCreateCacheCluster(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String azMode, String preferredAvailabilityZone, List<String> preferredAvailabilityZones, Integer numCacheNodes, String cacheNodeType, String engine, String engineVersion, String cacheParameterGroupName, String cacheSubnetGroupName, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, List<String> snapshotArns, String snapshotName, String preferredMaintenanceWindow, Integer port, String notificationTopicArn, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String authToken, String outpostMode, String preferredOutpostArn, List<String> preferredOutpostArns, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, Boolean transitEncryptionEnabled, String networkType, String ipDiscovery) throws ApiException {
        ApiResponse<CreateCacheClusterResult> localVarResp = gETCreateCacheClusterWithHttpInfo(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, azMode, preferredAvailabilityZone, preferredAvailabilityZones, numCacheNodes, cacheNodeType, engine, engineVersion, cacheParameterGroupName, cacheSubnetGroupName, cacheSecurityGroupNames, securityGroupIds, tags, snapshotArns, snapshotName, preferredMaintenanceWindow, port, notificationTopicArn, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, authToken, outpostMode, preferredOutpostArn, preferredOutpostArns, logDeliveryConfigurations, transitEncryptionEnabled, networkType, ipDiscovery);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.&lt;/p&gt; &lt;p&gt;This operation is not supported for Redis (cluster mode enabled) clusters.&lt;/p&gt;
     * @param cacheClusterId &lt;p&gt;The node group (shard) identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Constraints:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A name must contain from 1 to 50 alphanumeric characters or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A name cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId &lt;p&gt;The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.&lt;/p&gt; &lt;p&gt;If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param azMode &lt;p&gt;Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster&#39;s region.&lt;/p&gt; &lt;p&gt;This parameter is only supported for Memcached clusters.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;AZMode&lt;/code&gt; and &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt; are not specified, ElastiCache assumes &lt;code&gt;single-az&lt;/code&gt; mode.&lt;/p&gt; (optional)
     * @param preferredAvailabilityZone &lt;p&gt;The EC2 Availability Zone in which the cluster is created.&lt;/p&gt; &lt;p&gt;All nodes belonging to this cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Default: System chosen Availability Zone.&lt;/p&gt; (optional)
     * @param preferredAvailabilityZones &lt;p&gt;A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.&lt;/p&gt; &lt;p&gt;This option is only supported on Memcached.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.&lt;/p&gt; &lt;p&gt;The number of Availability Zones listed must equal the value of &lt;code&gt;NumCacheNodes&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;If you want all the nodes in the same Availability Zone, use &lt;code&gt;PreferredAvailabilityZone&lt;/code&gt; instead, or repeat the Availability Zone multiple times in the list.&lt;/p&gt; &lt;p&gt;Default: System chosen Availability Zones.&lt;/p&gt; (optional)
     * @param numCacheNodes &lt;p&gt;The initial number of cache nodes that the cluster has.&lt;/p&gt; &lt;p&gt;For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.&lt;/p&gt; &lt;p&gt;If you need more than 40 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at &lt;a href&#x3D;\&quot;http://aws.amazon.com/contact-us/elasticache-node-limit-request/\&quot;&gt;http://aws.amazon.com/contact-us/elasticache-node-limit-request/&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param cacheNodeType &lt;p&gt;The compute and memory capacity of the nodes in the node group (shard).&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param engine &lt;p&gt;The name of the cache engine to be used for this cluster.&lt;/p&gt; &lt;p&gt;Valid values for this parameter are: &lt;code&gt;memcached&lt;/code&gt; | &lt;code&gt;redis&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param cacheParameterGroupName The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has &lt;code&gt;cluster-enabled&#x3D;&#39;yes&#39;&lt;/code&gt; when creating a cluster. (optional)
     * @param cacheSubnetGroupName &lt;p&gt;The name of the subnet group to be used for the cluster.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you&#39;re going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html\&quot;&gt;Subnets and Subnet Groups&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param cacheSecurityGroupNames &lt;p&gt;A list of security group names to associate with this cluster.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param securityGroupIds &lt;p&gt;One or more VPC security groups associated with the cluster.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param tags A list of tags to be added to this resource. (optional)
     * @param snapshotArns &lt;p&gt;A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Example of an Amazon S3 ARN: &lt;code&gt;arn:aws:s3:::my_bucket/snapshot1.rdb&lt;/code&gt; &lt;/p&gt; (optional)
     * @param snapshotName &lt;p&gt;The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to &lt;code&gt;restoring&lt;/code&gt; while the new node group (shard) is being created.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param preferredMaintenanceWindow Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.  (optional)
     * @param port The port number on which each of the cache nodes accepts connections. (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be the same as the cluster owner.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: 0 (i.e., automatic backups are disabled for this cache cluster).&lt;/p&gt; (optional)
     * @param snapshotWindow &lt;p&gt;The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;05:00-09:00&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param authToken &lt;p&gt; &lt;b&gt;Reserved parameter.&lt;/b&gt; The password used to access a password protected server.&lt;/p&gt; &lt;p&gt;Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The only permitted printable special characters are !, &amp;amp;, #, $, ^, &amp;lt;, &amp;gt;, and -. Other printable special characters cannot be used in the AUTH token.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH password&lt;/a&gt; at http://redis.io/commands/AUTH.&lt;/p&gt; (optional)
     * @param outpostMode Specifies whether the nodes in the cluster are created in a single outpost or across multiple outposts. (optional)
     * @param preferredOutpostArn The outpost ARN in which the cache cluster is created. (optional)
     * @param preferredOutpostArns The outpost ARNs in which the cache cluster is created. (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs.  (optional)
     * @param transitEncryptionEnabled &lt;p&gt;A flag that enables in-transit encryption when set to true.&lt;/p&gt; &lt;p&gt; Only available when creating a cache cluster in an Amazon VPC using Memcached version 1.6.12 or later.&lt;/p&gt; (optional)
     * @param networkType Must be either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt; | &lt;code&gt;dual_stack&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;.  (optional)
     * @param ipDiscovery The network type you choose when modifying a cluster, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;CreateCacheClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCacheClusterResult> gETCreateCacheClusterWithHttpInfo(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String azMode, String preferredAvailabilityZone, List<String> preferredAvailabilityZones, Integer numCacheNodes, String cacheNodeType, String engine, String engineVersion, String cacheParameterGroupName, String cacheSubnetGroupName, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, List<String> snapshotArns, String snapshotName, String preferredMaintenanceWindow, Integer port, String notificationTopicArn, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String authToken, String outpostMode, String preferredOutpostArn, List<String> preferredOutpostArns, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, Boolean transitEncryptionEnabled, String networkType, String ipDiscovery) throws ApiException {
        okhttp3.Call localVarCall = gETCreateCacheClusterValidateBeforeCall(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, azMode, preferredAvailabilityZone, preferredAvailabilityZones, numCacheNodes, cacheNodeType, engine, engineVersion, cacheParameterGroupName, cacheSubnetGroupName, cacheSecurityGroupNames, securityGroupIds, tags, snapshotArns, snapshotName, preferredMaintenanceWindow, port, notificationTopicArn, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, authToken, outpostMode, preferredOutpostArn, preferredOutpostArns, logDeliveryConfigurations, transitEncryptionEnabled, networkType, ipDiscovery, null);
        Type localVarReturnType = new TypeToken<CreateCacheClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.&lt;/p&gt; &lt;p&gt;This operation is not supported for Redis (cluster mode enabled) clusters.&lt;/p&gt;
     * @param cacheClusterId &lt;p&gt;The node group (shard) identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Constraints:&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A name must contain from 1 to 50 alphanumeric characters or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A name cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId &lt;p&gt;The ID of the replication group to which this cluster should belong. If this parameter is specified, the cluster is added to the specified replication group as a read replica; otherwise, the cluster is a standalone primary that is not part of any replication group.&lt;/p&gt; &lt;p&gt;If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param azMode &lt;p&gt;Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster&#39;s region.&lt;/p&gt; &lt;p&gt;This parameter is only supported for Memcached clusters.&lt;/p&gt; &lt;p&gt;If the &lt;code&gt;AZMode&lt;/code&gt; and &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt; are not specified, ElastiCache assumes &lt;code&gt;single-az&lt;/code&gt; mode.&lt;/p&gt; (optional)
     * @param preferredAvailabilityZone &lt;p&gt;The EC2 Availability Zone in which the cluster is created.&lt;/p&gt; &lt;p&gt;All nodes belonging to this cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Default: System chosen Availability Zone.&lt;/p&gt; (optional)
     * @param preferredAvailabilityZones &lt;p&gt;A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important.&lt;/p&gt; &lt;p&gt;This option is only supported on Memcached.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you are creating your cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group.&lt;/p&gt; &lt;p&gt;The number of Availability Zones listed must equal the value of &lt;code&gt;NumCacheNodes&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;If you want all the nodes in the same Availability Zone, use &lt;code&gt;PreferredAvailabilityZone&lt;/code&gt; instead, or repeat the Availability Zone multiple times in the list.&lt;/p&gt; &lt;p&gt;Default: System chosen Availability Zones.&lt;/p&gt; (optional)
     * @param numCacheNodes &lt;p&gt;The initial number of cache nodes that the cluster has.&lt;/p&gt; &lt;p&gt;For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.&lt;/p&gt; &lt;p&gt;If you need more than 40 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at &lt;a href&#x3D;\&quot;http://aws.amazon.com/contact-us/elasticache-node-limit-request/\&quot;&gt;http://aws.amazon.com/contact-us/elasticache-node-limit-request/&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param cacheNodeType &lt;p&gt;The compute and memory capacity of the nodes in the node group (shard).&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param engine &lt;p&gt;The name of the cache engine to be used for this cluster.&lt;/p&gt; &lt;p&gt;Valid values for this parameter are: &lt;code&gt;memcached&lt;/code&gt; | &lt;code&gt;redis&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The version number of the cache engine to be used for this cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param cacheParameterGroupName The name of the parameter group to associate with this cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has &lt;code&gt;cluster-enabled&#x3D;&#39;yes&#39;&lt;/code&gt; when creating a cluster. (optional)
     * @param cacheSubnetGroupName &lt;p&gt;The name of the subnet group to be used for the cluster.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you&#39;re going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html\&quot;&gt;Subnets and Subnet Groups&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param cacheSecurityGroupNames &lt;p&gt;A list of security group names to associate with this cluster.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param securityGroupIds &lt;p&gt;One or more VPC security groups associated with the cluster.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param tags A list of tags to be added to this resource. (optional)
     * @param snapshotArns &lt;p&gt;A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Example of an Amazon S3 ARN: &lt;code&gt;arn:aws:s3:::my_bucket/snapshot1.rdb&lt;/code&gt; &lt;/p&gt; (optional)
     * @param snapshotName &lt;p&gt;The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to &lt;code&gt;restoring&lt;/code&gt; while the new node group (shard) is being created.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param preferredMaintenanceWindow Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.  (optional)
     * @param port The port number on which each of the cache nodes accepts connections. (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be the same as the cluster owner.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: 0 (i.e., automatic backups are disabled for this cache cluster).&lt;/p&gt; (optional)
     * @param snapshotWindow &lt;p&gt;The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;05:00-09:00&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This parameter is only valid if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param authToken &lt;p&gt; &lt;b&gt;Reserved parameter.&lt;/b&gt; The password used to access a password protected server.&lt;/p&gt; &lt;p&gt;Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The only permitted printable special characters are !, &amp;amp;, #, $, ^, &amp;lt;, &amp;gt;, and -. Other printable special characters cannot be used in the AUTH token.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH password&lt;/a&gt; at http://redis.io/commands/AUTH.&lt;/p&gt; (optional)
     * @param outpostMode Specifies whether the nodes in the cluster are created in a single outpost or across multiple outposts. (optional)
     * @param preferredOutpostArn The outpost ARN in which the cache cluster is created. (optional)
     * @param preferredOutpostArns The outpost ARNs in which the cache cluster is created. (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs.  (optional)
     * @param transitEncryptionEnabled &lt;p&gt;A flag that enables in-transit encryption when set to true.&lt;/p&gt; &lt;p&gt; Only available when creating a cache cluster in an Amazon VPC using Memcached version 1.6.12 or later.&lt;/p&gt; (optional)
     * @param networkType Must be either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt; | &lt;code&gt;dual_stack&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;.  (optional)
     * @param ipDiscovery The network type you choose when modifying a cluster, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateCacheClusterAsync(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String azMode, String preferredAvailabilityZone, List<String> preferredAvailabilityZones, Integer numCacheNodes, String cacheNodeType, String engine, String engineVersion, String cacheParameterGroupName, String cacheSubnetGroupName, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, List<String> snapshotArns, String snapshotName, String preferredMaintenanceWindow, Integer port, String notificationTopicArn, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String authToken, String outpostMode, String preferredOutpostArn, List<String> preferredOutpostArns, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, Boolean transitEncryptionEnabled, String networkType, String ipDiscovery, final ApiCallback<CreateCacheClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateCacheClusterValidateBeforeCall(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, azMode, preferredAvailabilityZone, preferredAvailabilityZones, numCacheNodes, cacheNodeType, engine, engineVersion, cacheParameterGroupName, cacheSubnetGroupName, cacheSecurityGroupNames, securityGroupIds, tags, snapshotArns, snapshotName, preferredMaintenanceWindow, port, notificationTopicArn, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, authToken, outpostMode, preferredOutpostArn, preferredOutpostArns, logDeliveryConfigurations, transitEncryptionEnabled, networkType, ipDiscovery, _callback);
        Type localVarReturnType = new TypeToken<CreateCacheClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateCacheParameterGroup
     * @param cacheParameterGroupName A user-specified name for the cache parameter group. (required)
     * @param cacheParameterGroupFamily &lt;p&gt;The name of the cache parameter group family that the cache parameter group can be used with.&lt;/p&gt; &lt;p&gt;Valid values are: &lt;code&gt;memcached1.4&lt;/code&gt; | &lt;code&gt;memcached1.5&lt;/code&gt; | &lt;code&gt;memcached1.6&lt;/code&gt; | &lt;code&gt;redis2.6&lt;/code&gt; | &lt;code&gt;redis2.8&lt;/code&gt; | &lt;code&gt;redis3.2&lt;/code&gt; | &lt;code&gt;redis4.0&lt;/code&gt; | &lt;code&gt;redis5.0&lt;/code&gt; | &lt;code&gt;redis6.x&lt;/code&gt; &lt;/p&gt; (required)
     * @param description A user-specified description for the cache parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateCacheParameterGroupCall(String cacheParameterGroupName, String cacheParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateCacheParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupName", cacheParameterGroupName));
        }

        if (cacheParameterGroupFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupFamily", cacheParameterGroupFamily));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateCacheParameterGroupValidateBeforeCall(String cacheParameterGroupName, String cacheParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheParameterGroupName' is set
        if (cacheParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'cacheParameterGroupName' when calling gETCreateCacheParameterGroup(Async)");
        }

        // verify the required parameter 'cacheParameterGroupFamily' is set
        if (cacheParameterGroupFamily == null) {
            throw new ApiException("Missing the required parameter 'cacheParameterGroupFamily' when calling gETCreateCacheParameterGroup(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling gETCreateCacheParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateCacheParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateCacheParameterGroup(Async)");
        }

        return gETCreateCacheParameterGroupCall(cacheParameterGroupName, cacheParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.&lt;/p&gt; &lt;p&gt;A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html\&quot;&gt;ModifyCacheParameterGroup&lt;/a&gt; in the ElastiCache API Reference.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html\&quot;&gt;Parameters and Parameter Groups&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param cacheParameterGroupName A user-specified name for the cache parameter group. (required)
     * @param cacheParameterGroupFamily &lt;p&gt;The name of the cache parameter group family that the cache parameter group can be used with.&lt;/p&gt; &lt;p&gt;Valid values are: &lt;code&gt;memcached1.4&lt;/code&gt; | &lt;code&gt;memcached1.5&lt;/code&gt; | &lt;code&gt;memcached1.6&lt;/code&gt; | &lt;code&gt;redis2.6&lt;/code&gt; | &lt;code&gt;redis2.8&lt;/code&gt; | &lt;code&gt;redis3.2&lt;/code&gt; | &lt;code&gt;redis4.0&lt;/code&gt; | &lt;code&gt;redis5.0&lt;/code&gt; | &lt;code&gt;redis6.x&lt;/code&gt; &lt;/p&gt; (required)
     * @param description A user-specified description for the cache parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return CreateCacheParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CreateCacheParameterGroupResult gETCreateCacheParameterGroup(String cacheParameterGroupName, String cacheParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateCacheParameterGroupResult> localVarResp = gETCreateCacheParameterGroupWithHttpInfo(cacheParameterGroupName, cacheParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.&lt;/p&gt; &lt;p&gt;A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html\&quot;&gt;ModifyCacheParameterGroup&lt;/a&gt; in the ElastiCache API Reference.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html\&quot;&gt;Parameters and Parameter Groups&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param cacheParameterGroupName A user-specified name for the cache parameter group. (required)
     * @param cacheParameterGroupFamily &lt;p&gt;The name of the cache parameter group family that the cache parameter group can be used with.&lt;/p&gt; &lt;p&gt;Valid values are: &lt;code&gt;memcached1.4&lt;/code&gt; | &lt;code&gt;memcached1.5&lt;/code&gt; | &lt;code&gt;memcached1.6&lt;/code&gt; | &lt;code&gt;redis2.6&lt;/code&gt; | &lt;code&gt;redis2.8&lt;/code&gt; | &lt;code&gt;redis3.2&lt;/code&gt; | &lt;code&gt;redis4.0&lt;/code&gt; | &lt;code&gt;redis5.0&lt;/code&gt; | &lt;code&gt;redis6.x&lt;/code&gt; &lt;/p&gt; (required)
     * @param description A user-specified description for the cache parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return ApiResponse&lt;CreateCacheParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCacheParameterGroupResult> gETCreateCacheParameterGroupWithHttpInfo(String cacheParameterGroupName, String cacheParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateCacheParameterGroupValidateBeforeCall(cacheParameterGroupName, cacheParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CreateCacheParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.&lt;/p&gt; &lt;p&gt;A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html\&quot;&gt;ModifyCacheParameterGroup&lt;/a&gt; in the ElastiCache API Reference.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html\&quot;&gt;Parameters and Parameter Groups&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param cacheParameterGroupName A user-specified name for the cache parameter group. (required)
     * @param cacheParameterGroupFamily &lt;p&gt;The name of the cache parameter group family that the cache parameter group can be used with.&lt;/p&gt; &lt;p&gt;Valid values are: &lt;code&gt;memcached1.4&lt;/code&gt; | &lt;code&gt;memcached1.5&lt;/code&gt; | &lt;code&gt;memcached1.6&lt;/code&gt; | &lt;code&gt;redis2.6&lt;/code&gt; | &lt;code&gt;redis2.8&lt;/code&gt; | &lt;code&gt;redis3.2&lt;/code&gt; | &lt;code&gt;redis4.0&lt;/code&gt; | &lt;code&gt;redis5.0&lt;/code&gt; | &lt;code&gt;redis6.x&lt;/code&gt; &lt;/p&gt; (required)
     * @param description A user-specified description for the cache parameter group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateCacheParameterGroupAsync(String cacheParameterGroupName, String cacheParameterGroupFamily, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateCacheParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateCacheParameterGroupValidateBeforeCall(cacheParameterGroupName, cacheParameterGroupFamily, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateCacheParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateCacheSecurityGroup
     * @param cacheSecurityGroupName &lt;p&gt;A name for the cache security group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word \&quot;Default\&quot;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mysecuritygroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param description A description for the cache security group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateCacheSecurityGroupCall(String cacheSecurityGroupName, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateCacheSecurityGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheSecurityGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSecurityGroupName", cacheSecurityGroupName));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Description", description));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateCacheSecurityGroupValidateBeforeCall(String cacheSecurityGroupName, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheSecurityGroupName' is set
        if (cacheSecurityGroupName == null) {
            throw new ApiException("Missing the required parameter 'cacheSecurityGroupName' when calling gETCreateCacheSecurityGroup(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling gETCreateCacheSecurityGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateCacheSecurityGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateCacheSecurityGroup(Async)");
        }

        return gETCreateCacheSecurityGroupCall(cacheSecurityGroupName, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new cache security group. Use a cache security group to control access to one or more clusters.&lt;/p&gt; &lt;p&gt;Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html\&quot;&gt;CreateCacheSubnetGroup&lt;/a&gt;.&lt;/p&gt;
     * @param cacheSecurityGroupName &lt;p&gt;A name for the cache security group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word \&quot;Default\&quot;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mysecuritygroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param description A description for the cache security group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return CreateCacheSecurityGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CreateCacheSecurityGroupResult gETCreateCacheSecurityGroup(String cacheSecurityGroupName, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateCacheSecurityGroupResult> localVarResp = gETCreateCacheSecurityGroupWithHttpInfo(cacheSecurityGroupName, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new cache security group. Use a cache security group to control access to one or more clusters.&lt;/p&gt; &lt;p&gt;Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html\&quot;&gt;CreateCacheSubnetGroup&lt;/a&gt;.&lt;/p&gt;
     * @param cacheSecurityGroupName &lt;p&gt;A name for the cache security group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word \&quot;Default\&quot;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mysecuritygroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param description A description for the cache security group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return ApiResponse&lt;CreateCacheSecurityGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCacheSecurityGroupResult> gETCreateCacheSecurityGroupWithHttpInfo(String cacheSecurityGroupName, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateCacheSecurityGroupValidateBeforeCall(cacheSecurityGroupName, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CreateCacheSecurityGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new cache security group. Use a cache security group to control access to one or more clusters.&lt;/p&gt; &lt;p&gt;Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html\&quot;&gt;CreateCacheSubnetGroup&lt;/a&gt;.&lt;/p&gt;
     * @param cacheSecurityGroupName &lt;p&gt;A name for the cache security group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word \&quot;Default\&quot;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mysecuritygroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param description A description for the cache security group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateCacheSecurityGroupAsync(String cacheSecurityGroupName, String description, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateCacheSecurityGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateCacheSecurityGroupValidateBeforeCall(cacheSecurityGroupName, description, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateCacheSecurityGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateCacheSubnetGroup
     * @param cacheSubnetGroupName &lt;p&gt;A name for the cache subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters or hyphens.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mysubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param cacheSubnetGroupDescription A description for the cache subnet group. (required)
     * @param subnetIds A list of VPC subnet IDs for the cache subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateCacheSubnetGroupCall(String cacheSubnetGroupName, String cacheSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateCacheSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSubnetGroupName", cacheSubnetGroupName));
        }

        if (cacheSubnetGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSubnetGroupDescription", cacheSubnetGroupDescription));
        }

        if (subnetIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SubnetIds", subnetIds));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateCacheSubnetGroupValidateBeforeCall(String cacheSubnetGroupName, String cacheSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheSubnetGroupName' is set
        if (cacheSubnetGroupName == null) {
            throw new ApiException("Missing the required parameter 'cacheSubnetGroupName' when calling gETCreateCacheSubnetGroup(Async)");
        }

        // verify the required parameter 'cacheSubnetGroupDescription' is set
        if (cacheSubnetGroupDescription == null) {
            throw new ApiException("Missing the required parameter 'cacheSubnetGroupDescription' when calling gETCreateCacheSubnetGroup(Async)");
        }

        // verify the required parameter 'subnetIds' is set
        if (subnetIds == null) {
            throw new ApiException("Missing the required parameter 'subnetIds' when calling gETCreateCacheSubnetGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateCacheSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateCacheSubnetGroup(Async)");
        }

        return gETCreateCacheSubnetGroupCall(cacheSubnetGroupName, cacheSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new cache subnet group.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt;
     * @param cacheSubnetGroupName &lt;p&gt;A name for the cache subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters or hyphens.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mysubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param cacheSubnetGroupDescription A description for the cache subnet group. (required)
     * @param subnetIds A list of VPC subnet IDs for the cache subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return CreateCacheSubnetGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateCacheSubnetGroupResult gETCreateCacheSubnetGroup(String cacheSubnetGroupName, String cacheSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateCacheSubnetGroupResult> localVarResp = gETCreateCacheSubnetGroupWithHttpInfo(cacheSubnetGroupName, cacheSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new cache subnet group.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt;
     * @param cacheSubnetGroupName &lt;p&gt;A name for the cache subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters or hyphens.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mysubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param cacheSubnetGroupDescription A description for the cache subnet group. (required)
     * @param subnetIds A list of VPC subnet IDs for the cache subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return ApiResponse&lt;CreateCacheSubnetGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCacheSubnetGroupResult> gETCreateCacheSubnetGroupWithHttpInfo(String cacheSubnetGroupName, String cacheSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateCacheSubnetGroupValidateBeforeCall(cacheSubnetGroupName, cacheSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, null);
        Type localVarReturnType = new TypeToken<CreateCacheSubnetGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new cache subnet group.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt;
     * @param cacheSubnetGroupName &lt;p&gt;A name for the cache subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters or hyphens.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mysubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param cacheSubnetGroupDescription A description for the cache subnet group. (required)
     * @param subnetIds A list of VPC subnet IDs for the cache subnet group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateCacheSubnetGroupAsync(String cacheSubnetGroupName, String cacheSubnetGroupDescription, List<String> subnetIds, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateCacheSubnetGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateCacheSubnetGroupValidateBeforeCall(cacheSubnetGroupName, cacheSubnetGroupDescription, subnetIds, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateCacheSubnetGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateGlobalReplicationGroup
     * @param globalReplicationGroupIdSuffix &lt;p&gt;The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with \&quot;dsdfu\&quot; along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. &lt;/p&gt; &lt;p&gt;For a full list of Amazon Regions and their respective Global datastore iD prefixes, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html\&quot;&gt;Using the Amazon CLI with Global datastores &lt;/a&gt;.&lt;/p&gt; (required)
     * @param primaryReplicationGroupId The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalReplicationGroupDescription Provides details of the Global datastore (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> GlobalReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateGlobalReplicationGroupCall(String globalReplicationGroupIdSuffix, String primaryReplicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalReplicationGroupIdSuffix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalReplicationGroupIdSuffix", globalReplicationGroupIdSuffix));
        }

        if (globalReplicationGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalReplicationGroupDescription", globalReplicationGroupDescription));
        }

        if (primaryReplicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PrimaryReplicationGroupId", primaryReplicationGroupId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateGlobalReplicationGroupValidateBeforeCall(String globalReplicationGroupIdSuffix, String primaryReplicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalReplicationGroupIdSuffix' is set
        if (globalReplicationGroupIdSuffix == null) {
            throw new ApiException("Missing the required parameter 'globalReplicationGroupIdSuffix' when calling gETCreateGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'primaryReplicationGroupId' is set
        if (primaryReplicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'primaryReplicationGroupId' when calling gETCreateGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateGlobalReplicationGroup(Async)");
        }

        return gETCreateGlobalReplicationGroupCall(globalReplicationGroupIdSuffix, primaryReplicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupDescription, _callback);

    }

    /**
     * 
     * &lt;p&gt;Global Datastore for Redis offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis, you can create cross-region read replica clusters for ElastiCache for Redis to enable low-latency reads and disaster recovery across regions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html\&quot;&gt;Replication Across Regions Using Global Datastore&lt;/a&gt;. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;GlobalReplicationGroupIdSuffix&lt;/b&gt; is the name of the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;PrimaryReplicationGroupId&lt;/b&gt; represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param globalReplicationGroupIdSuffix &lt;p&gt;The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with \&quot;dsdfu\&quot; along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. &lt;/p&gt; &lt;p&gt;For a full list of Amazon Regions and their respective Global datastore iD prefixes, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html\&quot;&gt;Using the Amazon CLI with Global datastores &lt;/a&gt;.&lt;/p&gt; (required)
     * @param primaryReplicationGroupId The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalReplicationGroupDescription Provides details of the Global datastore (optional)
     * @return CreateGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> GlobalReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public CreateGlobalReplicationGroupResult gETCreateGlobalReplicationGroup(String globalReplicationGroupIdSuffix, String primaryReplicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupDescription) throws ApiException {
        ApiResponse<CreateGlobalReplicationGroupResult> localVarResp = gETCreateGlobalReplicationGroupWithHttpInfo(globalReplicationGroupIdSuffix, primaryReplicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupDescription);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Global Datastore for Redis offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis, you can create cross-region read replica clusters for ElastiCache for Redis to enable low-latency reads and disaster recovery across regions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html\&quot;&gt;Replication Across Regions Using Global Datastore&lt;/a&gt;. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;GlobalReplicationGroupIdSuffix&lt;/b&gt; is the name of the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;PrimaryReplicationGroupId&lt;/b&gt; represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param globalReplicationGroupIdSuffix &lt;p&gt;The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with \&quot;dsdfu\&quot; along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. &lt;/p&gt; &lt;p&gt;For a full list of Amazon Regions and their respective Global datastore iD prefixes, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html\&quot;&gt;Using the Amazon CLI with Global datastores &lt;/a&gt;.&lt;/p&gt; (required)
     * @param primaryReplicationGroupId The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalReplicationGroupDescription Provides details of the Global datastore (optional)
     * @return ApiResponse&lt;CreateGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> GlobalReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGlobalReplicationGroupResult> gETCreateGlobalReplicationGroupWithHttpInfo(String globalReplicationGroupIdSuffix, String primaryReplicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupDescription) throws ApiException {
        okhttp3.Call localVarCall = gETCreateGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupIdSuffix, primaryReplicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupDescription, null);
        Type localVarReturnType = new TypeToken<CreateGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Global Datastore for Redis offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis, you can create cross-region read replica clusters for ElastiCache for Redis to enable low-latency reads and disaster recovery across regions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html\&quot;&gt;Replication Across Regions Using Global Datastore&lt;/a&gt;. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;GlobalReplicationGroupIdSuffix&lt;/b&gt; is the name of the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;PrimaryReplicationGroupId&lt;/b&gt; represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param globalReplicationGroupIdSuffix &lt;p&gt;The suffix name of a Global datastore. Amazon ElastiCache automatically applies a prefix to the Global datastore ID when it is created. Each Amazon Region has its own prefix. For instance, a Global datastore ID created in the US-West-1 region will begin with \&quot;dsdfu\&quot; along with the suffix name you provide. The suffix, combined with the auto-generated prefix, guarantees uniqueness of the Global datastore name across multiple regions. &lt;/p&gt; &lt;p&gt;For a full list of Amazon Regions and their respective Global datastore iD prefixes, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastores-CLI.html\&quot;&gt;Using the Amazon CLI with Global datastores &lt;/a&gt;.&lt;/p&gt; (required)
     * @param primaryReplicationGroupId The name of the primary cluster that accepts writes and will replicate updates to the secondary cluster. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalReplicationGroupDescription Provides details of the Global datastore (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> GlobalReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateGlobalReplicationGroupAsync(String globalReplicationGroupIdSuffix, String primaryReplicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupDescription, final ApiCallback<CreateGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupIdSuffix, primaryReplicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupDescription, _callback);
        Type localVarReturnType = new TypeToken<CreateGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateReplicationGroup
     * @param replicationGroupId &lt;p&gt;The replication group identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A name must contain from 1 to 40 alphanumeric characters or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A name cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param replicationGroupDescription A user-created description for the replication group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalReplicationGroupId The name of the Global datastore (optional)
     * @param primaryClusterId &lt;p&gt;The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of &lt;code&gt;available&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This parameter is not required if &lt;code&gt;NumCacheClusters&lt;/code&gt;, &lt;code&gt;NumNodeGroups&lt;/code&gt;, or &lt;code&gt;ReplicasPerNodeGroup&lt;/code&gt; is specified.&lt;/p&gt; (optional)
     * @param automaticFailoverEnabled &lt;p&gt;Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AutomaticFailoverEnabled&lt;/code&gt; must be enabled for Redis (cluster mode enabled) replication groups.&lt;/p&gt; &lt;p&gt;Default: false&lt;/p&gt; (optional)
     * @param multiAZEnabled A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html\&quot;&gt;Minimizing Downtime: Multi-AZ&lt;/a&gt;. (optional)
     * @param numCacheClusters &lt;p&gt;The number of clusters this replication group initially has.&lt;/p&gt; &lt;p&gt;This parameter is not used if there is more than one node group (shard). You should use &lt;code&gt;ReplicasPerNodeGroup&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;AutomaticFailoverEnabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the value of this parameter must be at least 2. If &lt;code&gt;AutomaticFailoverEnabled&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.&lt;/p&gt; &lt;p&gt;The maximum permitted value for &lt;code&gt;NumCacheClusters&lt;/code&gt; is 6 (1 primary plus 5 replicas).&lt;/p&gt; (optional)
     * @param preferredCacheClusterAZs &lt;p&gt;A list of EC2 Availability Zones in which the replication group&#39;s clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.&lt;/p&gt; &lt;p&gt;This parameter is not used if there is more than one node group (shard). You should use &lt;code&gt;NodeGroupConfiguration&lt;/code&gt; instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.&lt;/p&gt; &lt;p&gt;The number of Availability Zones listed must equal the value of &lt;code&gt;NumCacheClusters&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: system chosen Availability Zones.&lt;/p&gt; (optional)
     * @param numNodeGroups &lt;p&gt;An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; (optional)
     * @param replicasPerNodeGroup An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5. (optional)
     * @param nodeGroupConfiguration &lt;p&gt;A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: &lt;code&gt;PrimaryAvailabilityZone&lt;/code&gt;, &lt;code&gt;ReplicaAvailabilityZones&lt;/code&gt;, &lt;code&gt;ReplicaCount&lt;/code&gt;, and &lt;code&gt;Slots&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you&#39;re creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, it is required when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file. You must configure each node group (shard) using this parameter because you must specify the slots for each node group.&lt;/p&gt; (optional)
     * @param cacheNodeType &lt;p&gt;The compute and memory capacity of the nodes in the node group (shard).&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param engine The name of the cache engine to be used for the clusters in this replication group. The value must be set to &lt;code&gt;Redis&lt;/code&gt;. (optional)
     * @param engineVersion &lt;p&gt;The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the &lt;code&gt;DescribeCacheEngineVersions&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;) in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param cacheParameterGroupName &lt;p&gt;The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.&lt;/p&gt; &lt;p&gt;If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a Redis (cluster mode disabled) replication group, use &lt;code&gt;CacheParameterGroupName&#x3D;default.redis3.2&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a Redis (cluster mode enabled) replication group, use &lt;code&gt;CacheParameterGroupName&#x3D;default.redis3.2.cluster.on&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param cacheSubnetGroupName &lt;p&gt;The name of the cache subnet group to be used for the replication group.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you&#39;re going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html\&quot;&gt;Subnets and Subnet Groups&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param cacheSecurityGroupNames A list of cache security group names to associate with this replication group. (optional)
     * @param securityGroupIds &lt;p&gt;One or more Amazon VPC security groups associated with this replication group.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param tags A list of tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key&#x3D;&lt;code&gt;myKey&lt;/code&gt;, Value&#x3D;&lt;code&gt;myKeyValue&lt;/code&gt;. You can include multiple tags as shown following: Key&#x3D;&lt;code&gt;myKey&lt;/code&gt;, Value&#x3D;&lt;code&gt;myKeyValue&lt;/code&gt; Key&#x3D;&lt;code&gt;mySecondKey&lt;/code&gt;, Value&#x3D;&lt;code&gt;mySecondKeyValue&lt;/code&gt;. Tags on replication groups will be replicated to all nodes. (optional)
     * @param snapshotArns &lt;p&gt;A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter &lt;i&gt;NumNodeGroups&lt;/i&gt; or the number of node groups configured by &lt;i&gt;NodeGroupConfiguration&lt;/i&gt; regardless of the number of ARNs specified here.&lt;/p&gt; &lt;p&gt;Example of an Amazon S3 ARN: &lt;code&gt;arn:aws:s3:::my_bucket/snapshot1.rdb&lt;/code&gt; &lt;/p&gt; (optional)
     * @param snapshotName The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to &lt;code&gt;restoring&lt;/code&gt; while the new replication group is being created. (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.&lt;/p&gt; &lt;p&gt;Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sun&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;mon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;tue&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;wed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;thu&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;fri&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;sun:23:00-mon:01:30&lt;/code&gt; &lt;/p&gt; (optional)
     * @param port The port number on which each member of the replication group accepts connections. (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be the same as the cluster owner.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot that was taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;p&gt;Default: 0 (i.e., automatic backups are disabled for this cluster).&lt;/p&gt; (optional)
     * @param snapshotWindow &lt;p&gt;The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;05:00-09:00&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.&lt;/p&gt; (optional)
     * @param authToken &lt;p&gt; &lt;b&gt;Reserved parameter.&lt;/b&gt; The password used to access a password protected server.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AuthToken&lt;/code&gt; can be specified only on replication groups where &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;For HIPAA compliance, you must specify &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;, an &lt;code&gt;AuthToken&lt;/code&gt;, and a &lt;code&gt;CacheSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The only permitted printable special characters are !, &amp;amp;, #, $, ^, &amp;lt;, &amp;gt;, and -. Other printable special characters cannot be used in the AUTH token.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH password&lt;/a&gt; at http://redis.io/commands/AUTH.&lt;/p&gt; (optional)
     * @param transitEncryptionEnabled &lt;p&gt;A flag that enables in-transit encryption when set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This parameter is valid only if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;, the &lt;code&gt;EngineVersion&lt;/code&gt; parameter is &lt;code&gt;3.2.6&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt; or later, and the cluster is being created in an Amazon VPC.&lt;/p&gt; &lt;p&gt;If you enable in-transit encryption, you must also specify a value for &lt;code&gt;CacheSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Required:&lt;/b&gt; Only available when creating a replication group in an Amazon VPC using redis version &lt;code&gt;3.2.6&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt; or later.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;important&gt; &lt;p&gt;For HIPAA compliance, you must specify &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;, an &lt;code&gt;AuthToken&lt;/code&gt;, and a &lt;code&gt;CacheSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param atRestEncryptionEnabled &lt;p&gt;A flag that enables encryption at rest when set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You cannot modify the value of &lt;code&gt;AtRestEncryptionEnabled&lt;/code&gt; after the replication group is created. To enable encryption at rest on a replication group you must set &lt;code&gt;AtRestEncryptionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; when you create the replication group. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Required:&lt;/b&gt; Only available when creating a replication group in an Amazon VPC using redis version &lt;code&gt;3.2.6&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt; or later.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param kmsKeyId The ID of the KMS key used to encrypt the disk in the cluster. (optional)
     * @param userGroupIds The user group to associate with the replication group. (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs. (optional)
     * @param dataTieringEnabled Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html\&quot;&gt;Data tiering&lt;/a&gt;. (optional)
     * @param networkType Must be either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt; | &lt;code&gt;dual_stack&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param ipDiscovery The network type you choose when creating a replication group, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param transitEncryptionMode &lt;p&gt;A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.&lt;/p&gt; &lt;p&gt;When setting &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, you can set your &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; in the same request, to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can modify the value to &lt;code&gt;required&lt;/code&gt; to allow encrypted connections only.&lt;/p&gt; &lt;p&gt;Setting &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt; is a two-step process that requires you to first set the &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; first, after that you can set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateReplicationGroupCall(String replicationGroupId, String replicationGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupId, String primaryClusterId, Boolean automaticFailoverEnabled, Boolean multiAZEnabled, Integer numCacheClusters, List<String> preferredCacheClusterAZs, Integer numNodeGroups, Integer replicasPerNodeGroup, List<GETCreateReplicationGroupNodeGroupConfigurationParameterInner> nodeGroupConfiguration, String cacheNodeType, String engine, String engineVersion, String cacheParameterGroupName, String cacheSubnetGroupName, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, List<String> snapshotArns, String snapshotName, String preferredMaintenanceWindow, Integer port, String notificationTopicArn, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String authToken, Boolean transitEncryptionEnabled, Boolean atRestEncryptionEnabled, String kmsKeyId, List<String> userGroupIds, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, Boolean dataTieringEnabled, String networkType, String ipDiscovery, String transitEncryptionMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (replicationGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupDescription", replicationGroupDescription));
        }

        if (globalReplicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalReplicationGroupId", globalReplicationGroupId));
        }

        if (primaryClusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PrimaryClusterId", primaryClusterId));
        }

        if (automaticFailoverEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutomaticFailoverEnabled", automaticFailoverEnabled));
        }

        if (multiAZEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MultiAZEnabled", multiAZEnabled));
        }

        if (numCacheClusters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NumCacheClusters", numCacheClusters));
        }

        if (preferredCacheClusterAZs != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "PreferredCacheClusterAZs", preferredCacheClusterAZs));
        }

        if (numNodeGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NumNodeGroups", numNodeGroups));
        }

        if (replicasPerNodeGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicasPerNodeGroup", replicasPerNodeGroup));
        }

        if (nodeGroupConfiguration != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "NodeGroupConfiguration", nodeGroupConfiguration));
        }

        if (cacheNodeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheNodeType", cacheNodeType));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (cacheParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupName", cacheParameterGroupName));
        }

        if (cacheSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSubnetGroupName", cacheSubnetGroupName));
        }

        if (cacheSecurityGroupNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "CacheSecurityGroupNames", cacheSecurityGroupNames));
        }

        if (securityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SecurityGroupIds", securityGroupIds));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (snapshotArns != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SnapshotArns", snapshotArns));
        }

        if (snapshotName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotName", snapshotName));
        }

        if (preferredMaintenanceWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredMaintenanceWindow", preferredMaintenanceWindow));
        }

        if (port != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Port", port));
        }

        if (notificationTopicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NotificationTopicArn", notificationTopicArn));
        }

        if (autoMinorVersionUpgrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoMinorVersionUpgrade", autoMinorVersionUpgrade));
        }

        if (snapshotRetentionLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotRetentionLimit", snapshotRetentionLimit));
        }

        if (snapshotWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotWindow", snapshotWindow));
        }

        if (authToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AuthToken", authToken));
        }

        if (transitEncryptionEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransitEncryptionEnabled", transitEncryptionEnabled));
        }

        if (atRestEncryptionEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AtRestEncryptionEnabled", atRestEncryptionEnabled));
        }

        if (kmsKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KmsKeyId", kmsKeyId));
        }

        if (userGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "UserGroupIds", userGroupIds));
        }

        if (logDeliveryConfigurations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LogDeliveryConfigurations", logDeliveryConfigurations));
        }

        if (dataTieringEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DataTieringEnabled", dataTieringEnabled));
        }

        if (networkType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NetworkType", networkType));
        }

        if (ipDiscovery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IpDiscovery", ipDiscovery));
        }

        if (transitEncryptionMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransitEncryptionMode", transitEncryptionMode));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateReplicationGroupValidateBeforeCall(String replicationGroupId, String replicationGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupId, String primaryClusterId, Boolean automaticFailoverEnabled, Boolean multiAZEnabled, Integer numCacheClusters, List<String> preferredCacheClusterAZs, Integer numNodeGroups, Integer replicasPerNodeGroup, List<GETCreateReplicationGroupNodeGroupConfigurationParameterInner> nodeGroupConfiguration, String cacheNodeType, String engine, String engineVersion, String cacheParameterGroupName, String cacheSubnetGroupName, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, List<String> snapshotArns, String snapshotName, String preferredMaintenanceWindow, Integer port, String notificationTopicArn, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String authToken, Boolean transitEncryptionEnabled, Boolean atRestEncryptionEnabled, String kmsKeyId, List<String> userGroupIds, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, Boolean dataTieringEnabled, String networkType, String ipDiscovery, String transitEncryptionMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicationGroupId' is set
        if (replicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'replicationGroupId' when calling gETCreateReplicationGroup(Async)");
        }

        // verify the required parameter 'replicationGroupDescription' is set
        if (replicationGroupDescription == null) {
            throw new ApiException("Missing the required parameter 'replicationGroupDescription' when calling gETCreateReplicationGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateReplicationGroup(Async)");
        }

        return gETCreateReplicationGroupCall(replicationGroupId, replicationGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupId, primaryClusterId, automaticFailoverEnabled, multiAZEnabled, numCacheClusters, preferredCacheClusterAZs, numNodeGroups, replicasPerNodeGroup, nodeGroupConfiguration, cacheNodeType, engine, engineVersion, cacheParameterGroupName, cacheSubnetGroupName, cacheSecurityGroupNames, securityGroupIds, tags, snapshotArns, snapshotName, preferredMaintenanceWindow, port, notificationTopicArn, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, authToken, transitEncryptionEnabled, atRestEncryptionEnabled, kmsKeyId, userGroupIds, logDeliveryConfigurations, dataTieringEnabled, networkType, ipDiscovery, transitEncryptionMode, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.&lt;/p&gt; &lt;p&gt;This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore.&lt;/p&gt; &lt;p&gt;A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.&lt;/p&gt; &lt;p&gt;A Redis cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed. &lt;/p&gt; &lt;p&gt;The node or shard limit can be increased to a maximum of 500 per cluster if the Redis engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.Creating.html\&quot;&gt;Creating a Subnet Group&lt;/a&gt;. For versions below 5.0.6, the limit is 250 per cluster.&lt;/p&gt; &lt;p&gt;To request a limit increase, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\&quot;&gt;Amazon Service Limits&lt;/a&gt; and choose the limit type &lt;b&gt;Nodes per cluster per instance type&lt;/b&gt;. &lt;/p&gt; &lt;p&gt;When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis&#39; scaling. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html\&quot;&gt;Scaling ElastiCache for Redis Clusters&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param replicationGroupId &lt;p&gt;The replication group identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A name must contain from 1 to 40 alphanumeric characters or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A name cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param replicationGroupDescription A user-created description for the replication group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalReplicationGroupId The name of the Global datastore (optional)
     * @param primaryClusterId &lt;p&gt;The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of &lt;code&gt;available&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This parameter is not required if &lt;code&gt;NumCacheClusters&lt;/code&gt;, &lt;code&gt;NumNodeGroups&lt;/code&gt;, or &lt;code&gt;ReplicasPerNodeGroup&lt;/code&gt; is specified.&lt;/p&gt; (optional)
     * @param automaticFailoverEnabled &lt;p&gt;Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AutomaticFailoverEnabled&lt;/code&gt; must be enabled for Redis (cluster mode enabled) replication groups.&lt;/p&gt; &lt;p&gt;Default: false&lt;/p&gt; (optional)
     * @param multiAZEnabled A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html\&quot;&gt;Minimizing Downtime: Multi-AZ&lt;/a&gt;. (optional)
     * @param numCacheClusters &lt;p&gt;The number of clusters this replication group initially has.&lt;/p&gt; &lt;p&gt;This parameter is not used if there is more than one node group (shard). You should use &lt;code&gt;ReplicasPerNodeGroup&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;AutomaticFailoverEnabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the value of this parameter must be at least 2. If &lt;code&gt;AutomaticFailoverEnabled&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.&lt;/p&gt; &lt;p&gt;The maximum permitted value for &lt;code&gt;NumCacheClusters&lt;/code&gt; is 6 (1 primary plus 5 replicas).&lt;/p&gt; (optional)
     * @param preferredCacheClusterAZs &lt;p&gt;A list of EC2 Availability Zones in which the replication group&#39;s clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.&lt;/p&gt; &lt;p&gt;This parameter is not used if there is more than one node group (shard). You should use &lt;code&gt;NodeGroupConfiguration&lt;/code&gt; instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.&lt;/p&gt; &lt;p&gt;The number of Availability Zones listed must equal the value of &lt;code&gt;NumCacheClusters&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: system chosen Availability Zones.&lt;/p&gt; (optional)
     * @param numNodeGroups &lt;p&gt;An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; (optional)
     * @param replicasPerNodeGroup An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5. (optional)
     * @param nodeGroupConfiguration &lt;p&gt;A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: &lt;code&gt;PrimaryAvailabilityZone&lt;/code&gt;, &lt;code&gt;ReplicaAvailabilityZones&lt;/code&gt;, &lt;code&gt;ReplicaCount&lt;/code&gt;, and &lt;code&gt;Slots&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you&#39;re creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, it is required when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file. You must configure each node group (shard) using this parameter because you must specify the slots for each node group.&lt;/p&gt; (optional)
     * @param cacheNodeType &lt;p&gt;The compute and memory capacity of the nodes in the node group (shard).&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param engine The name of the cache engine to be used for the clusters in this replication group. The value must be set to &lt;code&gt;Redis&lt;/code&gt;. (optional)
     * @param engineVersion &lt;p&gt;The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the &lt;code&gt;DescribeCacheEngineVersions&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;) in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param cacheParameterGroupName &lt;p&gt;The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.&lt;/p&gt; &lt;p&gt;If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a Redis (cluster mode disabled) replication group, use &lt;code&gt;CacheParameterGroupName&#x3D;default.redis3.2&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a Redis (cluster mode enabled) replication group, use &lt;code&gt;CacheParameterGroupName&#x3D;default.redis3.2.cluster.on&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param cacheSubnetGroupName &lt;p&gt;The name of the cache subnet group to be used for the replication group.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you&#39;re going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html\&quot;&gt;Subnets and Subnet Groups&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param cacheSecurityGroupNames A list of cache security group names to associate with this replication group. (optional)
     * @param securityGroupIds &lt;p&gt;One or more Amazon VPC security groups associated with this replication group.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param tags A list of tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key&#x3D;&lt;code&gt;myKey&lt;/code&gt;, Value&#x3D;&lt;code&gt;myKeyValue&lt;/code&gt;. You can include multiple tags as shown following: Key&#x3D;&lt;code&gt;myKey&lt;/code&gt;, Value&#x3D;&lt;code&gt;myKeyValue&lt;/code&gt; Key&#x3D;&lt;code&gt;mySecondKey&lt;/code&gt;, Value&#x3D;&lt;code&gt;mySecondKeyValue&lt;/code&gt;. Tags on replication groups will be replicated to all nodes. (optional)
     * @param snapshotArns &lt;p&gt;A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter &lt;i&gt;NumNodeGroups&lt;/i&gt; or the number of node groups configured by &lt;i&gt;NodeGroupConfiguration&lt;/i&gt; regardless of the number of ARNs specified here.&lt;/p&gt; &lt;p&gt;Example of an Amazon S3 ARN: &lt;code&gt;arn:aws:s3:::my_bucket/snapshot1.rdb&lt;/code&gt; &lt;/p&gt; (optional)
     * @param snapshotName The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to &lt;code&gt;restoring&lt;/code&gt; while the new replication group is being created. (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.&lt;/p&gt; &lt;p&gt;Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sun&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;mon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;tue&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;wed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;thu&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;fri&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;sun:23:00-mon:01:30&lt;/code&gt; &lt;/p&gt; (optional)
     * @param port The port number on which each member of the replication group accepts connections. (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be the same as the cluster owner.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot that was taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;p&gt;Default: 0 (i.e., automatic backups are disabled for this cluster).&lt;/p&gt; (optional)
     * @param snapshotWindow &lt;p&gt;The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;05:00-09:00&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.&lt;/p&gt; (optional)
     * @param authToken &lt;p&gt; &lt;b&gt;Reserved parameter.&lt;/b&gt; The password used to access a password protected server.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AuthToken&lt;/code&gt; can be specified only on replication groups where &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;For HIPAA compliance, you must specify &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;, an &lt;code&gt;AuthToken&lt;/code&gt;, and a &lt;code&gt;CacheSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The only permitted printable special characters are !, &amp;amp;, #, $, ^, &amp;lt;, &amp;gt;, and -. Other printable special characters cannot be used in the AUTH token.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH password&lt;/a&gt; at http://redis.io/commands/AUTH.&lt;/p&gt; (optional)
     * @param transitEncryptionEnabled &lt;p&gt;A flag that enables in-transit encryption when set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This parameter is valid only if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;, the &lt;code&gt;EngineVersion&lt;/code&gt; parameter is &lt;code&gt;3.2.6&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt; or later, and the cluster is being created in an Amazon VPC.&lt;/p&gt; &lt;p&gt;If you enable in-transit encryption, you must also specify a value for &lt;code&gt;CacheSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Required:&lt;/b&gt; Only available when creating a replication group in an Amazon VPC using redis version &lt;code&gt;3.2.6&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt; or later.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;important&gt; &lt;p&gt;For HIPAA compliance, you must specify &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;, an &lt;code&gt;AuthToken&lt;/code&gt;, and a &lt;code&gt;CacheSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param atRestEncryptionEnabled &lt;p&gt;A flag that enables encryption at rest when set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You cannot modify the value of &lt;code&gt;AtRestEncryptionEnabled&lt;/code&gt; after the replication group is created. To enable encryption at rest on a replication group you must set &lt;code&gt;AtRestEncryptionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; when you create the replication group. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Required:&lt;/b&gt; Only available when creating a replication group in an Amazon VPC using redis version &lt;code&gt;3.2.6&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt; or later.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param kmsKeyId The ID of the KMS key used to encrypt the disk in the cluster. (optional)
     * @param userGroupIds The user group to associate with the replication group. (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs. (optional)
     * @param dataTieringEnabled Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html\&quot;&gt;Data tiering&lt;/a&gt;. (optional)
     * @param networkType Must be either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt; | &lt;code&gt;dual_stack&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param ipDiscovery The network type you choose when creating a replication group, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param transitEncryptionMode &lt;p&gt;A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.&lt;/p&gt; &lt;p&gt;When setting &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, you can set your &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; in the same request, to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can modify the value to &lt;code&gt;required&lt;/code&gt; to allow encrypted connections only.&lt;/p&gt; &lt;p&gt;Setting &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt; is a two-step process that requires you to first set the &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; first, after that you can set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt;. &lt;/p&gt; (optional)
     * @return CreateReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CreateReplicationGroupResult gETCreateReplicationGroup(String replicationGroupId, String replicationGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupId, String primaryClusterId, Boolean automaticFailoverEnabled, Boolean multiAZEnabled, Integer numCacheClusters, List<String> preferredCacheClusterAZs, Integer numNodeGroups, Integer replicasPerNodeGroup, List<GETCreateReplicationGroupNodeGroupConfigurationParameterInner> nodeGroupConfiguration, String cacheNodeType, String engine, String engineVersion, String cacheParameterGroupName, String cacheSubnetGroupName, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, List<String> snapshotArns, String snapshotName, String preferredMaintenanceWindow, Integer port, String notificationTopicArn, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String authToken, Boolean transitEncryptionEnabled, Boolean atRestEncryptionEnabled, String kmsKeyId, List<String> userGroupIds, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, Boolean dataTieringEnabled, String networkType, String ipDiscovery, String transitEncryptionMode) throws ApiException {
        ApiResponse<CreateReplicationGroupResult> localVarResp = gETCreateReplicationGroupWithHttpInfo(replicationGroupId, replicationGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupId, primaryClusterId, automaticFailoverEnabled, multiAZEnabled, numCacheClusters, preferredCacheClusterAZs, numNodeGroups, replicasPerNodeGroup, nodeGroupConfiguration, cacheNodeType, engine, engineVersion, cacheParameterGroupName, cacheSubnetGroupName, cacheSecurityGroupNames, securityGroupIds, tags, snapshotArns, snapshotName, preferredMaintenanceWindow, port, notificationTopicArn, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, authToken, transitEncryptionEnabled, atRestEncryptionEnabled, kmsKeyId, userGroupIds, logDeliveryConfigurations, dataTieringEnabled, networkType, ipDiscovery, transitEncryptionMode);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.&lt;/p&gt; &lt;p&gt;This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore.&lt;/p&gt; &lt;p&gt;A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.&lt;/p&gt; &lt;p&gt;A Redis cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed. &lt;/p&gt; &lt;p&gt;The node or shard limit can be increased to a maximum of 500 per cluster if the Redis engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.Creating.html\&quot;&gt;Creating a Subnet Group&lt;/a&gt;. For versions below 5.0.6, the limit is 250 per cluster.&lt;/p&gt; &lt;p&gt;To request a limit increase, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\&quot;&gt;Amazon Service Limits&lt;/a&gt; and choose the limit type &lt;b&gt;Nodes per cluster per instance type&lt;/b&gt;. &lt;/p&gt; &lt;p&gt;When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis&#39; scaling. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html\&quot;&gt;Scaling ElastiCache for Redis Clusters&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param replicationGroupId &lt;p&gt;The replication group identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A name must contain from 1 to 40 alphanumeric characters or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A name cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param replicationGroupDescription A user-created description for the replication group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalReplicationGroupId The name of the Global datastore (optional)
     * @param primaryClusterId &lt;p&gt;The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of &lt;code&gt;available&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This parameter is not required if &lt;code&gt;NumCacheClusters&lt;/code&gt;, &lt;code&gt;NumNodeGroups&lt;/code&gt;, or &lt;code&gt;ReplicasPerNodeGroup&lt;/code&gt; is specified.&lt;/p&gt; (optional)
     * @param automaticFailoverEnabled &lt;p&gt;Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AutomaticFailoverEnabled&lt;/code&gt; must be enabled for Redis (cluster mode enabled) replication groups.&lt;/p&gt; &lt;p&gt;Default: false&lt;/p&gt; (optional)
     * @param multiAZEnabled A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html\&quot;&gt;Minimizing Downtime: Multi-AZ&lt;/a&gt;. (optional)
     * @param numCacheClusters &lt;p&gt;The number of clusters this replication group initially has.&lt;/p&gt; &lt;p&gt;This parameter is not used if there is more than one node group (shard). You should use &lt;code&gt;ReplicasPerNodeGroup&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;AutomaticFailoverEnabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the value of this parameter must be at least 2. If &lt;code&gt;AutomaticFailoverEnabled&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.&lt;/p&gt; &lt;p&gt;The maximum permitted value for &lt;code&gt;NumCacheClusters&lt;/code&gt; is 6 (1 primary plus 5 replicas).&lt;/p&gt; (optional)
     * @param preferredCacheClusterAZs &lt;p&gt;A list of EC2 Availability Zones in which the replication group&#39;s clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.&lt;/p&gt; &lt;p&gt;This parameter is not used if there is more than one node group (shard). You should use &lt;code&gt;NodeGroupConfiguration&lt;/code&gt; instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.&lt;/p&gt; &lt;p&gt;The number of Availability Zones listed must equal the value of &lt;code&gt;NumCacheClusters&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: system chosen Availability Zones.&lt;/p&gt; (optional)
     * @param numNodeGroups &lt;p&gt;An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; (optional)
     * @param replicasPerNodeGroup An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5. (optional)
     * @param nodeGroupConfiguration &lt;p&gt;A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: &lt;code&gt;PrimaryAvailabilityZone&lt;/code&gt;, &lt;code&gt;ReplicaAvailabilityZones&lt;/code&gt;, &lt;code&gt;ReplicaCount&lt;/code&gt;, and &lt;code&gt;Slots&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you&#39;re creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, it is required when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file. You must configure each node group (shard) using this parameter because you must specify the slots for each node group.&lt;/p&gt; (optional)
     * @param cacheNodeType &lt;p&gt;The compute and memory capacity of the nodes in the node group (shard).&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param engine The name of the cache engine to be used for the clusters in this replication group. The value must be set to &lt;code&gt;Redis&lt;/code&gt;. (optional)
     * @param engineVersion &lt;p&gt;The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the &lt;code&gt;DescribeCacheEngineVersions&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;) in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param cacheParameterGroupName &lt;p&gt;The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.&lt;/p&gt; &lt;p&gt;If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a Redis (cluster mode disabled) replication group, use &lt;code&gt;CacheParameterGroupName&#x3D;default.redis3.2&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a Redis (cluster mode enabled) replication group, use &lt;code&gt;CacheParameterGroupName&#x3D;default.redis3.2.cluster.on&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param cacheSubnetGroupName &lt;p&gt;The name of the cache subnet group to be used for the replication group.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you&#39;re going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html\&quot;&gt;Subnets and Subnet Groups&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param cacheSecurityGroupNames A list of cache security group names to associate with this replication group. (optional)
     * @param securityGroupIds &lt;p&gt;One or more Amazon VPC security groups associated with this replication group.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param tags A list of tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key&#x3D;&lt;code&gt;myKey&lt;/code&gt;, Value&#x3D;&lt;code&gt;myKeyValue&lt;/code&gt;. You can include multiple tags as shown following: Key&#x3D;&lt;code&gt;myKey&lt;/code&gt;, Value&#x3D;&lt;code&gt;myKeyValue&lt;/code&gt; Key&#x3D;&lt;code&gt;mySecondKey&lt;/code&gt;, Value&#x3D;&lt;code&gt;mySecondKeyValue&lt;/code&gt;. Tags on replication groups will be replicated to all nodes. (optional)
     * @param snapshotArns &lt;p&gt;A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter &lt;i&gt;NumNodeGroups&lt;/i&gt; or the number of node groups configured by &lt;i&gt;NodeGroupConfiguration&lt;/i&gt; regardless of the number of ARNs specified here.&lt;/p&gt; &lt;p&gt;Example of an Amazon S3 ARN: &lt;code&gt;arn:aws:s3:::my_bucket/snapshot1.rdb&lt;/code&gt; &lt;/p&gt; (optional)
     * @param snapshotName The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to &lt;code&gt;restoring&lt;/code&gt; while the new replication group is being created. (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.&lt;/p&gt; &lt;p&gt;Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sun&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;mon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;tue&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;wed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;thu&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;fri&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;sun:23:00-mon:01:30&lt;/code&gt; &lt;/p&gt; (optional)
     * @param port The port number on which each member of the replication group accepts connections. (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be the same as the cluster owner.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot that was taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;p&gt;Default: 0 (i.e., automatic backups are disabled for this cluster).&lt;/p&gt; (optional)
     * @param snapshotWindow &lt;p&gt;The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;05:00-09:00&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.&lt;/p&gt; (optional)
     * @param authToken &lt;p&gt; &lt;b&gt;Reserved parameter.&lt;/b&gt; The password used to access a password protected server.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AuthToken&lt;/code&gt; can be specified only on replication groups where &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;For HIPAA compliance, you must specify &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;, an &lt;code&gt;AuthToken&lt;/code&gt;, and a &lt;code&gt;CacheSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The only permitted printable special characters are !, &amp;amp;, #, $, ^, &amp;lt;, &amp;gt;, and -. Other printable special characters cannot be used in the AUTH token.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH password&lt;/a&gt; at http://redis.io/commands/AUTH.&lt;/p&gt; (optional)
     * @param transitEncryptionEnabled &lt;p&gt;A flag that enables in-transit encryption when set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This parameter is valid only if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;, the &lt;code&gt;EngineVersion&lt;/code&gt; parameter is &lt;code&gt;3.2.6&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt; or later, and the cluster is being created in an Amazon VPC.&lt;/p&gt; &lt;p&gt;If you enable in-transit encryption, you must also specify a value for &lt;code&gt;CacheSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Required:&lt;/b&gt; Only available when creating a replication group in an Amazon VPC using redis version &lt;code&gt;3.2.6&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt; or later.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;important&gt; &lt;p&gt;For HIPAA compliance, you must specify &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;, an &lt;code&gt;AuthToken&lt;/code&gt;, and a &lt;code&gt;CacheSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param atRestEncryptionEnabled &lt;p&gt;A flag that enables encryption at rest when set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You cannot modify the value of &lt;code&gt;AtRestEncryptionEnabled&lt;/code&gt; after the replication group is created. To enable encryption at rest on a replication group you must set &lt;code&gt;AtRestEncryptionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; when you create the replication group. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Required:&lt;/b&gt; Only available when creating a replication group in an Amazon VPC using redis version &lt;code&gt;3.2.6&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt; or later.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param kmsKeyId The ID of the KMS key used to encrypt the disk in the cluster. (optional)
     * @param userGroupIds The user group to associate with the replication group. (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs. (optional)
     * @param dataTieringEnabled Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html\&quot;&gt;Data tiering&lt;/a&gt;. (optional)
     * @param networkType Must be either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt; | &lt;code&gt;dual_stack&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param ipDiscovery The network type you choose when creating a replication group, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param transitEncryptionMode &lt;p&gt;A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.&lt;/p&gt; &lt;p&gt;When setting &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, you can set your &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; in the same request, to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can modify the value to &lt;code&gt;required&lt;/code&gt; to allow encrypted connections only.&lt;/p&gt; &lt;p&gt;Setting &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt; is a two-step process that requires you to first set the &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; first, after that you can set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt;. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;CreateReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateReplicationGroupResult> gETCreateReplicationGroupWithHttpInfo(String replicationGroupId, String replicationGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupId, String primaryClusterId, Boolean automaticFailoverEnabled, Boolean multiAZEnabled, Integer numCacheClusters, List<String> preferredCacheClusterAZs, Integer numNodeGroups, Integer replicasPerNodeGroup, List<GETCreateReplicationGroupNodeGroupConfigurationParameterInner> nodeGroupConfiguration, String cacheNodeType, String engine, String engineVersion, String cacheParameterGroupName, String cacheSubnetGroupName, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, List<String> snapshotArns, String snapshotName, String preferredMaintenanceWindow, Integer port, String notificationTopicArn, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String authToken, Boolean transitEncryptionEnabled, Boolean atRestEncryptionEnabled, String kmsKeyId, List<String> userGroupIds, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, Boolean dataTieringEnabled, String networkType, String ipDiscovery, String transitEncryptionMode) throws ApiException {
        okhttp3.Call localVarCall = gETCreateReplicationGroupValidateBeforeCall(replicationGroupId, replicationGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupId, primaryClusterId, automaticFailoverEnabled, multiAZEnabled, numCacheClusters, preferredCacheClusterAZs, numNodeGroups, replicasPerNodeGroup, nodeGroupConfiguration, cacheNodeType, engine, engineVersion, cacheParameterGroupName, cacheSubnetGroupName, cacheSecurityGroupNames, securityGroupIds, tags, snapshotArns, snapshotName, preferredMaintenanceWindow, port, notificationTopicArn, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, authToken, transitEncryptionEnabled, atRestEncryptionEnabled, kmsKeyId, userGroupIds, logDeliveryConfigurations, dataTieringEnabled, networkType, ipDiscovery, transitEncryptionMode, null);
        Type localVarReturnType = new TypeToken<CreateReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.&lt;/p&gt; &lt;p&gt;This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore.&lt;/p&gt; &lt;p&gt;A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.&lt;/p&gt; &lt;p&gt;A Redis cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed. &lt;/p&gt; &lt;p&gt;The node or shard limit can be increased to a maximum of 500 per cluster if the Redis engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.Creating.html\&quot;&gt;Creating a Subnet Group&lt;/a&gt;. For versions below 5.0.6, the limit is 250 per cluster.&lt;/p&gt; &lt;p&gt;To request a limit increase, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\&quot;&gt;Amazon Service Limits&lt;/a&gt; and choose the limit type &lt;b&gt;Nodes per cluster per instance type&lt;/b&gt;. &lt;/p&gt; &lt;p&gt;When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis&#39; scaling. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html\&quot;&gt;Scaling ElastiCache for Redis Clusters&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param replicationGroupId &lt;p&gt;The replication group identifier. This parameter is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A name must contain from 1 to 40 alphanumeric characters or hyphens.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The first character must be a letter.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A name cannot end with a hyphen or contain two consecutive hyphens.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param replicationGroupDescription A user-created description for the replication group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalReplicationGroupId The name of the Global datastore (optional)
     * @param primaryClusterId &lt;p&gt;The identifier of the cluster that serves as the primary for this replication group. This cluster must already exist and have a status of &lt;code&gt;available&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This parameter is not required if &lt;code&gt;NumCacheClusters&lt;/code&gt;, &lt;code&gt;NumNodeGroups&lt;/code&gt;, or &lt;code&gt;ReplicasPerNodeGroup&lt;/code&gt; is specified.&lt;/p&gt; (optional)
     * @param automaticFailoverEnabled &lt;p&gt;Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AutomaticFailoverEnabled&lt;/code&gt; must be enabled for Redis (cluster mode enabled) replication groups.&lt;/p&gt; &lt;p&gt;Default: false&lt;/p&gt; (optional)
     * @param multiAZEnabled A flag indicating if you have Multi-AZ enabled to enhance fault tolerance. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html\&quot;&gt;Minimizing Downtime: Multi-AZ&lt;/a&gt;. (optional)
     * @param numCacheClusters &lt;p&gt;The number of clusters this replication group initially has.&lt;/p&gt; &lt;p&gt;This parameter is not used if there is more than one node group (shard). You should use &lt;code&gt;ReplicasPerNodeGroup&lt;/code&gt; instead.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;AutomaticFailoverEnabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the value of this parameter must be at least 2. If &lt;code&gt;AutomaticFailoverEnabled&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6.&lt;/p&gt; &lt;p&gt;The maximum permitted value for &lt;code&gt;NumCacheClusters&lt;/code&gt; is 6 (1 primary plus 5 replicas).&lt;/p&gt; (optional)
     * @param preferredCacheClusterAZs &lt;p&gt;A list of EC2 Availability Zones in which the replication group&#39;s clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list.&lt;/p&gt; &lt;p&gt;This parameter is not used if there is more than one node group (shard). You should use &lt;code&gt;NodeGroupConfiguration&lt;/code&gt; instead.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If you are creating your replication group in an Amazon VPC (recommended), you can only locate clusters in Availability Zones associated with the subnets in the selected subnet group.&lt;/p&gt; &lt;p&gt;The number of Availability Zones listed must equal the value of &lt;code&gt;NumCacheClusters&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Default: system chosen Availability Zones.&lt;/p&gt; (optional)
     * @param numNodeGroups &lt;p&gt;An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1.&lt;/p&gt; &lt;p&gt;Default: 1&lt;/p&gt; (optional)
     * @param replicasPerNodeGroup An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5. (optional)
     * @param nodeGroupConfiguration &lt;p&gt;A list of node group (shard) configuration options. Each node group (shard) configuration has the following members: &lt;code&gt;PrimaryAvailabilityZone&lt;/code&gt;, &lt;code&gt;ReplicaAvailabilityZones&lt;/code&gt;, &lt;code&gt;ReplicaCount&lt;/code&gt;, and &lt;code&gt;Slots&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you&#39;re creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter. However, it is required when seeding a Redis (cluster mode enabled) cluster from a S3 rdb file. You must configure each node group (shard) using this parameter because you must specify the slots for each node group.&lt;/p&gt; (optional)
     * @param cacheNodeType &lt;p&gt;The compute and memory capacity of the nodes in the node group (shard).&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param engine The name of the cache engine to be used for the clusters in this replication group. The value must be set to &lt;code&gt;Redis&lt;/code&gt;. (optional)
     * @param engineVersion &lt;p&gt;The version number of the cache engine to be used for the clusters in this replication group. To view the supported cache engine versions, use the &lt;code&gt;DescribeCacheEngineVersions&lt;/code&gt; operation.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;) in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster or replication group and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param cacheParameterGroupName &lt;p&gt;The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used.&lt;/p&gt; &lt;p&gt;If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;To create a Redis (cluster mode disabled) replication group, use &lt;code&gt;CacheParameterGroupName&#x3D;default.redis3.2&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To create a Redis (cluster mode enabled) replication group, use &lt;code&gt;CacheParameterGroupName&#x3D;default.redis3.2.cluster.on&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param cacheSubnetGroupName &lt;p&gt;The name of the cache subnet group to be used for the replication group.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you&#39;re going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.html\&quot;&gt;Subnets and Subnet Groups&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param cacheSecurityGroupNames A list of cache security group names to associate with this replication group. (optional)
     * @param securityGroupIds &lt;p&gt;One or more Amazon VPC security groups associated with this replication group.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param tags A list of tags to be added to this resource. Tags are comma-separated key,value pairs (e.g. Key&#x3D;&lt;code&gt;myKey&lt;/code&gt;, Value&#x3D;&lt;code&gt;myKeyValue&lt;/code&gt;. You can include multiple tags as shown following: Key&#x3D;&lt;code&gt;myKey&lt;/code&gt;, Value&#x3D;&lt;code&gt;myKeyValue&lt;/code&gt; Key&#x3D;&lt;code&gt;mySecondKey&lt;/code&gt;, Value&#x3D;&lt;code&gt;mySecondKeyValue&lt;/code&gt;. Tags on replication groups will be replicated to all nodes. (optional)
     * @param snapshotArns &lt;p&gt;A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter &lt;i&gt;NumNodeGroups&lt;/i&gt; or the number of node groups configured by &lt;i&gt;NodeGroupConfiguration&lt;/i&gt; regardless of the number of ARNs specified here.&lt;/p&gt; &lt;p&gt;Example of an Amazon S3 ARN: &lt;code&gt;arn:aws:s3:::my_bucket/snapshot1.rdb&lt;/code&gt; &lt;/p&gt; (optional)
     * @param snapshotName The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to &lt;code&gt;restoring&lt;/code&gt; while the new replication group is being created. (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.&lt;/p&gt; &lt;p&gt;Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sun&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;mon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;tue&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;wed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;thu&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;fri&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;sun:23:00-mon:01:30&lt;/code&gt; &lt;/p&gt; (optional)
     * @param port The port number on which each member of the replication group accepts connections. (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be the same as the cluster owner.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot that was taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;p&gt;Default: 0 (i.e., automatic backups are disabled for this cluster).&lt;/p&gt; (optional)
     * @param snapshotWindow &lt;p&gt;The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard).&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;05:00-09:00&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.&lt;/p&gt; (optional)
     * @param authToken &lt;p&gt; &lt;b&gt;Reserved parameter.&lt;/b&gt; The password used to access a password protected server.&lt;/p&gt; &lt;p&gt; &lt;code&gt;AuthToken&lt;/code&gt; can be specified only on replication groups where &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;For HIPAA compliance, you must specify &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;, an &lt;code&gt;AuthToken&lt;/code&gt;, and a &lt;code&gt;CacheSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The only permitted printable special characters are !, &amp;amp;, #, $, ^, &amp;lt;, &amp;gt;, and -. Other printable special characters cannot be used in the AUTH token.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH password&lt;/a&gt; at http://redis.io/commands/AUTH.&lt;/p&gt; (optional)
     * @param transitEncryptionEnabled &lt;p&gt;A flag that enables in-transit encryption when set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This parameter is valid only if the &lt;code&gt;Engine&lt;/code&gt; parameter is &lt;code&gt;redis&lt;/code&gt;, the &lt;code&gt;EngineVersion&lt;/code&gt; parameter is &lt;code&gt;3.2.6&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt; or later, and the cluster is being created in an Amazon VPC.&lt;/p&gt; &lt;p&gt;If you enable in-transit encryption, you must also specify a value for &lt;code&gt;CacheSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Required:&lt;/b&gt; Only available when creating a replication group in an Amazon VPC using redis version &lt;code&gt;3.2.6&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt; or later.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;important&gt; &lt;p&gt;For HIPAA compliance, you must specify &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;, an &lt;code&gt;AuthToken&lt;/code&gt;, and a &lt;code&gt;CacheSubnetGroup&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param atRestEncryptionEnabled &lt;p&gt;A flag that enables encryption at rest when set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You cannot modify the value of &lt;code&gt;AtRestEncryptionEnabled&lt;/code&gt; after the replication group is created. To enable encryption at rest on a replication group you must set &lt;code&gt;AtRestEncryptionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; when you create the replication group. &lt;/p&gt; &lt;p&gt; &lt;b&gt;Required:&lt;/b&gt; Only available when creating a replication group in an Amazon VPC using redis version &lt;code&gt;3.2.6&lt;/code&gt;, &lt;code&gt;4.x&lt;/code&gt; or later.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param kmsKeyId The ID of the KMS key used to encrypt the disk in the cluster. (optional)
     * @param userGroupIds The user group to associate with the replication group. (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs. (optional)
     * @param dataTieringEnabled Enables data tiering. Data tiering is only supported for replication groups using the r6gd node type. This parameter must be set to true when using r6gd nodes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/data-tiering.html\&quot;&gt;Data tiering&lt;/a&gt;. (optional)
     * @param networkType Must be either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt; | &lt;code&gt;dual_stack&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param ipDiscovery The network type you choose when creating a replication group, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param transitEncryptionMode &lt;p&gt;A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.&lt;/p&gt; &lt;p&gt;When setting &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, you can set your &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; in the same request, to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can modify the value to &lt;code&gt;required&lt;/code&gt; to allow encrypted connections only.&lt;/p&gt; &lt;p&gt;Setting &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt; is a two-step process that requires you to first set the &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; first, after that you can set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateReplicationGroupAsync(String replicationGroupId, String replicationGroupDescription, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupId, String primaryClusterId, Boolean automaticFailoverEnabled, Boolean multiAZEnabled, Integer numCacheClusters, List<String> preferredCacheClusterAZs, Integer numNodeGroups, Integer replicasPerNodeGroup, List<GETCreateReplicationGroupNodeGroupConfigurationParameterInner> nodeGroupConfiguration, String cacheNodeType, String engine, String engineVersion, String cacheParameterGroupName, String cacheSubnetGroupName, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, List<GETAddTagsToResourceTagsParameterInner> tags, List<String> snapshotArns, String snapshotName, String preferredMaintenanceWindow, Integer port, String notificationTopicArn, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String authToken, Boolean transitEncryptionEnabled, Boolean atRestEncryptionEnabled, String kmsKeyId, List<String> userGroupIds, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, Boolean dataTieringEnabled, String networkType, String ipDiscovery, String transitEncryptionMode, final ApiCallback<CreateReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateReplicationGroupValidateBeforeCall(replicationGroupId, replicationGroupDescription, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupId, primaryClusterId, automaticFailoverEnabled, multiAZEnabled, numCacheClusters, preferredCacheClusterAZs, numNodeGroups, replicasPerNodeGroup, nodeGroupConfiguration, cacheNodeType, engine, engineVersion, cacheParameterGroupName, cacheSubnetGroupName, cacheSecurityGroupNames, securityGroupIds, tags, snapshotArns, snapshotName, preferredMaintenanceWindow, port, notificationTopicArn, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, authToken, transitEncryptionEnabled, atRestEncryptionEnabled, kmsKeyId, userGroupIds, logDeliveryConfigurations, dataTieringEnabled, networkType, ipDiscovery, transitEncryptionMode, _callback);
        Type localVarReturnType = new TypeToken<CreateReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateSnapshot
     * @param snapshotName A name for the snapshot being created. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId The identifier of an existing replication group. The snapshot is created from this replication group. (optional)
     * @param cacheClusterId The identifier of an existing cluster. The snapshot is created from this cluster. (optional)
     * @param kmsKeyId The ID of the KMS key used to encrypt the snapshot. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateSnapshotCall(String snapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String cacheClusterId, String kmsKeyId, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (cacheClusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheClusterId", cacheClusterId));
        }

        if (snapshotName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotName", snapshotName));
        }

        if (kmsKeyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("KmsKeyId", kmsKeyId));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateSnapshotValidateBeforeCall(String snapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String cacheClusterId, String kmsKeyId, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'snapshotName' is set
        if (snapshotName == null) {
            throw new ApiException("Missing the required parameter 'snapshotName' when calling gETCreateSnapshot(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateSnapshot(Async)");
        }

        return gETCreateSnapshotCall(snapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, cacheClusterId, kmsKeyId, tags, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a copy of an entire cluster or replication group at a specific moment in time.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotName A name for the snapshot being created. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId The identifier of an existing replication group. The snapshot is created from this replication group. (optional)
     * @param cacheClusterId The identifier of an existing cluster. The snapshot is created from this cluster. (optional)
     * @param kmsKeyId The ID of the KMS key used to encrypt the snapshot. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return CreateSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public CreateSnapshotResult gETCreateSnapshot(String snapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String cacheClusterId, String kmsKeyId, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<CreateSnapshotResult> localVarResp = gETCreateSnapshotWithHttpInfo(snapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, cacheClusterId, kmsKeyId, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a copy of an entire cluster or replication group at a specific moment in time.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotName A name for the snapshot being created. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId The identifier of an existing replication group. The snapshot is created from this replication group. (optional)
     * @param cacheClusterId The identifier of an existing cluster. The snapshot is created from this cluster. (optional)
     * @param kmsKeyId The ID of the KMS key used to encrypt the snapshot. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return ApiResponse&lt;CreateSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSnapshotResult> gETCreateSnapshotWithHttpInfo(String snapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String cacheClusterId, String kmsKeyId, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateSnapshotValidateBeforeCall(snapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, cacheClusterId, kmsKeyId, tags, null);
        Type localVarReturnType = new TypeToken<CreateSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a copy of an entire cluster or replication group at a specific moment in time.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotName A name for the snapshot being created. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId The identifier of an existing replication group. The snapshot is created from this replication group. (optional)
     * @param cacheClusterId The identifier of an existing cluster. The snapshot is created from this cluster. (optional)
     * @param kmsKeyId The ID of the KMS key used to encrypt the snapshot. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateSnapshotAsync(String snapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String cacheClusterId, String kmsKeyId, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<CreateSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateSnapshotValidateBeforeCall(snapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, cacheClusterId, kmsKeyId, tags, _callback);
        Type localVarReturnType = new TypeToken<CreateSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateUser
     * @param userId The ID of the user. (required)
     * @param userName The username of the user. (required)
     * @param engine The current supported value is Redis.  (required)
     * @param accessString Access permissions string used for this user. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param passwords Passwords used for this user. You can create up to two passwords for each user. (optional)
     * @param noPasswordRequired Indicates a password is not required for this user. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param authenticationMode Specifies how to authenticate the user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateUserCall(String userId, String userName, String engine, String accessString, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> passwords, Boolean noPasswordRequired, List<GETAddTagsToResourceTagsParameterInner> tags, GETCreateUserAuthenticationModeParameter authenticationMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserId", userId));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserName", userName));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (passwords != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Passwords", passwords));
        }

        if (accessString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AccessString", accessString));
        }

        if (noPasswordRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NoPasswordRequired", noPasswordRequired));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (authenticationMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AuthenticationMode", authenticationMode));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateUserValidateBeforeCall(String userId, String userName, String engine, String accessString, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> passwords, Boolean noPasswordRequired, List<GETAddTagsToResourceTagsParameterInner> tags, GETCreateUserAuthenticationModeParameter authenticationMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling gETCreateUser(Async)");
        }

        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling gETCreateUser(Async)");
        }

        // verify the required parameter 'engine' is set
        if (engine == null) {
            throw new ApiException("Missing the required parameter 'engine' when calling gETCreateUser(Async)");
        }

        // verify the required parameter 'accessString' is set
        if (accessString == null) {
            throw new ApiException("Missing the required parameter 'accessString' when calling gETCreateUser(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateUser(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateUser(Async)");
        }

        return gETCreateUserCall(userId, userName, engine, accessString, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, passwords, noPasswordRequired, tags, authenticationMode, _callback);

    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Creates a Redis user. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;.
     * @param userId The ID of the user. (required)
     * @param userName The username of the user. (required)
     * @param engine The current supported value is Redis.  (required)
     * @param accessString Access permissions string used for this user. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param passwords Passwords used for this user. You can create up to two passwords for each user. (optional)
     * @param noPasswordRequired Indicates a password is not required for this user. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param authenticationMode Specifies how to authenticate the user. (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public User gETCreateUser(String userId, String userName, String engine, String accessString, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> passwords, Boolean noPasswordRequired, List<GETAddTagsToResourceTagsParameterInner> tags, GETCreateUserAuthenticationModeParameter authenticationMode) throws ApiException {
        ApiResponse<User> localVarResp = gETCreateUserWithHttpInfo(userId, userName, engine, accessString, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, passwords, noPasswordRequired, tags, authenticationMode);
        return localVarResp.getData();
    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Creates a Redis user. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;.
     * @param userId The ID of the user. (required)
     * @param userName The username of the user. (required)
     * @param engine The current supported value is Redis.  (required)
     * @param accessString Access permissions string used for this user. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param passwords Passwords used for this user. You can create up to two passwords for each user. (optional)
     * @param noPasswordRequired Indicates a password is not required for this user. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param authenticationMode Specifies how to authenticate the user. (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> gETCreateUserWithHttpInfo(String userId, String userName, String engine, String accessString, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> passwords, Boolean noPasswordRequired, List<GETAddTagsToResourceTagsParameterInner> tags, GETCreateUserAuthenticationModeParameter authenticationMode) throws ApiException {
        okhttp3.Call localVarCall = gETCreateUserValidateBeforeCall(userId, userName, engine, accessString, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, passwords, noPasswordRequired, tags, authenticationMode, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * For Redis engine version 6.0 onwards: Creates a Redis user. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;.
     * @param userId The ID of the user. (required)
     * @param userName The username of the user. (required)
     * @param engine The current supported value is Redis.  (required)
     * @param accessString Access permissions string used for this user. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param passwords Passwords used for this user. You can create up to two passwords for each user. (optional)
     * @param noPasswordRequired Indicates a password is not required for this user. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param authenticationMode Specifies how to authenticate the user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateUserAsync(String userId, String userName, String engine, String accessString, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> passwords, Boolean noPasswordRequired, List<GETAddTagsToResourceTagsParameterInner> tags, GETCreateUserAuthenticationModeParameter authenticationMode, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateUserValidateBeforeCall(userId, userName, engine, accessString, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, passwords, noPasswordRequired, tags, authenticationMode, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETCreateUserGroup
     * @param userGroupId The ID of the user group. (required)
     * @param engine The current supported value is Redis.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userIds The list of user IDs that belong to the user group. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateUserGroupCall(String userGroupId, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> userIds, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=CreateUserGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserGroupId", userGroupId));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (userIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "UserIds", userIds));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETCreateUserGroupValidateBeforeCall(String userGroupId, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> userIds, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException("Missing the required parameter 'userGroupId' when calling gETCreateUserGroup(Async)");
        }

        // verify the required parameter 'engine' is set
        if (engine == null) {
            throw new ApiException("Missing the required parameter 'engine' when calling gETCreateUserGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETCreateUserGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETCreateUserGroup(Async)");
        }

        return gETCreateUserGroupCall(userGroupId, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userIds, tags, _callback);

    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Creates a Redis user group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt; 
     * @param userGroupId The ID of the user group. (required)
     * @param engine The current supported value is Redis.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userIds The list of user IDs that belong to the user group. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public UserGroup gETCreateUserGroup(String userGroupId, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> userIds, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<UserGroup> localVarResp = gETCreateUserGroupWithHttpInfo(userGroupId, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userIds, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Creates a Redis user group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt; 
     * @param userGroupId The ID of the user group. (required)
     * @param engine The current supported value is Redis.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userIds The list of user IDs that belong to the user group. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroup> gETCreateUserGroupWithHttpInfo(String userGroupId, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> userIds, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETCreateUserGroupValidateBeforeCall(userGroupId, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userIds, tags, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * For Redis engine version 6.0 onwards: Creates a Redis user group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt; 
     * @param userGroupId The ID of the user group. (required)
     * @param engine The current supported value is Redis.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userIds The list of user IDs that belong to the user group. (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETCreateUserGroupAsync(String userGroupId, String engine, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> userIds, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETCreateUserGroupValidateBeforeCall(userGroupId, engine, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userIds, tags, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDecreaseNodeGroupsInGlobalReplicationGroup
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param nodeGroupCount The number of node groups (shards) that results from the modification of the shard configuration (required)
     * @param applyImmediately Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalNodeGroupsToRemove If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache for Redis will attempt to remove all node groups listed by GlobalNodeGroupsToRemove from the cluster.  (optional)
     * @param globalNodeGroupsToRetain If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRetain is a list of NodeGroupIds to retain from the cluster. ElastiCache for Redis will attempt to retain all node groups listed by GlobalNodeGroupsToRetain from the cluster.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDecreaseNodeGroupsInGlobalReplicationGroupCall(String globalReplicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> globalNodeGroupsToRemove, List<String> globalNodeGroupsToRetain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DecreaseNodeGroupsInGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalReplicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalReplicationGroupId", globalReplicationGroupId));
        }

        if (nodeGroupCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NodeGroupCount", nodeGroupCount));
        }

        if (globalNodeGroupsToRemove != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "GlobalNodeGroupsToRemove", globalNodeGroupsToRemove));
        }

        if (globalNodeGroupsToRetain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "GlobalNodeGroupsToRetain", globalNodeGroupsToRetain));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDecreaseNodeGroupsInGlobalReplicationGroupValidateBeforeCall(String globalReplicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> globalNodeGroupsToRemove, List<String> globalNodeGroupsToRetain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalReplicationGroupId' is set
        if (globalReplicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'globalReplicationGroupId' when calling gETDecreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'nodeGroupCount' is set
        if (nodeGroupCount == null) {
            throw new ApiException("Missing the required parameter 'nodeGroupCount' when calling gETDecreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'applyImmediately' is set
        if (applyImmediately == null) {
            throw new ApiException("Missing the required parameter 'applyImmediately' when calling gETDecreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDecreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDecreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        return gETDecreaseNodeGroupsInGlobalReplicationGroupCall(globalReplicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalNodeGroupsToRemove, globalNodeGroupsToRetain, _callback);

    }

    /**
     * 
     * Decreases the number of node groups in a Global datastore
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param nodeGroupCount The number of node groups (shards) that results from the modification of the shard configuration (required)
     * @param applyImmediately Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalNodeGroupsToRemove If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache for Redis will attempt to remove all node groups listed by GlobalNodeGroupsToRemove from the cluster.  (optional)
     * @param globalNodeGroupsToRetain If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRetain is a list of NodeGroupIds to retain from the cluster. ElastiCache for Redis will attempt to retain all node groups listed by GlobalNodeGroupsToRetain from the cluster.  (optional)
     * @return DecreaseNodeGroupsInGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DecreaseNodeGroupsInGlobalReplicationGroupResult gETDecreaseNodeGroupsInGlobalReplicationGroup(String globalReplicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> globalNodeGroupsToRemove, List<String> globalNodeGroupsToRetain) throws ApiException {
        ApiResponse<DecreaseNodeGroupsInGlobalReplicationGroupResult> localVarResp = gETDecreaseNodeGroupsInGlobalReplicationGroupWithHttpInfo(globalReplicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalNodeGroupsToRemove, globalNodeGroupsToRetain);
        return localVarResp.getData();
    }

    /**
     * 
     * Decreases the number of node groups in a Global datastore
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param nodeGroupCount The number of node groups (shards) that results from the modification of the shard configuration (required)
     * @param applyImmediately Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalNodeGroupsToRemove If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache for Redis will attempt to remove all node groups listed by GlobalNodeGroupsToRemove from the cluster.  (optional)
     * @param globalNodeGroupsToRetain If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRetain is a list of NodeGroupIds to retain from the cluster. ElastiCache for Redis will attempt to retain all node groups listed by GlobalNodeGroupsToRetain from the cluster.  (optional)
     * @return ApiResponse&lt;DecreaseNodeGroupsInGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DecreaseNodeGroupsInGlobalReplicationGroupResult> gETDecreaseNodeGroupsInGlobalReplicationGroupWithHttpInfo(String globalReplicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> globalNodeGroupsToRemove, List<String> globalNodeGroupsToRetain) throws ApiException {
        okhttp3.Call localVarCall = gETDecreaseNodeGroupsInGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalNodeGroupsToRemove, globalNodeGroupsToRetain, null);
        Type localVarReturnType = new TypeToken<DecreaseNodeGroupsInGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Decreases the number of node groups in a Global datastore
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param nodeGroupCount The number of node groups (shards) that results from the modification of the shard configuration (required)
     * @param applyImmediately Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is true.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalNodeGroupsToRemove If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRemove is a list of NodeGroupIds to remove from the cluster. ElastiCache for Redis will attempt to remove all node groups listed by GlobalNodeGroupsToRemove from the cluster.  (optional)
     * @param globalNodeGroupsToRetain If the value of NodeGroupCount is less than the current number of node groups (shards), then either NodeGroupsToRemove or NodeGroupsToRetain is required. GlobalNodeGroupsToRetain is a list of NodeGroupIds to retain from the cluster. ElastiCache for Redis will attempt to retain all node groups listed by GlobalNodeGroupsToRetain from the cluster.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDecreaseNodeGroupsInGlobalReplicationGroupAsync(String globalReplicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> globalNodeGroupsToRemove, List<String> globalNodeGroupsToRetain, final ApiCallback<DecreaseNodeGroupsInGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDecreaseNodeGroupsInGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalNodeGroupsToRemove, globalNodeGroupsToRetain, _callback);
        Type localVarReturnType = new TypeToken<DecreaseNodeGroupsInGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDecreaseReplicaCount
     * @param replicationGroupId The id of the replication group from which you want to remove replica nodes. (required)
     * @param applyImmediately If &lt;code&gt;True&lt;/code&gt;, the number of replica nodes is decreased immediately. &lt;code&gt;ApplyImmediately&#x3D;False&lt;/code&gt; is not currently supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newReplicaCount &lt;p&gt;The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group&#39;s node groups.&lt;/p&gt; &lt;p&gt;The minimum number of replicas in a shard or replication group is:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode disabled)&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If Multi-AZ is enabled: 1&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If Multi-AZ is not enabled: 0&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param replicaConfiguration A list of &lt;code&gt;ConfigureShard&lt;/code&gt; objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The &lt;code&gt;ConfigureShard&lt;/code&gt; has three members: &lt;code&gt;NewReplicaCount&lt;/code&gt;, &lt;code&gt;NodeGroupId&lt;/code&gt;, and &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt;. (optional)
     * @param replicasToRemove A list of the node ids to remove from the replication group or node group (shard). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDecreaseReplicaCountCall(String replicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer newReplicaCount, List<GETDecreaseReplicaCountReplicaConfigurationParameterInner> replicaConfiguration, List<String> replicasToRemove, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DecreaseReplicaCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (newReplicaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NewReplicaCount", newReplicaCount));
        }

        if (replicaConfiguration != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ReplicaConfiguration", replicaConfiguration));
        }

        if (replicasToRemove != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ReplicasToRemove", replicasToRemove));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDecreaseReplicaCountValidateBeforeCall(String replicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer newReplicaCount, List<GETDecreaseReplicaCountReplicaConfigurationParameterInner> replicaConfiguration, List<String> replicasToRemove, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicationGroupId' is set
        if (replicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'replicationGroupId' when calling gETDecreaseReplicaCount(Async)");
        }

        // verify the required parameter 'applyImmediately' is set
        if (applyImmediately == null) {
            throw new ApiException("Missing the required parameter 'applyImmediately' when calling gETDecreaseReplicaCount(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDecreaseReplicaCount(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDecreaseReplicaCount(Async)");
        }

        return gETDecreaseReplicaCountCall(replicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newReplicaCount, replicaConfiguration, replicasToRemove, _callback);

    }

    /**
     * 
     * Dynamically decreases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     * @param replicationGroupId The id of the replication group from which you want to remove replica nodes. (required)
     * @param applyImmediately If &lt;code&gt;True&lt;/code&gt;, the number of replica nodes is decreased immediately. &lt;code&gt;ApplyImmediately&#x3D;False&lt;/code&gt; is not currently supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newReplicaCount &lt;p&gt;The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group&#39;s node groups.&lt;/p&gt; &lt;p&gt;The minimum number of replicas in a shard or replication group is:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode disabled)&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If Multi-AZ is enabled: 1&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If Multi-AZ is not enabled: 0&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param replicaConfiguration A list of &lt;code&gt;ConfigureShard&lt;/code&gt; objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The &lt;code&gt;ConfigureShard&lt;/code&gt; has three members: &lt;code&gt;NewReplicaCount&lt;/code&gt;, &lt;code&gt;NodeGroupId&lt;/code&gt;, and &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt;. (optional)
     * @param replicasToRemove A list of the node ids to remove from the replication group or node group (shard). (optional)
     * @return DecreaseReplicaCountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DecreaseReplicaCountResult gETDecreaseReplicaCount(String replicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer newReplicaCount, List<GETDecreaseReplicaCountReplicaConfigurationParameterInner> replicaConfiguration, List<String> replicasToRemove) throws ApiException {
        ApiResponse<DecreaseReplicaCountResult> localVarResp = gETDecreaseReplicaCountWithHttpInfo(replicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newReplicaCount, replicaConfiguration, replicasToRemove);
        return localVarResp.getData();
    }

    /**
     * 
     * Dynamically decreases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     * @param replicationGroupId The id of the replication group from which you want to remove replica nodes. (required)
     * @param applyImmediately If &lt;code&gt;True&lt;/code&gt;, the number of replica nodes is decreased immediately. &lt;code&gt;ApplyImmediately&#x3D;False&lt;/code&gt; is not currently supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newReplicaCount &lt;p&gt;The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group&#39;s node groups.&lt;/p&gt; &lt;p&gt;The minimum number of replicas in a shard or replication group is:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode disabled)&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If Multi-AZ is enabled: 1&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If Multi-AZ is not enabled: 0&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param replicaConfiguration A list of &lt;code&gt;ConfigureShard&lt;/code&gt; objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The &lt;code&gt;ConfigureShard&lt;/code&gt; has three members: &lt;code&gt;NewReplicaCount&lt;/code&gt;, &lt;code&gt;NodeGroupId&lt;/code&gt;, and &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt;. (optional)
     * @param replicasToRemove A list of the node ids to remove from the replication group or node group (shard). (optional)
     * @return ApiResponse&lt;DecreaseReplicaCountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DecreaseReplicaCountResult> gETDecreaseReplicaCountWithHttpInfo(String replicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer newReplicaCount, List<GETDecreaseReplicaCountReplicaConfigurationParameterInner> replicaConfiguration, List<String> replicasToRemove) throws ApiException {
        okhttp3.Call localVarCall = gETDecreaseReplicaCountValidateBeforeCall(replicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newReplicaCount, replicaConfiguration, replicasToRemove, null);
        Type localVarReturnType = new TypeToken<DecreaseReplicaCountResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Dynamically decreases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     * @param replicationGroupId The id of the replication group from which you want to remove replica nodes. (required)
     * @param applyImmediately If &lt;code&gt;True&lt;/code&gt;, the number of replica nodes is decreased immediately. &lt;code&gt;ApplyImmediately&#x3D;False&lt;/code&gt; is not currently supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newReplicaCount &lt;p&gt;The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group&#39;s node groups.&lt;/p&gt; &lt;p&gt;The minimum number of replicas in a shard or replication group is:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode disabled)&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If Multi-AZ is enabled: 1&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If Multi-AZ is not enabled: 0&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode enabled): 0 (though you will not be able to failover to a replica if your primary node fails)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param replicaConfiguration A list of &lt;code&gt;ConfigureShard&lt;/code&gt; objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The &lt;code&gt;ConfigureShard&lt;/code&gt; has three members: &lt;code&gt;NewReplicaCount&lt;/code&gt;, &lt;code&gt;NodeGroupId&lt;/code&gt;, and &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt;. (optional)
     * @param replicasToRemove A list of the node ids to remove from the replication group or node group (shard). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDecreaseReplicaCountAsync(String replicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer newReplicaCount, List<GETDecreaseReplicaCountReplicaConfigurationParameterInner> replicaConfiguration, List<String> replicasToRemove, final ApiCallback<DecreaseReplicaCountResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDecreaseReplicaCountValidateBeforeCall(replicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newReplicaCount, replicaConfiguration, replicasToRemove, _callback);
        Type localVarReturnType = new TypeToken<DecreaseReplicaCountResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteCacheCluster
     * @param cacheClusterId The cluster identifier for the cluster to be deleted. This parameter is not case sensitive. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param finalSnapshotIdentifier The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteCacheClusterCall(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String finalSnapshotIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteCacheCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheClusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheClusterId", cacheClusterId));
        }

        if (finalSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FinalSnapshotIdentifier", finalSnapshotIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteCacheClusterValidateBeforeCall(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String finalSnapshotIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheClusterId' is set
        if (cacheClusterId == null) {
            throw new ApiException("Missing the required parameter 'cacheClusterId' when calling gETDeleteCacheCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteCacheCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteCacheCluster(Async)");
        }

        return gETDeleteCacheClusterCall(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, finalSnapshotIdentifier, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a previously provisioned cluster. &lt;code&gt;DeleteCacheCluster&lt;/code&gt; deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.&lt;/p&gt; &lt;p&gt;This operation is not valid for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode enabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode disabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the last read replica of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the primary node of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A node group (shard) that has Multi-AZ mode enabled&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster from a Redis (cluster mode enabled) replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is not in the &lt;code&gt;available&lt;/code&gt; state&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param cacheClusterId The cluster identifier for the cluster to be deleted. This parameter is not case sensitive. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param finalSnapshotIdentifier The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward. (optional)
     * @return DeleteCacheClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCacheClusterResult gETDeleteCacheCluster(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String finalSnapshotIdentifier) throws ApiException {
        ApiResponse<DeleteCacheClusterResult> localVarResp = gETDeleteCacheClusterWithHttpInfo(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, finalSnapshotIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a previously provisioned cluster. &lt;code&gt;DeleteCacheCluster&lt;/code&gt; deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.&lt;/p&gt; &lt;p&gt;This operation is not valid for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode enabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode disabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the last read replica of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the primary node of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A node group (shard) that has Multi-AZ mode enabled&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster from a Redis (cluster mode enabled) replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is not in the &lt;code&gt;available&lt;/code&gt; state&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param cacheClusterId The cluster identifier for the cluster to be deleted. This parameter is not case sensitive. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param finalSnapshotIdentifier The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward. (optional)
     * @return ApiResponse&lt;DeleteCacheClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteCacheClusterResult> gETDeleteCacheClusterWithHttpInfo(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String finalSnapshotIdentifier) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteCacheClusterValidateBeforeCall(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, finalSnapshotIdentifier, null);
        Type localVarReturnType = new TypeToken<DeleteCacheClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a previously provisioned cluster. &lt;code&gt;DeleteCacheCluster&lt;/code&gt; deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.&lt;/p&gt; &lt;p&gt;This operation is not valid for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode enabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode disabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the last read replica of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the primary node of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A node group (shard) that has Multi-AZ mode enabled&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster from a Redis (cluster mode enabled) replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is not in the &lt;code&gt;available&lt;/code&gt; state&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param cacheClusterId The cluster identifier for the cluster to be deleted. This parameter is not case sensitive. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param finalSnapshotIdentifier The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cluster immediately afterward. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteCacheClusterAsync(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String finalSnapshotIdentifier, final ApiCallback<DeleteCacheClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteCacheClusterValidateBeforeCall(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, finalSnapshotIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DeleteCacheClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteCacheParameterGroup
     * @param cacheParameterGroupName &lt;p&gt;The name of the cache parameter group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified cache security group must not be associated with any clusters.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteCacheParameterGroupCall(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteCacheParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupName", cacheParameterGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteCacheParameterGroupValidateBeforeCall(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheParameterGroupName' is set
        if (cacheParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'cacheParameterGroupName' when calling gETDeleteCacheParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteCacheParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteCacheParameterGroup(Async)");
        }

        return gETDeleteCacheParameterGroupCall(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account.
     * @param cacheParameterGroupName &lt;p&gt;The name of the cache parameter group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified cache security group must not be associated with any clusters.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteCacheParameterGroup(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteCacheParameterGroupWithHttpInfo(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account.
     * @param cacheParameterGroupName &lt;p&gt;The name of the cache parameter group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified cache security group must not be associated with any clusters.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteCacheParameterGroupWithHttpInfo(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteCacheParameterGroupValidateBeforeCall(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account.
     * @param cacheParameterGroupName &lt;p&gt;The name of the cache parameter group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The specified cache security group must not be associated with any clusters.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteCacheParameterGroupAsync(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteCacheParameterGroupValidateBeforeCall(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteCacheSecurityGroup
     * @param cacheSecurityGroupName &lt;p&gt;The name of the cache security group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete the default security group.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteCacheSecurityGroupCall(String cacheSecurityGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteCacheSecurityGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheSecurityGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSecurityGroupName", cacheSecurityGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteCacheSecurityGroupValidateBeforeCall(String cacheSecurityGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheSecurityGroupName' is set
        if (cacheSecurityGroupName == null) {
            throw new ApiException("Missing the required parameter 'cacheSecurityGroupName' when calling gETDeleteCacheSecurityGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteCacheSecurityGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteCacheSecurityGroup(Async)");
        }

        return gETDeleteCacheSecurityGroupCall(cacheSecurityGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a cache security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a cache security group if it is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     * @param cacheSecurityGroupName &lt;p&gt;The name of the cache security group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete the default security group.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteCacheSecurityGroup(String cacheSecurityGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteCacheSecurityGroupWithHttpInfo(cacheSecurityGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a cache security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a cache security group if it is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     * @param cacheSecurityGroupName &lt;p&gt;The name of the cache security group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete the default security group.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteCacheSecurityGroupWithHttpInfo(String cacheSecurityGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteCacheSecurityGroupValidateBeforeCall(cacheSecurityGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a cache security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a cache security group if it is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     * @param cacheSecurityGroupName &lt;p&gt;The name of the cache security group to delete.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete the default security group.&lt;/p&gt; &lt;/note&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteCacheSecurityGroupAsync(String cacheSecurityGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteCacheSecurityGroupValidateBeforeCall(cacheSecurityGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteCacheSubnetGroup
     * @param cacheSubnetGroupName &lt;p&gt;The name of the cache subnet group to delete.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters or hyphens.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupInUse </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteCacheSubnetGroupCall(String cacheSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteCacheSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSubnetGroupName", cacheSubnetGroupName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteCacheSubnetGroupValidateBeforeCall(String cacheSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheSubnetGroupName' is set
        if (cacheSubnetGroupName == null) {
            throw new ApiException("Missing the required parameter 'cacheSubnetGroupName' when calling gETDeleteCacheSubnetGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteCacheSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteCacheSubnetGroup(Async)");
        }

        return gETDeleteCacheSubnetGroupCall(cacheSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a cache subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a default cache subnet group or one that is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     * @param cacheSubnetGroupName &lt;p&gt;The name of the cache subnet group to delete.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters or hyphens.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupInUse </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void gETDeleteCacheSubnetGroup(String cacheSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        gETDeleteCacheSubnetGroupWithHttpInfo(cacheSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a cache subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a default cache subnet group or one that is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     * @param cacheSubnetGroupName &lt;p&gt;The name of the cache subnet group to delete.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters or hyphens.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupInUse </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gETDeleteCacheSubnetGroupWithHttpInfo(String cacheSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteCacheSubnetGroupValidateBeforeCall(cacheSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a cache subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a default cache subnet group or one that is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     * @param cacheSubnetGroupName &lt;p&gt;The name of the cache subnet group to delete.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters or hyphens.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupInUse </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteCacheSubnetGroupAsync(String cacheSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteCacheSubnetGroupValidateBeforeCall(cacheSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteGlobalReplicationGroup
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param retainPrimaryReplicationGroup The primary replication group is retained as a standalone replication group.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteGlobalReplicationGroupCall(String globalReplicationGroupId, Boolean retainPrimaryReplicationGroup, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalReplicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalReplicationGroupId", globalReplicationGroupId));
        }

        if (retainPrimaryReplicationGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RetainPrimaryReplicationGroup", retainPrimaryReplicationGroup));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteGlobalReplicationGroupValidateBeforeCall(String globalReplicationGroupId, Boolean retainPrimaryReplicationGroup, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalReplicationGroupId' is set
        if (globalReplicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'globalReplicationGroupId' when calling gETDeleteGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'retainPrimaryReplicationGroup' is set
        if (retainPrimaryReplicationGroup == null) {
            throw new ApiException("Missing the required parameter 'retainPrimaryReplicationGroup' when calling gETDeleteGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteGlobalReplicationGroup(Async)");
        }

        return gETDeleteGlobalReplicationGroupCall(globalReplicationGroupId, retainPrimaryReplicationGroup, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deleting a Global datastore is a two-step process: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;First, you must &lt;a&gt;DisassociateGlobalReplicationGroup&lt;/a&gt; to remove the secondary clusters in the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Once the Global datastore contains only the primary cluster, you can use the &lt;code&gt;DeleteGlobalReplicationGroup&lt;/code&gt; API to delete the Global datastore while retainining the primary cluster using &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt;
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param retainPrimaryReplicationGroup The primary replication group is retained as a standalone replication group.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGlobalReplicationGroupResult gETDeleteGlobalReplicationGroup(String globalReplicationGroupId, Boolean retainPrimaryReplicationGroup, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteGlobalReplicationGroupResult> localVarResp = gETDeleteGlobalReplicationGroupWithHttpInfo(globalReplicationGroupId, retainPrimaryReplicationGroup, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deleting a Global datastore is a two-step process: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;First, you must &lt;a&gt;DisassociateGlobalReplicationGroup&lt;/a&gt; to remove the secondary clusters in the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Once the Global datastore contains only the primary cluster, you can use the &lt;code&gt;DeleteGlobalReplicationGroup&lt;/code&gt; API to delete the Global datastore while retainining the primary cluster using &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt;
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param retainPrimaryReplicationGroup The primary replication group is retained as a standalone replication group.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteGlobalReplicationGroupResult> gETDeleteGlobalReplicationGroupWithHttpInfo(String globalReplicationGroupId, Boolean retainPrimaryReplicationGroup, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, retainPrimaryReplicationGroup, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deleting a Global datastore is a two-step process: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;First, you must &lt;a&gt;DisassociateGlobalReplicationGroup&lt;/a&gt; to remove the secondary clusters in the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Once the Global datastore contains only the primary cluster, you can use the &lt;code&gt;DeleteGlobalReplicationGroup&lt;/code&gt; API to delete the Global datastore while retainining the primary cluster using &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt;
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param retainPrimaryReplicationGroup The primary replication group is retained as a standalone replication group.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteGlobalReplicationGroupAsync(String globalReplicationGroupId, Boolean retainPrimaryReplicationGroup, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, retainPrimaryReplicationGroup, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteReplicationGroup
     * @param replicationGroupId The identifier for the cluster to be deleted. This parameter is not case sensitive. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param retainPrimaryCluster If set to &lt;code&gt;true&lt;/code&gt;, all of the read replicas are deleted, but the primary node is retained. (optional)
     * @param finalSnapshotIdentifier The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteReplicationGroupCall(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean retainPrimaryCluster, String finalSnapshotIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (retainPrimaryCluster != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RetainPrimaryCluster", retainPrimaryCluster));
        }

        if (finalSnapshotIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FinalSnapshotIdentifier", finalSnapshotIdentifier));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteReplicationGroupValidateBeforeCall(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean retainPrimaryCluster, String finalSnapshotIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicationGroupId' is set
        if (replicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'replicationGroupId' when calling gETDeleteReplicationGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteReplicationGroup(Async)");
        }

        return gETDeleteReplicationGroupCall(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retainPrimaryCluster, finalSnapshotIdentifier, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting &lt;code&gt;RetainPrimaryCluster&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param replicationGroupId The identifier for the cluster to be deleted. This parameter is not case sensitive. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param retainPrimaryCluster If set to &lt;code&gt;true&lt;/code&gt;, all of the read replicas are deleted, but the primary node is retained. (optional)
     * @param finalSnapshotIdentifier The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted. (optional)
     * @return DeleteReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteReplicationGroupResult gETDeleteReplicationGroup(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean retainPrimaryCluster, String finalSnapshotIdentifier) throws ApiException {
        ApiResponse<DeleteReplicationGroupResult> localVarResp = gETDeleteReplicationGroupWithHttpInfo(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retainPrimaryCluster, finalSnapshotIdentifier);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting &lt;code&gt;RetainPrimaryCluster&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param replicationGroupId The identifier for the cluster to be deleted. This parameter is not case sensitive. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param retainPrimaryCluster If set to &lt;code&gt;true&lt;/code&gt;, all of the read replicas are deleted, but the primary node is retained. (optional)
     * @param finalSnapshotIdentifier The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted. (optional)
     * @return ApiResponse&lt;DeleteReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteReplicationGroupResult> gETDeleteReplicationGroupWithHttpInfo(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean retainPrimaryCluster, String finalSnapshotIdentifier) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteReplicationGroupValidateBeforeCall(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retainPrimaryCluster, finalSnapshotIdentifier, null);
        Type localVarReturnType = new TypeToken<DeleteReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting &lt;code&gt;RetainPrimaryCluster&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param replicationGroupId The identifier for the cluster to be deleted. This parameter is not case sensitive. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param retainPrimaryCluster If set to &lt;code&gt;true&lt;/code&gt;, all of the read replicas are deleted, but the primary node is retained. (optional)
     * @param finalSnapshotIdentifier The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteReplicationGroupAsync(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean retainPrimaryCluster, String finalSnapshotIdentifier, final ApiCallback<DeleteReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteReplicationGroupValidateBeforeCall(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, retainPrimaryCluster, finalSnapshotIdentifier, _callback);
        Type localVarReturnType = new TypeToken<DeleteReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteSnapshot
     * @param snapshotName The name of the snapshot to be deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteSnapshotCall(String snapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (snapshotName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotName", snapshotName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteSnapshotValidateBeforeCall(String snapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'snapshotName' is set
        if (snapshotName == null) {
            throw new ApiException("Missing the required parameter 'snapshotName' when calling gETDeleteSnapshot(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteSnapshot(Async)");
        }

        return gETDeleteSnapshotCall(snapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotName The name of the snapshot to be deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSnapshotResult gETDeleteSnapshot(String snapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteSnapshotResult> localVarResp = gETDeleteSnapshotWithHttpInfo(snapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotName The name of the snapshot to be deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteSnapshotResult> gETDeleteSnapshotWithHttpInfo(String snapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteSnapshotValidateBeforeCall(snapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param snapshotName The name of the snapshot to be deleted. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteSnapshotAsync(String snapshotName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteSnapshotValidateBeforeCall(snapshotName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteUser
     * @param userId The ID of the user. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserAssociatedToUserGroupFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteUserCall(String userId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserId", userId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteUserValidateBeforeCall(String userId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling gETDeleteUser(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteUser(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteUser(Async)");
        }

        return gETDeleteUserCall(userId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     * @param userId The ID of the user. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserAssociatedToUserGroupFault </td><td>  -  </td></tr>
     </table>
     */
    public User gETDeleteUser(String userId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<User> localVarResp = gETDeleteUserWithHttpInfo(userId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     * @param userId The ID of the user. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserAssociatedToUserGroupFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> gETDeleteUserWithHttpInfo(String userId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteUserValidateBeforeCall(userId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * For Redis engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     * @param userId The ID of the user. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserAssociatedToUserGroupFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteUserAsync(String userId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteUserValidateBeforeCall(userId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDeleteUserGroup
     * @param userGroupId The ID of the user group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteUserGroupCall(String userGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DeleteUserGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserGroupId", userGroupId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDeleteUserGroupValidateBeforeCall(String userGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException("Missing the required parameter 'userGroupId' when calling gETDeleteUserGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDeleteUserGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDeleteUserGroup(Async)");
        }

        return gETDeleteUserGroupCall(userGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     * @param userGroupId The ID of the user group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public UserGroup gETDeleteUserGroup(String userGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UserGroup> localVarResp = gETDeleteUserGroupWithHttpInfo(userGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     * @param userGroupId The ID of the user group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroup> gETDeleteUserGroupWithHttpInfo(String userGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDeleteUserGroupValidateBeforeCall(userGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * For Redis engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     * @param userGroupId The ID of the user group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDeleteUserGroupAsync(String userGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDeleteUserGroupValidateBeforeCall(userGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeCacheClusters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheClusterId The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn&#39;t case sensitive. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param showCacheNodeInfo An optional flag that can be included in the &lt;code&gt;DescribeCacheCluster&lt;/code&gt; request to retrieve information about the individual cache nodes. (optional)
     * @param showCacheClustersNotInReplicationGroups An optional flag that can be included in the &lt;code&gt;DescribeCacheCluster&lt;/code&gt; request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCacheClustersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheClusterId, Integer maxRecords, String marker, Boolean showCacheNodeInfo, Boolean showCacheClustersNotInReplicationGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCacheClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheClusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheClusterId", cacheClusterId));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (showCacheNodeInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ShowCacheNodeInfo", showCacheNodeInfo));
        }

        if (showCacheClustersNotInReplicationGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ShowCacheClustersNotInReplicationGroups", showCacheClustersNotInReplicationGroups));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeCacheClustersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheClusterId, Integer maxRecords, String marker, Boolean showCacheNodeInfo, Boolean showCacheClustersNotInReplicationGroups, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeCacheClusters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeCacheClusters(Async)");
        }

        return gETDescribeCacheClustersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheClusterId, maxRecords, marker, showCacheNodeInfo, showCacheClustersNotInReplicationGroups, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.&lt;/p&gt; &lt;p&gt;By default, abbreviated information about the clusters is returned. You can use the optional &lt;i&gt;ShowCacheNodeInfo&lt;/i&gt; flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;creating&lt;/i&gt; state, only cluster-level information is displayed until all of the nodes are successfully provisioned.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;deleting&lt;/i&gt; state, only cluster-level information is displayed.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is &lt;i&gt;available&lt;/i&gt;, the cluster is ready for use.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheClusterId The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn&#39;t case sensitive. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param showCacheNodeInfo An optional flag that can be included in the &lt;code&gt;DescribeCacheCluster&lt;/code&gt; request to retrieve information about the individual cache nodes. (optional)
     * @param showCacheClustersNotInReplicationGroups An optional flag that can be included in the &lt;code&gt;DescribeCacheCluster&lt;/code&gt; request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters. (optional)
     * @return CacheClusterMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CacheClusterMessage gETDescribeCacheClusters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheClusterId, Integer maxRecords, String marker, Boolean showCacheNodeInfo, Boolean showCacheClustersNotInReplicationGroups) throws ApiException {
        ApiResponse<CacheClusterMessage> localVarResp = gETDescribeCacheClustersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheClusterId, maxRecords, marker, showCacheNodeInfo, showCacheClustersNotInReplicationGroups);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.&lt;/p&gt; &lt;p&gt;By default, abbreviated information about the clusters is returned. You can use the optional &lt;i&gt;ShowCacheNodeInfo&lt;/i&gt; flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;creating&lt;/i&gt; state, only cluster-level information is displayed until all of the nodes are successfully provisioned.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;deleting&lt;/i&gt; state, only cluster-level information is displayed.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is &lt;i&gt;available&lt;/i&gt;, the cluster is ready for use.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheClusterId The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn&#39;t case sensitive. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param showCacheNodeInfo An optional flag that can be included in the &lt;code&gt;DescribeCacheCluster&lt;/code&gt; request to retrieve information about the individual cache nodes. (optional)
     * @param showCacheClustersNotInReplicationGroups An optional flag that can be included in the &lt;code&gt;DescribeCacheCluster&lt;/code&gt; request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters. (optional)
     * @return ApiResponse&lt;CacheClusterMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheClusterMessage> gETDescribeCacheClustersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheClusterId, Integer maxRecords, String marker, Boolean showCacheNodeInfo, Boolean showCacheClustersNotInReplicationGroups) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeCacheClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheClusterId, maxRecords, marker, showCacheNodeInfo, showCacheClustersNotInReplicationGroups, null);
        Type localVarReturnType = new TypeToken<CacheClusterMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.&lt;/p&gt; &lt;p&gt;By default, abbreviated information about the clusters is returned. You can use the optional &lt;i&gt;ShowCacheNodeInfo&lt;/i&gt; flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;creating&lt;/i&gt; state, only cluster-level information is displayed until all of the nodes are successfully provisioned.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;deleting&lt;/i&gt; state, only cluster-level information is displayed.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is &lt;i&gt;available&lt;/i&gt;, the cluster is ready for use.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheClusterId The user-supplied cluster identifier. If this parameter is specified, only information about that specific cluster is returned. This parameter isn&#39;t case sensitive. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param showCacheNodeInfo An optional flag that can be included in the &lt;code&gt;DescribeCacheCluster&lt;/code&gt; request to retrieve information about the individual cache nodes. (optional)
     * @param showCacheClustersNotInReplicationGroups An optional flag that can be included in the &lt;code&gt;DescribeCacheCluster&lt;/code&gt; request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCacheClustersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheClusterId, Integer maxRecords, String marker, Boolean showCacheNodeInfo, Boolean showCacheClustersNotInReplicationGroups, final ApiCallback<CacheClusterMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeCacheClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheClusterId, maxRecords, marker, showCacheNodeInfo, showCacheClustersNotInReplicationGroups, _callback);
        Type localVarReturnType = new TypeToken<CacheClusterMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeCacheEngineVersions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The cache engine to return. Valid values: &lt;code&gt;memcached&lt;/code&gt; | &lt;code&gt;redis&lt;/code&gt;  (optional)
     * @param engineVersion &lt;p&gt;The cache engine version to return.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;1.4.14&lt;/code&gt; &lt;/p&gt; (optional)
     * @param cacheParameterGroupFamily &lt;p&gt;The name of a specific cache parameter group family to return details for.&lt;/p&gt; &lt;p&gt;Valid values are: &lt;code&gt;memcached1.4&lt;/code&gt; | &lt;code&gt;memcached1.5&lt;/code&gt; | &lt;code&gt;memcached1.6&lt;/code&gt; | &lt;code&gt;redis2.6&lt;/code&gt; | &lt;code&gt;redis2.8&lt;/code&gt; | &lt;code&gt;redis3.2&lt;/code&gt; | &lt;code&gt;redis4.0&lt;/code&gt; | &lt;code&gt;redis5.0&lt;/code&gt; | &lt;code&gt;redis6.x&lt;/code&gt; | &lt;code&gt;redis6.2&lt;/code&gt; | &lt;code&gt;redis7&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 alphanumeric characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param defaultOnly If &lt;code&gt;true&lt;/code&gt;, specifies that only the default version of the specified engine or engine and major version combination is to be returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCacheEngineVersionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String cacheParameterGroupFamily, Integer maxRecords, String marker, Boolean defaultOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCacheEngineVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (cacheParameterGroupFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupFamily", cacheParameterGroupFamily));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (defaultOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DefaultOnly", defaultOnly));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeCacheEngineVersionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String cacheParameterGroupFamily, Integer maxRecords, String marker, Boolean defaultOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeCacheEngineVersions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeCacheEngineVersions(Async)");
        }

        return gETDescribeCacheEngineVersionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, cacheParameterGroupFamily, maxRecords, marker, defaultOnly, _callback);

    }

    /**
     * 
     * Returns a list of the available cache engines and their versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The cache engine to return. Valid values: &lt;code&gt;memcached&lt;/code&gt; | &lt;code&gt;redis&lt;/code&gt;  (optional)
     * @param engineVersion &lt;p&gt;The cache engine version to return.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;1.4.14&lt;/code&gt; &lt;/p&gt; (optional)
     * @param cacheParameterGroupFamily &lt;p&gt;The name of a specific cache parameter group family to return details for.&lt;/p&gt; &lt;p&gt;Valid values are: &lt;code&gt;memcached1.4&lt;/code&gt; | &lt;code&gt;memcached1.5&lt;/code&gt; | &lt;code&gt;memcached1.6&lt;/code&gt; | &lt;code&gt;redis2.6&lt;/code&gt; | &lt;code&gt;redis2.8&lt;/code&gt; | &lt;code&gt;redis3.2&lt;/code&gt; | &lt;code&gt;redis4.0&lt;/code&gt; | &lt;code&gt;redis5.0&lt;/code&gt; | &lt;code&gt;redis6.x&lt;/code&gt; | &lt;code&gt;redis6.2&lt;/code&gt; | &lt;code&gt;redis7&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 alphanumeric characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param defaultOnly If &lt;code&gt;true&lt;/code&gt;, specifies that only the default version of the specified engine or engine and major version combination is to be returned. (optional)
     * @return CacheEngineVersionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CacheEngineVersionMessage gETDescribeCacheEngineVersions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String cacheParameterGroupFamily, Integer maxRecords, String marker, Boolean defaultOnly) throws ApiException {
        ApiResponse<CacheEngineVersionMessage> localVarResp = gETDescribeCacheEngineVersionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, cacheParameterGroupFamily, maxRecords, marker, defaultOnly);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of the available cache engines and their versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The cache engine to return. Valid values: &lt;code&gt;memcached&lt;/code&gt; | &lt;code&gt;redis&lt;/code&gt;  (optional)
     * @param engineVersion &lt;p&gt;The cache engine version to return.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;1.4.14&lt;/code&gt; &lt;/p&gt; (optional)
     * @param cacheParameterGroupFamily &lt;p&gt;The name of a specific cache parameter group family to return details for.&lt;/p&gt; &lt;p&gt;Valid values are: &lt;code&gt;memcached1.4&lt;/code&gt; | &lt;code&gt;memcached1.5&lt;/code&gt; | &lt;code&gt;memcached1.6&lt;/code&gt; | &lt;code&gt;redis2.6&lt;/code&gt; | &lt;code&gt;redis2.8&lt;/code&gt; | &lt;code&gt;redis3.2&lt;/code&gt; | &lt;code&gt;redis4.0&lt;/code&gt; | &lt;code&gt;redis5.0&lt;/code&gt; | &lt;code&gt;redis6.x&lt;/code&gt; | &lt;code&gt;redis6.2&lt;/code&gt; | &lt;code&gt;redis7&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 alphanumeric characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param defaultOnly If &lt;code&gt;true&lt;/code&gt;, specifies that only the default version of the specified engine or engine and major version combination is to be returned. (optional)
     * @return ApiResponse&lt;CacheEngineVersionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheEngineVersionMessage> gETDescribeCacheEngineVersionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String cacheParameterGroupFamily, Integer maxRecords, String marker, Boolean defaultOnly) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeCacheEngineVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, cacheParameterGroupFamily, maxRecords, marker, defaultOnly, null);
        Type localVarReturnType = new TypeToken<CacheEngineVersionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of the available cache engines and their versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The cache engine to return. Valid values: &lt;code&gt;memcached&lt;/code&gt; | &lt;code&gt;redis&lt;/code&gt;  (optional)
     * @param engineVersion &lt;p&gt;The cache engine version to return.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;1.4.14&lt;/code&gt; &lt;/p&gt; (optional)
     * @param cacheParameterGroupFamily &lt;p&gt;The name of a specific cache parameter group family to return details for.&lt;/p&gt; &lt;p&gt;Valid values are: &lt;code&gt;memcached1.4&lt;/code&gt; | &lt;code&gt;memcached1.5&lt;/code&gt; | &lt;code&gt;memcached1.6&lt;/code&gt; | &lt;code&gt;redis2.6&lt;/code&gt; | &lt;code&gt;redis2.8&lt;/code&gt; | &lt;code&gt;redis3.2&lt;/code&gt; | &lt;code&gt;redis4.0&lt;/code&gt; | &lt;code&gt;redis5.0&lt;/code&gt; | &lt;code&gt;redis6.x&lt;/code&gt; | &lt;code&gt;redis6.2&lt;/code&gt; | &lt;code&gt;redis7&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be 1 to 255 alphanumeric characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;First character must be a letter&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot end with a hyphen or contain two consecutive hyphens&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param defaultOnly If &lt;code&gt;true&lt;/code&gt;, specifies that only the default version of the specified engine or engine and major version combination is to be returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCacheEngineVersionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String engineVersion, String cacheParameterGroupFamily, Integer maxRecords, String marker, Boolean defaultOnly, final ApiCallback<CacheEngineVersionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeCacheEngineVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, engineVersion, cacheParameterGroupFamily, maxRecords, marker, defaultOnly, _callback);
        Type localVarReturnType = new TypeToken<CacheEngineVersionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeCacheParameterGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheParameterGroupName The name of a specific cache parameter group to return details for. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCacheParameterGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheParameterGroupName, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCacheParameterGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupName", cacheParameterGroupName));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeCacheParameterGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheParameterGroupName, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeCacheParameterGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeCacheParameterGroups(Async)");
        }

        return gETDescribeCacheParameterGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheParameterGroupName, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheParameterGroupName The name of a specific cache parameter group to return details for. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return CacheParameterGroupsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CacheParameterGroupsMessage gETDescribeCacheParameterGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheParameterGroupName, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<CacheParameterGroupsMessage> localVarResp = gETDescribeCacheParameterGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheParameterGroupName, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheParameterGroupName The name of a specific cache parameter group to return details for. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;CacheParameterGroupsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheParameterGroupsMessage> gETDescribeCacheParameterGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheParameterGroupName, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeCacheParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheParameterGroupName, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<CacheParameterGroupsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheParameterGroupName The name of a specific cache parameter group to return details for. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCacheParameterGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheParameterGroupName, Integer maxRecords, String marker, final ApiCallback<CacheParameterGroupsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeCacheParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheParameterGroupName, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<CacheParameterGroupsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeCacheParameters
     * @param cacheParameterGroupName The name of a specific cache parameter group to return details for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source &lt;p&gt;The parameter types to return.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;user&lt;/code&gt; | &lt;code&gt;system&lt;/code&gt; | &lt;code&gt;engine-default&lt;/code&gt; &lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCacheParametersCall(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCacheParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupName", cacheParameterGroupName));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Source", source));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeCacheParametersValidateBeforeCall(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheParameterGroupName' is set
        if (cacheParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'cacheParameterGroupName' when calling gETDescribeCacheParameters(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeCacheParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeCacheParameters(Async)");
        }

        return gETDescribeCacheParametersCall(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns the detailed parameter list for a particular cache parameter group.
     * @param cacheParameterGroupName The name of a specific cache parameter group to return details for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source &lt;p&gt;The parameter types to return.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;user&lt;/code&gt; | &lt;code&gt;system&lt;/code&gt; | &lt;code&gt;engine-default&lt;/code&gt; &lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return CacheParameterGroupDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CacheParameterGroupDetails gETDescribeCacheParameters(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<CacheParameterGroupDetails> localVarResp = gETDescribeCacheParametersWithHttpInfo(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the detailed parameter list for a particular cache parameter group.
     * @param cacheParameterGroupName The name of a specific cache parameter group to return details for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source &lt;p&gt;The parameter types to return.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;user&lt;/code&gt; | &lt;code&gt;system&lt;/code&gt; | &lt;code&gt;engine-default&lt;/code&gt; &lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;CacheParameterGroupDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheParameterGroupDetails> gETDescribeCacheParametersWithHttpInfo(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeCacheParametersValidateBeforeCall(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<CacheParameterGroupDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the detailed parameter list for a particular cache parameter group.
     * @param cacheParameterGroupName The name of a specific cache parameter group to return details for. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param source &lt;p&gt;The parameter types to return.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;user&lt;/code&gt; | &lt;code&gt;system&lt;/code&gt; | &lt;code&gt;engine-default&lt;/code&gt; &lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCacheParametersAsync(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String source, Integer maxRecords, String marker, final ApiCallback<CacheParameterGroupDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeCacheParametersValidateBeforeCall(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, source, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<CacheParameterGroupDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeCacheSecurityGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheSecurityGroupName The name of the cache security group to return details for. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCacheSecurityGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSecurityGroupName, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCacheSecurityGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheSecurityGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSecurityGroupName", cacheSecurityGroupName));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeCacheSecurityGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSecurityGroupName, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeCacheSecurityGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeCacheSecurityGroups(Async)");
        }

        return gETDescribeCacheSecurityGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSecurityGroupName, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheSecurityGroupName The name of the cache security group to return details for. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return CacheSecurityGroupMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CacheSecurityGroupMessage gETDescribeCacheSecurityGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSecurityGroupName, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<CacheSecurityGroupMessage> localVarResp = gETDescribeCacheSecurityGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSecurityGroupName, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheSecurityGroupName The name of the cache security group to return details for. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;CacheSecurityGroupMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheSecurityGroupMessage> gETDescribeCacheSecurityGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSecurityGroupName, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeCacheSecurityGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSecurityGroupName, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<CacheSecurityGroupMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheSecurityGroupName The name of the cache security group to return details for. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCacheSecurityGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSecurityGroupName, Integer maxRecords, String marker, final ApiCallback<CacheSecurityGroupMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeCacheSecurityGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSecurityGroupName, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<CacheSecurityGroupMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeCacheSubnetGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheSubnetGroupName The name of the cache subnet group to return details for. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCacheSubnetGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSubnetGroupName, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCacheSubnetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSubnetGroupName", cacheSubnetGroupName));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeCacheSubnetGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSubnetGroupName, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeCacheSubnetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeCacheSubnetGroups(Async)");
        }

        return gETDescribeCacheSubnetGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSubnetGroupName, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheSubnetGroupName The name of the cache subnet group to return details for. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return CacheSubnetGroupMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CacheSubnetGroupMessage gETDescribeCacheSubnetGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSubnetGroupName, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<CacheSubnetGroupMessage> localVarResp = gETDescribeCacheSubnetGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSubnetGroupName, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheSubnetGroupName The name of the cache subnet group to return details for. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;CacheSubnetGroupMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheSubnetGroupMessage> gETDescribeCacheSubnetGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSubnetGroupName, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeCacheSubnetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSubnetGroupName, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<CacheSubnetGroupMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheSubnetGroupName The name of the cache subnet group to return details for. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeCacheSubnetGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSubnetGroupName, Integer maxRecords, String marker, final ApiCallback<CacheSubnetGroupMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeCacheSubnetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSubnetGroupName, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<CacheSubnetGroupMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEngineDefaultParameters
     * @param cacheParameterGroupFamily &lt;p&gt;The name of the cache parameter group family.&lt;/p&gt; &lt;p&gt;Valid values are: &lt;code&gt;memcached1.4&lt;/code&gt; | &lt;code&gt;memcached1.5&lt;/code&gt; | &lt;code&gt;memcached1.6&lt;/code&gt; | &lt;code&gt;redis2.6&lt;/code&gt; | &lt;code&gt;redis2.8&lt;/code&gt; | &lt;code&gt;redis3.2&lt;/code&gt; | &lt;code&gt;redis4.0&lt;/code&gt; | &lt;code&gt;redis5.0&lt;/code&gt; | &lt;code&gt;redis6.x&lt;/code&gt; | &lt;code&gt;redis6.2&lt;/code&gt; | &lt;code&gt;redis7&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEngineDefaultParametersCall(String cacheParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEngineDefaultParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheParameterGroupFamily != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupFamily", cacheParameterGroupFamily));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEngineDefaultParametersValidateBeforeCall(String cacheParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheParameterGroupFamily' is set
        if (cacheParameterGroupFamily == null) {
            throw new ApiException("Missing the required parameter 'cacheParameterGroupFamily' when calling gETDescribeEngineDefaultParameters(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEngineDefaultParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEngineDefaultParameters(Async)");
        }

        return gETDescribeEngineDefaultParametersCall(cacheParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns the default engine and system parameter information for the specified cache engine.
     * @param cacheParameterGroupFamily &lt;p&gt;The name of the cache parameter group family.&lt;/p&gt; &lt;p&gt;Valid values are: &lt;code&gt;memcached1.4&lt;/code&gt; | &lt;code&gt;memcached1.5&lt;/code&gt; | &lt;code&gt;memcached1.6&lt;/code&gt; | &lt;code&gt;redis2.6&lt;/code&gt; | &lt;code&gt;redis2.8&lt;/code&gt; | &lt;code&gt;redis3.2&lt;/code&gt; | &lt;code&gt;redis4.0&lt;/code&gt; | &lt;code&gt;redis5.0&lt;/code&gt; | &lt;code&gt;redis6.x&lt;/code&gt; | &lt;code&gt;redis6.2&lt;/code&gt; | &lt;code&gt;redis7&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return DescribeEngineDefaultParametersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEngineDefaultParametersResult gETDescribeEngineDefaultParameters(String cacheParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeEngineDefaultParametersResult> localVarResp = gETDescribeEngineDefaultParametersWithHttpInfo(cacheParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the default engine and system parameter information for the specified cache engine.
     * @param cacheParameterGroupFamily &lt;p&gt;The name of the cache parameter group family.&lt;/p&gt; &lt;p&gt;Valid values are: &lt;code&gt;memcached1.4&lt;/code&gt; | &lt;code&gt;memcached1.5&lt;/code&gt; | &lt;code&gt;memcached1.6&lt;/code&gt; | &lt;code&gt;redis2.6&lt;/code&gt; | &lt;code&gt;redis2.8&lt;/code&gt; | &lt;code&gt;redis3.2&lt;/code&gt; | &lt;code&gt;redis4.0&lt;/code&gt; | &lt;code&gt;redis5.0&lt;/code&gt; | &lt;code&gt;redis6.x&lt;/code&gt; | &lt;code&gt;redis6.2&lt;/code&gt; | &lt;code&gt;redis7&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;DescribeEngineDefaultParametersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEngineDefaultParametersResult> gETDescribeEngineDefaultParametersWithHttpInfo(String cacheParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEngineDefaultParametersValidateBeforeCall(cacheParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultParametersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the default engine and system parameter information for the specified cache engine.
     * @param cacheParameterGroupFamily &lt;p&gt;The name of the cache parameter group family.&lt;/p&gt; &lt;p&gt;Valid values are: &lt;code&gt;memcached1.4&lt;/code&gt; | &lt;code&gt;memcached1.5&lt;/code&gt; | &lt;code&gt;memcached1.6&lt;/code&gt; | &lt;code&gt;redis2.6&lt;/code&gt; | &lt;code&gt;redis2.8&lt;/code&gt; | &lt;code&gt;redis3.2&lt;/code&gt; | &lt;code&gt;redis4.0&lt;/code&gt; | &lt;code&gt;redis5.0&lt;/code&gt; | &lt;code&gt;redis6.x&lt;/code&gt; | &lt;code&gt;redis6.2&lt;/code&gt; | &lt;code&gt;redis7&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEngineDefaultParametersAsync(String cacheParameterGroupFamily, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxRecords, String marker, final ApiCallback<DescribeEngineDefaultParametersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEngineDefaultParametersValidateBeforeCall(cacheParameterGroupFamily, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultParametersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeEvents
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceIdentifier The identifier of the event source for which events are returned. If not specified, all sources are included in the response. (optional)
     * @param sourceType The event source to retrieve events for. If no value is specified, all events are returned. (optional)
     * @param startTime &lt;p&gt;The beginning of the time interval to retrieve events for, specified in ISO 8601 format.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Example:&lt;/b&gt; 2017-03-30T07:03:49.555Z&lt;/p&gt; (optional)
     * @param endTime &lt;p&gt;The end of the time interval for which to retrieve events, specified in ISO 8601 format.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Example:&lt;/b&gt; 2017-03-30T07:03:49.555Z&lt;/p&gt; (optional)
     * @param duration The number of minutes worth of events to retrieve. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceIdentifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceIdentifier", sourceIdentifier));
        }

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SourceType", sourceType));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndTime", endTime));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Duration", duration));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeEventsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeEvents(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeEvents(Async)");
        }

        return gETDescribeEventsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.&lt;/p&gt; &lt;p&gt;By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days&#39; worth of events if necessary.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceIdentifier The identifier of the event source for which events are returned. If not specified, all sources are included in the response. (optional)
     * @param sourceType The event source to retrieve events for. If no value is specified, all events are returned. (optional)
     * @param startTime &lt;p&gt;The beginning of the time interval to retrieve events for, specified in ISO 8601 format.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Example:&lt;/b&gt; 2017-03-30T07:03:49.555Z&lt;/p&gt; (optional)
     * @param endTime &lt;p&gt;The end of the time interval for which to retrieve events, specified in ISO 8601 format.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Example:&lt;/b&gt; 2017-03-30T07:03:49.555Z&lt;/p&gt; (optional)
     * @param duration The number of minutes worth of events to retrieve. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return EventsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public EventsMessage gETDescribeEvents(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<EventsMessage> localVarResp = gETDescribeEventsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.&lt;/p&gt; &lt;p&gt;By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days&#39; worth of events if necessary.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceIdentifier The identifier of the event source for which events are returned. If not specified, all sources are included in the response. (optional)
     * @param sourceType The event source to retrieve events for. If no value is specified, all events are returned. (optional)
     * @param startTime &lt;p&gt;The beginning of the time interval to retrieve events for, specified in ISO 8601 format.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Example:&lt;/b&gt; 2017-03-30T07:03:49.555Z&lt;/p&gt; (optional)
     * @param endTime &lt;p&gt;The end of the time interval for which to retrieve events, specified in ISO 8601 format.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Example:&lt;/b&gt; 2017-03-30T07:03:49.555Z&lt;/p&gt; (optional)
     * @param duration The number of minutes worth of events to retrieve. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;EventsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsMessage> gETDescribeEventsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<EventsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.&lt;/p&gt; &lt;p&gt;By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days&#39; worth of events if necessary.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sourceIdentifier The identifier of the event source for which events are returned. If not specified, all sources are included in the response. (optional)
     * @param sourceType The event source to retrieve events for. If no value is specified, all events are returned. (optional)
     * @param startTime &lt;p&gt;The beginning of the time interval to retrieve events for, specified in ISO 8601 format.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Example:&lt;/b&gt; 2017-03-30T07:03:49.555Z&lt;/p&gt; (optional)
     * @param endTime &lt;p&gt;The end of the time interval for which to retrieve events, specified in ISO 8601 format.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Example:&lt;/b&gt; 2017-03-30T07:03:49.555Z&lt;/p&gt; (optional)
     * @param duration The number of minutes worth of events to retrieve. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeEventsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sourceIdentifier, String sourceType, OffsetDateTime startTime, OffsetDateTime endTime, Integer duration, Integer maxRecords, String marker, final ApiCallback<EventsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sourceIdentifier, sourceType, startTime, endTime, duration, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<EventsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeGlobalReplicationGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalReplicationGroupId The name of the Global datastore (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.  (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @param showMemberInfo Returns the list of members that comprise the Global datastore. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeGlobalReplicationGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupId, Integer maxRecords, String marker, Boolean showMemberInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeGlobalReplicationGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalReplicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalReplicationGroupId", globalReplicationGroupId));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (showMemberInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ShowMemberInfo", showMemberInfo));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeGlobalReplicationGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupId, Integer maxRecords, String marker, Boolean showMemberInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeGlobalReplicationGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeGlobalReplicationGroups(Async)");
        }

        return gETDescribeGlobalReplicationGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupId, maxRecords, marker, showMemberInfo, _callback);

    }

    /**
     * 
     * Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalReplicationGroupId The name of the Global datastore (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.  (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @param showMemberInfo Returns the list of members that comprise the Global datastore. (optional)
     * @return DescribeGlobalReplicationGroupsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeGlobalReplicationGroupsResult gETDescribeGlobalReplicationGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupId, Integer maxRecords, String marker, Boolean showMemberInfo) throws ApiException {
        ApiResponse<DescribeGlobalReplicationGroupsResult> localVarResp = gETDescribeGlobalReplicationGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupId, maxRecords, marker, showMemberInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalReplicationGroupId The name of the Global datastore (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.  (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @param showMemberInfo Returns the list of members that comprise the Global datastore. (optional)
     * @return ApiResponse&lt;DescribeGlobalReplicationGroupsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeGlobalReplicationGroupsResult> gETDescribeGlobalReplicationGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupId, Integer maxRecords, String marker, Boolean showMemberInfo) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeGlobalReplicationGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupId, maxRecords, marker, showMemberInfo, null);
        Type localVarReturnType = new TypeToken<DescribeGlobalReplicationGroupsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param globalReplicationGroupId The name of the Global datastore (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.  (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;.  (optional)
     * @param showMemberInfo Returns the list of members that comprise the Global datastore. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeGlobalReplicationGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String globalReplicationGroupId, Integer maxRecords, String marker, Boolean showMemberInfo, final ApiCallback<DescribeGlobalReplicationGroupsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeGlobalReplicationGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, globalReplicationGroupId, maxRecords, marker, showMemberInfo, _callback);
        Type localVarReturnType = new TypeToken<DescribeGlobalReplicationGroupsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeReplicationGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId &lt;p&gt;The identifier for the replication group to be described. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;If you do not specify this parameter, information about all replication groups is returned.&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeReplicationGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeReplicationGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeReplicationGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeReplicationGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeReplicationGroups(Async)");
        }

        return gETDescribeReplicationGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, maxRecords, marker, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about a particular replication group. If no identifier is specified, &lt;code&gt;DescribeReplicationGroups&lt;/code&gt; returns information about all replication groups.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId &lt;p&gt;The identifier for the replication group to be described. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;If you do not specify this parameter, information about all replication groups is returned.&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ReplicationGroupMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationGroupMessage gETDescribeReplicationGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<ReplicationGroupMessage> localVarResp = gETDescribeReplicationGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about a particular replication group. If no identifier is specified, &lt;code&gt;DescribeReplicationGroups&lt;/code&gt; returns information about all replication groups.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId &lt;p&gt;The identifier for the replication group to be described. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;If you do not specify this parameter, information about all replication groups is returned.&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;ReplicationGroupMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationGroupMessage> gETDescribeReplicationGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeReplicationGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<ReplicationGroupMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about a particular replication group. If no identifier is specified, &lt;code&gt;DescribeReplicationGroups&lt;/code&gt; returns information about all replication groups.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId &lt;p&gt;The identifier for the replication group to be described. This parameter is not case sensitive.&lt;/p&gt; &lt;p&gt;If you do not specify this parameter, information about all replication groups is returned.&lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeReplicationGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, Integer maxRecords, String marker, final ApiCallback<ReplicationGroupMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeReplicationGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<ReplicationGroupMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeReservedCacheNodes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reservedCacheNodeId The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID. (optional)
     * @param reservedCacheNodesOfferingId The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier. (optional)
     * @param cacheNodeType &lt;p&gt;The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param duration &lt;p&gt;The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;1 | 3 | 31536000 | 94608000&lt;/code&gt; &lt;/p&gt; (optional)
     * @param productDescription The product description filter value. Use this parameter to show only those reservations matching the specified product description. (optional)
     * @param offeringType &lt;p&gt;The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;\&quot;Light Utilization\&quot;|\&quot;Medium Utilization\&quot;|\&quot;Heavy Utilization\&quot;|\&quot;All Upfront\&quot;|\&quot;Partial Upfront\&quot;| \&quot;No Upfront\&quot;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeReservedCacheNodesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodeId, String reservedCacheNodesOfferingId, String cacheNodeType, String duration, String productDescription, String offeringType, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeReservedCacheNodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reservedCacheNodeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReservedCacheNodeId", reservedCacheNodeId));
        }

        if (reservedCacheNodesOfferingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReservedCacheNodesOfferingId", reservedCacheNodesOfferingId));
        }

        if (cacheNodeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheNodeType", cacheNodeType));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Duration", duration));
        }

        if (productDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ProductDescription", productDescription));
        }

        if (offeringType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OfferingType", offeringType));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeReservedCacheNodesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodeId, String reservedCacheNodesOfferingId, String cacheNodeType, String duration, String productDescription, String offeringType, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeReservedCacheNodes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeReservedCacheNodes(Async)");
        }

        return gETDescribeReservedCacheNodesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodeId, reservedCacheNodesOfferingId, cacheNodeType, duration, productDescription, offeringType, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reservedCacheNodeId The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID. (optional)
     * @param reservedCacheNodesOfferingId The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier. (optional)
     * @param cacheNodeType &lt;p&gt;The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param duration &lt;p&gt;The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;1 | 3 | 31536000 | 94608000&lt;/code&gt; &lt;/p&gt; (optional)
     * @param productDescription The product description filter value. Use this parameter to show only those reservations matching the specified product description. (optional)
     * @param offeringType &lt;p&gt;The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;\&quot;Light Utilization\&quot;|\&quot;Medium Utilization\&quot;|\&quot;Heavy Utilization\&quot;|\&quot;All Upfront\&quot;|\&quot;Partial Upfront\&quot;| \&quot;No Upfront\&quot;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ReservedCacheNodeMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ReservedCacheNodeMessage gETDescribeReservedCacheNodes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodeId, String reservedCacheNodesOfferingId, String cacheNodeType, String duration, String productDescription, String offeringType, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<ReservedCacheNodeMessage> localVarResp = gETDescribeReservedCacheNodesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodeId, reservedCacheNodesOfferingId, cacheNodeType, duration, productDescription, offeringType, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reservedCacheNodeId The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID. (optional)
     * @param reservedCacheNodesOfferingId The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier. (optional)
     * @param cacheNodeType &lt;p&gt;The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param duration &lt;p&gt;The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;1 | 3 | 31536000 | 94608000&lt;/code&gt; &lt;/p&gt; (optional)
     * @param productDescription The product description filter value. Use this parameter to show only those reservations matching the specified product description. (optional)
     * @param offeringType &lt;p&gt;The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;\&quot;Light Utilization\&quot;|\&quot;Medium Utilization\&quot;|\&quot;Heavy Utilization\&quot;|\&quot;All Upfront\&quot;|\&quot;Partial Upfront\&quot;| \&quot;No Upfront\&quot;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;ReservedCacheNodeMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservedCacheNodeMessage> gETDescribeReservedCacheNodesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodeId, String reservedCacheNodesOfferingId, String cacheNodeType, String duration, String productDescription, String offeringType, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeReservedCacheNodesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodeId, reservedCacheNodesOfferingId, cacheNodeType, duration, productDescription, offeringType, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<ReservedCacheNodeMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reservedCacheNodeId The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID. (optional)
     * @param reservedCacheNodesOfferingId The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier. (optional)
     * @param cacheNodeType &lt;p&gt;The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type.&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param duration &lt;p&gt;The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;1 | 3 | 31536000 | 94608000&lt;/code&gt; &lt;/p&gt; (optional)
     * @param productDescription The product description filter value. Use this parameter to show only those reservations matching the specified product description. (optional)
     * @param offeringType &lt;p&gt;The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;\&quot;Light Utilization\&quot;|\&quot;Medium Utilization\&quot;|\&quot;Heavy Utilization\&quot;|\&quot;All Upfront\&quot;|\&quot;Partial Upfront\&quot;| \&quot;No Upfront\&quot;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeReservedCacheNodesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodeId, String reservedCacheNodesOfferingId, String cacheNodeType, String duration, String productDescription, String offeringType, Integer maxRecords, String marker, final ApiCallback<ReservedCacheNodeMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeReservedCacheNodesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodeId, reservedCacheNodesOfferingId, cacheNodeType, duration, productDescription, offeringType, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<ReservedCacheNodeMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeReservedCacheNodesOfferings
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reservedCacheNodesOfferingId &lt;p&gt;The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;438012d3-4052-4cc7-b2e3-8d3372e0e706&lt;/code&gt; &lt;/p&gt; (optional)
     * @param cacheNodeType &lt;p&gt;The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param duration &lt;p&gt;Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;1 | 3 | 31536000 | 94608000&lt;/code&gt; &lt;/p&gt; (optional)
     * @param productDescription The product description filter value. Use this parameter to show only the available offerings matching the specified product description. (optional)
     * @param offeringType &lt;p&gt;The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;\&quot;Light Utilization\&quot;|\&quot;Medium Utilization\&quot;|\&quot;Heavy Utilization\&quot; |\&quot;All Upfront\&quot;|\&quot;Partial Upfront\&quot;| \&quot;No Upfront\&quot;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeReservedCacheNodesOfferingsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodesOfferingId, String cacheNodeType, String duration, String productDescription, String offeringType, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeReservedCacheNodesOfferings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reservedCacheNodesOfferingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReservedCacheNodesOfferingId", reservedCacheNodesOfferingId));
        }

        if (cacheNodeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheNodeType", cacheNodeType));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Duration", duration));
        }

        if (productDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ProductDescription", productDescription));
        }

        if (offeringType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("OfferingType", offeringType));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeReservedCacheNodesOfferingsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodesOfferingId, String cacheNodeType, String duration, String productDescription, String offeringType, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeReservedCacheNodesOfferings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeReservedCacheNodesOfferings(Async)");
        }

        return gETDescribeReservedCacheNodesOfferingsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodesOfferingId, cacheNodeType, duration, productDescription, offeringType, maxRecords, marker, _callback);

    }

    /**
     * 
     * Lists available reserved cache node offerings.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reservedCacheNodesOfferingId &lt;p&gt;The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;438012d3-4052-4cc7-b2e3-8d3372e0e706&lt;/code&gt; &lt;/p&gt; (optional)
     * @param cacheNodeType &lt;p&gt;The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param duration &lt;p&gt;Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;1 | 3 | 31536000 | 94608000&lt;/code&gt; &lt;/p&gt; (optional)
     * @param productDescription The product description filter value. Use this parameter to show only the available offerings matching the specified product description. (optional)
     * @param offeringType &lt;p&gt;The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;\&quot;Light Utilization\&quot;|\&quot;Medium Utilization\&quot;|\&quot;Heavy Utilization\&quot; |\&quot;All Upfront\&quot;|\&quot;Partial Upfront\&quot;| \&quot;No Upfront\&quot;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ReservedCacheNodesOfferingMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ReservedCacheNodesOfferingMessage gETDescribeReservedCacheNodesOfferings(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodesOfferingId, String cacheNodeType, String duration, String productDescription, String offeringType, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<ReservedCacheNodesOfferingMessage> localVarResp = gETDescribeReservedCacheNodesOfferingsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodesOfferingId, cacheNodeType, duration, productDescription, offeringType, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists available reserved cache node offerings.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reservedCacheNodesOfferingId &lt;p&gt;The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;438012d3-4052-4cc7-b2e3-8d3372e0e706&lt;/code&gt; &lt;/p&gt; (optional)
     * @param cacheNodeType &lt;p&gt;The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param duration &lt;p&gt;Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;1 | 3 | 31536000 | 94608000&lt;/code&gt; &lt;/p&gt; (optional)
     * @param productDescription The product description filter value. Use this parameter to show only the available offerings matching the specified product description. (optional)
     * @param offeringType &lt;p&gt;The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;\&quot;Light Utilization\&quot;|\&quot;Medium Utilization\&quot;|\&quot;Heavy Utilization\&quot; |\&quot;All Upfront\&quot;|\&quot;Partial Upfront\&quot;| \&quot;No Upfront\&quot;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;ReservedCacheNodesOfferingMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservedCacheNodesOfferingMessage> gETDescribeReservedCacheNodesOfferingsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodesOfferingId, String cacheNodeType, String duration, String productDescription, String offeringType, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeReservedCacheNodesOfferingsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodesOfferingId, cacheNodeType, duration, productDescription, offeringType, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<ReservedCacheNodesOfferingMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists available reserved cache node offerings.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reservedCacheNodesOfferingId &lt;p&gt;The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;438012d3-4052-4cc7-b2e3-8d3372e0e706&lt;/code&gt; &lt;/p&gt; (optional)
     * @param cacheNodeType &lt;p&gt;The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type.&lt;/p&gt; &lt;p&gt;The following node types are supported by ElastiCache. Generally speaking, the current generation types provide more memory and computational power at lower cost when compared to their equivalent previous generation counterparts.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;General purpose:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;M6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward): &lt;code&gt;cache.m6g.large&lt;/code&gt;, &lt;code&gt;cache.m6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;M5 node types:&lt;/b&gt; &lt;code&gt;cache.m5.large&lt;/code&gt;, &lt;code&gt;cache.m5.xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.m5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M4 node types:&lt;/b&gt; &lt;code&gt;cache.m4.large&lt;/code&gt;, &lt;code&gt;cache.m4.xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.m4.10xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T4g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and Memcached engine version 1.5.16 onward): &lt;code&gt;cache.t4g.micro&lt;/code&gt;, &lt;code&gt;cache.t4g.small&lt;/code&gt;, &lt;code&gt;cache.t4g.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T3 node types:&lt;/b&gt; &lt;code&gt;cache.t3.micro&lt;/code&gt;, &lt;code&gt;cache.t3.small&lt;/code&gt;, &lt;code&gt;cache.t3.medium&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;T2 node types:&lt;/b&gt; &lt;code&gt;cache.t2.micro&lt;/code&gt;, &lt;code&gt;cache.t2.small&lt;/code&gt;, &lt;code&gt;cache.t2.medium&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;T1 node types:&lt;/b&gt; &lt;code&gt;cache.t1.micro&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M1 node types:&lt;/b&gt; &lt;code&gt;cache.m1.small&lt;/code&gt;, &lt;code&gt;cache.m1.medium&lt;/code&gt;, &lt;code&gt;cache.m1.large&lt;/code&gt;, &lt;code&gt;cache.m1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;M3 node types:&lt;/b&gt; &lt;code&gt;cache.m3.medium&lt;/code&gt;, &lt;code&gt;cache.m3.large&lt;/code&gt;, &lt;code&gt;cache.m3.xlarge&lt;/code&gt;, &lt;code&gt;cache.m3.2xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Compute optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;C1 node types:&lt;/b&gt; &lt;code&gt;cache.c1.xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Memory optimized:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Current generation: &lt;/p&gt; &lt;p&gt; &lt;b&gt;R6g node types&lt;/b&gt; (available only for Redis engine version 5.0.6 onward and for Memcached engine version 1.5.16 onward).&lt;/p&gt; &lt;p&gt; &lt;code&gt;cache.r6g.large&lt;/code&gt;, &lt;code&gt;cache.r6g.xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r6g.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;note&gt; &lt;p&gt;For region availability, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html#CacheNodes.SupportedTypesByRegion\&quot;&gt;Supported Node Types&lt;/a&gt; &lt;/p&gt; &lt;/note&gt; &lt;p&gt; &lt;b&gt;R5 node types:&lt;/b&gt; &lt;code&gt;cache.r5.large&lt;/code&gt;, &lt;code&gt;cache.r5.xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.12xlarge&lt;/code&gt;, &lt;code&gt;cache.r5.24xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R4 node types:&lt;/b&gt; &lt;code&gt;cache.r4.large&lt;/code&gt;, &lt;code&gt;cache.r4.xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.8xlarge&lt;/code&gt;, &lt;code&gt;cache.r4.16xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Previous generation: (not recommended. Existing clusters are still supported but creation of new clusters is not supported for these types.)&lt;/p&gt; &lt;p&gt; &lt;b&gt;M2 node types:&lt;/b&gt; &lt;code&gt;cache.m2.xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.2xlarge&lt;/code&gt;, &lt;code&gt;cache.m2.4xlarge&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;b&gt;R3 node types:&lt;/b&gt; &lt;code&gt;cache.r3.large&lt;/code&gt;, &lt;code&gt;cache.r3.xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.2xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.4xlarge&lt;/code&gt;, &lt;code&gt;cache.r3.8xlarge&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; &lt;b&gt;Additional node type info&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;All current generation instance types are created in Amazon VPC by default.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis append-only files (AOF) are not supported for T1 or T2 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis Multi-AZ with automatic failover is not supported on T1 instances.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis configuration variables &lt;code&gt;appendonly&lt;/code&gt; and &lt;code&gt;appendfsync&lt;/code&gt; are not supported on Redis version 2.8.22 and later.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param duration &lt;p&gt;Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;1 | 3 | 31536000 | 94608000&lt;/code&gt; &lt;/p&gt; (optional)
     * @param productDescription The product description filter value. Use this parameter to show only the available offerings matching the specified product description. (optional)
     * @param offeringType &lt;p&gt;The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;\&quot;Light Utilization\&quot;|\&quot;Medium Utilization\&quot;|\&quot;Heavy Utilization\&quot; |\&quot;All Upfront\&quot;|\&quot;Partial Upfront\&quot;| \&quot;No Upfront\&quot;&lt;/code&gt; &lt;/p&gt; (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 100&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 100.&lt;/p&gt; (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeReservedCacheNodesOfferingsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodesOfferingId, String cacheNodeType, String duration, String productDescription, String offeringType, Integer maxRecords, String marker, final ApiCallback<ReservedCacheNodesOfferingMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeReservedCacheNodesOfferingsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodesOfferingId, cacheNodeType, duration, productDescription, offeringType, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<ReservedCacheNodesOfferingMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeServiceUpdates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param serviceUpdateName The unique ID of the service update (optional)
     * @param serviceUpdateStatus The status of the service update (optional)
     * @param maxRecords The maximum number of records to include in the response (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeServiceUpdatesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String serviceUpdateName, List<ServiceUpdateStatus> serviceUpdateStatus, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeServiceUpdates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (serviceUpdateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServiceUpdateName", serviceUpdateName));
        }

        if (serviceUpdateStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ServiceUpdateStatus", serviceUpdateStatus));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeServiceUpdatesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String serviceUpdateName, List<ServiceUpdateStatus> serviceUpdateStatus, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeServiceUpdates(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeServiceUpdates(Async)");
        }

        return gETDescribeServiceUpdatesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, serviceUpdateName, serviceUpdateStatus, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns details of the service updates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param serviceUpdateName The unique ID of the service update (optional)
     * @param serviceUpdateStatus The status of the service update (optional)
     * @param maxRecords The maximum number of records to include in the response (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ServiceUpdatesMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ServiceUpdatesMessage gETDescribeServiceUpdates(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String serviceUpdateName, List<ServiceUpdateStatus> serviceUpdateStatus, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<ServiceUpdatesMessage> localVarResp = gETDescribeServiceUpdatesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, serviceUpdateName, serviceUpdateStatus, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns details of the service updates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param serviceUpdateName The unique ID of the service update (optional)
     * @param serviceUpdateStatus The status of the service update (optional)
     * @param maxRecords The maximum number of records to include in the response (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;ServiceUpdatesMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceUpdatesMessage> gETDescribeServiceUpdatesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String serviceUpdateName, List<ServiceUpdateStatus> serviceUpdateStatus, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeServiceUpdatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, serviceUpdateName, serviceUpdateStatus, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<ServiceUpdatesMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns details of the service updates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param serviceUpdateName The unique ID of the service update (optional)
     * @param serviceUpdateStatus The status of the service update (optional)
     * @param maxRecords The maximum number of records to include in the response (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeServiceUpdatesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String serviceUpdateName, List<ServiceUpdateStatus> serviceUpdateStatus, Integer maxRecords, String marker, final ApiCallback<ServiceUpdatesMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeServiceUpdatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, serviceUpdateName, serviceUpdateStatus, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<ServiceUpdatesMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeSnapshots
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described. (optional)
     * @param cacheClusterId A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described. (optional)
     * @param snapshotName A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described. (optional)
     * @param snapshotSource If set to &lt;code&gt;system&lt;/code&gt;, the output shows snapshots that were automatically created by ElastiCache. If set to &lt;code&gt;user&lt;/code&gt; the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots. (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 50&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 50.&lt;/p&gt; (optional)
     * @param showNodeGroupConfig A Boolean value which if true, the node group (shard) configuration is included in the snapshot description. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeSnapshotsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String cacheClusterId, String snapshotName, String snapshotSource, String marker, Integer maxRecords, Boolean showNodeGroupConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeSnapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (cacheClusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheClusterId", cacheClusterId));
        }

        if (snapshotName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotName", snapshotName));
        }

        if (snapshotSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotSource", snapshotSource));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (showNodeGroupConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ShowNodeGroupConfig", showNodeGroupConfig));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeSnapshotsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String cacheClusterId, String snapshotName, String snapshotSource, String marker, Integer maxRecords, Boolean showNodeGroupConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeSnapshots(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeSnapshots(Async)");
        }

        return gETDescribeSnapshotsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, cacheClusterId, snapshotName, snapshotSource, marker, maxRecords, showNodeGroupConfig, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about cluster or replication group snapshots. By default, &lt;code&gt;DescribeSnapshots&lt;/code&gt; lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described. (optional)
     * @param cacheClusterId A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described. (optional)
     * @param snapshotName A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described. (optional)
     * @param snapshotSource If set to &lt;code&gt;system&lt;/code&gt;, the output shows snapshots that were automatically created by ElastiCache. If set to &lt;code&gt;user&lt;/code&gt; the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots. (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 50&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 50.&lt;/p&gt; (optional)
     * @param showNodeGroupConfig A Boolean value which if true, the node group (shard) configuration is included in the snapshot description. (optional)
     * @return DescribeSnapshotsListMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeSnapshotsListMessage gETDescribeSnapshots(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String cacheClusterId, String snapshotName, String snapshotSource, String marker, Integer maxRecords, Boolean showNodeGroupConfig) throws ApiException {
        ApiResponse<DescribeSnapshotsListMessage> localVarResp = gETDescribeSnapshotsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, cacheClusterId, snapshotName, snapshotSource, marker, maxRecords, showNodeGroupConfig);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about cluster or replication group snapshots. By default, &lt;code&gt;DescribeSnapshots&lt;/code&gt; lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described. (optional)
     * @param cacheClusterId A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described. (optional)
     * @param snapshotName A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described. (optional)
     * @param snapshotSource If set to &lt;code&gt;system&lt;/code&gt;, the output shows snapshots that were automatically created by ElastiCache. If set to &lt;code&gt;user&lt;/code&gt; the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots. (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 50&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 50.&lt;/p&gt; (optional)
     * @param showNodeGroupConfig A Boolean value which if true, the node group (shard) configuration is included in the snapshot description. (optional)
     * @return ApiResponse&lt;DescribeSnapshotsListMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeSnapshotsListMessage> gETDescribeSnapshotsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String cacheClusterId, String snapshotName, String snapshotSource, String marker, Integer maxRecords, Boolean showNodeGroupConfig) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeSnapshotsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, cacheClusterId, snapshotName, snapshotSource, marker, maxRecords, showNodeGroupConfig, null);
        Type localVarReturnType = new TypeToken<DescribeSnapshotsListMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about cluster or replication group snapshots. By default, &lt;code&gt;DescribeSnapshots&lt;/code&gt; lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupId A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described. (optional)
     * @param cacheClusterId A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cluster are described. (optional)
     * @param snapshotName A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described. (optional)
     * @param snapshotSource If set to &lt;code&gt;system&lt;/code&gt;, the output shows snapshots that were automatically created by ElastiCache. If set to &lt;code&gt;user&lt;/code&gt; the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots. (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param maxRecords &lt;p&gt;The maximum number of records to include in the response. If more records exist than the specified &lt;code&gt;MaxRecords&lt;/code&gt; value, a marker is included in the response so that the remaining results can be retrieved.&lt;/p&gt; &lt;p&gt;Default: 50&lt;/p&gt; &lt;p&gt;Constraints: minimum 20; maximum 50.&lt;/p&gt; (optional)
     * @param showNodeGroupConfig A Boolean value which if true, the node group (shard) configuration is included in the snapshot description. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeSnapshotsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupId, String cacheClusterId, String snapshotName, String snapshotSource, String marker, Integer maxRecords, Boolean showNodeGroupConfig, final ApiCallback<DescribeSnapshotsListMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeSnapshotsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupId, cacheClusterId, snapshotName, snapshotSource, marker, maxRecords, showNodeGroupConfig, _callback);
        Type localVarReturnType = new TypeToken<DescribeSnapshotsListMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeUpdateActions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param serviceUpdateName The unique ID of the service update (optional)
     * @param replicationGroupIds The replication group IDs (optional)
     * @param cacheClusterIds The cache cluster IDs (optional)
     * @param engine The Elasticache engine to which the update applies. Either Redis or Memcached  (optional)
     * @param serviceUpdateStatus The status of the service update (optional)
     * @param serviceUpdateTimeRange The range of time specified to search for service updates that are in available status (optional)
     * @param updateActionStatus The status of the update action. (optional)
     * @param showNodeLevelUpdateStatus Dictates whether to include node level update status in the response  (optional)
     * @param maxRecords The maximum number of records to include in the response (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeUpdateActionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String serviceUpdateName, List<String> replicationGroupIds, List<String> cacheClusterIds, String engine, List<ServiceUpdateStatus> serviceUpdateStatus, GETDescribeUpdateActionsServiceUpdateTimeRangeParameter serviceUpdateTimeRange, List<UpdateActionStatus> updateActionStatus, Boolean showNodeLevelUpdateStatus, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeUpdateActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (serviceUpdateName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServiceUpdateName", serviceUpdateName));
        }

        if (replicationGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ReplicationGroupIds", replicationGroupIds));
        }

        if (cacheClusterIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "CacheClusterIds", cacheClusterIds));
        }

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (serviceUpdateStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ServiceUpdateStatus", serviceUpdateStatus));
        }

        if (serviceUpdateTimeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ServiceUpdateTimeRange", serviceUpdateTimeRange));
        }

        if (updateActionStatus != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "UpdateActionStatus", updateActionStatus));
        }

        if (showNodeLevelUpdateStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ShowNodeLevelUpdateStatus", showNodeLevelUpdateStatus));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeUpdateActionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String serviceUpdateName, List<String> replicationGroupIds, List<String> cacheClusterIds, String engine, List<ServiceUpdateStatus> serviceUpdateStatus, GETDescribeUpdateActionsServiceUpdateTimeRangeParameter serviceUpdateTimeRange, List<UpdateActionStatus> updateActionStatus, Boolean showNodeLevelUpdateStatus, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeUpdateActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeUpdateActions(Async)");
        }

        return gETDescribeUpdateActionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, serviceUpdateName, replicationGroupIds, cacheClusterIds, engine, serviceUpdateStatus, serviceUpdateTimeRange, updateActionStatus, showNodeLevelUpdateStatus, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns details of the update actions 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param serviceUpdateName The unique ID of the service update (optional)
     * @param replicationGroupIds The replication group IDs (optional)
     * @param cacheClusterIds The cache cluster IDs (optional)
     * @param engine The Elasticache engine to which the update applies. Either Redis or Memcached  (optional)
     * @param serviceUpdateStatus The status of the service update (optional)
     * @param serviceUpdateTimeRange The range of time specified to search for service updates that are in available status (optional)
     * @param updateActionStatus The status of the update action. (optional)
     * @param showNodeLevelUpdateStatus Dictates whether to include node level update status in the response  (optional)
     * @param maxRecords The maximum number of records to include in the response (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return UpdateActionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateActionsMessage gETDescribeUpdateActions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String serviceUpdateName, List<String> replicationGroupIds, List<String> cacheClusterIds, String engine, List<ServiceUpdateStatus> serviceUpdateStatus, GETDescribeUpdateActionsServiceUpdateTimeRangeParameter serviceUpdateTimeRange, List<UpdateActionStatus> updateActionStatus, Boolean showNodeLevelUpdateStatus, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<UpdateActionsMessage> localVarResp = gETDescribeUpdateActionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, serviceUpdateName, replicationGroupIds, cacheClusterIds, engine, serviceUpdateStatus, serviceUpdateTimeRange, updateActionStatus, showNodeLevelUpdateStatus, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns details of the update actions 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param serviceUpdateName The unique ID of the service update (optional)
     * @param replicationGroupIds The replication group IDs (optional)
     * @param cacheClusterIds The cache cluster IDs (optional)
     * @param engine The Elasticache engine to which the update applies. Either Redis or Memcached  (optional)
     * @param serviceUpdateStatus The status of the service update (optional)
     * @param serviceUpdateTimeRange The range of time specified to search for service updates that are in available status (optional)
     * @param updateActionStatus The status of the update action. (optional)
     * @param showNodeLevelUpdateStatus Dictates whether to include node level update status in the response  (optional)
     * @param maxRecords The maximum number of records to include in the response (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;UpdateActionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateActionsMessage> gETDescribeUpdateActionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String serviceUpdateName, List<String> replicationGroupIds, List<String> cacheClusterIds, String engine, List<ServiceUpdateStatus> serviceUpdateStatus, GETDescribeUpdateActionsServiceUpdateTimeRangeParameter serviceUpdateTimeRange, List<UpdateActionStatus> updateActionStatus, Boolean showNodeLevelUpdateStatus, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeUpdateActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, serviceUpdateName, replicationGroupIds, cacheClusterIds, engine, serviceUpdateStatus, serviceUpdateTimeRange, updateActionStatus, showNodeLevelUpdateStatus, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<UpdateActionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns details of the update actions 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param serviceUpdateName The unique ID of the service update (optional)
     * @param replicationGroupIds The replication group IDs (optional)
     * @param cacheClusterIds The cache cluster IDs (optional)
     * @param engine The Elasticache engine to which the update applies. Either Redis or Memcached  (optional)
     * @param serviceUpdateStatus The status of the service update (optional)
     * @param serviceUpdateTimeRange The range of time specified to search for service updates that are in available status (optional)
     * @param updateActionStatus The status of the update action. (optional)
     * @param showNodeLevelUpdateStatus Dictates whether to include node level update status in the response  (optional)
     * @param maxRecords The maximum number of records to include in the response (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by &lt;code&gt;MaxRecords&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeUpdateActionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String serviceUpdateName, List<String> replicationGroupIds, List<String> cacheClusterIds, String engine, List<ServiceUpdateStatus> serviceUpdateStatus, GETDescribeUpdateActionsServiceUpdateTimeRangeParameter serviceUpdateTimeRange, List<UpdateActionStatus> updateActionStatus, Boolean showNodeLevelUpdateStatus, Integer maxRecords, String marker, final ApiCallback<UpdateActionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeUpdateActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, serviceUpdateName, replicationGroupIds, cacheClusterIds, engine, serviceUpdateStatus, serviceUpdateTimeRange, updateActionStatus, showNodeLevelUpdateStatus, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<UpdateActionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeUserGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userGroupId The ID of the user group. (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.  (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. &amp;gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeUserGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String userGroupId, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeUserGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserGroupId", userGroupId));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeUserGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String userGroupId, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeUserGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeUserGroups(Async)");
        }

        return gETDescribeUserGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userGroupId, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns a list of user groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userGroupId The ID of the user group. (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.  (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. &amp;gt; (optional)
     * @return DescribeUserGroupsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeUserGroupsResult gETDescribeUserGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String userGroupId, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeUserGroupsResult> localVarResp = gETDescribeUserGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userGroupId, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of user groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userGroupId The ID of the user group. (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.  (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. &amp;gt; (optional)
     * @return ApiResponse&lt;DescribeUserGroupsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeUserGroupsResult> gETDescribeUserGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String userGroupId, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeUserGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userGroupId, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeUserGroupsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of user groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userGroupId The ID of the user group. (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.  (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. &amp;gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeUserGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String userGroupId, Integer maxRecords, String marker, final ApiCallback<DescribeUserGroupsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeUserGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userGroupId, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeUserGroupsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDescribeUsers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The Redis engine.  (optional)
     * @param userId The ID of the user. (optional)
     * @param filters Filter to determine the list of User IDs to return. (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.  (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. &amp;gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeUsersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String userId, List<Filter> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DescribeUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (engine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Engine", engine));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserId", userId));
        }

        if (filters != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Filters", filters));
        }

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDescribeUsersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String userId, List<Filter> filters, Integer maxRecords, String marker, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDescribeUsers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDescribeUsers(Async)");
        }

        return gETDescribeUsersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, userId, filters, maxRecords, marker, _callback);

    }

    /**
     * 
     * Returns a list of users.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The Redis engine.  (optional)
     * @param userId The ID of the user. (optional)
     * @param filters Filter to determine the list of User IDs to return. (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.  (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. &amp;gt; (optional)
     * @return DescribeUsersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeUsersResult gETDescribeUsers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String userId, List<Filter> filters, Integer maxRecords, String marker) throws ApiException {
        ApiResponse<DescribeUsersResult> localVarResp = gETDescribeUsersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, userId, filters, maxRecords, marker);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of users.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The Redis engine.  (optional)
     * @param userId The ID of the user. (optional)
     * @param filters Filter to determine the list of User IDs to return. (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.  (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. &amp;gt; (optional)
     * @return ApiResponse&lt;DescribeUsersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeUsersResult> gETDescribeUsersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String userId, List<Filter> filters, Integer maxRecords, String marker) throws ApiException {
        okhttp3.Call localVarCall = gETDescribeUsersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, userId, filters, maxRecords, marker, null);
        Type localVarReturnType = new TypeToken<DescribeUsersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of users.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param engine The Redis engine.  (optional)
     * @param userId The ID of the user. (optional)
     * @param filters Filter to determine the list of User IDs to return. (optional)
     * @param maxRecords The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved.  (optional)
     * @param marker An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. &amp;gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDescribeUsersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String engine, String userId, List<Filter> filters, Integer maxRecords, String marker, final ApiCallback<DescribeUsersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDescribeUsersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, engine, userId, filters, maxRecords, marker, _callback);
        Type localVarReturnType = new TypeToken<DescribeUsersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETDisassociateGlobalReplicationGroup
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param replicationGroupId The name of the secondary cluster you wish to remove from the Global datastore (required)
     * @param replicationGroupRegion The Amazon region of secondary cluster you wish to remove from the Global datastore (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDisassociateGlobalReplicationGroupCall(String globalReplicationGroupId, String replicationGroupId, String replicationGroupRegion, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=DisassociateGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalReplicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalReplicationGroupId", globalReplicationGroupId));
        }

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (replicationGroupRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupRegion", replicationGroupRegion));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETDisassociateGlobalReplicationGroupValidateBeforeCall(String globalReplicationGroupId, String replicationGroupId, String replicationGroupRegion, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalReplicationGroupId' is set
        if (globalReplicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'globalReplicationGroupId' when calling gETDisassociateGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'replicationGroupId' is set
        if (replicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'replicationGroupId' when calling gETDisassociateGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'replicationGroupRegion' is set
        if (replicationGroupRegion == null) {
            throw new ApiException("Missing the required parameter 'replicationGroupRegion' when calling gETDisassociateGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETDisassociateGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETDisassociateGlobalReplicationGroup(Async)");
        }

        return gETDisassociateGlobalReplicationGroupCall(globalReplicationGroupId, replicationGroupId, replicationGroupRegion, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region.
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param replicationGroupId The name of the secondary cluster you wish to remove from the Global datastore (required)
     * @param replicationGroupRegion The Amazon region of secondary cluster you wish to remove from the Global datastore (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DisassociateGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DisassociateGlobalReplicationGroupResult gETDisassociateGlobalReplicationGroup(String globalReplicationGroupId, String replicationGroupId, String replicationGroupRegion, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DisassociateGlobalReplicationGroupResult> localVarResp = gETDisassociateGlobalReplicationGroupWithHttpInfo(globalReplicationGroupId, replicationGroupId, replicationGroupRegion, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region.
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param replicationGroupId The name of the secondary cluster you wish to remove from the Global datastore (required)
     * @param replicationGroupRegion The Amazon region of secondary cluster you wish to remove from the Global datastore (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DisassociateGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisassociateGlobalReplicationGroupResult> gETDisassociateGlobalReplicationGroupWithHttpInfo(String globalReplicationGroupId, String replicationGroupId, String replicationGroupRegion, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETDisassociateGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, replicationGroupId, replicationGroupRegion, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DisassociateGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region.
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param replicationGroupId The name of the secondary cluster you wish to remove from the Global datastore (required)
     * @param replicationGroupRegion The Amazon region of secondary cluster you wish to remove from the Global datastore (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETDisassociateGlobalReplicationGroupAsync(String globalReplicationGroupId, String replicationGroupId, String replicationGroupRegion, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DisassociateGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETDisassociateGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, replicationGroupId, replicationGroupRegion, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DisassociateGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETFailoverGlobalReplicationGroup
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param primaryRegion The Amazon region of the primary cluster of the Global datastore (required)
     * @param primaryReplicationGroupId The name of the primary replication group (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETFailoverGlobalReplicationGroupCall(String globalReplicationGroupId, String primaryRegion, String primaryReplicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=FailoverGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalReplicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalReplicationGroupId", globalReplicationGroupId));
        }

        if (primaryRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PrimaryRegion", primaryRegion));
        }

        if (primaryReplicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PrimaryReplicationGroupId", primaryReplicationGroupId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETFailoverGlobalReplicationGroupValidateBeforeCall(String globalReplicationGroupId, String primaryRegion, String primaryReplicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalReplicationGroupId' is set
        if (globalReplicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'globalReplicationGroupId' when calling gETFailoverGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'primaryRegion' is set
        if (primaryRegion == null) {
            throw new ApiException("Missing the required parameter 'primaryRegion' when calling gETFailoverGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'primaryReplicationGroupId' is set
        if (primaryReplicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'primaryReplicationGroupId' when calling gETFailoverGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETFailoverGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETFailoverGlobalReplicationGroup(Async)");
        }

        return gETFailoverGlobalReplicationGroupCall(globalReplicationGroupId, primaryRegion, primaryReplicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary.
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param primaryRegion The Amazon region of the primary cluster of the Global datastore (required)
     * @param primaryReplicationGroupId The name of the primary replication group (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return FailoverGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public FailoverGlobalReplicationGroupResult gETFailoverGlobalReplicationGroup(String globalReplicationGroupId, String primaryRegion, String primaryReplicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<FailoverGlobalReplicationGroupResult> localVarResp = gETFailoverGlobalReplicationGroupWithHttpInfo(globalReplicationGroupId, primaryRegion, primaryReplicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary.
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param primaryRegion The Amazon region of the primary cluster of the Global datastore (required)
     * @param primaryReplicationGroupId The name of the primary replication group (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;FailoverGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FailoverGlobalReplicationGroupResult> gETFailoverGlobalReplicationGroupWithHttpInfo(String globalReplicationGroupId, String primaryRegion, String primaryReplicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETFailoverGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, primaryRegion, primaryReplicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<FailoverGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary.
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param primaryRegion The Amazon region of the primary cluster of the Global datastore (required)
     * @param primaryReplicationGroupId The name of the primary replication group (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETFailoverGlobalReplicationGroupAsync(String globalReplicationGroupId, String primaryRegion, String primaryReplicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<FailoverGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETFailoverGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, primaryRegion, primaryReplicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<FailoverGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETIncreaseNodeGroupsInGlobalReplicationGroup
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param nodeGroupCount The number of node groups you wish to add (required)
     * @param applyImmediately Indicates that the process begins immediately. At present, the only permitted value for this parameter is true. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param regionalConfigurations Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETIncreaseNodeGroupsInGlobalReplicationGroupCall(String globalReplicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETIncreaseNodeGroupsInGlobalReplicationGroupRegionalConfigurationsParameterInner> regionalConfigurations, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=IncreaseNodeGroupsInGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalReplicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalReplicationGroupId", globalReplicationGroupId));
        }

        if (nodeGroupCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NodeGroupCount", nodeGroupCount));
        }

        if (regionalConfigurations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "RegionalConfigurations", regionalConfigurations));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETIncreaseNodeGroupsInGlobalReplicationGroupValidateBeforeCall(String globalReplicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETIncreaseNodeGroupsInGlobalReplicationGroupRegionalConfigurationsParameterInner> regionalConfigurations, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalReplicationGroupId' is set
        if (globalReplicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'globalReplicationGroupId' when calling gETIncreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'nodeGroupCount' is set
        if (nodeGroupCount == null) {
            throw new ApiException("Missing the required parameter 'nodeGroupCount' when calling gETIncreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'applyImmediately' is set
        if (applyImmediately == null) {
            throw new ApiException("Missing the required parameter 'applyImmediately' when calling gETIncreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETIncreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETIncreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        return gETIncreaseNodeGroupsInGlobalReplicationGroupCall(globalReplicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, regionalConfigurations, _callback);

    }

    /**
     * 
     * Increase the number of node groups in the Global datastore
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param nodeGroupCount The number of node groups you wish to add (required)
     * @param applyImmediately Indicates that the process begins immediately. At present, the only permitted value for this parameter is true. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param regionalConfigurations Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore (optional)
     * @return IncreaseNodeGroupsInGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public IncreaseNodeGroupsInGlobalReplicationGroupResult gETIncreaseNodeGroupsInGlobalReplicationGroup(String globalReplicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETIncreaseNodeGroupsInGlobalReplicationGroupRegionalConfigurationsParameterInner> regionalConfigurations) throws ApiException {
        ApiResponse<IncreaseNodeGroupsInGlobalReplicationGroupResult> localVarResp = gETIncreaseNodeGroupsInGlobalReplicationGroupWithHttpInfo(globalReplicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, regionalConfigurations);
        return localVarResp.getData();
    }

    /**
     * 
     * Increase the number of node groups in the Global datastore
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param nodeGroupCount The number of node groups you wish to add (required)
     * @param applyImmediately Indicates that the process begins immediately. At present, the only permitted value for this parameter is true. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param regionalConfigurations Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore (optional)
     * @return ApiResponse&lt;IncreaseNodeGroupsInGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IncreaseNodeGroupsInGlobalReplicationGroupResult> gETIncreaseNodeGroupsInGlobalReplicationGroupWithHttpInfo(String globalReplicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETIncreaseNodeGroupsInGlobalReplicationGroupRegionalConfigurationsParameterInner> regionalConfigurations) throws ApiException {
        okhttp3.Call localVarCall = gETIncreaseNodeGroupsInGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, regionalConfigurations, null);
        Type localVarReturnType = new TypeToken<IncreaseNodeGroupsInGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Increase the number of node groups in the Global datastore
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param nodeGroupCount The number of node groups you wish to add (required)
     * @param applyImmediately Indicates that the process begins immediately. At present, the only permitted value for this parameter is true. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param regionalConfigurations Describes the replication group IDs, the Amazon regions where they are stored and the shard configuration for each that comprise the Global datastore (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETIncreaseNodeGroupsInGlobalReplicationGroupAsync(String globalReplicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETIncreaseNodeGroupsInGlobalReplicationGroupRegionalConfigurationsParameterInner> regionalConfigurations, final ApiCallback<IncreaseNodeGroupsInGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETIncreaseNodeGroupsInGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, regionalConfigurations, _callback);
        Type localVarReturnType = new TypeToken<IncreaseNodeGroupsInGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETIncreaseReplicaCount
     * @param replicationGroupId The id of the replication group to which you want to add replica nodes. (required)
     * @param applyImmediately If &lt;code&gt;True&lt;/code&gt;, the number of replica nodes is increased immediately. &lt;code&gt;ApplyImmediately&#x3D;False&lt;/code&gt; is not currently supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newReplicaCount The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group&#39;s node groups. (optional)
     * @param replicaConfiguration A list of &lt;code&gt;ConfigureShard&lt;/code&gt; objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The &lt;code&gt;ConfigureShard&lt;/code&gt; has three members: &lt;code&gt;NewReplicaCount&lt;/code&gt;, &lt;code&gt;NodeGroupId&lt;/code&gt;, and &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETIncreaseReplicaCountCall(String replicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer newReplicaCount, List<GETDecreaseReplicaCountReplicaConfigurationParameterInner> replicaConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=IncreaseReplicaCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (newReplicaCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NewReplicaCount", newReplicaCount));
        }

        if (replicaConfiguration != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ReplicaConfiguration", replicaConfiguration));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETIncreaseReplicaCountValidateBeforeCall(String replicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer newReplicaCount, List<GETDecreaseReplicaCountReplicaConfigurationParameterInner> replicaConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicationGroupId' is set
        if (replicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'replicationGroupId' when calling gETIncreaseReplicaCount(Async)");
        }

        // verify the required parameter 'applyImmediately' is set
        if (applyImmediately == null) {
            throw new ApiException("Missing the required parameter 'applyImmediately' when calling gETIncreaseReplicaCount(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETIncreaseReplicaCount(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETIncreaseReplicaCount(Async)");
        }

        return gETIncreaseReplicaCountCall(replicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newReplicaCount, replicaConfiguration, _callback);

    }

    /**
     * 
     * Dynamically increases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     * @param replicationGroupId The id of the replication group to which you want to add replica nodes. (required)
     * @param applyImmediately If &lt;code&gt;True&lt;/code&gt;, the number of replica nodes is increased immediately. &lt;code&gt;ApplyImmediately&#x3D;False&lt;/code&gt; is not currently supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newReplicaCount The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group&#39;s node groups. (optional)
     * @param replicaConfiguration A list of &lt;code&gt;ConfigureShard&lt;/code&gt; objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The &lt;code&gt;ConfigureShard&lt;/code&gt; has three members: &lt;code&gt;NewReplicaCount&lt;/code&gt;, &lt;code&gt;NodeGroupId&lt;/code&gt;, and &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt;. (optional)
     * @return IncreaseReplicaCountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public IncreaseReplicaCountResult gETIncreaseReplicaCount(String replicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer newReplicaCount, List<GETDecreaseReplicaCountReplicaConfigurationParameterInner> replicaConfiguration) throws ApiException {
        ApiResponse<IncreaseReplicaCountResult> localVarResp = gETIncreaseReplicaCountWithHttpInfo(replicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newReplicaCount, replicaConfiguration);
        return localVarResp.getData();
    }

    /**
     * 
     * Dynamically increases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     * @param replicationGroupId The id of the replication group to which you want to add replica nodes. (required)
     * @param applyImmediately If &lt;code&gt;True&lt;/code&gt;, the number of replica nodes is increased immediately. &lt;code&gt;ApplyImmediately&#x3D;False&lt;/code&gt; is not currently supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newReplicaCount The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group&#39;s node groups. (optional)
     * @param replicaConfiguration A list of &lt;code&gt;ConfigureShard&lt;/code&gt; objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The &lt;code&gt;ConfigureShard&lt;/code&gt; has three members: &lt;code&gt;NewReplicaCount&lt;/code&gt;, &lt;code&gt;NodeGroupId&lt;/code&gt;, and &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;IncreaseReplicaCountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IncreaseReplicaCountResult> gETIncreaseReplicaCountWithHttpInfo(String replicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer newReplicaCount, List<GETDecreaseReplicaCountReplicaConfigurationParameterInner> replicaConfiguration) throws ApiException {
        okhttp3.Call localVarCall = gETIncreaseReplicaCountValidateBeforeCall(replicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newReplicaCount, replicaConfiguration, null);
        Type localVarReturnType = new TypeToken<IncreaseReplicaCountResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Dynamically increases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     * @param replicationGroupId The id of the replication group to which you want to add replica nodes. (required)
     * @param applyImmediately If &lt;code&gt;True&lt;/code&gt;, the number of replica nodes is increased immediately. &lt;code&gt;ApplyImmediately&#x3D;False&lt;/code&gt; is not currently supported. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param newReplicaCount The number of read replica nodes you want at the completion of this operation. For Redis (cluster mode disabled) replication groups, this is the number of replica nodes in the replication group. For Redis (cluster mode enabled) replication groups, this is the number of replica nodes in each of the replication group&#39;s node groups. (optional)
     * @param replicaConfiguration A list of &lt;code&gt;ConfigureShard&lt;/code&gt; objects that can be used to configure each shard in a Redis (cluster mode enabled) replication group. The &lt;code&gt;ConfigureShard&lt;/code&gt; has three members: &lt;code&gt;NewReplicaCount&lt;/code&gt;, &lt;code&gt;NodeGroupId&lt;/code&gt;, and &lt;code&gt;PreferredAvailabilityZones&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETIncreaseReplicaCountAsync(String replicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer newReplicaCount, List<GETDecreaseReplicaCountReplicaConfigurationParameterInner> replicaConfiguration, final ApiCallback<IncreaseReplicaCountResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETIncreaseReplicaCountValidateBeforeCall(replicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, newReplicaCount, replicaConfiguration, _callback);
        Type localVarReturnType = new TypeToken<IncreaseReplicaCountResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListAllowedNodeTypeModifications
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheClusterId &lt;p&gt;The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You must provide a value for either the &lt;code&gt;CacheClusterId&lt;/code&gt; or the &lt;code&gt;ReplicationGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param replicationGroupId &lt;p&gt;The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You must provide a value for either the &lt;code&gt;CacheClusterId&lt;/code&gt; or the &lt;code&gt;ReplicationGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListAllowedNodeTypeModificationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheClusterId, String replicationGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListAllowedNodeTypeModifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheClusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheClusterId", cacheClusterId));
        }

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListAllowedNodeTypeModificationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheClusterId, String replicationGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListAllowedNodeTypeModifications(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListAllowedNodeTypeModifications(Async)");
        }

        return gETListAllowedNodeTypeModificationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheClusterId, replicationGroupId, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all available node types that you can scale your Redis cluster&#39;s or replication group&#39;s current node type.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;ModifyCacheCluster&lt;/code&gt; or &lt;code&gt;ModifyReplicationGroup&lt;/code&gt; operations to scale your cluster or replication group, the value of the &lt;code&gt;CacheNodeType&lt;/code&gt; parameter must be one of the node types returned by this operation.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheClusterId &lt;p&gt;The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You must provide a value for either the &lt;code&gt;CacheClusterId&lt;/code&gt; or the &lt;code&gt;ReplicationGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param replicationGroupId &lt;p&gt;The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You must provide a value for either the &lt;code&gt;CacheClusterId&lt;/code&gt; or the &lt;code&gt;ReplicationGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @return AllowedNodeTypeModificationsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public AllowedNodeTypeModificationsMessage gETListAllowedNodeTypeModifications(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheClusterId, String replicationGroupId) throws ApiException {
        ApiResponse<AllowedNodeTypeModificationsMessage> localVarResp = gETListAllowedNodeTypeModificationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheClusterId, replicationGroupId);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all available node types that you can scale your Redis cluster&#39;s or replication group&#39;s current node type.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;ModifyCacheCluster&lt;/code&gt; or &lt;code&gt;ModifyReplicationGroup&lt;/code&gt; operations to scale your cluster or replication group, the value of the &lt;code&gt;CacheNodeType&lt;/code&gt; parameter must be one of the node types returned by this operation.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheClusterId &lt;p&gt;The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You must provide a value for either the &lt;code&gt;CacheClusterId&lt;/code&gt; or the &lt;code&gt;ReplicationGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param replicationGroupId &lt;p&gt;The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You must provide a value for either the &lt;code&gt;CacheClusterId&lt;/code&gt; or the &lt;code&gt;ReplicationGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @return ApiResponse&lt;AllowedNodeTypeModificationsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllowedNodeTypeModificationsMessage> gETListAllowedNodeTypeModificationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheClusterId, String replicationGroupId) throws ApiException {
        okhttp3.Call localVarCall = gETListAllowedNodeTypeModificationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheClusterId, replicationGroupId, null);
        Type localVarReturnType = new TypeToken<AllowedNodeTypeModificationsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all available node types that you can scale your Redis cluster&#39;s or replication group&#39;s current node type.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;ModifyCacheCluster&lt;/code&gt; or &lt;code&gt;ModifyReplicationGroup&lt;/code&gt; operations to scale your cluster or replication group, the value of the &lt;code&gt;CacheNodeType&lt;/code&gt; parameter must be one of the node types returned by this operation.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheClusterId &lt;p&gt;The name of the cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You must provide a value for either the &lt;code&gt;CacheClusterId&lt;/code&gt; or the &lt;code&gt;ReplicationGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param replicationGroupId &lt;p&gt;The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You must provide a value for either the &lt;code&gt;CacheClusterId&lt;/code&gt; or the &lt;code&gt;ReplicationGroupId&lt;/code&gt;.&lt;/p&gt; &lt;/important&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListAllowedNodeTypeModificationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheClusterId, String replicationGroupId, final ApiCallback<AllowedNodeTypeModificationsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListAllowedNodeTypeModificationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheClusterId, replicationGroupId, _callback);
        Type localVarReturnType = new TypeToken<AllowedNodeTypeModificationsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETListTagsForResource
     * @param resourceName &lt;p&gt;The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster&lt;/code&gt; or &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTagsForResourceCall(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceName", resourceName));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETListTagsForResourceValidateBeforeCall(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling gETListTagsForResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETListTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETListTagsForResource(Async)");
        }

        return gETListTagsForResourceCall(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all tags currently on a named resource.&lt;/p&gt; &lt;p&gt; A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the cluster is not in the &lt;i&gt;available&lt;/i&gt; state, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns an error.&lt;/p&gt;
     * @param resourceName &lt;p&gt;The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster&lt;/code&gt; or &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return TagListMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public TagListMessage gETListTagsForResource(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<TagListMessage> localVarResp = gETListTagsForResourceWithHttpInfo(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all tags currently on a named resource.&lt;/p&gt; &lt;p&gt; A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the cluster is not in the &lt;i&gt;available&lt;/i&gt; state, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns an error.&lt;/p&gt;
     * @param resourceName &lt;p&gt;The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster&lt;/code&gt; or &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;TagListMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagListMessage> gETListTagsForResourceWithHttpInfo(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETListTagsForResourceValidateBeforeCall(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all tags currently on a named resource.&lt;/p&gt; &lt;p&gt; A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the cluster is not in the &lt;i&gt;available&lt;/i&gt; state, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns an error.&lt;/p&gt;
     * @param resourceName &lt;p&gt;The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster&lt;/code&gt; or &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces&lt;/a&gt;.&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETListTagsForResourceAsync(String resourceName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<TagListMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETListTagsForResourceValidateBeforeCall(resourceName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyCacheCluster
     * @param cacheClusterId The cluster identifier. This value is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param numCacheNodes &lt;p&gt;The number of cache nodes that the cluster should have. If the value for &lt;code&gt;NumCacheNodes&lt;/code&gt; is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.&lt;/p&gt; &lt;p&gt;If you are removing cache nodes, you must use the &lt;code&gt;CacheNodeIdsToRemove&lt;/code&gt; parameter to provide the IDs of the specific cache nodes to remove.&lt;/p&gt; &lt;p&gt;For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see &lt;code&gt;ApplyImmediately&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer&#39;s latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the &lt;code&gt;ModifyCacheCluster&lt;/code&gt; request and set &lt;code&gt;NumCacheNodes&lt;/code&gt; equal to the number of cache nodes currently in the cluster.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param cacheNodeIdsToRemove &lt;p&gt;A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when &lt;code&gt;NumCacheNodes&lt;/code&gt; is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of &lt;code&gt;NumCacheNodes&lt;/code&gt; in the request.&lt;/p&gt; &lt;p&gt;For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this &lt;code&gt;ModifyCacheCluster&lt;/code&gt; call is 5, you must list 2 (7 - 5) cache node IDs to remove.&lt;/p&gt; (optional)
     * @param azMode &lt;p&gt;Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;single-az&lt;/code&gt; | &lt;code&gt;cross-az&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This option is only supported for Memcached clusters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot specify &lt;code&gt;single-az&lt;/code&gt; if the Memcached cluster already has cache nodes in different Availability Zones. If &lt;code&gt;cross-az&lt;/code&gt; is specified, existing Memcached nodes remain in their current Availability Zone.&lt;/p&gt; &lt;p&gt;Only newly created nodes are located in different Availability Zones. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param newAvailabilityZones &lt;note&gt; &lt;p&gt;This option is only supported on Memcached clusters.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The list of Availability Zones where the new Memcached cache nodes are created.&lt;/p&gt; &lt;p&gt;This parameter is only valid when &lt;code&gt;NumCacheNodes&lt;/code&gt; in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.&lt;/p&gt; &lt;p&gt;Scenarios:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scenario 1:&lt;/b&gt; You have 3 active nodes and wish to add 2 nodes. Specify &lt;code&gt;NumCacheNodes&#x3D;5&lt;/code&gt; (3 + 2) and optionally specify two Availability Zones for the two new nodes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scenario 2:&lt;/b&gt; You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify &lt;code&gt;NumCacheNodes&#x3D;6&lt;/code&gt; ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scenario 3:&lt;/b&gt; You want to cancel all pending operations. Specify &lt;code&gt;NumCacheNodes&#x3D;3&lt;/code&gt; to cancel all pending operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting &lt;code&gt;NumCacheNodes&lt;/code&gt; to the number of current nodes.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;cross-az&lt;/code&gt; is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the &lt;b&gt;Availability Zone Considerations&lt;/b&gt; section of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html\&quot;&gt;Cache Node Considerations for Memcached&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Impact of new add/remove requests upon pending requests&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Scenario-1&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new delete, pending or immediate, replaces the pending delete.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scenario-2&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new create, pending or immediate, replaces the pending delete.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scenario-3&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new delete, pending or immediate, replaces the pending create.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scenario-4&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new create is added to the pending create.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; If the new create request is &lt;b&gt;Apply Immediately - Yes&lt;/b&gt;, all creates are performed immediately. If the new create request is &lt;b&gt;Apply Immediately - No&lt;/b&gt;, all creates are pending.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param cacheSecurityGroupNames &lt;p&gt;A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters. Must not be \&quot;Default\&quot;.&lt;/p&gt; (optional)
     * @param securityGroupIds &lt;p&gt;Specifies the VPC Security Groups associated with the cluster.&lt;/p&gt; &lt;p&gt;This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.&lt;/p&gt; &lt;p&gt;Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sun&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;mon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;tue&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;wed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;thu&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;fri&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;sun:23:00-mon:01:30&lt;/code&gt; &lt;/p&gt; (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be same as the cluster owner.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param cacheParameterGroupName The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is specified as &lt;code&gt;true&lt;/code&gt; for this request. (optional)
     * @param notificationTopicStatus &lt;p&gt;The status of the Amazon SNS notification topic. Notifications are sent only if the status is &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;active&lt;/code&gt; | &lt;code&gt;inactive&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the cluster.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;false&lt;/code&gt;, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you perform a &lt;code&gt;ModifyCacheCluster&lt;/code&gt; before a pending modification is applied, the pending modification is replaced by the newer modification.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The upgraded version of the cache engine to be run on the cache nodes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot that was taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the value of &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; is set to zero (0), backups are turned off.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param snapshotWindow The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster.  (optional)
     * @param cacheNodeType A valid cache node type that you want to scale this cluster up to. (optional)
     * @param authToken &lt;p&gt;Reserved parameter. The password used to access a password protected server. This parameter must be specified with the &lt;code&gt;auth-token-update&lt;/code&gt; parameter. Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot contain any of the following characters: &#39;/&#39;, &#39;\&quot;&#39;, or &#39;@&#39;, &#39;%&#39;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see AUTH password at &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param authTokenUpdateStrategy &lt;p&gt;Specifies the strategy to use to update the AUTH token. This parameter must be specified with the &lt;code&gt;auth-token&lt;/code&gt; parameter. Possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Rotate&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html\&quot;&gt;Authenticating Users with Redis AUTH&lt;/a&gt; &lt;/p&gt; (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs. (optional)
     * @param ipDiscovery The network type you choose when modifying a cluster, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyCacheClusterCall(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer numCacheNodes, List<String> cacheNodeIdsToRemove, String azMode, List<String> newAvailabilityZones, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, String preferredMaintenanceWindow, String notificationTopicArn, String cacheParameterGroupName, String notificationTopicStatus, Boolean applyImmediately, String engineVersion, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String cacheNodeType, String authToken, String authTokenUpdateStrategy, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, String ipDiscovery, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyCacheCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheClusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheClusterId", cacheClusterId));
        }

        if (numCacheNodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NumCacheNodes", numCacheNodes));
        }

        if (cacheNodeIdsToRemove != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "CacheNodeIdsToRemove", cacheNodeIdsToRemove));
        }

        if (azMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AZMode", azMode));
        }

        if (newAvailabilityZones != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "NewAvailabilityZones", newAvailabilityZones));
        }

        if (cacheSecurityGroupNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "CacheSecurityGroupNames", cacheSecurityGroupNames));
        }

        if (securityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SecurityGroupIds", securityGroupIds));
        }

        if (preferredMaintenanceWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredMaintenanceWindow", preferredMaintenanceWindow));
        }

        if (notificationTopicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NotificationTopicArn", notificationTopicArn));
        }

        if (cacheParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupName", cacheParameterGroupName));
        }

        if (notificationTopicStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NotificationTopicStatus", notificationTopicStatus));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (autoMinorVersionUpgrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoMinorVersionUpgrade", autoMinorVersionUpgrade));
        }

        if (snapshotRetentionLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotRetentionLimit", snapshotRetentionLimit));
        }

        if (snapshotWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotWindow", snapshotWindow));
        }

        if (cacheNodeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheNodeType", cacheNodeType));
        }

        if (authToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AuthToken", authToken));
        }

        if (authTokenUpdateStrategy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AuthTokenUpdateStrategy", authTokenUpdateStrategy));
        }

        if (logDeliveryConfigurations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LogDeliveryConfigurations", logDeliveryConfigurations));
        }

        if (ipDiscovery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IpDiscovery", ipDiscovery));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyCacheClusterValidateBeforeCall(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer numCacheNodes, List<String> cacheNodeIdsToRemove, String azMode, List<String> newAvailabilityZones, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, String preferredMaintenanceWindow, String notificationTopicArn, String cacheParameterGroupName, String notificationTopicStatus, Boolean applyImmediately, String engineVersion, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String cacheNodeType, String authToken, String authTokenUpdateStrategy, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, String ipDiscovery, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheClusterId' is set
        if (cacheClusterId == null) {
            throw new ApiException("Missing the required parameter 'cacheClusterId' when calling gETModifyCacheCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyCacheCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyCacheCluster(Async)");
        }

        return gETModifyCacheClusterCall(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, numCacheNodes, cacheNodeIdsToRemove, azMode, newAvailabilityZones, cacheSecurityGroupNames, securityGroupIds, preferredMaintenanceWindow, notificationTopicArn, cacheParameterGroupName, notificationTopicStatus, applyImmediately, engineVersion, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, cacheNodeType, authToken, authTokenUpdateStrategy, logDeliveryConfigurations, ipDiscovery, _callback);

    }

    /**
     * 
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
     * @param cacheClusterId The cluster identifier. This value is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param numCacheNodes &lt;p&gt;The number of cache nodes that the cluster should have. If the value for &lt;code&gt;NumCacheNodes&lt;/code&gt; is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.&lt;/p&gt; &lt;p&gt;If you are removing cache nodes, you must use the &lt;code&gt;CacheNodeIdsToRemove&lt;/code&gt; parameter to provide the IDs of the specific cache nodes to remove.&lt;/p&gt; &lt;p&gt;For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see &lt;code&gt;ApplyImmediately&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer&#39;s latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the &lt;code&gt;ModifyCacheCluster&lt;/code&gt; request and set &lt;code&gt;NumCacheNodes&lt;/code&gt; equal to the number of cache nodes currently in the cluster.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param cacheNodeIdsToRemove &lt;p&gt;A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when &lt;code&gt;NumCacheNodes&lt;/code&gt; is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of &lt;code&gt;NumCacheNodes&lt;/code&gt; in the request.&lt;/p&gt; &lt;p&gt;For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this &lt;code&gt;ModifyCacheCluster&lt;/code&gt; call is 5, you must list 2 (7 - 5) cache node IDs to remove.&lt;/p&gt; (optional)
     * @param azMode &lt;p&gt;Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;single-az&lt;/code&gt; | &lt;code&gt;cross-az&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This option is only supported for Memcached clusters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot specify &lt;code&gt;single-az&lt;/code&gt; if the Memcached cluster already has cache nodes in different Availability Zones. If &lt;code&gt;cross-az&lt;/code&gt; is specified, existing Memcached nodes remain in their current Availability Zone.&lt;/p&gt; &lt;p&gt;Only newly created nodes are located in different Availability Zones. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param newAvailabilityZones &lt;note&gt; &lt;p&gt;This option is only supported on Memcached clusters.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The list of Availability Zones where the new Memcached cache nodes are created.&lt;/p&gt; &lt;p&gt;This parameter is only valid when &lt;code&gt;NumCacheNodes&lt;/code&gt; in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.&lt;/p&gt; &lt;p&gt;Scenarios:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scenario 1:&lt;/b&gt; You have 3 active nodes and wish to add 2 nodes. Specify &lt;code&gt;NumCacheNodes&#x3D;5&lt;/code&gt; (3 + 2) and optionally specify two Availability Zones for the two new nodes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scenario 2:&lt;/b&gt; You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify &lt;code&gt;NumCacheNodes&#x3D;6&lt;/code&gt; ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scenario 3:&lt;/b&gt; You want to cancel all pending operations. Specify &lt;code&gt;NumCacheNodes&#x3D;3&lt;/code&gt; to cancel all pending operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting &lt;code&gt;NumCacheNodes&lt;/code&gt; to the number of current nodes.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;cross-az&lt;/code&gt; is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the &lt;b&gt;Availability Zone Considerations&lt;/b&gt; section of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html\&quot;&gt;Cache Node Considerations for Memcached&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Impact of new add/remove requests upon pending requests&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Scenario-1&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new delete, pending or immediate, replaces the pending delete.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scenario-2&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new create, pending or immediate, replaces the pending delete.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scenario-3&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new delete, pending or immediate, replaces the pending create.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scenario-4&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new create is added to the pending create.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; If the new create request is &lt;b&gt;Apply Immediately - Yes&lt;/b&gt;, all creates are performed immediately. If the new create request is &lt;b&gt;Apply Immediately - No&lt;/b&gt;, all creates are pending.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param cacheSecurityGroupNames &lt;p&gt;A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters. Must not be \&quot;Default\&quot;.&lt;/p&gt; (optional)
     * @param securityGroupIds &lt;p&gt;Specifies the VPC Security Groups associated with the cluster.&lt;/p&gt; &lt;p&gt;This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.&lt;/p&gt; &lt;p&gt;Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sun&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;mon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;tue&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;wed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;thu&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;fri&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;sun:23:00-mon:01:30&lt;/code&gt; &lt;/p&gt; (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be same as the cluster owner.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param cacheParameterGroupName The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is specified as &lt;code&gt;true&lt;/code&gt; for this request. (optional)
     * @param notificationTopicStatus &lt;p&gt;The status of the Amazon SNS notification topic. Notifications are sent only if the status is &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;active&lt;/code&gt; | &lt;code&gt;inactive&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the cluster.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;false&lt;/code&gt;, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you perform a &lt;code&gt;ModifyCacheCluster&lt;/code&gt; before a pending modification is applied, the pending modification is replaced by the newer modification.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The upgraded version of the cache engine to be run on the cache nodes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot that was taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the value of &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; is set to zero (0), backups are turned off.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param snapshotWindow The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster.  (optional)
     * @param cacheNodeType A valid cache node type that you want to scale this cluster up to. (optional)
     * @param authToken &lt;p&gt;Reserved parameter. The password used to access a password protected server. This parameter must be specified with the &lt;code&gt;auth-token-update&lt;/code&gt; parameter. Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot contain any of the following characters: &#39;/&#39;, &#39;\&quot;&#39;, or &#39;@&#39;, &#39;%&#39;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see AUTH password at &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param authTokenUpdateStrategy &lt;p&gt;Specifies the strategy to use to update the AUTH token. This parameter must be specified with the &lt;code&gt;auth-token&lt;/code&gt; parameter. Possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Rotate&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html\&quot;&gt;Authenticating Users with Redis AUTH&lt;/a&gt; &lt;/p&gt; (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs. (optional)
     * @param ipDiscovery The network type you choose when modifying a cluster, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @return ModifyCacheClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyCacheClusterResult gETModifyCacheCluster(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer numCacheNodes, List<String> cacheNodeIdsToRemove, String azMode, List<String> newAvailabilityZones, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, String preferredMaintenanceWindow, String notificationTopicArn, String cacheParameterGroupName, String notificationTopicStatus, Boolean applyImmediately, String engineVersion, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String cacheNodeType, String authToken, String authTokenUpdateStrategy, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, String ipDiscovery) throws ApiException {
        ApiResponse<ModifyCacheClusterResult> localVarResp = gETModifyCacheClusterWithHttpInfo(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, numCacheNodes, cacheNodeIdsToRemove, azMode, newAvailabilityZones, cacheSecurityGroupNames, securityGroupIds, preferredMaintenanceWindow, notificationTopicArn, cacheParameterGroupName, notificationTopicStatus, applyImmediately, engineVersion, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, cacheNodeType, authToken, authTokenUpdateStrategy, logDeliveryConfigurations, ipDiscovery);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
     * @param cacheClusterId The cluster identifier. This value is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param numCacheNodes &lt;p&gt;The number of cache nodes that the cluster should have. If the value for &lt;code&gt;NumCacheNodes&lt;/code&gt; is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.&lt;/p&gt; &lt;p&gt;If you are removing cache nodes, you must use the &lt;code&gt;CacheNodeIdsToRemove&lt;/code&gt; parameter to provide the IDs of the specific cache nodes to remove.&lt;/p&gt; &lt;p&gt;For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see &lt;code&gt;ApplyImmediately&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer&#39;s latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the &lt;code&gt;ModifyCacheCluster&lt;/code&gt; request and set &lt;code&gt;NumCacheNodes&lt;/code&gt; equal to the number of cache nodes currently in the cluster.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param cacheNodeIdsToRemove &lt;p&gt;A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when &lt;code&gt;NumCacheNodes&lt;/code&gt; is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of &lt;code&gt;NumCacheNodes&lt;/code&gt; in the request.&lt;/p&gt; &lt;p&gt;For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this &lt;code&gt;ModifyCacheCluster&lt;/code&gt; call is 5, you must list 2 (7 - 5) cache node IDs to remove.&lt;/p&gt; (optional)
     * @param azMode &lt;p&gt;Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;single-az&lt;/code&gt; | &lt;code&gt;cross-az&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This option is only supported for Memcached clusters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot specify &lt;code&gt;single-az&lt;/code&gt; if the Memcached cluster already has cache nodes in different Availability Zones. If &lt;code&gt;cross-az&lt;/code&gt; is specified, existing Memcached nodes remain in their current Availability Zone.&lt;/p&gt; &lt;p&gt;Only newly created nodes are located in different Availability Zones. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param newAvailabilityZones &lt;note&gt; &lt;p&gt;This option is only supported on Memcached clusters.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The list of Availability Zones where the new Memcached cache nodes are created.&lt;/p&gt; &lt;p&gt;This parameter is only valid when &lt;code&gt;NumCacheNodes&lt;/code&gt; in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.&lt;/p&gt; &lt;p&gt;Scenarios:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scenario 1:&lt;/b&gt; You have 3 active nodes and wish to add 2 nodes. Specify &lt;code&gt;NumCacheNodes&#x3D;5&lt;/code&gt; (3 + 2) and optionally specify two Availability Zones for the two new nodes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scenario 2:&lt;/b&gt; You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify &lt;code&gt;NumCacheNodes&#x3D;6&lt;/code&gt; ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scenario 3:&lt;/b&gt; You want to cancel all pending operations. Specify &lt;code&gt;NumCacheNodes&#x3D;3&lt;/code&gt; to cancel all pending operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting &lt;code&gt;NumCacheNodes&lt;/code&gt; to the number of current nodes.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;cross-az&lt;/code&gt; is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the &lt;b&gt;Availability Zone Considerations&lt;/b&gt; section of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html\&quot;&gt;Cache Node Considerations for Memcached&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Impact of new add/remove requests upon pending requests&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Scenario-1&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new delete, pending or immediate, replaces the pending delete.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scenario-2&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new create, pending or immediate, replaces the pending delete.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scenario-3&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new delete, pending or immediate, replaces the pending create.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scenario-4&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new create is added to the pending create.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; If the new create request is &lt;b&gt;Apply Immediately - Yes&lt;/b&gt;, all creates are performed immediately. If the new create request is &lt;b&gt;Apply Immediately - No&lt;/b&gt;, all creates are pending.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param cacheSecurityGroupNames &lt;p&gt;A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters. Must not be \&quot;Default\&quot;.&lt;/p&gt; (optional)
     * @param securityGroupIds &lt;p&gt;Specifies the VPC Security Groups associated with the cluster.&lt;/p&gt; &lt;p&gt;This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.&lt;/p&gt; &lt;p&gt;Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sun&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;mon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;tue&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;wed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;thu&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;fri&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;sun:23:00-mon:01:30&lt;/code&gt; &lt;/p&gt; (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be same as the cluster owner.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param cacheParameterGroupName The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is specified as &lt;code&gt;true&lt;/code&gt; for this request. (optional)
     * @param notificationTopicStatus &lt;p&gt;The status of the Amazon SNS notification topic. Notifications are sent only if the status is &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;active&lt;/code&gt; | &lt;code&gt;inactive&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the cluster.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;false&lt;/code&gt;, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you perform a &lt;code&gt;ModifyCacheCluster&lt;/code&gt; before a pending modification is applied, the pending modification is replaced by the newer modification.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The upgraded version of the cache engine to be run on the cache nodes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot that was taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the value of &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; is set to zero (0), backups are turned off.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param snapshotWindow The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster.  (optional)
     * @param cacheNodeType A valid cache node type that you want to scale this cluster up to. (optional)
     * @param authToken &lt;p&gt;Reserved parameter. The password used to access a password protected server. This parameter must be specified with the &lt;code&gt;auth-token-update&lt;/code&gt; parameter. Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot contain any of the following characters: &#39;/&#39;, &#39;\&quot;&#39;, or &#39;@&#39;, &#39;%&#39;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see AUTH password at &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param authTokenUpdateStrategy &lt;p&gt;Specifies the strategy to use to update the AUTH token. This parameter must be specified with the &lt;code&gt;auth-token&lt;/code&gt; parameter. Possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Rotate&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html\&quot;&gt;Authenticating Users with Redis AUTH&lt;/a&gt; &lt;/p&gt; (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs. (optional)
     * @param ipDiscovery The network type you choose when modifying a cluster, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @return ApiResponse&lt;ModifyCacheClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyCacheClusterResult> gETModifyCacheClusterWithHttpInfo(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer numCacheNodes, List<String> cacheNodeIdsToRemove, String azMode, List<String> newAvailabilityZones, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, String preferredMaintenanceWindow, String notificationTopicArn, String cacheParameterGroupName, String notificationTopicStatus, Boolean applyImmediately, String engineVersion, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String cacheNodeType, String authToken, String authTokenUpdateStrategy, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, String ipDiscovery) throws ApiException {
        okhttp3.Call localVarCall = gETModifyCacheClusterValidateBeforeCall(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, numCacheNodes, cacheNodeIdsToRemove, azMode, newAvailabilityZones, cacheSecurityGroupNames, securityGroupIds, preferredMaintenanceWindow, notificationTopicArn, cacheParameterGroupName, notificationTopicStatus, applyImmediately, engineVersion, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, cacheNodeType, authToken, authTokenUpdateStrategy, logDeliveryConfigurations, ipDiscovery, null);
        Type localVarReturnType = new TypeToken<ModifyCacheClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
     * @param cacheClusterId The cluster identifier. This value is stored as a lowercase string. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param numCacheNodes &lt;p&gt;The number of cache nodes that the cluster should have. If the value for &lt;code&gt;NumCacheNodes&lt;/code&gt; is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled.&lt;/p&gt; &lt;p&gt;If you are removing cache nodes, you must use the &lt;code&gt;CacheNodeIdsToRemove&lt;/code&gt; parameter to provide the IDs of the specific cache nodes to remove.&lt;/p&gt; &lt;p&gt;For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 40.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see &lt;code&gt;ApplyImmediately&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer&#39;s latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the &lt;code&gt;ModifyCacheCluster&lt;/code&gt; request and set &lt;code&gt;NumCacheNodes&lt;/code&gt; equal to the number of cache nodes currently in the cluster.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param cacheNodeIdsToRemove &lt;p&gt;A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when &lt;code&gt;NumCacheNodes&lt;/code&gt; is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of &lt;code&gt;NumCacheNodes&lt;/code&gt; in the request.&lt;/p&gt; &lt;p&gt;For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this &lt;code&gt;ModifyCacheCluster&lt;/code&gt; call is 5, you must list 2 (7 - 5) cache node IDs to remove.&lt;/p&gt; (optional)
     * @param azMode &lt;p&gt;Specifies whether the new nodes in this Memcached cluster are all created in a single Availability Zone or created across multiple Availability Zones.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;single-az&lt;/code&gt; | &lt;code&gt;cross-az&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This option is only supported for Memcached clusters.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot specify &lt;code&gt;single-az&lt;/code&gt; if the Memcached cluster already has cache nodes in different Availability Zones. If &lt;code&gt;cross-az&lt;/code&gt; is specified, existing Memcached nodes remain in their current Availability Zone.&lt;/p&gt; &lt;p&gt;Only newly created nodes are located in different Availability Zones. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param newAvailabilityZones &lt;note&gt; &lt;p&gt;This option is only supported on Memcached clusters.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The list of Availability Zones where the new Memcached cache nodes are created.&lt;/p&gt; &lt;p&gt;This parameter is only valid when &lt;code&gt;NumCacheNodes&lt;/code&gt; in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request.&lt;/p&gt; &lt;p&gt;Scenarios:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scenario 1:&lt;/b&gt; You have 3 active nodes and wish to add 2 nodes. Specify &lt;code&gt;NumCacheNodes&#x3D;5&lt;/code&gt; (3 + 2) and optionally specify two Availability Zones for the two new nodes.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scenario 2:&lt;/b&gt; You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify &lt;code&gt;NumCacheNodes&#x3D;6&lt;/code&gt; ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scenario 3:&lt;/b&gt; You want to cancel all pending operations. Specify &lt;code&gt;NumCacheNodes&#x3D;3&lt;/code&gt; to cancel all pending operations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting &lt;code&gt;NumCacheNodes&lt;/code&gt; to the number of current nodes.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;cross-az&lt;/code&gt; is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the &lt;b&gt;Availability Zone Considerations&lt;/b&gt; section of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html\&quot;&gt;Cache Node Considerations for Memcached&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Impact of new add/remove requests upon pending requests&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Scenario-1&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new delete, pending or immediate, replaces the pending delete.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scenario-2&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new create, pending or immediate, replaces the pending delete.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scenario-3&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Delete&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new delete, pending or immediate, replaces the pending create.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Scenario-4&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Pending Action: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New Request: Create&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Result: The new create is added to the pending create.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; If the new create request is &lt;b&gt;Apply Immediately - Yes&lt;/b&gt;, all creates are performed immediately. If the new create request is &lt;b&gt;Apply Immediately - No&lt;/b&gt;, all creates are pending.&lt;/p&gt; &lt;/important&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param cacheSecurityGroupNames &lt;p&gt;A list of cache security group names to authorize on this cluster. This change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters. Must not be \&quot;Default\&quot;.&lt;/p&gt; (optional)
     * @param securityGroupIds &lt;p&gt;Specifies the VPC Security Groups associated with the cluster.&lt;/p&gt; &lt;p&gt;This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.&lt;/p&gt; &lt;p&gt;Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sun&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;mon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;tue&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;wed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;thu&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;fri&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;sun:23:00-mon:01:30&lt;/code&gt; &lt;/p&gt; (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be same as the cluster owner.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param cacheParameterGroupName The name of the cache parameter group to apply to this cluster. This change is asynchronously applied as soon as possible for parameters when the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is specified as &lt;code&gt;true&lt;/code&gt; for this request. (optional)
     * @param notificationTopicStatus &lt;p&gt;The status of the Amazon SNS notification topic. Notifications are sent only if the status is &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;active&lt;/code&gt; | &lt;code&gt;inactive&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the cluster.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;false&lt;/code&gt;, changes to the cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.&lt;/p&gt; &lt;important&gt; &lt;p&gt;If you perform a &lt;code&gt;ModifyCacheCluster&lt;/code&gt; before a pending modification is applied, the pending modification is replaced by the newer modification.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The upgraded version of the cache engine to be run on the cache nodes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cluster and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic cluster snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot that was taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the value of &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; is set to zero (0), backups are turned off.&lt;/p&gt; &lt;/note&gt; (optional)
     * @param snapshotWindow The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cluster.  (optional)
     * @param cacheNodeType A valid cache node type that you want to scale this cluster up to. (optional)
     * @param authToken &lt;p&gt;Reserved parameter. The password used to access a password protected server. This parameter must be specified with the &lt;code&gt;auth-token-update&lt;/code&gt; parameter. Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot contain any of the following characters: &#39;/&#39;, &#39;\&quot;&#39;, or &#39;@&#39;, &#39;%&#39;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see AUTH password at &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param authTokenUpdateStrategy &lt;p&gt;Specifies the strategy to use to update the AUTH token. This parameter must be specified with the &lt;code&gt;auth-token&lt;/code&gt; parameter. Possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Rotate&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html\&quot;&gt;Authenticating Users with Redis AUTH&lt;/a&gt; &lt;/p&gt; (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs. (optional)
     * @param ipDiscovery The network type you choose when modifying a cluster, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyCacheClusterAsync(String cacheClusterId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer numCacheNodes, List<String> cacheNodeIdsToRemove, String azMode, List<String> newAvailabilityZones, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, String preferredMaintenanceWindow, String notificationTopicArn, String cacheParameterGroupName, String notificationTopicStatus, Boolean applyImmediately, String engineVersion, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String cacheNodeType, String authToken, String authTokenUpdateStrategy, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, String ipDiscovery, final ApiCallback<ModifyCacheClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyCacheClusterValidateBeforeCall(cacheClusterId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, numCacheNodes, cacheNodeIdsToRemove, azMode, newAvailabilityZones, cacheSecurityGroupNames, securityGroupIds, preferredMaintenanceWindow, notificationTopicArn, cacheParameterGroupName, notificationTopicStatus, applyImmediately, engineVersion, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, cacheNodeType, authToken, authTokenUpdateStrategy, logDeliveryConfigurations, ipDiscovery, _callback);
        Type localVarReturnType = new TypeToken<ModifyCacheClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyCacheParameterGroup
     * @param cacheParameterGroupName The name of the cache parameter group to modify. (required)
     * @param parameterNameValues An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyCacheParameterGroupCall(String cacheParameterGroupName, List<GETModifyCacheParameterGroupParameterNameValuesParameterInner> parameterNameValues, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyCacheParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupName", cacheParameterGroupName));
        }

        if (parameterNameValues != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ParameterNameValues", parameterNameValues));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyCacheParameterGroupValidateBeforeCall(String cacheParameterGroupName, List<GETModifyCacheParameterGroupParameterNameValuesParameterInner> parameterNameValues, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheParameterGroupName' is set
        if (cacheParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'cacheParameterGroupName' when calling gETModifyCacheParameterGroup(Async)");
        }

        // verify the required parameter 'parameterNameValues' is set
        if (parameterNameValues == null) {
            throw new ApiException("Missing the required parameter 'parameterNameValues' when calling gETModifyCacheParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyCacheParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyCacheParameterGroup(Async)");
        }

        return gETModifyCacheParameterGroupCall(cacheParameterGroupName, parameterNameValues, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     * @param cacheParameterGroupName The name of the cache parameter group to modify. (required)
     * @param parameterNameValues An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CacheParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CacheParameterGroupNameMessage gETModifyCacheParameterGroup(String cacheParameterGroupName, List<GETModifyCacheParameterGroupParameterNameValuesParameterInner> parameterNameValues, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CacheParameterGroupNameMessage> localVarResp = gETModifyCacheParameterGroupWithHttpInfo(cacheParameterGroupName, parameterNameValues, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     * @param cacheParameterGroupName The name of the cache parameter group to modify. (required)
     * @param parameterNameValues An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CacheParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheParameterGroupNameMessage> gETModifyCacheParameterGroupWithHttpInfo(String cacheParameterGroupName, List<GETModifyCacheParameterGroupParameterNameValuesParameterInner> parameterNameValues, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETModifyCacheParameterGroupValidateBeforeCall(cacheParameterGroupName, parameterNameValues, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CacheParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     * @param cacheParameterGroupName The name of the cache parameter group to modify. (required)
     * @param parameterNameValues An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyCacheParameterGroupAsync(String cacheParameterGroupName, List<GETModifyCacheParameterGroupParameterNameValuesParameterInner> parameterNameValues, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CacheParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyCacheParameterGroupValidateBeforeCall(cacheParameterGroupName, parameterNameValues, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CacheParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyCacheSubnetGroup
     * @param cacheSubnetGroupName &lt;p&gt;The name for the cache subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters or hyphens.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mysubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheSubnetGroupDescription A description of the cache subnet group. (optional)
     * @param subnetIds The EC2 subnet IDs for the cache subnet group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyCacheSubnetGroupCall(String cacheSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSubnetGroupDescription, List<String> subnetIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyCacheSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheSubnetGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSubnetGroupName", cacheSubnetGroupName));
        }

        if (cacheSubnetGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSubnetGroupDescription", cacheSubnetGroupDescription));
        }

        if (subnetIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SubnetIds", subnetIds));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyCacheSubnetGroupValidateBeforeCall(String cacheSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSubnetGroupDescription, List<String> subnetIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheSubnetGroupName' is set
        if (cacheSubnetGroupName == null) {
            throw new ApiException("Missing the required parameter 'cacheSubnetGroupName' when calling gETModifyCacheSubnetGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyCacheSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyCacheSubnetGroup(Async)");
        }

        return gETModifyCacheSubnetGroupCall(cacheSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSubnetGroupDescription, subnetIds, _callback);

    }

    /**
     * 
     * Modifies an existing cache subnet group.
     * @param cacheSubnetGroupName &lt;p&gt;The name for the cache subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters or hyphens.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mysubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheSubnetGroupDescription A description of the cache subnet group. (optional)
     * @param subnetIds The EC2 subnet IDs for the cache subnet group. (optional)
     * @return ModifyCacheSubnetGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyCacheSubnetGroupResult gETModifyCacheSubnetGroup(String cacheSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSubnetGroupDescription, List<String> subnetIds) throws ApiException {
        ApiResponse<ModifyCacheSubnetGroupResult> localVarResp = gETModifyCacheSubnetGroupWithHttpInfo(cacheSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSubnetGroupDescription, subnetIds);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies an existing cache subnet group.
     * @param cacheSubnetGroupName &lt;p&gt;The name for the cache subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters or hyphens.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mysubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheSubnetGroupDescription A description of the cache subnet group. (optional)
     * @param subnetIds The EC2 subnet IDs for the cache subnet group. (optional)
     * @return ApiResponse&lt;ModifyCacheSubnetGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyCacheSubnetGroupResult> gETModifyCacheSubnetGroupWithHttpInfo(String cacheSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSubnetGroupDescription, List<String> subnetIds) throws ApiException {
        okhttp3.Call localVarCall = gETModifyCacheSubnetGroupValidateBeforeCall(cacheSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSubnetGroupDescription, subnetIds, null);
        Type localVarReturnType = new TypeToken<ModifyCacheSubnetGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies an existing cache subnet group.
     * @param cacheSubnetGroupName &lt;p&gt;The name for the cache subnet group. This value is stored as a lowercase string.&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters or hyphens.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;mysubnetgroup&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheSubnetGroupDescription A description of the cache subnet group. (optional)
     * @param subnetIds The EC2 subnet IDs for the cache subnet group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyCacheSubnetGroupAsync(String cacheSubnetGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheSubnetGroupDescription, List<String> subnetIds, final ApiCallback<ModifyCacheSubnetGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyCacheSubnetGroupValidateBeforeCall(cacheSubnetGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheSubnetGroupDescription, subnetIds, _callback);
        Type localVarReturnType = new TypeToken<ModifyCacheSubnetGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyGlobalReplicationGroup
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param applyImmediately This parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible. Modifications to Global Replication Groups cannot be requested to be applied in PreferredMaintenceWindow.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheNodeType A valid cache node type that you want to scale this Global datastore to. (optional)
     * @param engineVersion The upgraded version of the cache engine to be run on the clusters in the Global datastore.  (optional)
     * @param cacheParameterGroupName The name of the cache parameter group to use with the Global datastore. It must be compatible with the major engine version used by the Global datastore. (optional)
     * @param globalReplicationGroupDescription A description of the Global datastore (optional)
     * @param automaticFailoverEnabled Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyGlobalReplicationGroupCall(String globalReplicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheNodeType, String engineVersion, String cacheParameterGroupName, String globalReplicationGroupDescription, Boolean automaticFailoverEnabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalReplicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalReplicationGroupId", globalReplicationGroupId));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (cacheNodeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheNodeType", cacheNodeType));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (cacheParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupName", cacheParameterGroupName));
        }

        if (globalReplicationGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalReplicationGroupDescription", globalReplicationGroupDescription));
        }

        if (automaticFailoverEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutomaticFailoverEnabled", automaticFailoverEnabled));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyGlobalReplicationGroupValidateBeforeCall(String globalReplicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheNodeType, String engineVersion, String cacheParameterGroupName, String globalReplicationGroupDescription, Boolean automaticFailoverEnabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalReplicationGroupId' is set
        if (globalReplicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'globalReplicationGroupId' when calling gETModifyGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'applyImmediately' is set
        if (applyImmediately == null) {
            throw new ApiException("Missing the required parameter 'applyImmediately' when calling gETModifyGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyGlobalReplicationGroup(Async)");
        }

        return gETModifyGlobalReplicationGroupCall(globalReplicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheNodeType, engineVersion, cacheParameterGroupName, globalReplicationGroupDescription, automaticFailoverEnabled, _callback);

    }

    /**
     * 
     * Modifies the settings for a Global datastore.
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param applyImmediately This parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible. Modifications to Global Replication Groups cannot be requested to be applied in PreferredMaintenceWindow.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheNodeType A valid cache node type that you want to scale this Global datastore to. (optional)
     * @param engineVersion The upgraded version of the cache engine to be run on the clusters in the Global datastore.  (optional)
     * @param cacheParameterGroupName The name of the cache parameter group to use with the Global datastore. It must be compatible with the major engine version used by the Global datastore. (optional)
     * @param globalReplicationGroupDescription A description of the Global datastore (optional)
     * @param automaticFailoverEnabled Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.  (optional)
     * @return ModifyGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyGlobalReplicationGroupResult gETModifyGlobalReplicationGroup(String globalReplicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheNodeType, String engineVersion, String cacheParameterGroupName, String globalReplicationGroupDescription, Boolean automaticFailoverEnabled) throws ApiException {
        ApiResponse<ModifyGlobalReplicationGroupResult> localVarResp = gETModifyGlobalReplicationGroupWithHttpInfo(globalReplicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheNodeType, engineVersion, cacheParameterGroupName, globalReplicationGroupDescription, automaticFailoverEnabled);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the settings for a Global datastore.
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param applyImmediately This parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible. Modifications to Global Replication Groups cannot be requested to be applied in PreferredMaintenceWindow.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheNodeType A valid cache node type that you want to scale this Global datastore to. (optional)
     * @param engineVersion The upgraded version of the cache engine to be run on the clusters in the Global datastore.  (optional)
     * @param cacheParameterGroupName The name of the cache parameter group to use with the Global datastore. It must be compatible with the major engine version used by the Global datastore. (optional)
     * @param globalReplicationGroupDescription A description of the Global datastore (optional)
     * @param automaticFailoverEnabled Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.  (optional)
     * @return ApiResponse&lt;ModifyGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyGlobalReplicationGroupResult> gETModifyGlobalReplicationGroupWithHttpInfo(String globalReplicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheNodeType, String engineVersion, String cacheParameterGroupName, String globalReplicationGroupDescription, Boolean automaticFailoverEnabled) throws ApiException {
        okhttp3.Call localVarCall = gETModifyGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheNodeType, engineVersion, cacheParameterGroupName, globalReplicationGroupDescription, automaticFailoverEnabled, null);
        Type localVarReturnType = new TypeToken<ModifyGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the settings for a Global datastore.
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param applyImmediately This parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible. Modifications to Global Replication Groups cannot be requested to be applied in PreferredMaintenceWindow.  (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param cacheNodeType A valid cache node type that you want to scale this Global datastore to. (optional)
     * @param engineVersion The upgraded version of the cache engine to be run on the clusters in the Global datastore.  (optional)
     * @param cacheParameterGroupName The name of the cache parameter group to use with the Global datastore. It must be compatible with the major engine version used by the Global datastore. (optional)
     * @param globalReplicationGroupDescription A description of the Global datastore (optional)
     * @param automaticFailoverEnabled Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyGlobalReplicationGroupAsync(String globalReplicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String cacheNodeType, String engineVersion, String cacheParameterGroupName, String globalReplicationGroupDescription, Boolean automaticFailoverEnabled, final ApiCallback<ModifyGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, cacheNodeType, engineVersion, cacheParameterGroupName, globalReplicationGroupDescription, automaticFailoverEnabled, _callback);
        Type localVarReturnType = new TypeToken<ModifyGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyReplicationGroup
     * @param replicationGroupId The identifier of the replication group to modify. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupDescription A description for the replication group. Maximum length is 255 characters. (optional)
     * @param primaryClusterId For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas. (optional)
     * @param snapshottingClusterId The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups. (optional)
     * @param automaticFailoverEnabled &lt;p&gt;Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param multiAZEnabled A flag to indicate MultiAZ is enabled. (optional)
     * @param nodeGroupId Deprecated. This parameter is not used. (optional)
     * @param cacheSecurityGroupNames &lt;p&gt;A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters. Must not be &lt;code&gt;Default&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param securityGroupIds &lt;p&gt;Specifies the VPC Security Groups associated with the clusters in the replication group.&lt;/p&gt; &lt;p&gt;This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.&lt;/p&gt; &lt;p&gt;Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sun&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;mon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;tue&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;wed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;thu&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;fri&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;sun:23:00-mon:01:30&lt;/code&gt; &lt;/p&gt; (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be same as the replication group owner. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param cacheParameterGroupName The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is specified as &lt;code&gt;true&lt;/code&gt; for this request. (optional)
     * @param notificationTopicStatus &lt;p&gt;The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;active&lt;/code&gt; | &lt;code&gt;inactive&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the replication group.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;false&lt;/code&gt;, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The upgraded version of the cache engine to be run on the clusters in the replication group.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot that was taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important&lt;/b&gt; If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.&lt;/p&gt; (optional)
     * @param snapshotWindow &lt;p&gt;The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by &lt;code&gt;SnapshottingClusterId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;05:00-09:00&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.&lt;/p&gt; (optional)
     * @param cacheNodeType A valid cache node type that you want to scale this replication group to. (optional)
     * @param authToken &lt;p&gt;Reserved parameter. The password used to access a password protected server. This parameter must be specified with the &lt;code&gt;auth-token-update-strategy &lt;/code&gt; parameter. Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot contain any of the following characters: &#39;/&#39;, &#39;\&quot;&#39;, or &#39;@&#39;, &#39;%&#39;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see AUTH password at &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param authTokenUpdateStrategy &lt;p&gt;Specifies the strategy to use to update the AUTH token. This parameter must be specified with the &lt;code&gt;auth-token&lt;/code&gt; parameter. Possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Rotate&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html\&quot;&gt;Authenticating Users with Redis AUTH&lt;/a&gt; &lt;/p&gt; (optional)
     * @param userGroupIdsToAdd The ID of the user group you are associating with the replication group. (optional)
     * @param userGroupIdsToRemove The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group. (optional)
     * @param removeUserGroups Removes the user group associated with this replication group. (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs. (optional)
     * @param ipDiscovery The network type you choose when modifying a cluster, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param transitEncryptionEnabled A flag that enables in-transit encryption when set to true. If you are enabling in-transit encryption for an existing cluster, you must also set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt;. (optional)
     * @param transitEncryptionMode &lt;p&gt;A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.&lt;/p&gt; &lt;p&gt;You must set &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, for your existing cluster, and set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; in the same request to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can set the value to &lt;code&gt;required&lt;/code&gt; to allow encrypted connections only.&lt;/p&gt; &lt;p&gt;Setting &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt; is a two-step process that requires you to first set the &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; first, after that you can set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyReplicationGroupCall(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupDescription, String primaryClusterId, String snapshottingClusterId, Boolean automaticFailoverEnabled, Boolean multiAZEnabled, String nodeGroupId, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, String preferredMaintenanceWindow, String notificationTopicArn, String cacheParameterGroupName, String notificationTopicStatus, Boolean applyImmediately, String engineVersion, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String cacheNodeType, String authToken, String authTokenUpdateStrategy, List<String> userGroupIdsToAdd, List<String> userGroupIdsToRemove, Boolean removeUserGroups, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, String ipDiscovery, Boolean transitEncryptionEnabled, String transitEncryptionMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (replicationGroupDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupDescription", replicationGroupDescription));
        }

        if (primaryClusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PrimaryClusterId", primaryClusterId));
        }

        if (snapshottingClusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshottingClusterId", snapshottingClusterId));
        }

        if (automaticFailoverEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutomaticFailoverEnabled", automaticFailoverEnabled));
        }

        if (multiAZEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MultiAZEnabled", multiAZEnabled));
        }

        if (nodeGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NodeGroupId", nodeGroupId));
        }

        if (cacheSecurityGroupNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "CacheSecurityGroupNames", cacheSecurityGroupNames));
        }

        if (securityGroupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "SecurityGroupIds", securityGroupIds));
        }

        if (preferredMaintenanceWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PreferredMaintenanceWindow", preferredMaintenanceWindow));
        }

        if (notificationTopicArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NotificationTopicArn", notificationTopicArn));
        }

        if (cacheParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupName", cacheParameterGroupName));
        }

        if (notificationTopicStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NotificationTopicStatus", notificationTopicStatus));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (engineVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EngineVersion", engineVersion));
        }

        if (autoMinorVersionUpgrade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AutoMinorVersionUpgrade", autoMinorVersionUpgrade));
        }

        if (snapshotRetentionLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotRetentionLimit", snapshotRetentionLimit));
        }

        if (snapshotWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("SnapshotWindow", snapshotWindow));
        }

        if (cacheNodeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheNodeType", cacheNodeType));
        }

        if (authToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AuthToken", authToken));
        }

        if (authTokenUpdateStrategy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AuthTokenUpdateStrategy", authTokenUpdateStrategy));
        }

        if (userGroupIdsToAdd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "UserGroupIdsToAdd", userGroupIdsToAdd));
        }

        if (userGroupIdsToRemove != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "UserGroupIdsToRemove", userGroupIdsToRemove));
        }

        if (removeUserGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RemoveUserGroups", removeUserGroups));
        }

        if (logDeliveryConfigurations != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "LogDeliveryConfigurations", logDeliveryConfigurations));
        }

        if (ipDiscovery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IpDiscovery", ipDiscovery));
        }

        if (transitEncryptionEnabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransitEncryptionEnabled", transitEncryptionEnabled));
        }

        if (transitEncryptionMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransitEncryptionMode", transitEncryptionMode));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyReplicationGroupValidateBeforeCall(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupDescription, String primaryClusterId, String snapshottingClusterId, Boolean automaticFailoverEnabled, Boolean multiAZEnabled, String nodeGroupId, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, String preferredMaintenanceWindow, String notificationTopicArn, String cacheParameterGroupName, String notificationTopicStatus, Boolean applyImmediately, String engineVersion, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String cacheNodeType, String authToken, String authTokenUpdateStrategy, List<String> userGroupIdsToAdd, List<String> userGroupIdsToRemove, Boolean removeUserGroups, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, String ipDiscovery, Boolean transitEncryptionEnabled, String transitEncryptionMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicationGroupId' is set
        if (replicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'replicationGroupId' when calling gETModifyReplicationGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyReplicationGroup(Async)");
        }

        return gETModifyReplicationGroupCall(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupDescription, primaryClusterId, snapshottingClusterId, automaticFailoverEnabled, multiAZEnabled, nodeGroupId, cacheSecurityGroupNames, securityGroupIds, preferredMaintenanceWindow, notificationTopicArn, cacheParameterGroupName, notificationTopicStatus, applyImmediately, engineVersion, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, cacheNodeType, authToken, authTokenUpdateStrategy, userGroupIdsToAdd, userGroupIdsToRemove, removeUserGroups, logDeliveryConfigurations, ipDiscovery, transitEncryptionEnabled, transitEncryptionMode, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the settings for a replication group.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html\&quot;&gt;Scaling for Amazon ElastiCache for Redis (cluster mode enabled)&lt;/a&gt; in the ElastiCache User Guide&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html\&quot;&gt;ModifyReplicationGroupShardConfiguration&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param replicationGroupId The identifier of the replication group to modify. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupDescription A description for the replication group. Maximum length is 255 characters. (optional)
     * @param primaryClusterId For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas. (optional)
     * @param snapshottingClusterId The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups. (optional)
     * @param automaticFailoverEnabled &lt;p&gt;Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param multiAZEnabled A flag to indicate MultiAZ is enabled. (optional)
     * @param nodeGroupId Deprecated. This parameter is not used. (optional)
     * @param cacheSecurityGroupNames &lt;p&gt;A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters. Must not be &lt;code&gt;Default&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param securityGroupIds &lt;p&gt;Specifies the VPC Security Groups associated with the clusters in the replication group.&lt;/p&gt; &lt;p&gt;This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.&lt;/p&gt; &lt;p&gt;Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sun&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;mon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;tue&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;wed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;thu&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;fri&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;sun:23:00-mon:01:30&lt;/code&gt; &lt;/p&gt; (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be same as the replication group owner. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param cacheParameterGroupName The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is specified as &lt;code&gt;true&lt;/code&gt; for this request. (optional)
     * @param notificationTopicStatus &lt;p&gt;The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;active&lt;/code&gt; | &lt;code&gt;inactive&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the replication group.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;false&lt;/code&gt;, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The upgraded version of the cache engine to be run on the clusters in the replication group.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot that was taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important&lt;/b&gt; If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.&lt;/p&gt; (optional)
     * @param snapshotWindow &lt;p&gt;The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by &lt;code&gt;SnapshottingClusterId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;05:00-09:00&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.&lt;/p&gt; (optional)
     * @param cacheNodeType A valid cache node type that you want to scale this replication group to. (optional)
     * @param authToken &lt;p&gt;Reserved parameter. The password used to access a password protected server. This parameter must be specified with the &lt;code&gt;auth-token-update-strategy &lt;/code&gt; parameter. Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot contain any of the following characters: &#39;/&#39;, &#39;\&quot;&#39;, or &#39;@&#39;, &#39;%&#39;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see AUTH password at &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param authTokenUpdateStrategy &lt;p&gt;Specifies the strategy to use to update the AUTH token. This parameter must be specified with the &lt;code&gt;auth-token&lt;/code&gt; parameter. Possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Rotate&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html\&quot;&gt;Authenticating Users with Redis AUTH&lt;/a&gt; &lt;/p&gt; (optional)
     * @param userGroupIdsToAdd The ID of the user group you are associating with the replication group. (optional)
     * @param userGroupIdsToRemove The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group. (optional)
     * @param removeUserGroups Removes the user group associated with this replication group. (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs. (optional)
     * @param ipDiscovery The network type you choose when modifying a cluster, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param transitEncryptionEnabled A flag that enables in-transit encryption when set to true. If you are enabling in-transit encryption for an existing cluster, you must also set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt;. (optional)
     * @param transitEncryptionMode &lt;p&gt;A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.&lt;/p&gt; &lt;p&gt;You must set &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, for your existing cluster, and set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; in the same request to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can set the value to &lt;code&gt;required&lt;/code&gt; to allow encrypted connections only.&lt;/p&gt; &lt;p&gt;Setting &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt; is a two-step process that requires you to first set the &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; first, after that you can set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt;. &lt;/p&gt; (optional)
     * @return ModifyReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyReplicationGroupResult gETModifyReplicationGroup(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupDescription, String primaryClusterId, String snapshottingClusterId, Boolean automaticFailoverEnabled, Boolean multiAZEnabled, String nodeGroupId, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, String preferredMaintenanceWindow, String notificationTopicArn, String cacheParameterGroupName, String notificationTopicStatus, Boolean applyImmediately, String engineVersion, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String cacheNodeType, String authToken, String authTokenUpdateStrategy, List<String> userGroupIdsToAdd, List<String> userGroupIdsToRemove, Boolean removeUserGroups, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, String ipDiscovery, Boolean transitEncryptionEnabled, String transitEncryptionMode) throws ApiException {
        ApiResponse<ModifyReplicationGroupResult> localVarResp = gETModifyReplicationGroupWithHttpInfo(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupDescription, primaryClusterId, snapshottingClusterId, automaticFailoverEnabled, multiAZEnabled, nodeGroupId, cacheSecurityGroupNames, securityGroupIds, preferredMaintenanceWindow, notificationTopicArn, cacheParameterGroupName, notificationTopicStatus, applyImmediately, engineVersion, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, cacheNodeType, authToken, authTokenUpdateStrategy, userGroupIdsToAdd, userGroupIdsToRemove, removeUserGroups, logDeliveryConfigurations, ipDiscovery, transitEncryptionEnabled, transitEncryptionMode);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the settings for a replication group.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html\&quot;&gt;Scaling for Amazon ElastiCache for Redis (cluster mode enabled)&lt;/a&gt; in the ElastiCache User Guide&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html\&quot;&gt;ModifyReplicationGroupShardConfiguration&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param replicationGroupId The identifier of the replication group to modify. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupDescription A description for the replication group. Maximum length is 255 characters. (optional)
     * @param primaryClusterId For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas. (optional)
     * @param snapshottingClusterId The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups. (optional)
     * @param automaticFailoverEnabled &lt;p&gt;Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param multiAZEnabled A flag to indicate MultiAZ is enabled. (optional)
     * @param nodeGroupId Deprecated. This parameter is not used. (optional)
     * @param cacheSecurityGroupNames &lt;p&gt;A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters. Must not be &lt;code&gt;Default&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param securityGroupIds &lt;p&gt;Specifies the VPC Security Groups associated with the clusters in the replication group.&lt;/p&gt; &lt;p&gt;This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.&lt;/p&gt; &lt;p&gt;Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sun&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;mon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;tue&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;wed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;thu&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;fri&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;sun:23:00-mon:01:30&lt;/code&gt; &lt;/p&gt; (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be same as the replication group owner. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param cacheParameterGroupName The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is specified as &lt;code&gt;true&lt;/code&gt; for this request. (optional)
     * @param notificationTopicStatus &lt;p&gt;The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;active&lt;/code&gt; | &lt;code&gt;inactive&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the replication group.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;false&lt;/code&gt;, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The upgraded version of the cache engine to be run on the clusters in the replication group.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot that was taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important&lt;/b&gt; If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.&lt;/p&gt; (optional)
     * @param snapshotWindow &lt;p&gt;The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by &lt;code&gt;SnapshottingClusterId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;05:00-09:00&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.&lt;/p&gt; (optional)
     * @param cacheNodeType A valid cache node type that you want to scale this replication group to. (optional)
     * @param authToken &lt;p&gt;Reserved parameter. The password used to access a password protected server. This parameter must be specified with the &lt;code&gt;auth-token-update-strategy &lt;/code&gt; parameter. Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot contain any of the following characters: &#39;/&#39;, &#39;\&quot;&#39;, or &#39;@&#39;, &#39;%&#39;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see AUTH password at &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param authTokenUpdateStrategy &lt;p&gt;Specifies the strategy to use to update the AUTH token. This parameter must be specified with the &lt;code&gt;auth-token&lt;/code&gt; parameter. Possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Rotate&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html\&quot;&gt;Authenticating Users with Redis AUTH&lt;/a&gt; &lt;/p&gt; (optional)
     * @param userGroupIdsToAdd The ID of the user group you are associating with the replication group. (optional)
     * @param userGroupIdsToRemove The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group. (optional)
     * @param removeUserGroups Removes the user group associated with this replication group. (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs. (optional)
     * @param ipDiscovery The network type you choose when modifying a cluster, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param transitEncryptionEnabled A flag that enables in-transit encryption when set to true. If you are enabling in-transit encryption for an existing cluster, you must also set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt;. (optional)
     * @param transitEncryptionMode &lt;p&gt;A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.&lt;/p&gt; &lt;p&gt;You must set &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, for your existing cluster, and set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; in the same request to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can set the value to &lt;code&gt;required&lt;/code&gt; to allow encrypted connections only.&lt;/p&gt; &lt;p&gt;Setting &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt; is a two-step process that requires you to first set the &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; first, after that you can set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt;. &lt;/p&gt; (optional)
     * @return ApiResponse&lt;ModifyReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyReplicationGroupResult> gETModifyReplicationGroupWithHttpInfo(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupDescription, String primaryClusterId, String snapshottingClusterId, Boolean automaticFailoverEnabled, Boolean multiAZEnabled, String nodeGroupId, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, String preferredMaintenanceWindow, String notificationTopicArn, String cacheParameterGroupName, String notificationTopicStatus, Boolean applyImmediately, String engineVersion, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String cacheNodeType, String authToken, String authTokenUpdateStrategy, List<String> userGroupIdsToAdd, List<String> userGroupIdsToRemove, Boolean removeUserGroups, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, String ipDiscovery, Boolean transitEncryptionEnabled, String transitEncryptionMode) throws ApiException {
        okhttp3.Call localVarCall = gETModifyReplicationGroupValidateBeforeCall(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupDescription, primaryClusterId, snapshottingClusterId, automaticFailoverEnabled, multiAZEnabled, nodeGroupId, cacheSecurityGroupNames, securityGroupIds, preferredMaintenanceWindow, notificationTopicArn, cacheParameterGroupName, notificationTopicStatus, applyImmediately, engineVersion, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, cacheNodeType, authToken, authTokenUpdateStrategy, userGroupIdsToAdd, userGroupIdsToRemove, removeUserGroups, logDeliveryConfigurations, ipDiscovery, transitEncryptionEnabled, transitEncryptionMode, null);
        Type localVarReturnType = new TypeToken<ModifyReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the settings for a replication group.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html\&quot;&gt;Scaling for Amazon ElastiCache for Redis (cluster mode enabled)&lt;/a&gt; in the ElastiCache User Guide&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html\&quot;&gt;ModifyReplicationGroupShardConfiguration&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param replicationGroupId The identifier of the replication group to modify. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param replicationGroupDescription A description for the replication group. Maximum length is 255 characters. (optional)
     * @param primaryClusterId For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas. (optional)
     * @param snapshottingClusterId The cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups. (optional)
     * @param automaticFailoverEnabled &lt;p&gt;Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param multiAZEnabled A flag to indicate MultiAZ is enabled. (optional)
     * @param nodeGroupId Deprecated. This parameter is not used. (optional)
     * @param cacheSecurityGroupNames &lt;p&gt;A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible.&lt;/p&gt; &lt;p&gt;This parameter can be used only with replication group containing clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; &lt;p&gt;Constraints: Must contain no more than 255 alphanumeric characters. Must not be &lt;code&gt;Default&lt;/code&gt;.&lt;/p&gt; (optional)
     * @param securityGroupIds &lt;p&gt;Specifies the VPC Security Groups associated with the clusters in the replication group.&lt;/p&gt; &lt;p&gt;This parameter can be used only with replication group containing clusters running in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt; (optional)
     * @param preferredMaintenanceWindow &lt;p&gt;Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.&lt;/p&gt; &lt;p&gt;Valid values for &lt;code&gt;ddd&lt;/code&gt; are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sun&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;mon&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;tue&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;wed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;thu&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;fri&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;sat&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Example: &lt;code&gt;sun:23:00-mon:01:30&lt;/code&gt; &lt;/p&gt; (optional)
     * @param notificationTopicArn &lt;p&gt;The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon SNS topic owner must be same as the replication group owner. &lt;/p&gt; &lt;/note&gt; (optional)
     * @param cacheParameterGroupName The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the &lt;code&gt;ApplyImmediately&lt;/code&gt; parameter is specified as &lt;code&gt;true&lt;/code&gt; for this request. (optional)
     * @param notificationTopicStatus &lt;p&gt;The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is &lt;code&gt;active&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;active&lt;/code&gt; | &lt;code&gt;inactive&lt;/code&gt; &lt;/p&gt; (optional)
     * @param applyImmediately &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the &lt;code&gt;PreferredMaintenanceWindow&lt;/code&gt; setting for the replication group.&lt;/p&gt; &lt;p&gt;If &lt;code&gt;false&lt;/code&gt;, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param engineVersion &lt;p&gt;The upgraded version of the cache engine to be run on the clusters in the replication group.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important:&lt;/b&gt; You can upgrade to a newer engine version (see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SelectEngine.html#VersionManagement\&quot;&gt;Selecting a Cache Engine and Version&lt;/a&gt;), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. &lt;/p&gt; (optional)
     * @param autoMinorVersionUpgrade  If you are running Redis engine version 6.0 or later, set this parameter to yes if you want to opt-in to the next auto minor version upgrade campaign. This parameter is disabled for previous versions.   (optional)
     * @param snapshotRetentionLimit &lt;p&gt;The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set &lt;code&gt;SnapshotRetentionLimit&lt;/code&gt; to 5, a snapshot that was taken today is retained for 5 days before being deleted.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Important&lt;/b&gt; If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.&lt;/p&gt; (optional)
     * @param snapshotWindow &lt;p&gt;The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by &lt;code&gt;SnapshottingClusterId&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;05:00-09:00&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.&lt;/p&gt; (optional)
     * @param cacheNodeType A valid cache node type that you want to scale this replication group to. (optional)
     * @param authToken &lt;p&gt;Reserved parameter. The password used to access a password protected server. This parameter must be specified with the &lt;code&gt;auth-token-update-strategy &lt;/code&gt; parameter. Password constraints:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Must be only printable ASCII characters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Must be at least 16 characters and no more than 128 characters in length&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cannot contain any of the following characters: &#39;/&#39;, &#39;\&quot;&#39;, or &#39;@&#39;, &#39;%&#39;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see AUTH password at &lt;a href&#x3D;\&quot;http://redis.io/commands/AUTH\&quot;&gt;AUTH&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param authTokenUpdateStrategy &lt;p&gt;Specifies the strategy to use to update the AUTH token. This parameter must be specified with the &lt;code&gt;auth-token&lt;/code&gt; parameter. Possible values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Rotate&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Set&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/auth.html\&quot;&gt;Authenticating Users with Redis AUTH&lt;/a&gt; &lt;/p&gt; (optional)
     * @param userGroupIdsToAdd The ID of the user group you are associating with the replication group. (optional)
     * @param userGroupIdsToRemove The ID of the user group to disassociate from the replication group, meaning the users in the group no longer can access the replication group. (optional)
     * @param removeUserGroups Removes the user group associated with this replication group. (optional)
     * @param logDeliveryConfigurations Specifies the destination, format and type of the logs. (optional)
     * @param ipDiscovery The network type you choose when modifying a cluster, either &lt;code&gt;ipv4&lt;/code&gt; | &lt;code&gt;ipv6&lt;/code&gt;. IPv6 is supported for workloads using Redis engine version 6.2 onward or Memcached engine version 1.6.6 on all instances built on the &lt;a href&#x3D;\&quot;https://aws.amazon.com/ec2/nitro/\&quot;&gt;Nitro system&lt;/a&gt;. (optional)
     * @param transitEncryptionEnabled A flag that enables in-transit encryption when set to true. If you are enabling in-transit encryption for an existing cluster, you must also set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt;. (optional)
     * @param transitEncryptionMode &lt;p&gt;A setting that allows you to migrate your clients to use in-transit encryption, with no downtime.&lt;/p&gt; &lt;p&gt;You must set &lt;code&gt;TransitEncryptionEnabled&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, for your existing cluster, and set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; in the same request to allow both encrypted and unencrypted connections at the same time. Once you migrate all your Redis clients to use encrypted connections you can set the value to &lt;code&gt;required&lt;/code&gt; to allow encrypted connections only.&lt;/p&gt; &lt;p&gt;Setting &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt; is a two-step process that requires you to first set the &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;preferred&lt;/code&gt; first, after that you can set &lt;code&gt;TransitEncryptionMode&lt;/code&gt; to &lt;code&gt;required&lt;/code&gt;. &lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyReplicationGroupAsync(String replicationGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String replicationGroupDescription, String primaryClusterId, String snapshottingClusterId, Boolean automaticFailoverEnabled, Boolean multiAZEnabled, String nodeGroupId, List<String> cacheSecurityGroupNames, List<String> securityGroupIds, String preferredMaintenanceWindow, String notificationTopicArn, String cacheParameterGroupName, String notificationTopicStatus, Boolean applyImmediately, String engineVersion, Boolean autoMinorVersionUpgrade, Integer snapshotRetentionLimit, String snapshotWindow, String cacheNodeType, String authToken, String authTokenUpdateStrategy, List<String> userGroupIdsToAdd, List<String> userGroupIdsToRemove, Boolean removeUserGroups, List<GETCreateCacheClusterLogDeliveryConfigurationsParameterInner> logDeliveryConfigurations, String ipDiscovery, Boolean transitEncryptionEnabled, String transitEncryptionMode, final ApiCallback<ModifyReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyReplicationGroupValidateBeforeCall(replicationGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, replicationGroupDescription, primaryClusterId, snapshottingClusterId, automaticFailoverEnabled, multiAZEnabled, nodeGroupId, cacheSecurityGroupNames, securityGroupIds, preferredMaintenanceWindow, notificationTopicArn, cacheParameterGroupName, notificationTopicStatus, applyImmediately, engineVersion, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, cacheNodeType, authToken, authTokenUpdateStrategy, userGroupIdsToAdd, userGroupIdsToRemove, removeUserGroups, logDeliveryConfigurations, ipDiscovery, transitEncryptionEnabled, transitEncryptionMode, _callback);
        Type localVarReturnType = new TypeToken<ModifyReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyReplicationGroupShardConfiguration
     * @param replicationGroupId The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured. (required)
     * @param nodeGroupCount The number of node groups (shards) that results from the modification of the shard configuration. (required)
     * @param applyImmediately &lt;p&gt;Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Value: true&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reshardingConfiguration &lt;p&gt;Specifies the preferred availability zones for each node group in the cluster. If the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster&#39;s shards. If you omit this parameter ElastiCache selects availability zones for you.&lt;/p&gt; &lt;p&gt;You can specify this parameter only if the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is greater than the current number of node groups (shards).&lt;/p&gt; (optional)
     * @param nodeGroupsToRemove &lt;p&gt;If the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is less than the current number of node groups (shards), then either &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; or &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; is required. &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; is a list of &lt;code&gt;NodeGroupId&lt;/code&gt;s to remove from the cluster.&lt;/p&gt; &lt;p&gt;ElastiCache for Redis will attempt to remove all node groups listed by &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; from the cluster.&lt;/p&gt; (optional)
     * @param nodeGroupsToRetain &lt;p&gt;If the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is less than the current number of node groups (shards), then either &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; or &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; is required. &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; is a list of &lt;code&gt;NodeGroupId&lt;/code&gt;s to retain in the cluster.&lt;/p&gt; &lt;p&gt;ElastiCache for Redis will attempt to remove all node groups except those listed by &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; from the cluster.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyReplicationGroupShardConfigurationCall(String replicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETModifyReplicationGroupShardConfigurationReshardingConfigurationParameterInner> reshardingConfiguration, List<String> nodeGroupsToRemove, List<String> nodeGroupsToRetain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyReplicationGroupShardConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (nodeGroupCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NodeGroupCount", nodeGroupCount));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (reshardingConfiguration != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ReshardingConfiguration", reshardingConfiguration));
        }

        if (nodeGroupsToRemove != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "NodeGroupsToRemove", nodeGroupsToRemove));
        }

        if (nodeGroupsToRetain != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "NodeGroupsToRetain", nodeGroupsToRetain));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyReplicationGroupShardConfigurationValidateBeforeCall(String replicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETModifyReplicationGroupShardConfigurationReshardingConfigurationParameterInner> reshardingConfiguration, List<String> nodeGroupsToRemove, List<String> nodeGroupsToRetain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicationGroupId' is set
        if (replicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'replicationGroupId' when calling gETModifyReplicationGroupShardConfiguration(Async)");
        }

        // verify the required parameter 'nodeGroupCount' is set
        if (nodeGroupCount == null) {
            throw new ApiException("Missing the required parameter 'nodeGroupCount' when calling gETModifyReplicationGroupShardConfiguration(Async)");
        }

        // verify the required parameter 'applyImmediately' is set
        if (applyImmediately == null) {
            throw new ApiException("Missing the required parameter 'applyImmediately' when calling gETModifyReplicationGroupShardConfiguration(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyReplicationGroupShardConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyReplicationGroupShardConfiguration(Async)");
        }

        return gETModifyReplicationGroupShardConfigurationCall(replicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reshardingConfiguration, nodeGroupsToRemove, nodeGroupsToRetain, _callback);

    }

    /**
     * 
     * Modifies a replication group&#39;s shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards.
     * @param replicationGroupId The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured. (required)
     * @param nodeGroupCount The number of node groups (shards) that results from the modification of the shard configuration. (required)
     * @param applyImmediately &lt;p&gt;Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Value: true&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reshardingConfiguration &lt;p&gt;Specifies the preferred availability zones for each node group in the cluster. If the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster&#39;s shards. If you omit this parameter ElastiCache selects availability zones for you.&lt;/p&gt; &lt;p&gt;You can specify this parameter only if the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is greater than the current number of node groups (shards).&lt;/p&gt; (optional)
     * @param nodeGroupsToRemove &lt;p&gt;If the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is less than the current number of node groups (shards), then either &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; or &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; is required. &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; is a list of &lt;code&gt;NodeGroupId&lt;/code&gt;s to remove from the cluster.&lt;/p&gt; &lt;p&gt;ElastiCache for Redis will attempt to remove all node groups listed by &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; from the cluster.&lt;/p&gt; (optional)
     * @param nodeGroupsToRetain &lt;p&gt;If the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is less than the current number of node groups (shards), then either &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; or &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; is required. &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; is a list of &lt;code&gt;NodeGroupId&lt;/code&gt;s to retain in the cluster.&lt;/p&gt; &lt;p&gt;ElastiCache for Redis will attempt to remove all node groups except those listed by &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; from the cluster.&lt;/p&gt; (optional)
     * @return ModifyReplicationGroupShardConfigurationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyReplicationGroupShardConfigurationResult gETModifyReplicationGroupShardConfiguration(String replicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETModifyReplicationGroupShardConfigurationReshardingConfigurationParameterInner> reshardingConfiguration, List<String> nodeGroupsToRemove, List<String> nodeGroupsToRetain) throws ApiException {
        ApiResponse<ModifyReplicationGroupShardConfigurationResult> localVarResp = gETModifyReplicationGroupShardConfigurationWithHttpInfo(replicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reshardingConfiguration, nodeGroupsToRemove, nodeGroupsToRetain);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies a replication group&#39;s shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards.
     * @param replicationGroupId The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured. (required)
     * @param nodeGroupCount The number of node groups (shards) that results from the modification of the shard configuration. (required)
     * @param applyImmediately &lt;p&gt;Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Value: true&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reshardingConfiguration &lt;p&gt;Specifies the preferred availability zones for each node group in the cluster. If the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster&#39;s shards. If you omit this parameter ElastiCache selects availability zones for you.&lt;/p&gt; &lt;p&gt;You can specify this parameter only if the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is greater than the current number of node groups (shards).&lt;/p&gt; (optional)
     * @param nodeGroupsToRemove &lt;p&gt;If the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is less than the current number of node groups (shards), then either &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; or &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; is required. &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; is a list of &lt;code&gt;NodeGroupId&lt;/code&gt;s to remove from the cluster.&lt;/p&gt; &lt;p&gt;ElastiCache for Redis will attempt to remove all node groups listed by &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; from the cluster.&lt;/p&gt; (optional)
     * @param nodeGroupsToRetain &lt;p&gt;If the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is less than the current number of node groups (shards), then either &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; or &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; is required. &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; is a list of &lt;code&gt;NodeGroupId&lt;/code&gt;s to retain in the cluster.&lt;/p&gt; &lt;p&gt;ElastiCache for Redis will attempt to remove all node groups except those listed by &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; from the cluster.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;ModifyReplicationGroupShardConfigurationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyReplicationGroupShardConfigurationResult> gETModifyReplicationGroupShardConfigurationWithHttpInfo(String replicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETModifyReplicationGroupShardConfigurationReshardingConfigurationParameterInner> reshardingConfiguration, List<String> nodeGroupsToRemove, List<String> nodeGroupsToRetain) throws ApiException {
        okhttp3.Call localVarCall = gETModifyReplicationGroupShardConfigurationValidateBeforeCall(replicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reshardingConfiguration, nodeGroupsToRemove, nodeGroupsToRetain, null);
        Type localVarReturnType = new TypeToken<ModifyReplicationGroupShardConfigurationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies a replication group&#39;s shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards.
     * @param replicationGroupId The name of the Redis (cluster mode enabled) cluster (replication group) on which the shards are to be configured. (required)
     * @param nodeGroupCount The number of node groups (shards) that results from the modification of the shard configuration. (required)
     * @param applyImmediately &lt;p&gt;Indicates that the shard reconfiguration process begins immediately. At present, the only permitted value for this parameter is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Value: true&lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reshardingConfiguration &lt;p&gt;Specifies the preferred availability zones for each node group in the cluster. If the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is greater than the current number of node groups (shards), you can use this parameter to specify the preferred availability zones of the cluster&#39;s shards. If you omit this parameter ElastiCache selects availability zones for you.&lt;/p&gt; &lt;p&gt;You can specify this parameter only if the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is greater than the current number of node groups (shards).&lt;/p&gt; (optional)
     * @param nodeGroupsToRemove &lt;p&gt;If the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is less than the current number of node groups (shards), then either &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; or &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; is required. &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; is a list of &lt;code&gt;NodeGroupId&lt;/code&gt;s to remove from the cluster.&lt;/p&gt; &lt;p&gt;ElastiCache for Redis will attempt to remove all node groups listed by &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; from the cluster.&lt;/p&gt; (optional)
     * @param nodeGroupsToRetain &lt;p&gt;If the value of &lt;code&gt;NodeGroupCount&lt;/code&gt; is less than the current number of node groups (shards), then either &lt;code&gt;NodeGroupsToRemove&lt;/code&gt; or &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; is required. &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; is a list of &lt;code&gt;NodeGroupId&lt;/code&gt;s to retain in the cluster.&lt;/p&gt; &lt;p&gt;ElastiCache for Redis will attempt to remove all node groups except those listed by &lt;code&gt;NodeGroupsToRetain&lt;/code&gt; from the cluster.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyReplicationGroupShardConfigurationAsync(String replicationGroupId, Integer nodeGroupCount, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<GETModifyReplicationGroupShardConfigurationReshardingConfigurationParameterInner> reshardingConfiguration, List<String> nodeGroupsToRemove, List<String> nodeGroupsToRetain, final ApiCallback<ModifyReplicationGroupShardConfigurationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyReplicationGroupShardConfigurationValidateBeforeCall(replicationGroupId, nodeGroupCount, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reshardingConfiguration, nodeGroupsToRemove, nodeGroupsToRetain, _callback);
        Type localVarReturnType = new TypeToken<ModifyReplicationGroupShardConfigurationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyUser
     * @param userId The ID of the user. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accessString Access permissions string used for this user. (optional)
     * @param appendAccessString Adds additional user permissions to the access string. (optional)
     * @param passwords The passwords belonging to the user. You are allowed up to two. (optional)
     * @param noPasswordRequired Indicates no password is required for the user. (optional)
     * @param authenticationMode Specifies how to authenticate the user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyUserCall(String userId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String accessString, String appendAccessString, List<String> passwords, Boolean noPasswordRequired, GETCreateUserAuthenticationModeParameter authenticationMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserId", userId));
        }

        if (accessString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AccessString", accessString));
        }

        if (appendAccessString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AppendAccessString", appendAccessString));
        }

        if (passwords != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Passwords", passwords));
        }

        if (noPasswordRequired != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NoPasswordRequired", noPasswordRequired));
        }

        if (authenticationMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AuthenticationMode", authenticationMode));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyUserValidateBeforeCall(String userId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String accessString, String appendAccessString, List<String> passwords, Boolean noPasswordRequired, GETCreateUserAuthenticationModeParameter authenticationMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling gETModifyUser(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyUser(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyUser(Async)");
        }

        return gETModifyUserCall(userId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accessString, appendAccessString, passwords, noPasswordRequired, authenticationMode, _callback);

    }

    /**
     * 
     * Changes user password(s) and/or access string.
     * @param userId The ID of the user. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accessString Access permissions string used for this user. (optional)
     * @param appendAccessString Adds additional user permissions to the access string. (optional)
     * @param passwords The passwords belonging to the user. You are allowed up to two. (optional)
     * @param noPasswordRequired Indicates no password is required for the user. (optional)
     * @param authenticationMode Specifies how to authenticate the user. (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public User gETModifyUser(String userId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String accessString, String appendAccessString, List<String> passwords, Boolean noPasswordRequired, GETCreateUserAuthenticationModeParameter authenticationMode) throws ApiException {
        ApiResponse<User> localVarResp = gETModifyUserWithHttpInfo(userId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accessString, appendAccessString, passwords, noPasswordRequired, authenticationMode);
        return localVarResp.getData();
    }

    /**
     * 
     * Changes user password(s) and/or access string.
     * @param userId The ID of the user. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accessString Access permissions string used for this user. (optional)
     * @param appendAccessString Adds additional user permissions to the access string. (optional)
     * @param passwords The passwords belonging to the user. You are allowed up to two. (optional)
     * @param noPasswordRequired Indicates no password is required for the user. (optional)
     * @param authenticationMode Specifies how to authenticate the user. (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> gETModifyUserWithHttpInfo(String userId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String accessString, String appendAccessString, List<String> passwords, Boolean noPasswordRequired, GETCreateUserAuthenticationModeParameter authenticationMode) throws ApiException {
        okhttp3.Call localVarCall = gETModifyUserValidateBeforeCall(userId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accessString, appendAccessString, passwords, noPasswordRequired, authenticationMode, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes user password(s) and/or access string.
     * @param userId The ID of the user. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accessString Access permissions string used for this user. (optional)
     * @param appendAccessString Adds additional user permissions to the access string. (optional)
     * @param passwords The passwords belonging to the user. You are allowed up to two. (optional)
     * @param noPasswordRequired Indicates no password is required for the user. (optional)
     * @param authenticationMode Specifies how to authenticate the user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyUserAsync(String userId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String accessString, String appendAccessString, List<String> passwords, Boolean noPasswordRequired, GETCreateUserAuthenticationModeParameter authenticationMode, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyUserValidateBeforeCall(userId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accessString, appendAccessString, passwords, noPasswordRequired, authenticationMode, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETModifyUserGroup
     * @param userGroupId The ID of the user group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userIdsToAdd The list of user IDs to add to the user group. (optional)
     * @param userIdsToRemove The list of user IDs to remove from the user group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyUserGroupCall(String userGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> userIdsToAdd, List<String> userIdsToRemove, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ModifyUserGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("UserGroupId", userGroupId));
        }

        if (userIdsToAdd != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "UserIdsToAdd", userIdsToAdd));
        }

        if (userIdsToRemove != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "UserIdsToRemove", userIdsToRemove));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETModifyUserGroupValidateBeforeCall(String userGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> userIdsToAdd, List<String> userIdsToRemove, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userGroupId' is set
        if (userGroupId == null) {
            throw new ApiException("Missing the required parameter 'userGroupId' when calling gETModifyUserGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETModifyUserGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETModifyUserGroup(Async)");
        }

        return gETModifyUserGroupCall(userGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userIdsToAdd, userIdsToRemove, _callback);

    }

    /**
     * 
     * Changes the list of users that belong to the user group.
     * @param userGroupId The ID of the user group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userIdsToAdd The list of user IDs to add to the user group. (optional)
     * @param userIdsToRemove The list of user IDs to remove from the user group. (optional)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public UserGroup gETModifyUserGroup(String userGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> userIdsToAdd, List<String> userIdsToRemove) throws ApiException {
        ApiResponse<UserGroup> localVarResp = gETModifyUserGroupWithHttpInfo(userGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userIdsToAdd, userIdsToRemove);
        return localVarResp.getData();
    }

    /**
     * 
     * Changes the list of users that belong to the user group.
     * @param userGroupId The ID of the user group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userIdsToAdd The list of user IDs to add to the user group. (optional)
     * @param userIdsToRemove The list of user IDs to remove from the user group. (optional)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroup> gETModifyUserGroupWithHttpInfo(String userGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> userIdsToAdd, List<String> userIdsToRemove) throws ApiException {
        okhttp3.Call localVarCall = gETModifyUserGroupValidateBeforeCall(userGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userIdsToAdd, userIdsToRemove, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes the list of users that belong to the user group.
     * @param userGroupId The ID of the user group. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userIdsToAdd The list of user IDs to add to the user group. (optional)
     * @param userIdsToRemove The list of user IDs to remove from the user group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETModifyUserGroupAsync(String userGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> userIdsToAdd, List<String> userIdsToRemove, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETModifyUserGroupValidateBeforeCall(userGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userIdsToAdd, userIdsToRemove, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETPurchaseReservedCacheNodesOffering
     * @param reservedCacheNodesOfferingId &lt;p&gt;The ID of the reserved cache node offering to purchase.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;438012d3-4052-4cc7-b2e3-8d3372e0e706&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reservedCacheNodeId &lt;p&gt;A customer-specified identifier to track this reservation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Example: myreservationID&lt;/p&gt; (optional)
     * @param cacheNodeCount &lt;p&gt;The number of cache node instances to reserve.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;1&lt;/code&gt; &lt;/p&gt; (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReservedCacheNodeAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReservedCacheNodeQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPurchaseReservedCacheNodesOfferingCall(String reservedCacheNodesOfferingId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodeId, Integer cacheNodeCount, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=PurchaseReservedCacheNodesOffering";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reservedCacheNodesOfferingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReservedCacheNodesOfferingId", reservedCacheNodesOfferingId));
        }

        if (reservedCacheNodeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReservedCacheNodeId", reservedCacheNodeId));
        }

        if (cacheNodeCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheNodeCount", cacheNodeCount));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Tags", tags));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETPurchaseReservedCacheNodesOfferingValidateBeforeCall(String reservedCacheNodesOfferingId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodeId, Integer cacheNodeCount, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reservedCacheNodesOfferingId' is set
        if (reservedCacheNodesOfferingId == null) {
            throw new ApiException("Missing the required parameter 'reservedCacheNodesOfferingId' when calling gETPurchaseReservedCacheNodesOffering(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETPurchaseReservedCacheNodesOffering(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETPurchaseReservedCacheNodesOffering(Async)");
        }

        return gETPurchaseReservedCacheNodesOfferingCall(reservedCacheNodesOfferingId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodeId, cacheNodeCount, tags, _callback);

    }

    /**
     * 
     * Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Redis or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Memcached.
     * @param reservedCacheNodesOfferingId &lt;p&gt;The ID of the reserved cache node offering to purchase.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;438012d3-4052-4cc7-b2e3-8d3372e0e706&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reservedCacheNodeId &lt;p&gt;A customer-specified identifier to track this reservation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Example: myreservationID&lt;/p&gt; (optional)
     * @param cacheNodeCount &lt;p&gt;The number of cache node instances to reserve.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;1&lt;/code&gt; &lt;/p&gt; (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return PurchaseReservedCacheNodesOfferingResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReservedCacheNodeAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReservedCacheNodeQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseReservedCacheNodesOfferingResult gETPurchaseReservedCacheNodesOffering(String reservedCacheNodesOfferingId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodeId, Integer cacheNodeCount, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        ApiResponse<PurchaseReservedCacheNodesOfferingResult> localVarResp = gETPurchaseReservedCacheNodesOfferingWithHttpInfo(reservedCacheNodesOfferingId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodeId, cacheNodeCount, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Redis or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Memcached.
     * @param reservedCacheNodesOfferingId &lt;p&gt;The ID of the reserved cache node offering to purchase.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;438012d3-4052-4cc7-b2e3-8d3372e0e706&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reservedCacheNodeId &lt;p&gt;A customer-specified identifier to track this reservation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Example: myreservationID&lt;/p&gt; (optional)
     * @param cacheNodeCount &lt;p&gt;The number of cache node instances to reserve.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;1&lt;/code&gt; &lt;/p&gt; (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @return ApiResponse&lt;PurchaseReservedCacheNodesOfferingResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReservedCacheNodeAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReservedCacheNodeQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseReservedCacheNodesOfferingResult> gETPurchaseReservedCacheNodesOfferingWithHttpInfo(String reservedCacheNodesOfferingId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodeId, Integer cacheNodeCount, List<GETAddTagsToResourceTagsParameterInner> tags) throws ApiException {
        okhttp3.Call localVarCall = gETPurchaseReservedCacheNodesOfferingValidateBeforeCall(reservedCacheNodesOfferingId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodeId, cacheNodeCount, tags, null);
        Type localVarReturnType = new TypeToken<PurchaseReservedCacheNodesOfferingResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Redis or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Memcached.
     * @param reservedCacheNodesOfferingId &lt;p&gt;The ID of the reserved cache node offering to purchase.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;438012d3-4052-4cc7-b2e3-8d3372e0e706&lt;/code&gt; &lt;/p&gt; (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param reservedCacheNodeId &lt;p&gt;A customer-specified identifier to track this reservation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Example: myreservationID&lt;/p&gt; (optional)
     * @param cacheNodeCount &lt;p&gt;The number of cache node instances to reserve.&lt;/p&gt; &lt;p&gt;Default: &lt;code&gt;1&lt;/code&gt; &lt;/p&gt; (optional)
     * @param tags A list of tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReservedCacheNodeAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReservedCacheNodeQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETPurchaseReservedCacheNodesOfferingAsync(String reservedCacheNodesOfferingId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String reservedCacheNodeId, Integer cacheNodeCount, List<GETAddTagsToResourceTagsParameterInner> tags, final ApiCallback<PurchaseReservedCacheNodesOfferingResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETPurchaseReservedCacheNodesOfferingValidateBeforeCall(reservedCacheNodesOfferingId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, reservedCacheNodeId, cacheNodeCount, tags, _callback);
        Type localVarReturnType = new TypeToken<PurchaseReservedCacheNodesOfferingResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRebalanceSlotsInGlobalReplicationGroup
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param applyImmediately If &lt;code&gt;True&lt;/code&gt;, redistribution is applied immediately. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRebalanceSlotsInGlobalReplicationGroupCall(String globalReplicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RebalanceSlotsInGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalReplicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("GlobalReplicationGroupId", globalReplicationGroupId));
        }

        if (applyImmediately != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ApplyImmediately", applyImmediately));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRebalanceSlotsInGlobalReplicationGroupValidateBeforeCall(String globalReplicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'globalReplicationGroupId' is set
        if (globalReplicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'globalReplicationGroupId' when calling gETRebalanceSlotsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'applyImmediately' is set
        if (applyImmediately == null) {
            throw new ApiException("Missing the required parameter 'applyImmediately' when calling gETRebalanceSlotsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRebalanceSlotsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRebalanceSlotsInGlobalReplicationGroup(Async)");
        }

        return gETRebalanceSlotsInGlobalReplicationGroupCall(globalReplicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Redistribute slots to ensure uniform distribution across existing shards in the cluster.
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param applyImmediately If &lt;code&gt;True&lt;/code&gt;, redistribution is applied immediately. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RebalanceSlotsInGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public RebalanceSlotsInGlobalReplicationGroupResult gETRebalanceSlotsInGlobalReplicationGroup(String globalReplicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RebalanceSlotsInGlobalReplicationGroupResult> localVarResp = gETRebalanceSlotsInGlobalReplicationGroupWithHttpInfo(globalReplicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Redistribute slots to ensure uniform distribution across existing shards in the cluster.
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param applyImmediately If &lt;code&gt;True&lt;/code&gt;, redistribution is applied immediately. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RebalanceSlotsInGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RebalanceSlotsInGlobalReplicationGroupResult> gETRebalanceSlotsInGlobalReplicationGroupWithHttpInfo(String globalReplicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRebalanceSlotsInGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RebalanceSlotsInGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Redistribute slots to ensure uniform distribution across existing shards in the cluster.
     * @param globalReplicationGroupId The name of the Global datastore (required)
     * @param applyImmediately If &lt;code&gt;True&lt;/code&gt;, redistribution is applied immediately. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRebalanceSlotsInGlobalReplicationGroupAsync(String globalReplicationGroupId, Boolean applyImmediately, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RebalanceSlotsInGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRebalanceSlotsInGlobalReplicationGroupValidateBeforeCall(globalReplicationGroupId, applyImmediately, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RebalanceSlotsInGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRebootCacheCluster
     * @param cacheClusterId The cluster identifier. This parameter is stored as a lowercase string. (required)
     * @param cacheNodeIdsToReboot A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRebootCacheClusterCall(String cacheClusterId, List<String> cacheNodeIdsToReboot, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RebootCacheCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheClusterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheClusterId", cacheClusterId));
        }

        if (cacheNodeIdsToReboot != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "CacheNodeIdsToReboot", cacheNodeIdsToReboot));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRebootCacheClusterValidateBeforeCall(String cacheClusterId, List<String> cacheNodeIdsToReboot, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheClusterId' is set
        if (cacheClusterId == null) {
            throw new ApiException("Missing the required parameter 'cacheClusterId' when calling gETRebootCacheCluster(Async)");
        }

        // verify the required parameter 'cacheNodeIdsToReboot' is set
        if (cacheNodeIdsToReboot == null) {
            throw new ApiException("Missing the required parameter 'cacheNodeIdsToReboot' when calling gETRebootCacheCluster(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRebootCacheCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRebootCacheCluster(Async)");
        }

        return gETRebootCacheClusterCall(cacheClusterId, cacheNodeIdsToReboot, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.&lt;/p&gt; &lt;p&gt;The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.&lt;/p&gt; &lt;p&gt;When the reboot is complete, a cluster event is created.&lt;/p&gt; &lt;p&gt;Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.&lt;/p&gt; &lt;p&gt;If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes.rebooting.html\&quot;&gt;Rebooting a Cluster&lt;/a&gt; for an alternate process.&lt;/p&gt;
     * @param cacheClusterId The cluster identifier. This parameter is stored as a lowercase string. (required)
     * @param cacheNodeIdsToReboot A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RebootCacheClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RebootCacheClusterResult gETRebootCacheCluster(String cacheClusterId, List<String> cacheNodeIdsToReboot, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RebootCacheClusterResult> localVarResp = gETRebootCacheClusterWithHttpInfo(cacheClusterId, cacheNodeIdsToReboot, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.&lt;/p&gt; &lt;p&gt;The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.&lt;/p&gt; &lt;p&gt;When the reboot is complete, a cluster event is created.&lt;/p&gt; &lt;p&gt;Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.&lt;/p&gt; &lt;p&gt;If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes.rebooting.html\&quot;&gt;Rebooting a Cluster&lt;/a&gt; for an alternate process.&lt;/p&gt;
     * @param cacheClusterId The cluster identifier. This parameter is stored as a lowercase string. (required)
     * @param cacheNodeIdsToReboot A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RebootCacheClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RebootCacheClusterResult> gETRebootCacheClusterWithHttpInfo(String cacheClusterId, List<String> cacheNodeIdsToReboot, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRebootCacheClusterValidateBeforeCall(cacheClusterId, cacheNodeIdsToReboot, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RebootCacheClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.&lt;/p&gt; &lt;p&gt;The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.&lt;/p&gt; &lt;p&gt;When the reboot is complete, a cluster event is created.&lt;/p&gt; &lt;p&gt;Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.&lt;/p&gt; &lt;p&gt;If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes.rebooting.html\&quot;&gt;Rebooting a Cluster&lt;/a&gt; for an alternate process.&lt;/p&gt;
     * @param cacheClusterId The cluster identifier. This parameter is stored as a lowercase string. (required)
     * @param cacheNodeIdsToReboot A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cluster, specify all of the cache node IDs. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRebootCacheClusterAsync(String cacheClusterId, List<String> cacheNodeIdsToReboot, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RebootCacheClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRebootCacheClusterValidateBeforeCall(cacheClusterId, cacheNodeIdsToReboot, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RebootCacheClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRemoveTagsFromResource
     * @param resourceName &lt;p&gt;The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster&lt;/code&gt; or &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs) and Amazon Service Namespaces&lt;/a&gt;.&lt;/p&gt; (required)
     * @param tagKeys A list of &lt;code&gt;TagKeys&lt;/code&gt; identifying the tags you want removed from the named resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveTagsFromResourceCall(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RemoveTagsFromResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResourceName", resourceName));
        }

        if (tagKeys != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TagKeys", tagKeys));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRemoveTagsFromResourceValidateBeforeCall(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling gETRemoveTagsFromResource(Async)");
        }

        // verify the required parameter 'tagKeys' is set
        if (tagKeys == null) {
            throw new ApiException("Missing the required parameter 'tagKeys' when calling gETRemoveTagsFromResource(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRemoveTagsFromResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRemoveTagsFromResource(Async)");
        }

        return gETRemoveTagsFromResourceCall(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes the tags identified by the &lt;code&gt;TagKeys&lt;/code&gt; list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.
     * @param resourceName &lt;p&gt;The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster&lt;/code&gt; or &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs) and Amazon Service Namespaces&lt;/a&gt;.&lt;/p&gt; (required)
     * @param tagKeys A list of &lt;code&gt;TagKeys&lt;/code&gt; identifying the tags you want removed from the named resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return TagListMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public TagListMessage gETRemoveTagsFromResource(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<TagListMessage> localVarResp = gETRemoveTagsFromResourceWithHttpInfo(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the tags identified by the &lt;code&gt;TagKeys&lt;/code&gt; list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.
     * @param resourceName &lt;p&gt;The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster&lt;/code&gt; or &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs) and Amazon Service Namespaces&lt;/a&gt;.&lt;/p&gt; (required)
     * @param tagKeys A list of &lt;code&gt;TagKeys&lt;/code&gt; identifying the tags you want removed from the named resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;TagListMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagListMessage> gETRemoveTagsFromResourceWithHttpInfo(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRemoveTagsFromResourceValidateBeforeCall(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the tags identified by the &lt;code&gt;TagKeys&lt;/code&gt; list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.
     * @param resourceName &lt;p&gt;The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster&lt;/code&gt; or &lt;code&gt;arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information about ARNs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs) and Amazon Service Namespaces&lt;/a&gt;.&lt;/p&gt; (required)
     * @param tagKeys A list of &lt;code&gt;TagKeys&lt;/code&gt; identifying the tags you want removed from the named resource. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRemoveTagsFromResourceAsync(String resourceName, List<String> tagKeys, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<TagListMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRemoveTagsFromResourceValidateBeforeCall(resourceName, tagKeys, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETResetCacheParameterGroup
     * @param cacheParameterGroupName The name of the cache parameter group to reset. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, all parameters in the cache parameter group are reset to their default values. If &lt;code&gt;false&lt;/code&gt;, only the parameters listed by &lt;code&gt;ParameterNameValues&lt;/code&gt; are reset to their default values.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param parameterNameValues An array of parameter names to reset to their default values. If &lt;code&gt;ResetAllParameters&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, do not use &lt;code&gt;ParameterNameValues&lt;/code&gt;. If &lt;code&gt;ResetAllParameters&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, you must specify the name of at least one parameter to reset. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETResetCacheParameterGroupCall(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyCacheParameterGroupParameterNameValuesParameterInner> parameterNameValues, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=ResetCacheParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheParameterGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheParameterGroupName", cacheParameterGroupName));
        }

        if (resetAllParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ResetAllParameters", resetAllParameters));
        }

        if (parameterNameValues != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ParameterNameValues", parameterNameValues));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETResetCacheParameterGroupValidateBeforeCall(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyCacheParameterGroupParameterNameValuesParameterInner> parameterNameValues, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheParameterGroupName' is set
        if (cacheParameterGroupName == null) {
            throw new ApiException("Missing the required parameter 'cacheParameterGroupName' when calling gETResetCacheParameterGroup(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETResetCacheParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETResetCacheParameterGroup(Async)");
        }

        return gETResetCacheParameterGroupCall(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameterNameValues, _callback);

    }

    /**
     * 
     * Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the &lt;code&gt;ResetAllParameters&lt;/code&gt; and &lt;code&gt;CacheParameterGroupName&lt;/code&gt; parameters.
     * @param cacheParameterGroupName The name of the cache parameter group to reset. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, all parameters in the cache parameter group are reset to their default values. If &lt;code&gt;false&lt;/code&gt;, only the parameters listed by &lt;code&gt;ParameterNameValues&lt;/code&gt; are reset to their default values.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param parameterNameValues An array of parameter names to reset to their default values. If &lt;code&gt;ResetAllParameters&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, do not use &lt;code&gt;ParameterNameValues&lt;/code&gt;. If &lt;code&gt;ResetAllParameters&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, you must specify the name of at least one parameter to reset. (optional)
     * @return CacheParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CacheParameterGroupNameMessage gETResetCacheParameterGroup(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyCacheParameterGroupParameterNameValuesParameterInner> parameterNameValues) throws ApiException {
        ApiResponse<CacheParameterGroupNameMessage> localVarResp = gETResetCacheParameterGroupWithHttpInfo(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameterNameValues);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the &lt;code&gt;ResetAllParameters&lt;/code&gt; and &lt;code&gt;CacheParameterGroupName&lt;/code&gt; parameters.
     * @param cacheParameterGroupName The name of the cache parameter group to reset. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, all parameters in the cache parameter group are reset to their default values. If &lt;code&gt;false&lt;/code&gt;, only the parameters listed by &lt;code&gt;ParameterNameValues&lt;/code&gt; are reset to their default values.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param parameterNameValues An array of parameter names to reset to their default values. If &lt;code&gt;ResetAllParameters&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, do not use &lt;code&gt;ParameterNameValues&lt;/code&gt;. If &lt;code&gt;ResetAllParameters&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, you must specify the name of at least one parameter to reset. (optional)
     * @return ApiResponse&lt;CacheParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheParameterGroupNameMessage> gETResetCacheParameterGroupWithHttpInfo(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyCacheParameterGroupParameterNameValuesParameterInner> parameterNameValues) throws ApiException {
        okhttp3.Call localVarCall = gETResetCacheParameterGroupValidateBeforeCall(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameterNameValues, null);
        Type localVarReturnType = new TypeToken<CacheParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the &lt;code&gt;ResetAllParameters&lt;/code&gt; and &lt;code&gt;CacheParameterGroupName&lt;/code&gt; parameters.
     * @param cacheParameterGroupName The name of the cache parameter group to reset. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetAllParameters &lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, all parameters in the cache parameter group are reset to their default values. If &lt;code&gt;false&lt;/code&gt;, only the parameters listed by &lt;code&gt;ParameterNameValues&lt;/code&gt; are reset to their default values.&lt;/p&gt; &lt;p&gt;Valid values: &lt;code&gt;true&lt;/code&gt; | &lt;code&gt;false&lt;/code&gt; &lt;/p&gt; (optional)
     * @param parameterNameValues An array of parameter names to reset to their default values. If &lt;code&gt;ResetAllParameters&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, do not use &lt;code&gt;ParameterNameValues&lt;/code&gt;. If &lt;code&gt;ResetAllParameters&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, you must specify the name of at least one parameter to reset. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETResetCacheParameterGroupAsync(String cacheParameterGroupName, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Boolean resetAllParameters, List<GETModifyCacheParameterGroupParameterNameValuesParameterInner> parameterNameValues, final ApiCallback<CacheParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETResetCacheParameterGroupValidateBeforeCall(cacheParameterGroupName, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetAllParameters, parameterNameValues, _callback);
        Type localVarReturnType = new TypeToken<CacheParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETRevokeCacheSecurityGroupIngress
     * @param cacheSecurityGroupName The name of the cache security group to revoke ingress from. (required)
     * @param ec2SecurityGroupName The name of the Amazon EC2 security group to revoke access from. (required)
     * @param ec2SecurityGroupOwnerId The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRevokeCacheSecurityGroupIngressCall(String cacheSecurityGroupName, String ec2SecurityGroupName, String ec2SecurityGroupOwnerId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=RevokeCacheSecurityGroupIngress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheSecurityGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheSecurityGroupName", cacheSecurityGroupName));
        }

        if (ec2SecurityGroupName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EC2SecurityGroupName", ec2SecurityGroupName));
        }

        if (ec2SecurityGroupOwnerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EC2SecurityGroupOwnerId", ec2SecurityGroupOwnerId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETRevokeCacheSecurityGroupIngressValidateBeforeCall(String cacheSecurityGroupName, String ec2SecurityGroupName, String ec2SecurityGroupOwnerId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cacheSecurityGroupName' is set
        if (cacheSecurityGroupName == null) {
            throw new ApiException("Missing the required parameter 'cacheSecurityGroupName' when calling gETRevokeCacheSecurityGroupIngress(Async)");
        }

        // verify the required parameter 'ec2SecurityGroupName' is set
        if (ec2SecurityGroupName == null) {
            throw new ApiException("Missing the required parameter 'ec2SecurityGroupName' when calling gETRevokeCacheSecurityGroupIngress(Async)");
        }

        // verify the required parameter 'ec2SecurityGroupOwnerId' is set
        if (ec2SecurityGroupOwnerId == null) {
            throw new ApiException("Missing the required parameter 'ec2SecurityGroupOwnerId' when calling gETRevokeCacheSecurityGroupIngress(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETRevokeCacheSecurityGroupIngress(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETRevokeCacheSecurityGroupIngress(Async)");
        }

        return gETRevokeCacheSecurityGroupIngressCall(cacheSecurityGroupName, ec2SecurityGroupName, ec2SecurityGroupOwnerId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
     * @param cacheSecurityGroupName The name of the cache security group to revoke ingress from. (required)
     * @param ec2SecurityGroupName The name of the Amazon EC2 security group to revoke access from. (required)
     * @param ec2SecurityGroupOwnerId The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RevokeCacheSecurityGroupIngressResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public RevokeCacheSecurityGroupIngressResult gETRevokeCacheSecurityGroupIngress(String cacheSecurityGroupName, String ec2SecurityGroupName, String ec2SecurityGroupOwnerId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RevokeCacheSecurityGroupIngressResult> localVarResp = gETRevokeCacheSecurityGroupIngressWithHttpInfo(cacheSecurityGroupName, ec2SecurityGroupName, ec2SecurityGroupOwnerId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
     * @param cacheSecurityGroupName The name of the cache security group to revoke ingress from. (required)
     * @param ec2SecurityGroupName The name of the Amazon EC2 security group to revoke access from. (required)
     * @param ec2SecurityGroupOwnerId The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RevokeCacheSecurityGroupIngressResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RevokeCacheSecurityGroupIngressResult> gETRevokeCacheSecurityGroupIngressWithHttpInfo(String cacheSecurityGroupName, String ec2SecurityGroupName, String ec2SecurityGroupOwnerId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETRevokeCacheSecurityGroupIngressValidateBeforeCall(cacheSecurityGroupName, ec2SecurityGroupName, ec2SecurityGroupOwnerId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RevokeCacheSecurityGroupIngressResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
     * @param cacheSecurityGroupName The name of the cache security group to revoke ingress from. (required)
     * @param ec2SecurityGroupName The name of the Amazon EC2 security group to revoke access from. (required)
     * @param ec2SecurityGroupOwnerId The Amazon account number of the Amazon EC2 security group owner. Note that this is not the same thing as an Amazon access key ID - you must provide a valid Amazon account number for this parameter. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETRevokeCacheSecurityGroupIngressAsync(String cacheSecurityGroupName, String ec2SecurityGroupName, String ec2SecurityGroupOwnerId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RevokeCacheSecurityGroupIngressResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETRevokeCacheSecurityGroupIngressValidateBeforeCall(cacheSecurityGroupName, ec2SecurityGroupName, ec2SecurityGroupOwnerId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RevokeCacheSecurityGroupIngressResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETStartMigration
     * @param replicationGroupId The ID of the replication group to which data should be migrated. (required)
     * @param customerNodeEndpointList List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyUnderMigrationFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStartMigrationCall(String replicationGroupId, List<CustomerNodeEndpoint> customerNodeEndpointList, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=StartMigration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (customerNodeEndpointList != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "CustomerNodeEndpointList", customerNodeEndpointList));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETStartMigrationValidateBeforeCall(String replicationGroupId, List<CustomerNodeEndpoint> customerNodeEndpointList, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicationGroupId' is set
        if (replicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'replicationGroupId' when calling gETStartMigration(Async)");
        }

        // verify the required parameter 'customerNodeEndpointList' is set
        if (customerNodeEndpointList == null) {
            throw new ApiException("Missing the required parameter 'customerNodeEndpointList' when calling gETStartMigration(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETStartMigration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETStartMigration(Async)");
        }

        return gETStartMigrationCall(replicationGroupId, customerNodeEndpointList, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Start the migration of data.
     * @param replicationGroupId The ID of the replication group to which data should be migrated. (required)
     * @param customerNodeEndpointList List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return StartMigrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyUnderMigrationFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public StartMigrationResponse gETStartMigration(String replicationGroupId, List<CustomerNodeEndpoint> customerNodeEndpointList, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<StartMigrationResponse> localVarResp = gETStartMigrationWithHttpInfo(replicationGroupId, customerNodeEndpointList, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Start the migration of data.
     * @param replicationGroupId The ID of the replication group to which data should be migrated. (required)
     * @param customerNodeEndpointList List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;StartMigrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyUnderMigrationFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartMigrationResponse> gETStartMigrationWithHttpInfo(String replicationGroupId, List<CustomerNodeEndpoint> customerNodeEndpointList, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETStartMigrationValidateBeforeCall(replicationGroupId, customerNodeEndpointList, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<StartMigrationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start the migration of data.
     * @param replicationGroupId The ID of the replication group to which data should be migrated. (required)
     * @param customerNodeEndpointList List of endpoints from which data should be migrated. For Redis (cluster mode disabled), list should have only one element. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyUnderMigrationFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETStartMigrationAsync(String replicationGroupId, List<CustomerNodeEndpoint> customerNodeEndpointList, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<StartMigrationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETStartMigrationValidateBeforeCall(replicationGroupId, customerNodeEndpointList, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<StartMigrationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gETTestFailover
     * @param replicationGroupId The name of the replication group (console: cluster) whose automatic failover is being tested by this operation. (required)
     * @param nodeGroupId The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> APICallRateForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NodeGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TestFailoverNotAvailableFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTestFailoverCall(String replicationGroupId, String nodeGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/#Action=TestFailover";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replicationGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ReplicationGroupId", replicationGroupId));
        }

        if (nodeGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NodeGroupId", nodeGroupId));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gETTestFailoverValidateBeforeCall(String replicationGroupId, String nodeGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'replicationGroupId' is set
        if (replicationGroupId == null) {
            throw new ApiException("Missing the required parameter 'replicationGroupId' when calling gETTestFailover(Async)");
        }

        // verify the required parameter 'nodeGroupId' is set
        if (nodeGroupId == null) {
            throw new ApiException("Missing the required parameter 'nodeGroupId' when calling gETTestFailover(Async)");
        }

        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling gETTestFailover(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling gETTestFailover(Async)");
        }

        return gETTestFailoverCall(replicationGroupId, nodeGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Represents the input of a &lt;code&gt;TestFailover&lt;/code&gt; operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).&lt;/p&gt; &lt;p&gt;This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API. &lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Note the following&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.&lt;/p&gt; &lt;p&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Test Failover API called for node group &amp;lt;node-group-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Recovering cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Finished recovery for cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html\&quot;&gt;Viewing ElastiCache Events&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html\&quot;&gt;DescribeEvents&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Also see, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test\&quot;&gt;Testing Multi-AZ &lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param replicationGroupId The name of the replication group (console: cluster) whose automatic failover is being tested by this operation. (required)
     * @param nodeGroupId The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return TestFailoverResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> APICallRateForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NodeGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TestFailoverNotAvailableFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public TestFailoverResult gETTestFailover(String replicationGroupId, String nodeGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<TestFailoverResult> localVarResp = gETTestFailoverWithHttpInfo(replicationGroupId, nodeGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Represents the input of a &lt;code&gt;TestFailover&lt;/code&gt; operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).&lt;/p&gt; &lt;p&gt;This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API. &lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Note the following&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.&lt;/p&gt; &lt;p&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Test Failover API called for node group &amp;lt;node-group-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Recovering cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Finished recovery for cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html\&quot;&gt;Viewing ElastiCache Events&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html\&quot;&gt;DescribeEvents&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Also see, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test\&quot;&gt;Testing Multi-AZ &lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param replicationGroupId The name of the replication group (console: cluster) whose automatic failover is being tested by this operation. (required)
     * @param nodeGroupId The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;TestFailoverResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> APICallRateForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NodeGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TestFailoverNotAvailableFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestFailoverResult> gETTestFailoverWithHttpInfo(String replicationGroupId, String nodeGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = gETTestFailoverValidateBeforeCall(replicationGroupId, nodeGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<TestFailoverResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Represents the input of a &lt;code&gt;TestFailover&lt;/code&gt; operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).&lt;/p&gt; &lt;p&gt;This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API. &lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Note the following&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.&lt;/p&gt; &lt;p&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Test Failover API called for node group &amp;lt;node-group-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Recovering cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Finished recovery for cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html\&quot;&gt;Viewing ElastiCache Events&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html\&quot;&gt;DescribeEvents&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Also see, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test\&quot;&gt;Testing Multi-AZ &lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param replicationGroupId The name of the replication group (console: cluster) whose automatic failover is being tested by this operation. (required)
     * @param nodeGroupId The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period. (required)
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> APICallRateForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NodeGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TestFailoverNotAvailableFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gETTestFailoverAsync(String replicationGroupId, String nodeGroupId, String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<TestFailoverResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = gETTestFailoverValidateBeforeCall(replicationGroupId, nodeGroupId, action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<TestFailoverResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAddTagsToResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsToResourceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddTagsToResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTagsToResourceMessage;

        // create path and map variables
        String localVarPath = "/#Action=AddTagsToResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAddTagsToResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAddTagsToResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAddTagsToResource(Async)");
        }

        return pOSTAddTagsToResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html\&quot;&gt;Using Cost Allocation Tags in Amazon ElastiCache&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsToResourceMessage  (optional)
     * @return TagListMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public TagListMessage pOSTAddTagsToResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage) throws ApiException {
        ApiResponse<TagListMessage> localVarResp = pOSTAddTagsToResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html\&quot;&gt;Using Cost Allocation Tags in Amazon ElastiCache&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsToResourceMessage  (optional)
     * @return ApiResponse&lt;TagListMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagListMessage> pOSTAddTagsToResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTAddTagsToResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage, null);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; For example, you can use cost-allocation tags to your ElastiCache resources, Amazon generates a cost allocation report as a comma-separated value (CSV) file with your usage and costs aggregated by your tags. You can apply tags that represent business categories (such as cost centers, application names, or owners) to organize your costs across multiple services.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Tagging.html\&quot;&gt;Using Cost Allocation Tags in Amazon ElastiCache&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param addTagsToResourceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAddTagsToResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AddTagsToResourceMessage addTagsToResourceMessage, final ApiCallback<TagListMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAddTagsToResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, addTagsToResourceMessage, _callback);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTAuthorizeCacheSecurityGroupIngress
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param authorizeCacheSecurityGroupIngressMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAuthorizeCacheSecurityGroupIngressCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AuthorizeCacheSecurityGroupIngressMessage authorizeCacheSecurityGroupIngressMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizeCacheSecurityGroupIngressMessage;

        // create path and map variables
        String localVarPath = "/#Action=AuthorizeCacheSecurityGroupIngress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTAuthorizeCacheSecurityGroupIngressValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AuthorizeCacheSecurityGroupIngressMessage authorizeCacheSecurityGroupIngressMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTAuthorizeCacheSecurityGroupIngress(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTAuthorizeCacheSecurityGroupIngress(Async)");
        }

        return pOSTAuthorizeCacheSecurityGroupIngressCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authorizeCacheSecurityGroupIngressMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param authorizeCacheSecurityGroupIngressMessage  (optional)
     * @return AuthorizeCacheSecurityGroupIngressResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizeCacheSecurityGroupIngressResult pOSTAuthorizeCacheSecurityGroupIngress(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AuthorizeCacheSecurityGroupIngressMessage authorizeCacheSecurityGroupIngressMessage) throws ApiException {
        ApiResponse<AuthorizeCacheSecurityGroupIngressResult> localVarResp = pOSTAuthorizeCacheSecurityGroupIngressWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authorizeCacheSecurityGroupIngressMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param authorizeCacheSecurityGroupIngressMessage  (optional)
     * @return ApiResponse&lt;AuthorizeCacheSecurityGroupIngressResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthorizeCacheSecurityGroupIngressResult> pOSTAuthorizeCacheSecurityGroupIngressWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AuthorizeCacheSecurityGroupIngressMessage authorizeCacheSecurityGroupIngressMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTAuthorizeCacheSecurityGroupIngressValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authorizeCacheSecurityGroupIngressMessage, null);
        Type localVarReturnType = new TypeToken<AuthorizeCacheSecurityGroupIngressResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Allows network ingress to a cache security group. Applications using ElastiCache must be running on Amazon EC2, and Amazon EC2 security groups are used as the authorization mechanism.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot authorize ingress from an Amazon EC2 security group in one region to an ElastiCache cluster in another region.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param authorizeCacheSecurityGroupIngressMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AuthorizationAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTAuthorizeCacheSecurityGroupIngressAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, AuthorizeCacheSecurityGroupIngressMessage authorizeCacheSecurityGroupIngressMessage, final ApiCallback<AuthorizeCacheSecurityGroupIngressResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTAuthorizeCacheSecurityGroupIngressValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, authorizeCacheSecurityGroupIngressMessage, _callback);
        Type localVarReturnType = new TypeToken<AuthorizeCacheSecurityGroupIngressResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTBatchApplyUpdateAction
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchApplyUpdateActionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchApplyUpdateActionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchApplyUpdateActionMessage batchApplyUpdateActionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchApplyUpdateActionMessage;

        // create path and map variables
        String localVarPath = "/#Action=BatchApplyUpdateAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTBatchApplyUpdateActionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchApplyUpdateActionMessage batchApplyUpdateActionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTBatchApplyUpdateAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTBatchApplyUpdateAction(Async)");
        }

        return pOSTBatchApplyUpdateActionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchApplyUpdateActionMessage, _callback);

    }

    /**
     * 
     * Apply the service update. For more information on service updates and applying them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html\&quot;&gt;Applying Service Updates&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchApplyUpdateActionMessage  (optional)
     * @return UpdateActionResultsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateActionResultsMessage pOSTBatchApplyUpdateAction(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchApplyUpdateActionMessage batchApplyUpdateActionMessage) throws ApiException {
        ApiResponse<UpdateActionResultsMessage> localVarResp = pOSTBatchApplyUpdateActionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchApplyUpdateActionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Apply the service update. For more information on service updates and applying them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html\&quot;&gt;Applying Service Updates&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchApplyUpdateActionMessage  (optional)
     * @return ApiResponse&lt;UpdateActionResultsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateActionResultsMessage> pOSTBatchApplyUpdateActionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchApplyUpdateActionMessage batchApplyUpdateActionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTBatchApplyUpdateActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchApplyUpdateActionMessage, null);
        Type localVarReturnType = new TypeToken<UpdateActionResultsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Apply the service update. For more information on service updates and applying them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/applying-updates.html\&quot;&gt;Applying Service Updates&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchApplyUpdateActionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchApplyUpdateActionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchApplyUpdateActionMessage batchApplyUpdateActionMessage, final ApiCallback<UpdateActionResultsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTBatchApplyUpdateActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchApplyUpdateActionMessage, _callback);
        Type localVarReturnType = new TypeToken<UpdateActionResultsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTBatchStopUpdateAction
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchStopUpdateActionMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchStopUpdateActionCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchStopUpdateActionMessage batchStopUpdateActionMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchStopUpdateActionMessage;

        // create path and map variables
        String localVarPath = "/#Action=BatchStopUpdateAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTBatchStopUpdateActionValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchStopUpdateActionMessage batchStopUpdateActionMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTBatchStopUpdateAction(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTBatchStopUpdateAction(Async)");
        }

        return pOSTBatchStopUpdateActionCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchStopUpdateActionMessage, _callback);

    }

    /**
     * 
     * Stop the service update. For more information on service updates and stopping them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html\&quot;&gt;Stopping Service Updates&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchStopUpdateActionMessage  (optional)
     * @return UpdateActionResultsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateActionResultsMessage pOSTBatchStopUpdateAction(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchStopUpdateActionMessage batchStopUpdateActionMessage) throws ApiException {
        ApiResponse<UpdateActionResultsMessage> localVarResp = pOSTBatchStopUpdateActionWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchStopUpdateActionMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Stop the service update. For more information on service updates and stopping them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html\&quot;&gt;Stopping Service Updates&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchStopUpdateActionMessage  (optional)
     * @return ApiResponse&lt;UpdateActionResultsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateActionResultsMessage> pOSTBatchStopUpdateActionWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchStopUpdateActionMessage batchStopUpdateActionMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTBatchStopUpdateActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchStopUpdateActionMessage, null);
        Type localVarReturnType = new TypeToken<UpdateActionResultsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stop the service update. For more information on service updates and stopping them, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/stopping-self-service-updates.html\&quot;&gt;Stopping Service Updates&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param batchStopUpdateActionMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTBatchStopUpdateActionAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, BatchStopUpdateActionMessage batchStopUpdateActionMessage, final ApiCallback<UpdateActionResultsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTBatchStopUpdateActionValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, batchStopUpdateActionMessage, _callback);
        Type localVarReturnType = new TypeToken<UpdateActionResultsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCompleteMigration
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param completeMigrationMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotUnderMigrationFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCompleteMigrationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CompleteMigrationMessage completeMigrationMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = completeMigrationMessage;

        // create path and map variables
        String localVarPath = "/#Action=CompleteMigration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCompleteMigrationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CompleteMigrationMessage completeMigrationMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCompleteMigration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCompleteMigration(Async)");
        }

        return pOSTCompleteMigrationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, completeMigrationMessage, _callback);

    }

    /**
     * 
     * Complete the migration of data.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param completeMigrationMessage  (optional)
     * @return CompleteMigrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotUnderMigrationFault </td><td>  -  </td></tr>
     </table>
     */
    public CompleteMigrationResponse pOSTCompleteMigration(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CompleteMigrationMessage completeMigrationMessage) throws ApiException {
        ApiResponse<CompleteMigrationResponse> localVarResp = pOSTCompleteMigrationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, completeMigrationMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Complete the migration of data.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param completeMigrationMessage  (optional)
     * @return ApiResponse&lt;CompleteMigrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotUnderMigrationFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompleteMigrationResponse> pOSTCompleteMigrationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CompleteMigrationMessage completeMigrationMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCompleteMigrationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, completeMigrationMessage, null);
        Type localVarReturnType = new TypeToken<CompleteMigrationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Complete the migration of data.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param completeMigrationMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotUnderMigrationFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCompleteMigrationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CompleteMigrationMessage completeMigrationMessage, final ApiCallback<CompleteMigrationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCompleteMigrationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, completeMigrationMessage, _callback);
        Type localVarReturnType = new TypeToken<CompleteMigrationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCopySnapshot
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copySnapshotMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCopySnapshotCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopySnapshotMessage copySnapshotMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = copySnapshotMessage;

        // create path and map variables
        String localVarPath = "/#Action=CopySnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCopySnapshotValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopySnapshotMessage copySnapshotMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCopySnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCopySnapshot(Async)");
        }

        return pOSTCopySnapshotCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copySnapshotMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Makes a copy of an existing snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Users or groups that have permissions to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation. For more information about using IAM to control the use of ElastiCache operations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\&quot;&gt;Exporting Snapshots&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html\&quot;&gt;Authentication &amp;amp; Access Control&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You could receive the following error messages.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Error Messages&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is outside of the region.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s does not exist.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is not owned by the authenticated user.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The authenticated user does not have sufficient permissions to perform the desired activity.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Contact your system administrator to get the needed permissions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s already contains an object with key %s.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Give the &lt;code&gt;TargetSnapshotName&lt;/code&gt; a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for &lt;code&gt;TargetSnapshotName&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add List and Read permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add Upload/Delete permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add View Permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copySnapshotMessage  (optional)
     * @return CopySnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CopySnapshotResult pOSTCopySnapshot(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopySnapshotMessage copySnapshotMessage) throws ApiException {
        ApiResponse<CopySnapshotResult> localVarResp = pOSTCopySnapshotWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copySnapshotMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Makes a copy of an existing snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Users or groups that have permissions to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation. For more information about using IAM to control the use of ElastiCache operations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\&quot;&gt;Exporting Snapshots&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html\&quot;&gt;Authentication &amp;amp; Access Control&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You could receive the following error messages.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Error Messages&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is outside of the region.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s does not exist.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is not owned by the authenticated user.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The authenticated user does not have sufficient permissions to perform the desired activity.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Contact your system administrator to get the needed permissions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s already contains an object with key %s.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Give the &lt;code&gt;TargetSnapshotName&lt;/code&gt; a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for &lt;code&gt;TargetSnapshotName&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add List and Read permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add Upload/Delete permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add View Permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copySnapshotMessage  (optional)
     * @return ApiResponse&lt;CopySnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CopySnapshotResult> pOSTCopySnapshotWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopySnapshotMessage copySnapshotMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCopySnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copySnapshotMessage, null);
        Type localVarReturnType = new TypeToken<CopySnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Makes a copy of an existing snapshot.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt;Users or groups that have permissions to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation can create their own Amazon S3 buckets and copy snapshots to it. To control access to your snapshots, use an IAM policy to control who has the ability to use the &lt;code&gt;CopySnapshot&lt;/code&gt; operation. For more information about using IAM to control the use of ElastiCache operations, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html\&quot;&gt;Exporting Snapshots&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.html\&quot;&gt;Authentication &amp;amp; Access Control&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;You could receive the following error messages.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Error Messages&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is outside of the region.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s does not exist.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s is not owned by the authenticated user.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Create an Amazon S3 bucket in the same region as your snapshot. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-create-s3-bucket\&quot;&gt;Step 1: Create an Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The authenticated user does not have sufficient permissions to perform the desired activity.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Contact your system administrator to get the needed permissions.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message:&lt;/b&gt; The S3 bucket %s already contains an object with key %s.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Give the &lt;code&gt;TargetSnapshotName&lt;/code&gt; a new and unique value. If exporting a snapshot, you could alternatively create a new Amazon S3 bucket and use this same value for &lt;code&gt;TargetSnapshotName&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add List and Read permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted WRITE permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add Upload/Delete permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Error Message: &lt;/b&gt; ElastiCache has not been granted READ_ACP permissions %s on the S3 Bucket.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Solution:&lt;/b&gt; Add View Permissions on the bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-exporting.html#backups-exporting-grant-access\&quot;&gt;Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param copySnapshotMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCopySnapshotAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CopySnapshotMessage copySnapshotMessage, final ApiCallback<CopySnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCopySnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, copySnapshotMessage, _callback);
        Type localVarReturnType = new TypeToken<CopySnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateCacheCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateCacheClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheClusterMessage createCacheClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCacheClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateCacheCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateCacheClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheClusterMessage createCacheClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateCacheCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateCacheCluster(Async)");
        }

        return pOSTCreateCacheClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.&lt;/p&gt; &lt;p&gt;This operation is not supported for Redis (cluster mode enabled) clusters.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheClusterMessage  (optional)
     * @return CreateCacheClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CreateCacheClusterResult pOSTCreateCacheCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheClusterMessage createCacheClusterMessage) throws ApiException {
        ApiResponse<CreateCacheClusterResult> localVarResp = pOSTCreateCacheClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.&lt;/p&gt; &lt;p&gt;This operation is not supported for Redis (cluster mode enabled) clusters.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheClusterMessage  (optional)
     * @return ApiResponse&lt;CreateCacheClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCacheClusterResult> pOSTCreateCacheClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheClusterMessage createCacheClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateCacheClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheClusterMessage, null);
        Type localVarReturnType = new TypeToken<CreateCacheClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a cluster. All nodes in the cluster run the same protocol-compliant cache engine software, either Memcached or Redis.&lt;/p&gt; &lt;p&gt;This operation is not supported for Redis (cluster mode enabled) clusters.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheClusterAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateCacheClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheClusterMessage createCacheClusterMessage, final ApiCallback<CreateCacheClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateCacheClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateCacheClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateCacheParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateCacheParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheParameterGroupMessage createCacheParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCacheParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateCacheParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateCacheParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheParameterGroupMessage createCacheParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateCacheParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateCacheParameterGroup(Async)");
        }

        return pOSTCreateCacheParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheParameterGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.&lt;/p&gt; &lt;p&gt;A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html\&quot;&gt;ModifyCacheParameterGroup&lt;/a&gt; in the ElastiCache API Reference.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html\&quot;&gt;Parameters and Parameter Groups&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheParameterGroupMessage  (optional)
     * @return CreateCacheParameterGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CreateCacheParameterGroupResult pOSTCreateCacheParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheParameterGroupMessage createCacheParameterGroupMessage) throws ApiException {
        ApiResponse<CreateCacheParameterGroupResult> localVarResp = pOSTCreateCacheParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.&lt;/p&gt; &lt;p&gt;A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html\&quot;&gt;ModifyCacheParameterGroup&lt;/a&gt; in the ElastiCache API Reference.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html\&quot;&gt;Parameters and Parameter Groups&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheParameterGroupMessage  (optional)
     * @return ApiResponse&lt;CreateCacheParameterGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCacheParameterGroupResult> pOSTCreateCacheParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheParameterGroupMessage createCacheParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateCacheParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<CreateCacheParameterGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new Amazon ElastiCache cache parameter group. An ElastiCache cache parameter group is a collection of parameters and their values that are applied to all of the nodes in any cluster or replication group using the CacheParameterGroup.&lt;/p&gt; &lt;p&gt;A newly created CacheParameterGroup is an exact duplicate of the default parameter group for the CacheParameterGroupFamily. To customize the newly created CacheParameterGroup you can change the values of specific parameters. For more information, see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyCacheParameterGroup.html\&quot;&gt;ModifyCacheParameterGroup&lt;/a&gt; in the ElastiCache API Reference.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ParameterGroups.html\&quot;&gt;Parameters and Parameter Groups&lt;/a&gt; in the ElastiCache User Guide.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateCacheParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheParameterGroupMessage createCacheParameterGroupMessage, final ApiCallback<CreateCacheParameterGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateCacheParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateCacheParameterGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateCacheSecurityGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheSecurityGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateCacheSecurityGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheSecurityGroupMessage createCacheSecurityGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCacheSecurityGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateCacheSecurityGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateCacheSecurityGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheSecurityGroupMessage createCacheSecurityGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateCacheSecurityGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateCacheSecurityGroup(Async)");
        }

        return pOSTCreateCacheSecurityGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheSecurityGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new cache security group. Use a cache security group to control access to one or more clusters.&lt;/p&gt; &lt;p&gt;Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html\&quot;&gt;CreateCacheSubnetGroup&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheSecurityGroupMessage  (optional)
     * @return CreateCacheSecurityGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CreateCacheSecurityGroupResult pOSTCreateCacheSecurityGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheSecurityGroupMessage createCacheSecurityGroupMessage) throws ApiException {
        ApiResponse<CreateCacheSecurityGroupResult> localVarResp = pOSTCreateCacheSecurityGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheSecurityGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new cache security group. Use a cache security group to control access to one or more clusters.&lt;/p&gt; &lt;p&gt;Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html\&quot;&gt;CreateCacheSubnetGroup&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheSecurityGroupMessage  (optional)
     * @return ApiResponse&lt;CreateCacheSecurityGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCacheSecurityGroupResult> pOSTCreateCacheSecurityGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheSecurityGroupMessage createCacheSecurityGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateCacheSecurityGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheSecurityGroupMessage, null);
        Type localVarReturnType = new TypeToken<CreateCacheSecurityGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new cache security group. Use a cache security group to control access to one or more clusters.&lt;/p&gt; &lt;p&gt;Cache security groups are only used when you are creating a cluster outside of an Amazon Virtual Private Cloud (Amazon VPC). If you are creating a cluster inside of a VPC, use a cache subnet group instead. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_CreateCacheSubnetGroup.html\&quot;&gt;CreateCacheSubnetGroup&lt;/a&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheSecurityGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateCacheSecurityGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheSecurityGroupMessage createCacheSecurityGroupMessage, final ApiCallback<CreateCacheSecurityGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateCacheSecurityGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheSecurityGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateCacheSecurityGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateCacheSubnetGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheSubnetGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateCacheSubnetGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheSubnetGroupMessage createCacheSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCacheSubnetGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateCacheSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateCacheSubnetGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheSubnetGroupMessage createCacheSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateCacheSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateCacheSubnetGroup(Async)");
        }

        return pOSTCreateCacheSubnetGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheSubnetGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new cache subnet group.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheSubnetGroupMessage  (optional)
     * @return CreateCacheSubnetGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public CreateCacheSubnetGroupResult pOSTCreateCacheSubnetGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheSubnetGroupMessage createCacheSubnetGroupMessage) throws ApiException {
        ApiResponse<CreateCacheSubnetGroupResult> localVarResp = pOSTCreateCacheSubnetGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheSubnetGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new cache subnet group.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheSubnetGroupMessage  (optional)
     * @return ApiResponse&lt;CreateCacheSubnetGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCacheSubnetGroupResult> pOSTCreateCacheSubnetGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheSubnetGroupMessage createCacheSubnetGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateCacheSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheSubnetGroupMessage, null);
        Type localVarReturnType = new TypeToken<CreateCacheSubnetGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new cache subnet group.&lt;/p&gt; &lt;p&gt;Use this parameter only when you are creating a cluster in an Amazon Virtual Private Cloud (Amazon VPC).&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createCacheSubnetGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateCacheSubnetGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateCacheSubnetGroupMessage createCacheSubnetGroupMessage, final ApiCallback<CreateCacheSubnetGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateCacheSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createCacheSubnetGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateCacheSubnetGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateGlobalReplicationGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createGlobalReplicationGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> GlobalReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateGlobalReplicationGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalReplicationGroupMessage createGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createGlobalReplicationGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateGlobalReplicationGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalReplicationGroupMessage createGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateGlobalReplicationGroup(Async)");
        }

        return pOSTCreateGlobalReplicationGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalReplicationGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Global Datastore for Redis offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis, you can create cross-region read replica clusters for ElastiCache for Redis to enable low-latency reads and disaster recovery across regions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html\&quot;&gt;Replication Across Regions Using Global Datastore&lt;/a&gt;. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;GlobalReplicationGroupIdSuffix&lt;/b&gt; is the name of the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;PrimaryReplicationGroupId&lt;/b&gt; represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createGlobalReplicationGroupMessage  (optional)
     * @return CreateGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> GlobalReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public CreateGlobalReplicationGroupResult pOSTCreateGlobalReplicationGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalReplicationGroupMessage createGlobalReplicationGroupMessage) throws ApiException {
        ApiResponse<CreateGlobalReplicationGroupResult> localVarResp = pOSTCreateGlobalReplicationGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalReplicationGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Global Datastore for Redis offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis, you can create cross-region read replica clusters for ElastiCache for Redis to enable low-latency reads and disaster recovery across regions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html\&quot;&gt;Replication Across Regions Using Global Datastore&lt;/a&gt;. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;GlobalReplicationGroupIdSuffix&lt;/b&gt; is the name of the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;PrimaryReplicationGroupId&lt;/b&gt; represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createGlobalReplicationGroupMessage  (optional)
     * @return ApiResponse&lt;CreateGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> GlobalReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGlobalReplicationGroupResult> pOSTCreateGlobalReplicationGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalReplicationGroupMessage createGlobalReplicationGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalReplicationGroupMessage, null);
        Type localVarReturnType = new TypeToken<CreateGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Global Datastore for Redis offers fully managed, fast, reliable and secure cross-region replication. Using Global Datastore for Redis, you can create cross-region read replica clusters for ElastiCache for Redis to enable low-latency reads and disaster recovery across regions. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html\&quot;&gt;Replication Across Regions Using Global Datastore&lt;/a&gt;. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;GlobalReplicationGroupIdSuffix&lt;/b&gt; is the name of the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The &lt;b&gt;PrimaryReplicationGroupId&lt;/b&gt; represents the name of the primary cluster that accepts writes and will replicate updates to the secondary cluster.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createGlobalReplicationGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> GlobalReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateGlobalReplicationGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateGlobalReplicationGroupMessage createGlobalReplicationGroupMessage, final ApiCallback<CreateGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createGlobalReplicationGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateReplicationGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createReplicationGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateReplicationGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateReplicationGroupMessage createReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReplicationGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateReplicationGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateReplicationGroupMessage createReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateReplicationGroup(Async)");
        }

        return pOSTCreateReplicationGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createReplicationGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.&lt;/p&gt; &lt;p&gt;This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore.&lt;/p&gt; &lt;p&gt;A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.&lt;/p&gt; &lt;p&gt;A Redis cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed. &lt;/p&gt; &lt;p&gt;The node or shard limit can be increased to a maximum of 500 per cluster if the Redis engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.Creating.html\&quot;&gt;Creating a Subnet Group&lt;/a&gt;. For versions below 5.0.6, the limit is 250 per cluster.&lt;/p&gt; &lt;p&gt;To request a limit increase, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\&quot;&gt;Amazon Service Limits&lt;/a&gt; and choose the limit type &lt;b&gt;Nodes per cluster per instance type&lt;/b&gt;. &lt;/p&gt; &lt;p&gt;When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis&#39; scaling. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html\&quot;&gt;Scaling ElastiCache for Redis Clusters&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createReplicationGroupMessage  (optional)
     * @return CreateReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CreateReplicationGroupResult pOSTCreateReplicationGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateReplicationGroupMessage createReplicationGroupMessage) throws ApiException {
        ApiResponse<CreateReplicationGroupResult> localVarResp = pOSTCreateReplicationGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createReplicationGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.&lt;/p&gt; &lt;p&gt;This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore.&lt;/p&gt; &lt;p&gt;A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.&lt;/p&gt; &lt;p&gt;A Redis cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed. &lt;/p&gt; &lt;p&gt;The node or shard limit can be increased to a maximum of 500 per cluster if the Redis engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.Creating.html\&quot;&gt;Creating a Subnet Group&lt;/a&gt;. For versions below 5.0.6, the limit is 250 per cluster.&lt;/p&gt; &lt;p&gt;To request a limit increase, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\&quot;&gt;Amazon Service Limits&lt;/a&gt; and choose the limit type &lt;b&gt;Nodes per cluster per instance type&lt;/b&gt;. &lt;/p&gt; &lt;p&gt;When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis&#39; scaling. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html\&quot;&gt;Scaling ElastiCache for Redis Clusters&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createReplicationGroupMessage  (optional)
     * @return ApiResponse&lt;CreateReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateReplicationGroupResult> pOSTCreateReplicationGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateReplicationGroupMessage createReplicationGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createReplicationGroupMessage, null);
        Type localVarReturnType = new TypeToken<CreateReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group.&lt;/p&gt; &lt;p&gt;This API can be used to create a standalone regional replication group or a secondary replication group associated with a Global datastore.&lt;/p&gt; &lt;p&gt;A Redis (cluster mode disabled) replication group is a collection of clusters, where one of the clusters is a read/write primary and the others are read-only replicas. Writes to the primary are asynchronously propagated to the replicas.&lt;/p&gt; &lt;p&gt;A Redis cluster-mode enabled cluster is comprised of from 1 to 90 shards (API/CLI: node groups). Each shard has a primary node and up to 5 read-only replica nodes. The configuration can range from 90 shards and 0 replicas to 15 shards and 5 replicas, which is the maximum number or replicas allowed. &lt;/p&gt; &lt;p&gt;The node or shard limit can be increased to a maximum of 500 per cluster if the Redis engine version is 5.0.6 or higher. For example, you can choose to configure a 500 node cluster that ranges between 83 shards (one primary and 5 replicas per shard) and 500 shards (single primary and no replicas). Make sure there are enough available IP addresses to accommodate the increase. Common pitfalls include the subnets in the subnet group have too small a CIDR range or the subnets are shared and heavily used by other clusters. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/SubnetGroups.Creating.html\&quot;&gt;Creating a Subnet Group&lt;/a&gt;. For versions below 5.0.6, the limit is 250 per cluster.&lt;/p&gt; &lt;p&gt;To request a limit increase, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html\&quot;&gt;Amazon Service Limits&lt;/a&gt; and choose the limit type &lt;b&gt;Nodes per cluster per instance type&lt;/b&gt;. &lt;/p&gt; &lt;p&gt;When a Redis (cluster mode disabled) replication group has been successfully created, you can add one or more read replicas to it, up to a total of 5 read replicas. If you need to increase or decrease the number of node groups (console: shards), you can avail yourself of ElastiCache for Redis&#39; scaling. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Scaling.html\&quot;&gt;Scaling ElastiCache for Redis Clusters&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createReplicationGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 496 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 497 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 498 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateReplicationGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateReplicationGroupMessage createReplicationGroupMessage, final ApiCallback<CreateReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createReplicationGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateSnapshot
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createSnapshotMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateSnapshotCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateSnapshotMessage createSnapshotMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSnapshotMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateSnapshotValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateSnapshotMessage createSnapshotMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateSnapshot(Async)");
        }

        return pOSTCreateSnapshotCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createSnapshotMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a copy of an entire cluster or replication group at a specific moment in time.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createSnapshotMessage  (optional)
     * @return CreateSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public CreateSnapshotResult pOSTCreateSnapshot(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateSnapshotMessage createSnapshotMessage) throws ApiException {
        ApiResponse<CreateSnapshotResult> localVarResp = pOSTCreateSnapshotWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createSnapshotMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a copy of an entire cluster or replication group at a specific moment in time.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createSnapshotMessage  (optional)
     * @return ApiResponse&lt;CreateSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSnapshotResult> pOSTCreateSnapshotWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateSnapshotMessage createSnapshotMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createSnapshotMessage, null);
        Type localVarReturnType = new TypeToken<CreateSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a copy of an entire cluster or replication group at a specific moment in time.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createSnapshotMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateSnapshotAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateSnapshotMessage createSnapshotMessage, final ApiCallback<CreateSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createSnapshotMessage, _callback);
        Type localVarReturnType = new TypeToken<CreateSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateUser
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createUserMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateUserCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateUserMessage createUserMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateUserValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateUserMessage createUserMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateUser(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateUser(Async)");
        }

        return pOSTCreateUserCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createUserMessage, _callback);

    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Creates a Redis user. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createUserMessage  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public User pOSTCreateUser(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateUserMessage createUserMessage) throws ApiException {
        ApiResponse<User> localVarResp = pOSTCreateUserWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createUserMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Creates a Redis user. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createUserMessage  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> pOSTCreateUserWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateUserMessage createUserMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateUserValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createUserMessage, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * For Redis engine version 6.0 onwards: Creates a Redis user. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createUserMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateUserAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateUserMessage createUserMessage, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateUserValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createUserMessage, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTCreateUserGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createUserGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateUserGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateUserGroupMessage createUserGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=CreateUserGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTCreateUserGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateUserGroupMessage createUserGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTCreateUserGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTCreateUserGroup(Async)");
        }

        return pOSTCreateUserGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createUserGroupMessage, _callback);

    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Creates a Redis user group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt; 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createUserGroupMessage  (optional)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public UserGroup pOSTCreateUserGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateUserGroupMessage createUserGroupMessage) throws ApiException {
        ApiResponse<UserGroup> localVarResp = pOSTCreateUserGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createUserGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Creates a Redis user group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt; 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createUserGroupMessage  (optional)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroup> pOSTCreateUserGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateUserGroupMessage createUserGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTCreateUserGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createUserGroupMessage, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * For Redis engine version 6.0 onwards: Creates a Redis user group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt; 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param createUserGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UserGroupAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UserGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTCreateUserGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, CreateUserGroupMessage createUserGroupMessage, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTCreateUserGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, createUserGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDecreaseNodeGroupsInGlobalReplicationGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param decreaseNodeGroupsInGlobalReplicationGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDecreaseNodeGroupsInGlobalReplicationGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DecreaseNodeGroupsInGlobalReplicationGroupMessage decreaseNodeGroupsInGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = decreaseNodeGroupsInGlobalReplicationGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DecreaseNodeGroupsInGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDecreaseNodeGroupsInGlobalReplicationGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DecreaseNodeGroupsInGlobalReplicationGroupMessage decreaseNodeGroupsInGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDecreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDecreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        return pOSTDecreaseNodeGroupsInGlobalReplicationGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, decreaseNodeGroupsInGlobalReplicationGroupMessage, _callback);

    }

    /**
     * 
     * Decreases the number of node groups in a Global datastore
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param decreaseNodeGroupsInGlobalReplicationGroupMessage  (optional)
     * @return DecreaseNodeGroupsInGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DecreaseNodeGroupsInGlobalReplicationGroupResult pOSTDecreaseNodeGroupsInGlobalReplicationGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DecreaseNodeGroupsInGlobalReplicationGroupMessage decreaseNodeGroupsInGlobalReplicationGroupMessage) throws ApiException {
        ApiResponse<DecreaseNodeGroupsInGlobalReplicationGroupResult> localVarResp = pOSTDecreaseNodeGroupsInGlobalReplicationGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, decreaseNodeGroupsInGlobalReplicationGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Decreases the number of node groups in a Global datastore
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param decreaseNodeGroupsInGlobalReplicationGroupMessage  (optional)
     * @return ApiResponse&lt;DecreaseNodeGroupsInGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DecreaseNodeGroupsInGlobalReplicationGroupResult> pOSTDecreaseNodeGroupsInGlobalReplicationGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DecreaseNodeGroupsInGlobalReplicationGroupMessage decreaseNodeGroupsInGlobalReplicationGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDecreaseNodeGroupsInGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, decreaseNodeGroupsInGlobalReplicationGroupMessage, null);
        Type localVarReturnType = new TypeToken<DecreaseNodeGroupsInGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Decreases the number of node groups in a Global datastore
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param decreaseNodeGroupsInGlobalReplicationGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDecreaseNodeGroupsInGlobalReplicationGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DecreaseNodeGroupsInGlobalReplicationGroupMessage decreaseNodeGroupsInGlobalReplicationGroupMessage, final ApiCallback<DecreaseNodeGroupsInGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDecreaseNodeGroupsInGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, decreaseNodeGroupsInGlobalReplicationGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<DecreaseNodeGroupsInGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDecreaseReplicaCount
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param decreaseReplicaCountMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDecreaseReplicaCountCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DecreaseReplicaCountMessage decreaseReplicaCountMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = decreaseReplicaCountMessage;

        // create path and map variables
        String localVarPath = "/#Action=DecreaseReplicaCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDecreaseReplicaCountValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DecreaseReplicaCountMessage decreaseReplicaCountMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDecreaseReplicaCount(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDecreaseReplicaCount(Async)");
        }

        return pOSTDecreaseReplicaCountCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, decreaseReplicaCountMessage, _callback);

    }

    /**
     * 
     * Dynamically decreases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param decreaseReplicaCountMessage  (optional)
     * @return DecreaseReplicaCountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DecreaseReplicaCountResult pOSTDecreaseReplicaCount(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DecreaseReplicaCountMessage decreaseReplicaCountMessage) throws ApiException {
        ApiResponse<DecreaseReplicaCountResult> localVarResp = pOSTDecreaseReplicaCountWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, decreaseReplicaCountMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Dynamically decreases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param decreaseReplicaCountMessage  (optional)
     * @return ApiResponse&lt;DecreaseReplicaCountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DecreaseReplicaCountResult> pOSTDecreaseReplicaCountWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DecreaseReplicaCountMessage decreaseReplicaCountMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDecreaseReplicaCountValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, decreaseReplicaCountMessage, null);
        Type localVarReturnType = new TypeToken<DecreaseReplicaCountResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Dynamically decreases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param decreaseReplicaCountMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDecreaseReplicaCountAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DecreaseReplicaCountMessage decreaseReplicaCountMessage, final ApiCallback<DecreaseReplicaCountResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDecreaseReplicaCountValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, decreaseReplicaCountMessage, _callback);
        Type localVarReturnType = new TypeToken<DecreaseReplicaCountResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteCacheCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteCacheClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheClusterMessage deleteCacheClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteCacheClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteCacheCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteCacheClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheClusterMessage deleteCacheClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteCacheCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteCacheCluster(Async)");
        }

        return pOSTDeleteCacheClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a previously provisioned cluster. &lt;code&gt;DeleteCacheCluster&lt;/code&gt; deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.&lt;/p&gt; &lt;p&gt;This operation is not valid for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode enabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode disabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the last read replica of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the primary node of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A node group (shard) that has Multi-AZ mode enabled&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster from a Redis (cluster mode enabled) replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is not in the &lt;code&gt;available&lt;/code&gt; state&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheClusterMessage  (optional)
     * @return DeleteCacheClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCacheClusterResult pOSTDeleteCacheCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheClusterMessage deleteCacheClusterMessage) throws ApiException {
        ApiResponse<DeleteCacheClusterResult> localVarResp = pOSTDeleteCacheClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes a previously provisioned cluster. &lt;code&gt;DeleteCacheCluster&lt;/code&gt; deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.&lt;/p&gt; &lt;p&gt;This operation is not valid for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode enabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode disabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the last read replica of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the primary node of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A node group (shard) that has Multi-AZ mode enabled&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster from a Redis (cluster mode enabled) replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is not in the &lt;code&gt;available&lt;/code&gt; state&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheClusterMessage  (optional)
     * @return ApiResponse&lt;DeleteCacheClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteCacheClusterResult> pOSTDeleteCacheClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheClusterMessage deleteCacheClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteCacheClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheClusterMessage, null);
        Type localVarReturnType = new TypeToken<DeleteCacheClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a previously provisioned cluster. &lt;code&gt;DeleteCacheCluster&lt;/code&gt; deletes all associated cache nodes, node endpoints and the cluster itself. When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the cluster; you cannot cancel or revert this operation.&lt;/p&gt; &lt;p&gt;This operation is not valid for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode enabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redis (cluster mode disabled) clusters&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the last read replica of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is the primary node of a replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A node group (shard) that has Multi-AZ mode enabled&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster from a Redis (cluster mode enabled) replication group&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A cluster that is not in the &lt;code&gt;available&lt;/code&gt; state&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteCacheClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheClusterMessage deleteCacheClusterMessage, final ApiCallback<DeleteCacheClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteCacheClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteCacheClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteCacheParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteCacheParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheParameterGroupMessage deleteCacheParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteCacheParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteCacheParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteCacheParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheParameterGroupMessage deleteCacheParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteCacheParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteCacheParameterGroup(Async)");
        }

        return pOSTDeleteCacheParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheParameterGroupMessage, _callback);

    }

    /**
     * 
     * Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheParameterGroupMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteCacheParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheParameterGroupMessage deleteCacheParameterGroupMessage) throws ApiException {
        pOSTDeleteCacheParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheParameterGroupMessage);
    }

    /**
     * 
     * Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheParameterGroupMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteCacheParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheParameterGroupMessage deleteCacheParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteCacheParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheParameterGroupMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified cache parameter group. You cannot delete a cache parameter group if it is associated with any cache clusters. You cannot delete the default cache parameter groups in your account.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteCacheParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheParameterGroupMessage deleteCacheParameterGroupMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteCacheParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheParameterGroupMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteCacheSecurityGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheSecurityGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteCacheSecurityGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheSecurityGroupMessage deleteCacheSecurityGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteCacheSecurityGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteCacheSecurityGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteCacheSecurityGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheSecurityGroupMessage deleteCacheSecurityGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteCacheSecurityGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteCacheSecurityGroup(Async)");
        }

        return pOSTDeleteCacheSecurityGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheSecurityGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a cache security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a cache security group if it is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheSecurityGroupMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteCacheSecurityGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheSecurityGroupMessage deleteCacheSecurityGroupMessage) throws ApiException {
        pOSTDeleteCacheSecurityGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheSecurityGroupMessage);
    }

    /**
     * 
     * &lt;p&gt;Deletes a cache security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a cache security group if it is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheSecurityGroupMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteCacheSecurityGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheSecurityGroupMessage deleteCacheSecurityGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteCacheSecurityGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheSecurityGroupMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a cache security group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a cache security group if it is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheSecurityGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteCacheSecurityGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheSecurityGroupMessage deleteCacheSecurityGroupMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteCacheSecurityGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheSecurityGroupMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteCacheSubnetGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheSubnetGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupInUse </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteCacheSubnetGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheSubnetGroupMessage deleteCacheSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteCacheSubnetGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteCacheSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteCacheSubnetGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheSubnetGroupMessage deleteCacheSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteCacheSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteCacheSubnetGroup(Async)");
        }

        return pOSTDeleteCacheSubnetGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheSubnetGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a cache subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a default cache subnet group or one that is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheSubnetGroupMessage  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupInUse </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public void pOSTDeleteCacheSubnetGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheSubnetGroupMessage deleteCacheSubnetGroupMessage) throws ApiException {
        pOSTDeleteCacheSubnetGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheSubnetGroupMessage);
    }

    /**
     * 
     * &lt;p&gt;Deletes a cache subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a default cache subnet group or one that is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheSubnetGroupMessage  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupInUse </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pOSTDeleteCacheSubnetGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheSubnetGroupMessage deleteCacheSubnetGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteCacheSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheSubnetGroupMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a cache subnet group.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You cannot delete a default cache subnet group or one that is associated with any clusters.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteCacheSubnetGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupInUse </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteCacheSubnetGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteCacheSubnetGroupMessage deleteCacheSubnetGroupMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteCacheSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteCacheSubnetGroupMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteGlobalReplicationGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteGlobalReplicationGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteGlobalReplicationGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalReplicationGroupMessage deleteGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteGlobalReplicationGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteGlobalReplicationGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalReplicationGroupMessage deleteGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteGlobalReplicationGroup(Async)");
        }

        return pOSTDeleteGlobalReplicationGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalReplicationGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deleting a Global datastore is a two-step process: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;First, you must &lt;a&gt;DisassociateGlobalReplicationGroup&lt;/a&gt; to remove the secondary clusters in the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Once the Global datastore contains only the primary cluster, you can use the &lt;code&gt;DeleteGlobalReplicationGroup&lt;/code&gt; API to delete the Global datastore while retainining the primary cluster using &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteGlobalReplicationGroupMessage  (optional)
     * @return DeleteGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGlobalReplicationGroupResult pOSTDeleteGlobalReplicationGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalReplicationGroupMessage deleteGlobalReplicationGroupMessage) throws ApiException {
        ApiResponse<DeleteGlobalReplicationGroupResult> localVarResp = pOSTDeleteGlobalReplicationGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalReplicationGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deleting a Global datastore is a two-step process: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;First, you must &lt;a&gt;DisassociateGlobalReplicationGroup&lt;/a&gt; to remove the secondary clusters in the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Once the Global datastore contains only the primary cluster, you can use the &lt;code&gt;DeleteGlobalReplicationGroup&lt;/code&gt; API to delete the Global datastore while retainining the primary cluster using &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteGlobalReplicationGroupMessage  (optional)
     * @return ApiResponse&lt;DeleteGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteGlobalReplicationGroupResult> pOSTDeleteGlobalReplicationGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalReplicationGroupMessage deleteGlobalReplicationGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalReplicationGroupMessage, null);
        Type localVarReturnType = new TypeToken<DeleteGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deleting a Global datastore is a two-step process: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;First, you must &lt;a&gt;DisassociateGlobalReplicationGroup&lt;/a&gt; to remove the secondary clusters in the Global datastore.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Once the Global datastore contains only the primary cluster, you can use the &lt;code&gt;DeleteGlobalReplicationGroup&lt;/code&gt; API to delete the Global datastore while retainining the primary cluster using &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Since the Global Datastore has only a primary cluster, you can delete the Global Datastore while retaining the primary by setting &lt;code&gt;RetainPrimaryReplicationGroup&#x3D;true&lt;/code&gt;. The primary cluster is never deleted when deleting a Global Datastore. It can only be deleted when it no longer is associated with any Global Datastore.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteGlobalReplicationGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteGlobalReplicationGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteGlobalReplicationGroupMessage deleteGlobalReplicationGroupMessage, final ApiCallback<DeleteGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteGlobalReplicationGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteReplicationGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteReplicationGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteReplicationGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteReplicationGroupMessage deleteReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteReplicationGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteReplicationGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteReplicationGroupMessage deleteReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteReplicationGroup(Async)");
        }

        return pOSTDeleteReplicationGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteReplicationGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting &lt;code&gt;RetainPrimaryCluster&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteReplicationGroupMessage  (optional)
     * @return DeleteReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteReplicationGroupResult pOSTDeleteReplicationGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteReplicationGroupMessage deleteReplicationGroupMessage) throws ApiException {
        ApiResponse<DeleteReplicationGroupResult> localVarResp = pOSTDeleteReplicationGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteReplicationGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting &lt;code&gt;RetainPrimaryCluster&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteReplicationGroupMessage  (optional)
     * @return ApiResponse&lt;DeleteReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteReplicationGroupResult> pOSTDeleteReplicationGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteReplicationGroupMessage deleteReplicationGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteReplicationGroupMessage, null);
        Type localVarReturnType = new TypeToken<DeleteReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an existing replication group. By default, this operation deletes the entire replication group, including the primary/primaries and all of the read replicas. If the replication group has only one primary, you can optionally delete only the read replicas, while retaining the primary by setting &lt;code&gt;RetainPrimaryCluster&#x3D;true&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;When you receive a successful response from this operation, Amazon ElastiCache immediately begins deleting the selected resources; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteReplicationGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SnapshotAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> SnapshotFeatureNotSupportedFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SnapshotQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteReplicationGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteReplicationGroupMessage deleteReplicationGroupMessage, final ApiCallback<DeleteReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteReplicationGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteSnapshot
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteSnapshotMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteSnapshotCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteSnapshotMessage deleteSnapshotMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteSnapshotMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteSnapshotValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteSnapshotMessage deleteSnapshotMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteSnapshot(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteSnapshot(Async)");
        }

        return pOSTDeleteSnapshotCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSnapshotMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteSnapshotMessage  (optional)
     * @return DeleteSnapshotResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSnapshotResult pOSTDeleteSnapshot(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteSnapshotMessage deleteSnapshotMessage) throws ApiException {
        ApiResponse<DeleteSnapshotResult> localVarResp = pOSTDeleteSnapshotWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSnapshotMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteSnapshotMessage  (optional)
     * @return ApiResponse&lt;DeleteSnapshotResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteSnapshotResult> pOSTDeleteSnapshotWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteSnapshotMessage deleteSnapshotMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSnapshotMessage, null);
        Type localVarReturnType = new TypeToken<DeleteSnapshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an existing snapshot. When you receive a successful response from this operation, ElastiCache immediately begins deleting the snapshot; you cannot cancel or revert this operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteSnapshotMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidSnapshotStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteSnapshotAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteSnapshotMessage deleteSnapshotMessage, final ApiCallback<DeleteSnapshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteSnapshotValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteSnapshotMessage, _callback);
        Type localVarReturnType = new TypeToken<DeleteSnapshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteUser
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteUserMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserAssociatedToUserGroupFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteUserCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteUserMessage deleteUserMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteUserMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteUserValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteUserMessage deleteUserMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteUser(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteUser(Async)");
        }

        return pOSTDeleteUserCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteUserMessage, _callback);

    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteUserMessage  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserAssociatedToUserGroupFault </td><td>  -  </td></tr>
     </table>
     */
    public User pOSTDeleteUser(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteUserMessage deleteUserMessage) throws ApiException {
        ApiResponse<User> localVarResp = pOSTDeleteUserWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteUserMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteUserMessage  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserAssociatedToUserGroupFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> pOSTDeleteUserWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteUserMessage deleteUserMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteUserValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteUserMessage, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * For Redis engine version 6.0 onwards: Deletes a user. The user will be removed from all user groups and in turn removed from all replication groups. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteUserMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserAssociatedToUserGroupFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteUserAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteUserMessage deleteUserMessage, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteUserValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteUserMessage, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDeleteUserGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteUserGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteUserGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteUserGroupMessage deleteUserGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteUserGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DeleteUserGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDeleteUserGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteUserGroupMessage deleteUserGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDeleteUserGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDeleteUserGroup(Async)");
        }

        return pOSTDeleteUserGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteUserGroupMessage, _callback);

    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteUserGroupMessage  (optional)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public UserGroup pOSTDeleteUserGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteUserGroupMessage deleteUserGroupMessage) throws ApiException {
        ApiResponse<UserGroup> localVarResp = pOSTDeleteUserGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteUserGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * For Redis engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteUserGroupMessage  (optional)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroup> pOSTDeleteUserGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteUserGroupMessage deleteUserGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDeleteUserGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteUserGroupMessage, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * For Redis engine version 6.0 onwards: Deletes a user group. The user group must first be disassociated from the replication group before it can be deleted. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.RBAC.html\&quot;&gt;Using Role Based Access Control (RBAC)&lt;/a&gt;. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param deleteUserGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDeleteUserGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DeleteUserGroupMessage deleteUserGroupMessage, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDeleteUserGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, deleteUserGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeCacheClusters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheClustersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCacheClustersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheClustersMessage describeCacheClustersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeCacheClustersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCacheClusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeCacheClustersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheClustersMessage describeCacheClustersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeCacheClusters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeCacheClusters(Async)");
        }

        return pOSTDescribeCacheClustersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheClustersMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.&lt;/p&gt; &lt;p&gt;By default, abbreviated information about the clusters is returned. You can use the optional &lt;i&gt;ShowCacheNodeInfo&lt;/i&gt; flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;creating&lt;/i&gt; state, only cluster-level information is displayed until all of the nodes are successfully provisioned.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;deleting&lt;/i&gt; state, only cluster-level information is displayed.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is &lt;i&gt;available&lt;/i&gt;, the cluster is ready for use.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheClustersMessage  (optional)
     * @return CacheClusterMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CacheClusterMessage pOSTDescribeCacheClusters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheClustersMessage describeCacheClustersMessage) throws ApiException {
        ApiResponse<CacheClusterMessage> localVarResp = pOSTDescribeCacheClustersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheClustersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.&lt;/p&gt; &lt;p&gt;By default, abbreviated information about the clusters is returned. You can use the optional &lt;i&gt;ShowCacheNodeInfo&lt;/i&gt; flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;creating&lt;/i&gt; state, only cluster-level information is displayed until all of the nodes are successfully provisioned.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;deleting&lt;/i&gt; state, only cluster-level information is displayed.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is &lt;i&gt;available&lt;/i&gt;, the cluster is ready for use.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheClustersMessage  (optional)
     * @return ApiResponse&lt;CacheClusterMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheClusterMessage> pOSTDescribeCacheClustersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheClustersMessage describeCacheClustersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeCacheClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheClustersMessage, null);
        Type localVarReturnType = new TypeToken<CacheClusterMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about all provisioned clusters if no cluster identifier is specified, or about a specific cache cluster if a cluster identifier is supplied.&lt;/p&gt; &lt;p&gt;By default, abbreviated information about the clusters is returned. You can use the optional &lt;i&gt;ShowCacheNodeInfo&lt;/i&gt; flag to retrieve detailed information about the cache nodes associated with the clusters. These details include the DNS address and port for the cache node endpoint.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;creating&lt;/i&gt; state, only cluster-level information is displayed until all of the nodes are successfully provisioned.&lt;/p&gt; &lt;p&gt;If the cluster is in the &lt;i&gt;deleting&lt;/i&gt; state, only cluster-level information is displayed.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being added to the cluster, node endpoint information and creation time for the additional nodes are not displayed until they are completely provisioned. When the cluster state is &lt;i&gt;available&lt;/i&gt;, the cluster is ready for use.&lt;/p&gt; &lt;p&gt;If cache nodes are currently being removed from the cluster, no endpoint information for the removed nodes is displayed.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheClustersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCacheClustersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheClustersMessage describeCacheClustersMessage, final ApiCallback<CacheClusterMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeCacheClustersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheClustersMessage, _callback);
        Type localVarReturnType = new TypeToken<CacheClusterMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeCacheEngineVersions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheEngineVersionsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCacheEngineVersionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheEngineVersionsMessage describeCacheEngineVersionsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeCacheEngineVersionsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCacheEngineVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeCacheEngineVersionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheEngineVersionsMessage describeCacheEngineVersionsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeCacheEngineVersions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeCacheEngineVersions(Async)");
        }

        return pOSTDescribeCacheEngineVersionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheEngineVersionsMessage, _callback);

    }

    /**
     * 
     * Returns a list of the available cache engines and their versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheEngineVersionsMessage  (optional)
     * @return CacheEngineVersionMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public CacheEngineVersionMessage pOSTDescribeCacheEngineVersions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheEngineVersionsMessage describeCacheEngineVersionsMessage) throws ApiException {
        ApiResponse<CacheEngineVersionMessage> localVarResp = pOSTDescribeCacheEngineVersionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheEngineVersionsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of the available cache engines and their versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheEngineVersionsMessage  (optional)
     * @return ApiResponse&lt;CacheEngineVersionMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheEngineVersionMessage> pOSTDescribeCacheEngineVersionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheEngineVersionsMessage describeCacheEngineVersionsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeCacheEngineVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheEngineVersionsMessage, null);
        Type localVarReturnType = new TypeToken<CacheEngineVersionMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of the available cache engines and their versions.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheEngineVersionsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCacheEngineVersionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheEngineVersionsMessage describeCacheEngineVersionsMessage, final ApiCallback<CacheEngineVersionMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeCacheEngineVersionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheEngineVersionsMessage, _callback);
        Type localVarReturnType = new TypeToken<CacheEngineVersionMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeCacheParameterGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheParameterGroupsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCacheParameterGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheParameterGroupsMessage describeCacheParameterGroupsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeCacheParameterGroupsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCacheParameterGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeCacheParameterGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheParameterGroupsMessage describeCacheParameterGroupsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeCacheParameterGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeCacheParameterGroups(Async)");
        }

        return pOSTDescribeCacheParameterGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheParameterGroupsMessage, _callback);

    }

    /**
     * 
     * Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheParameterGroupsMessage  (optional)
     * @return CacheParameterGroupsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CacheParameterGroupsMessage pOSTDescribeCacheParameterGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheParameterGroupsMessage describeCacheParameterGroupsMessage) throws ApiException {
        ApiResponse<CacheParameterGroupsMessage> localVarResp = pOSTDescribeCacheParameterGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheParameterGroupsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheParameterGroupsMessage  (optional)
     * @return ApiResponse&lt;CacheParameterGroupsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheParameterGroupsMessage> pOSTDescribeCacheParameterGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheParameterGroupsMessage describeCacheParameterGroupsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeCacheParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheParameterGroupsMessage, null);
        Type localVarReturnType = new TypeToken<CacheParameterGroupsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of cache parameter group descriptions. If a cache parameter group name is specified, the list contains only the descriptions for that group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheParameterGroupsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCacheParameterGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheParameterGroupsMessage describeCacheParameterGroupsMessage, final ApiCallback<CacheParameterGroupsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeCacheParameterGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheParameterGroupsMessage, _callback);
        Type localVarReturnType = new TypeToken<CacheParameterGroupsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeCacheParameters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheParametersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCacheParametersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheParametersMessage describeCacheParametersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeCacheParametersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCacheParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeCacheParametersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheParametersMessage describeCacheParametersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeCacheParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeCacheParameters(Async)");
        }

        return pOSTDescribeCacheParametersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheParametersMessage, _callback);

    }

    /**
     * 
     * Returns the detailed parameter list for a particular cache parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheParametersMessage  (optional)
     * @return CacheParameterGroupDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CacheParameterGroupDetails pOSTDescribeCacheParameters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheParametersMessage describeCacheParametersMessage) throws ApiException {
        ApiResponse<CacheParameterGroupDetails> localVarResp = pOSTDescribeCacheParametersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheParametersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the detailed parameter list for a particular cache parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheParametersMessage  (optional)
     * @return ApiResponse&lt;CacheParameterGroupDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheParameterGroupDetails> pOSTDescribeCacheParametersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheParametersMessage describeCacheParametersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeCacheParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheParametersMessage, null);
        Type localVarReturnType = new TypeToken<CacheParameterGroupDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the detailed parameter list for a particular cache parameter group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheParametersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCacheParametersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheParametersMessage describeCacheParametersMessage, final ApiCallback<CacheParameterGroupDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeCacheParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheParametersMessage, _callback);
        Type localVarReturnType = new TypeToken<CacheParameterGroupDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeCacheSecurityGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheSecurityGroupsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCacheSecurityGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheSecurityGroupsMessage describeCacheSecurityGroupsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeCacheSecurityGroupsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCacheSecurityGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeCacheSecurityGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheSecurityGroupsMessage describeCacheSecurityGroupsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeCacheSecurityGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeCacheSecurityGroups(Async)");
        }

        return pOSTDescribeCacheSecurityGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheSecurityGroupsMessage, _callback);

    }

    /**
     * 
     * Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheSecurityGroupsMessage  (optional)
     * @return CacheSecurityGroupMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public CacheSecurityGroupMessage pOSTDescribeCacheSecurityGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheSecurityGroupsMessage describeCacheSecurityGroupsMessage) throws ApiException {
        ApiResponse<CacheSecurityGroupMessage> localVarResp = pOSTDescribeCacheSecurityGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheSecurityGroupsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheSecurityGroupsMessage  (optional)
     * @return ApiResponse&lt;CacheSecurityGroupMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheSecurityGroupMessage> pOSTDescribeCacheSecurityGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheSecurityGroupsMessage describeCacheSecurityGroupsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeCacheSecurityGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheSecurityGroupsMessage, null);
        Type localVarReturnType = new TypeToken<CacheSecurityGroupMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of cache security group descriptions. If a cache security group name is specified, the list contains only the description of that group. This applicable only when you have ElastiCache in Classic setup 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheSecurityGroupsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCacheSecurityGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheSecurityGroupsMessage describeCacheSecurityGroupsMessage, final ApiCallback<CacheSecurityGroupMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeCacheSecurityGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheSecurityGroupsMessage, _callback);
        Type localVarReturnType = new TypeToken<CacheSecurityGroupMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeCacheSubnetGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheSubnetGroupsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCacheSubnetGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheSubnetGroupsMessage describeCacheSubnetGroupsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeCacheSubnetGroupsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeCacheSubnetGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeCacheSubnetGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheSubnetGroupsMessage describeCacheSubnetGroupsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeCacheSubnetGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeCacheSubnetGroups(Async)");
        }

        return pOSTDescribeCacheSubnetGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheSubnetGroupsMessage, _callback);

    }

    /**
     * 
     * Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheSubnetGroupsMessage  (optional)
     * @return CacheSubnetGroupMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public CacheSubnetGroupMessage pOSTDescribeCacheSubnetGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheSubnetGroupsMessage describeCacheSubnetGroupsMessage) throws ApiException {
        ApiResponse<CacheSubnetGroupMessage> localVarResp = pOSTDescribeCacheSubnetGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheSubnetGroupsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheSubnetGroupsMessage  (optional)
     * @return ApiResponse&lt;CacheSubnetGroupMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheSubnetGroupMessage> pOSTDescribeCacheSubnetGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheSubnetGroupsMessage describeCacheSubnetGroupsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeCacheSubnetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheSubnetGroupsMessage, null);
        Type localVarReturnType = new TypeToken<CacheSubnetGroupMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of cache subnet group descriptions. If a subnet group name is specified, the list contains only the description of that group. This is applicable only when you have ElastiCache in VPC setup. All ElastiCache clusters now launch in VPC by default. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeCacheSubnetGroupsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeCacheSubnetGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeCacheSubnetGroupsMessage describeCacheSubnetGroupsMessage, final ApiCallback<CacheSubnetGroupMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeCacheSubnetGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeCacheSubnetGroupsMessage, _callback);
        Type localVarReturnType = new TypeToken<CacheSubnetGroupMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEngineDefaultParameters
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEngineDefaultParametersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEngineDefaultParametersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEngineDefaultParametersMessage describeEngineDefaultParametersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEngineDefaultParametersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEngineDefaultParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEngineDefaultParametersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEngineDefaultParametersMessage describeEngineDefaultParametersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEngineDefaultParameters(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEngineDefaultParameters(Async)");
        }

        return pOSTDescribeEngineDefaultParametersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEngineDefaultParametersMessage, _callback);

    }

    /**
     * 
     * Returns the default engine and system parameter information for the specified cache engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEngineDefaultParametersMessage  (optional)
     * @return DescribeEngineDefaultParametersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeEngineDefaultParametersResult pOSTDescribeEngineDefaultParameters(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEngineDefaultParametersMessage describeEngineDefaultParametersMessage) throws ApiException {
        ApiResponse<DescribeEngineDefaultParametersResult> localVarResp = pOSTDescribeEngineDefaultParametersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEngineDefaultParametersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the default engine and system parameter information for the specified cache engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEngineDefaultParametersMessage  (optional)
     * @return ApiResponse&lt;DescribeEngineDefaultParametersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeEngineDefaultParametersResult> pOSTDescribeEngineDefaultParametersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEngineDefaultParametersMessage describeEngineDefaultParametersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEngineDefaultParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEngineDefaultParametersMessage, null);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultParametersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the default engine and system parameter information for the specified cache engine.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEngineDefaultParametersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEngineDefaultParametersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEngineDefaultParametersMessage describeEngineDefaultParametersMessage, final ApiCallback<DescribeEngineDefaultParametersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEngineDefaultParametersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEngineDefaultParametersMessage, _callback);
        Type localVarReturnType = new TypeToken<DescribeEngineDefaultParametersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeEvents
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeEventsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeEvents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeEventsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeEvents(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeEvents(Async)");
        }

        return pOSTDescribeEventsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.&lt;/p&gt; &lt;p&gt;By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days&#39; worth of events if necessary.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @return EventsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public EventsMessage pOSTDescribeEvents(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage) throws ApiException {
        ApiResponse<EventsMessage> localVarResp = pOSTDescribeEventsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.&lt;/p&gt; &lt;p&gt;By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days&#39; worth of events if necessary.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @return ApiResponse&lt;EventsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsMessage> pOSTDescribeEventsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage, null);
        Type localVarReturnType = new TypeToken<EventsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns events related to clusters, cache security groups, and cache parameter groups. You can obtain events specific to a particular cluster, cache security group, or cache parameter group by providing the name as a parameter.&lt;/p&gt; &lt;p&gt;By default, only the events occurring within the last hour are returned; however, you can retrieve up to 14 days&#39; worth of events if necessary.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeEventsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeEventsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeEventsMessage describeEventsMessage, final ApiCallback<EventsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeEventsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeEventsMessage, _callback);
        Type localVarReturnType = new TypeToken<EventsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeGlobalReplicationGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeGlobalReplicationGroupsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeGlobalReplicationGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalReplicationGroupsMessage describeGlobalReplicationGroupsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeGlobalReplicationGroupsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeGlobalReplicationGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeGlobalReplicationGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalReplicationGroupsMessage describeGlobalReplicationGroupsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeGlobalReplicationGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeGlobalReplicationGroups(Async)");
        }

        return pOSTDescribeGlobalReplicationGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalReplicationGroupsMessage, _callback);

    }

    /**
     * 
     * Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeGlobalReplicationGroupsMessage  (optional)
     * @return DescribeGlobalReplicationGroupsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeGlobalReplicationGroupsResult pOSTDescribeGlobalReplicationGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalReplicationGroupsMessage describeGlobalReplicationGroupsMessage) throws ApiException {
        ApiResponse<DescribeGlobalReplicationGroupsResult> localVarResp = pOSTDescribeGlobalReplicationGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalReplicationGroupsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeGlobalReplicationGroupsMessage  (optional)
     * @return ApiResponse&lt;DescribeGlobalReplicationGroupsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeGlobalReplicationGroupsResult> pOSTDescribeGlobalReplicationGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalReplicationGroupsMessage describeGlobalReplicationGroupsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeGlobalReplicationGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalReplicationGroupsMessage, null);
        Type localVarReturnType = new TypeToken<DescribeGlobalReplicationGroupsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about a particular global replication group. If no identifier is specified, returns information about all Global datastores. 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeGlobalReplicationGroupsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeGlobalReplicationGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeGlobalReplicationGroupsMessage describeGlobalReplicationGroupsMessage, final ApiCallback<DescribeGlobalReplicationGroupsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeGlobalReplicationGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeGlobalReplicationGroupsMessage, _callback);
        Type localVarReturnType = new TypeToken<DescribeGlobalReplicationGroupsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeReplicationGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeReplicationGroupsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeReplicationGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReplicationGroupsMessage describeReplicationGroupsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeReplicationGroupsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeReplicationGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeReplicationGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReplicationGroupsMessage describeReplicationGroupsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeReplicationGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeReplicationGroups(Async)");
        }

        return pOSTDescribeReplicationGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReplicationGroupsMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about a particular replication group. If no identifier is specified, &lt;code&gt;DescribeReplicationGroups&lt;/code&gt; returns information about all replication groups.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeReplicationGroupsMessage  (optional)
     * @return ReplicationGroupMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ReplicationGroupMessage pOSTDescribeReplicationGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReplicationGroupsMessage describeReplicationGroupsMessage) throws ApiException {
        ApiResponse<ReplicationGroupMessage> localVarResp = pOSTDescribeReplicationGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReplicationGroupsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about a particular replication group. If no identifier is specified, &lt;code&gt;DescribeReplicationGroups&lt;/code&gt; returns information about all replication groups.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeReplicationGroupsMessage  (optional)
     * @return ApiResponse&lt;ReplicationGroupMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplicationGroupMessage> pOSTDescribeReplicationGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReplicationGroupsMessage describeReplicationGroupsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeReplicationGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReplicationGroupsMessage, null);
        Type localVarReturnType = new TypeToken<ReplicationGroupMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about a particular replication group. If no identifier is specified, &lt;code&gt;DescribeReplicationGroups&lt;/code&gt; returns information about all replication groups.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeReplicationGroupsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeReplicationGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReplicationGroupsMessage describeReplicationGroupsMessage, final ApiCallback<ReplicationGroupMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeReplicationGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReplicationGroupsMessage, _callback);
        Type localVarReturnType = new TypeToken<ReplicationGroupMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeReservedCacheNodes
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeReservedCacheNodesMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeReservedCacheNodesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReservedCacheNodesMessage describeReservedCacheNodesMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeReservedCacheNodesMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeReservedCacheNodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeReservedCacheNodesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReservedCacheNodesMessage describeReservedCacheNodesMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeReservedCacheNodes(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeReservedCacheNodes(Async)");
        }

        return pOSTDescribeReservedCacheNodesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedCacheNodesMessage, _callback);

    }

    /**
     * 
     * Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeReservedCacheNodesMessage  (optional)
     * @return ReservedCacheNodeMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ReservedCacheNodeMessage pOSTDescribeReservedCacheNodes(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReservedCacheNodesMessage describeReservedCacheNodesMessage) throws ApiException {
        ApiResponse<ReservedCacheNodeMessage> localVarResp = pOSTDescribeReservedCacheNodesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedCacheNodesMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeReservedCacheNodesMessage  (optional)
     * @return ApiResponse&lt;ReservedCacheNodeMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservedCacheNodeMessage> pOSTDescribeReservedCacheNodesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReservedCacheNodesMessage describeReservedCacheNodesMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeReservedCacheNodesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedCacheNodesMessage, null);
        Type localVarReturnType = new TypeToken<ReservedCacheNodeMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns information about reserved cache nodes for this account, or about a specified reserved cache node.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeReservedCacheNodesMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeReservedCacheNodesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReservedCacheNodesMessage describeReservedCacheNodesMessage, final ApiCallback<ReservedCacheNodeMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeReservedCacheNodesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedCacheNodesMessage, _callback);
        Type localVarReturnType = new TypeToken<ReservedCacheNodeMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeReservedCacheNodesOfferings
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeReservedCacheNodesOfferingsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeReservedCacheNodesOfferingsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReservedCacheNodesOfferingsMessage describeReservedCacheNodesOfferingsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeReservedCacheNodesOfferingsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeReservedCacheNodesOfferings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeReservedCacheNodesOfferingsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReservedCacheNodesOfferingsMessage describeReservedCacheNodesOfferingsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeReservedCacheNodesOfferings(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeReservedCacheNodesOfferings(Async)");
        }

        return pOSTDescribeReservedCacheNodesOfferingsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedCacheNodesOfferingsMessage, _callback);

    }

    /**
     * 
     * Lists available reserved cache node offerings.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeReservedCacheNodesOfferingsMessage  (optional)
     * @return ReservedCacheNodesOfferingMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ReservedCacheNodesOfferingMessage pOSTDescribeReservedCacheNodesOfferings(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReservedCacheNodesOfferingsMessage describeReservedCacheNodesOfferingsMessage) throws ApiException {
        ApiResponse<ReservedCacheNodesOfferingMessage> localVarResp = pOSTDescribeReservedCacheNodesOfferingsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedCacheNodesOfferingsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists available reserved cache node offerings.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeReservedCacheNodesOfferingsMessage  (optional)
     * @return ApiResponse&lt;ReservedCacheNodesOfferingMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReservedCacheNodesOfferingMessage> pOSTDescribeReservedCacheNodesOfferingsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReservedCacheNodesOfferingsMessage describeReservedCacheNodesOfferingsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeReservedCacheNodesOfferingsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedCacheNodesOfferingsMessage, null);
        Type localVarReturnType = new TypeToken<ReservedCacheNodesOfferingMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists available reserved cache node offerings.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeReservedCacheNodesOfferingsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeReservedCacheNodesOfferingsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeReservedCacheNodesOfferingsMessage describeReservedCacheNodesOfferingsMessage, final ApiCallback<ReservedCacheNodesOfferingMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeReservedCacheNodesOfferingsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeReservedCacheNodesOfferingsMessage, _callback);
        Type localVarReturnType = new TypeToken<ReservedCacheNodesOfferingMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeServiceUpdates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeServiceUpdatesMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeServiceUpdatesCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeServiceUpdatesMessage describeServiceUpdatesMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeServiceUpdatesMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeServiceUpdates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeServiceUpdatesValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeServiceUpdatesMessage describeServiceUpdatesMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeServiceUpdates(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeServiceUpdates(Async)");
        }

        return pOSTDescribeServiceUpdatesCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeServiceUpdatesMessage, _callback);

    }

    /**
     * 
     * Returns details of the service updates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeServiceUpdatesMessage  (optional)
     * @return ServiceUpdatesMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ServiceUpdatesMessage pOSTDescribeServiceUpdates(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeServiceUpdatesMessage describeServiceUpdatesMessage) throws ApiException {
        ApiResponse<ServiceUpdatesMessage> localVarResp = pOSTDescribeServiceUpdatesWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeServiceUpdatesMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns details of the service updates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeServiceUpdatesMessage  (optional)
     * @return ApiResponse&lt;ServiceUpdatesMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceUpdatesMessage> pOSTDescribeServiceUpdatesWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeServiceUpdatesMessage describeServiceUpdatesMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeServiceUpdatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeServiceUpdatesMessage, null);
        Type localVarReturnType = new TypeToken<ServiceUpdatesMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns details of the service updates
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeServiceUpdatesMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUpdateNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeServiceUpdatesAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeServiceUpdatesMessage describeServiceUpdatesMessage, final ApiCallback<ServiceUpdatesMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeServiceUpdatesValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeServiceUpdatesMessage, _callback);
        Type localVarReturnType = new TypeToken<ServiceUpdatesMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeSnapshots
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeSnapshotsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeSnapshotsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeSnapshotsMessage describeSnapshotsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeSnapshotsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeSnapshots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeSnapshotsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeSnapshotsMessage describeSnapshotsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeSnapshots(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeSnapshots(Async)");
        }

        return pOSTDescribeSnapshotsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeSnapshotsMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns information about cluster or replication group snapshots. By default, &lt;code&gt;DescribeSnapshots&lt;/code&gt; lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeSnapshotsMessage  (optional)
     * @return DescribeSnapshotsListMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeSnapshotsListMessage pOSTDescribeSnapshots(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeSnapshotsMessage describeSnapshotsMessage) throws ApiException {
        ApiResponse<DescribeSnapshotsListMessage> localVarResp = pOSTDescribeSnapshotsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeSnapshotsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns information about cluster or replication group snapshots. By default, &lt;code&gt;DescribeSnapshots&lt;/code&gt; lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeSnapshotsMessage  (optional)
     * @return ApiResponse&lt;DescribeSnapshotsListMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeSnapshotsListMessage> pOSTDescribeSnapshotsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeSnapshotsMessage describeSnapshotsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeSnapshotsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeSnapshotsMessage, null);
        Type localVarReturnType = new TypeToken<DescribeSnapshotsListMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns information about cluster or replication group snapshots. By default, &lt;code&gt;DescribeSnapshots&lt;/code&gt; lists all of your snapshots; it can optionally describe a single snapshot, or just the snapshots associated with a particular cache cluster.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeSnapshotsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeSnapshotsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeSnapshotsMessage describeSnapshotsMessage, final ApiCallback<DescribeSnapshotsListMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeSnapshotsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeSnapshotsMessage, _callback);
        Type localVarReturnType = new TypeToken<DescribeSnapshotsListMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeUpdateActions
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeUpdateActionsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeUpdateActionsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUpdateActionsMessage describeUpdateActionsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeUpdateActionsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeUpdateActions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeUpdateActionsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUpdateActionsMessage describeUpdateActionsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeUpdateActions(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeUpdateActions(Async)");
        }

        return pOSTDescribeUpdateActionsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUpdateActionsMessage, _callback);

    }

    /**
     * 
     * Returns details of the update actions 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeUpdateActionsMessage  (optional)
     * @return UpdateActionsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateActionsMessage pOSTDescribeUpdateActions(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUpdateActionsMessage describeUpdateActionsMessage) throws ApiException {
        ApiResponse<UpdateActionsMessage> localVarResp = pOSTDescribeUpdateActionsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUpdateActionsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns details of the update actions 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeUpdateActionsMessage  (optional)
     * @return ApiResponse&lt;UpdateActionsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateActionsMessage> pOSTDescribeUpdateActionsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUpdateActionsMessage describeUpdateActionsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeUpdateActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUpdateActionsMessage, null);
        Type localVarReturnType = new TypeToken<UpdateActionsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns details of the update actions 
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeUpdateActionsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeUpdateActionsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUpdateActionsMessage describeUpdateActionsMessage, final ApiCallback<UpdateActionsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeUpdateActionsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUpdateActionsMessage, _callback);
        Type localVarReturnType = new TypeToken<UpdateActionsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeUserGroups
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeUserGroupsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeUserGroupsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUserGroupsMessage describeUserGroupsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeUserGroupsMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeUserGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeUserGroupsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUserGroupsMessage describeUserGroupsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeUserGroups(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeUserGroups(Async)");
        }

        return pOSTDescribeUserGroupsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUserGroupsMessage, _callback);

    }

    /**
     * 
     * Returns a list of user groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeUserGroupsMessage  (optional)
     * @return DescribeUserGroupsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeUserGroupsResult pOSTDescribeUserGroups(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUserGroupsMessage describeUserGroupsMessage) throws ApiException {
        ApiResponse<DescribeUserGroupsResult> localVarResp = pOSTDescribeUserGroupsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUserGroupsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of user groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeUserGroupsMessage  (optional)
     * @return ApiResponse&lt;DescribeUserGroupsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeUserGroupsResult> pOSTDescribeUserGroupsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUserGroupsMessage describeUserGroupsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeUserGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUserGroupsMessage, null);
        Type localVarReturnType = new TypeToken<DescribeUserGroupsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of user groups.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeUserGroupsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeUserGroupsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUserGroupsMessage describeUserGroupsMessage, final ApiCallback<DescribeUserGroupsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeUserGroupsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUserGroupsMessage, _callback);
        Type localVarReturnType = new TypeToken<DescribeUserGroupsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDescribeUsers
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeUsersMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeUsersCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUsersMessage describeUsersMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeUsersMessage;

        // create path and map variables
        String localVarPath = "/#Action=DescribeUsers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxRecords", maxRecords));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Marker", marker));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDescribeUsersValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUsersMessage describeUsersMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDescribeUsers(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDescribeUsers(Async)");
        }

        return pOSTDescribeUsersCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUsersMessage, _callback);

    }

    /**
     * 
     * Returns a list of users.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeUsersMessage  (optional)
     * @return DescribeUsersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DescribeUsersResult pOSTDescribeUsers(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUsersMessage describeUsersMessage) throws ApiException {
        ApiResponse<DescribeUsersResult> localVarResp = pOSTDescribeUsersWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUsersMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of users.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeUsersMessage  (optional)
     * @return ApiResponse&lt;DescribeUsersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribeUsersResult> pOSTDescribeUsersWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUsersMessage describeUsersMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDescribeUsersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUsersMessage, null);
        Type localVarReturnType = new TypeToken<DescribeUsersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of users.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxRecords Pagination limit (optional)
     * @param marker Pagination token (optional)
     * @param describeUsersMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDescribeUsersAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxRecords, String marker, DescribeUsersMessage describeUsersMessage, final ApiCallback<DescribeUsersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDescribeUsersValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxRecords, marker, describeUsersMessage, _callback);
        Type localVarReturnType = new TypeToken<DescribeUsersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTDisassociateGlobalReplicationGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disassociateGlobalReplicationGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDisassociateGlobalReplicationGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisassociateGlobalReplicationGroupMessage disassociateGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disassociateGlobalReplicationGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=DisassociateGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTDisassociateGlobalReplicationGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisassociateGlobalReplicationGroupMessage disassociateGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTDisassociateGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTDisassociateGlobalReplicationGroup(Async)");
        }

        return pOSTDisassociateGlobalReplicationGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disassociateGlobalReplicationGroupMessage, _callback);

    }

    /**
     * 
     * Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disassociateGlobalReplicationGroupMessage  (optional)
     * @return DisassociateGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public DisassociateGlobalReplicationGroupResult pOSTDisassociateGlobalReplicationGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisassociateGlobalReplicationGroupMessage disassociateGlobalReplicationGroupMessage) throws ApiException {
        ApiResponse<DisassociateGlobalReplicationGroupResult> localVarResp = pOSTDisassociateGlobalReplicationGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disassociateGlobalReplicationGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disassociateGlobalReplicationGroupMessage  (optional)
     * @return ApiResponse&lt;DisassociateGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisassociateGlobalReplicationGroupResult> pOSTDisassociateGlobalReplicationGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisassociateGlobalReplicationGroupMessage disassociateGlobalReplicationGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTDisassociateGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disassociateGlobalReplicationGroupMessage, null);
        Type localVarReturnType = new TypeToken<DisassociateGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a secondary cluster from the Global datastore using the Global datastore name. The secondary cluster will no longer receive updates from the primary cluster, but will remain as a standalone cluster in that Amazon region.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param disassociateGlobalReplicationGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTDisassociateGlobalReplicationGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, DisassociateGlobalReplicationGroupMessage disassociateGlobalReplicationGroupMessage, final ApiCallback<DisassociateGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTDisassociateGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, disassociateGlobalReplicationGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<DisassociateGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTFailoverGlobalReplicationGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverGlobalReplicationGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTFailoverGlobalReplicationGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverGlobalReplicationGroupMessage failoverGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = failoverGlobalReplicationGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=FailoverGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTFailoverGlobalReplicationGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverGlobalReplicationGroupMessage failoverGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTFailoverGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTFailoverGlobalReplicationGroup(Async)");
        }

        return pOSTFailoverGlobalReplicationGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverGlobalReplicationGroupMessage, _callback);

    }

    /**
     * 
     * Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverGlobalReplicationGroupMessage  (optional)
     * @return FailoverGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public FailoverGlobalReplicationGroupResult pOSTFailoverGlobalReplicationGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverGlobalReplicationGroupMessage failoverGlobalReplicationGroupMessage) throws ApiException {
        ApiResponse<FailoverGlobalReplicationGroupResult> localVarResp = pOSTFailoverGlobalReplicationGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverGlobalReplicationGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverGlobalReplicationGroupMessage  (optional)
     * @return ApiResponse&lt;FailoverGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FailoverGlobalReplicationGroupResult> pOSTFailoverGlobalReplicationGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverGlobalReplicationGroupMessage failoverGlobalReplicationGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTFailoverGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverGlobalReplicationGroupMessage, null);
        Type localVarReturnType = new TypeToken<FailoverGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Used to failover the primary region to a secondary region. The secondary region will become primary, and all other clusters will become secondary.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param failoverGlobalReplicationGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTFailoverGlobalReplicationGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, FailoverGlobalReplicationGroupMessage failoverGlobalReplicationGroupMessage, final ApiCallback<FailoverGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTFailoverGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, failoverGlobalReplicationGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<FailoverGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTIncreaseNodeGroupsInGlobalReplicationGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param increaseNodeGroupsInGlobalReplicationGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTIncreaseNodeGroupsInGlobalReplicationGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, IncreaseNodeGroupsInGlobalReplicationGroupMessage increaseNodeGroupsInGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = increaseNodeGroupsInGlobalReplicationGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=IncreaseNodeGroupsInGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTIncreaseNodeGroupsInGlobalReplicationGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, IncreaseNodeGroupsInGlobalReplicationGroupMessage increaseNodeGroupsInGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTIncreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTIncreaseNodeGroupsInGlobalReplicationGroup(Async)");
        }

        return pOSTIncreaseNodeGroupsInGlobalReplicationGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, increaseNodeGroupsInGlobalReplicationGroupMessage, _callback);

    }

    /**
     * 
     * Increase the number of node groups in the Global datastore
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param increaseNodeGroupsInGlobalReplicationGroupMessage  (optional)
     * @return IncreaseNodeGroupsInGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public IncreaseNodeGroupsInGlobalReplicationGroupResult pOSTIncreaseNodeGroupsInGlobalReplicationGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, IncreaseNodeGroupsInGlobalReplicationGroupMessage increaseNodeGroupsInGlobalReplicationGroupMessage) throws ApiException {
        ApiResponse<IncreaseNodeGroupsInGlobalReplicationGroupResult> localVarResp = pOSTIncreaseNodeGroupsInGlobalReplicationGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, increaseNodeGroupsInGlobalReplicationGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Increase the number of node groups in the Global datastore
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param increaseNodeGroupsInGlobalReplicationGroupMessage  (optional)
     * @return ApiResponse&lt;IncreaseNodeGroupsInGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IncreaseNodeGroupsInGlobalReplicationGroupResult> pOSTIncreaseNodeGroupsInGlobalReplicationGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, IncreaseNodeGroupsInGlobalReplicationGroupMessage increaseNodeGroupsInGlobalReplicationGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTIncreaseNodeGroupsInGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, increaseNodeGroupsInGlobalReplicationGroupMessage, null);
        Type localVarReturnType = new TypeToken<IncreaseNodeGroupsInGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Increase the number of node groups in the Global datastore
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param increaseNodeGroupsInGlobalReplicationGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTIncreaseNodeGroupsInGlobalReplicationGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, IncreaseNodeGroupsInGlobalReplicationGroupMessage increaseNodeGroupsInGlobalReplicationGroupMessage, final ApiCallback<IncreaseNodeGroupsInGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTIncreaseNodeGroupsInGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, increaseNodeGroupsInGlobalReplicationGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<IncreaseNodeGroupsInGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTIncreaseReplicaCount
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param increaseReplicaCountMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTIncreaseReplicaCountCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, IncreaseReplicaCountMessage increaseReplicaCountMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = increaseReplicaCountMessage;

        // create path and map variables
        String localVarPath = "/#Action=IncreaseReplicaCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTIncreaseReplicaCountValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, IncreaseReplicaCountMessage increaseReplicaCountMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTIncreaseReplicaCount(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTIncreaseReplicaCount(Async)");
        }

        return pOSTIncreaseReplicaCountCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, increaseReplicaCountMessage, _callback);

    }

    /**
     * 
     * Dynamically increases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param increaseReplicaCountMessage  (optional)
     * @return IncreaseReplicaCountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public IncreaseReplicaCountResult pOSTIncreaseReplicaCount(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, IncreaseReplicaCountMessage increaseReplicaCountMessage) throws ApiException {
        ApiResponse<IncreaseReplicaCountResult> localVarResp = pOSTIncreaseReplicaCountWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, increaseReplicaCountMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Dynamically increases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param increaseReplicaCountMessage  (optional)
     * @return ApiResponse&lt;IncreaseReplicaCountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IncreaseReplicaCountResult> pOSTIncreaseReplicaCountWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, IncreaseReplicaCountMessage increaseReplicaCountMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTIncreaseReplicaCountValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, increaseReplicaCountMessage, null);
        Type localVarReturnType = new TypeToken<IncreaseReplicaCountResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Dynamically increases the number of replicas in a Redis (cluster mode disabled) replication group or the number of replica nodes in one or more node groups (shards) of a Redis (cluster mode enabled) replication group. This operation is performed with no cluster down time.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param increaseReplicaCountMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ClusterQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NoOperationFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTIncreaseReplicaCountAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, IncreaseReplicaCountMessage increaseReplicaCountMessage, final ApiCallback<IncreaseReplicaCountResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTIncreaseReplicaCountValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, increaseReplicaCountMessage, _callback);
        Type localVarReturnType = new TypeToken<IncreaseReplicaCountResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListAllowedNodeTypeModifications
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listAllowedNodeTypeModificationsMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListAllowedNodeTypeModificationsCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListAllowedNodeTypeModificationsMessage listAllowedNodeTypeModificationsMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAllowedNodeTypeModificationsMessage;

        // create path and map variables
        String localVarPath = "/#Action=ListAllowedNodeTypeModifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListAllowedNodeTypeModificationsValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListAllowedNodeTypeModificationsMessage listAllowedNodeTypeModificationsMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListAllowedNodeTypeModifications(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListAllowedNodeTypeModifications(Async)");
        }

        return pOSTListAllowedNodeTypeModificationsCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listAllowedNodeTypeModificationsMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all available node types that you can scale your Redis cluster&#39;s or replication group&#39;s current node type.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;ModifyCacheCluster&lt;/code&gt; or &lt;code&gt;ModifyReplicationGroup&lt;/code&gt; operations to scale your cluster or replication group, the value of the &lt;code&gt;CacheNodeType&lt;/code&gt; parameter must be one of the node types returned by this operation.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listAllowedNodeTypeModificationsMessage  (optional)
     * @return AllowedNodeTypeModificationsMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public AllowedNodeTypeModificationsMessage pOSTListAllowedNodeTypeModifications(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListAllowedNodeTypeModificationsMessage listAllowedNodeTypeModificationsMessage) throws ApiException {
        ApiResponse<AllowedNodeTypeModificationsMessage> localVarResp = pOSTListAllowedNodeTypeModificationsWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listAllowedNodeTypeModificationsMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all available node types that you can scale your Redis cluster&#39;s or replication group&#39;s current node type.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;ModifyCacheCluster&lt;/code&gt; or &lt;code&gt;ModifyReplicationGroup&lt;/code&gt; operations to scale your cluster or replication group, the value of the &lt;code&gt;CacheNodeType&lt;/code&gt; parameter must be one of the node types returned by this operation.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listAllowedNodeTypeModificationsMessage  (optional)
     * @return ApiResponse&lt;AllowedNodeTypeModificationsMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllowedNodeTypeModificationsMessage> pOSTListAllowedNodeTypeModificationsWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListAllowedNodeTypeModificationsMessage listAllowedNodeTypeModificationsMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTListAllowedNodeTypeModificationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listAllowedNodeTypeModificationsMessage, null);
        Type localVarReturnType = new TypeToken<AllowedNodeTypeModificationsMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all available node types that you can scale your Redis cluster&#39;s or replication group&#39;s current node type.&lt;/p&gt; &lt;p&gt;When you use the &lt;code&gt;ModifyCacheCluster&lt;/code&gt; or &lt;code&gt;ModifyReplicationGroup&lt;/code&gt; operations to scale your cluster or replication group, the value of the &lt;code&gt;CacheNodeType&lt;/code&gt; parameter must be one of the node types returned by this operation.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listAllowedNodeTypeModificationsMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListAllowedNodeTypeModificationsAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListAllowedNodeTypeModificationsMessage listAllowedNodeTypeModificationsMessage, final ApiCallback<AllowedNodeTypeModificationsMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListAllowedNodeTypeModificationsValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listAllowedNodeTypeModificationsMessage, _callback);
        Type localVarReturnType = new TypeToken<AllowedNodeTypeModificationsMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTListTagsForResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTagsForResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceMessage;

        // create path and map variables
        String localVarPath = "/#Action=ListTagsForResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTListTagsForResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTListTagsForResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTListTagsForResource(Async)");
        }

        return pOSTListTagsForResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all tags currently on a named resource.&lt;/p&gt; &lt;p&gt; A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the cluster is not in the &lt;i&gt;available&lt;/i&gt; state, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns an error.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @return TagListMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public TagListMessage pOSTListTagsForResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage) throws ApiException {
        ApiResponse<TagListMessage> localVarResp = pOSTListTagsForResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all tags currently on a named resource.&lt;/p&gt; &lt;p&gt; A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the cluster is not in the &lt;i&gt;available&lt;/i&gt; state, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns an error.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @return ApiResponse&lt;TagListMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagListMessage> pOSTListTagsForResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTListTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage, null);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all tags currently on a named resource.&lt;/p&gt; &lt;p&gt; A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If the cluster is not in the &lt;i&gt;available&lt;/i&gt; state, &lt;code&gt;ListTagsForResource&lt;/code&gt; returns an error.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param listTagsForResourceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTListTagsForResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ListTagsForResourceMessage listTagsForResourceMessage, final ApiCallback<TagListMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTListTagsForResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, listTagsForResourceMessage, _callback);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyCacheCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyCacheClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyCacheClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheClusterMessage modifyCacheClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyCacheClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyCacheCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyCacheClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheClusterMessage modifyCacheClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyCacheCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyCacheCluster(Async)");
        }

        return pOSTModifyCacheClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheClusterMessage, _callback);

    }

    /**
     * 
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyCacheClusterMessage  (optional)
     * @return ModifyCacheClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyCacheClusterResult pOSTModifyCacheCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheClusterMessage modifyCacheClusterMessage) throws ApiException {
        ApiResponse<ModifyCacheClusterResult> localVarResp = pOSTModifyCacheClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyCacheClusterMessage  (optional)
     * @return ApiResponse&lt;ModifyCacheClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyCacheClusterResult> pOSTModifyCacheClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheClusterMessage modifyCacheClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyCacheClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheClusterMessage, null);
        Type localVarReturnType = new TypeToken<ModifyCacheClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the settings for a cluster. You can use this operation to change one or more cluster configuration parameters by specifying the parameters and the new values.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyCacheClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyCacheClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheClusterMessage modifyCacheClusterMessage, final ApiCallback<ModifyCacheClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyCacheClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyCacheClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyCacheParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyCacheParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyCacheParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheParameterGroupMessage modifyCacheParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyCacheParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyCacheParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyCacheParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheParameterGroupMessage modifyCacheParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyCacheParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyCacheParameterGroup(Async)");
        }

        return pOSTModifyCacheParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheParameterGroupMessage, _callback);

    }

    /**
     * 
     * Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyCacheParameterGroupMessage  (optional)
     * @return CacheParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CacheParameterGroupNameMessage pOSTModifyCacheParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheParameterGroupMessage modifyCacheParameterGroupMessage) throws ApiException {
        ApiResponse<CacheParameterGroupNameMessage> localVarResp = pOSTModifyCacheParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyCacheParameterGroupMessage  (optional)
     * @return ApiResponse&lt;CacheParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheParameterGroupNameMessage> pOSTModifyCacheParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheParameterGroupMessage modifyCacheParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyCacheParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<CacheParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the parameters of a cache parameter group. You can modify up to 20 parameters in a single request by submitting a list parameter name and value pairs.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyCacheParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyCacheParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheParameterGroupMessage modifyCacheParameterGroupMessage, final ApiCallback<CacheParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyCacheParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CacheParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyCacheSubnetGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyCacheSubnetGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyCacheSubnetGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheSubnetGroupMessage modifyCacheSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyCacheSubnetGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyCacheSubnetGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyCacheSubnetGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheSubnetGroupMessage modifyCacheSubnetGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyCacheSubnetGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyCacheSubnetGroup(Async)");
        }

        return pOSTModifyCacheSubnetGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheSubnetGroupMessage, _callback);

    }

    /**
     * 
     * Modifies an existing cache subnet group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyCacheSubnetGroupMessage  (optional)
     * @return ModifyCacheSubnetGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public ModifyCacheSubnetGroupResult pOSTModifyCacheSubnetGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheSubnetGroupMessage modifyCacheSubnetGroupMessage) throws ApiException {
        ApiResponse<ModifyCacheSubnetGroupResult> localVarResp = pOSTModifyCacheSubnetGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheSubnetGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies an existing cache subnet group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyCacheSubnetGroupMessage  (optional)
     * @return ApiResponse&lt;ModifyCacheSubnetGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyCacheSubnetGroupResult> pOSTModifyCacheSubnetGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheSubnetGroupMessage modifyCacheSubnetGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyCacheSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheSubnetGroupMessage, null);
        Type localVarReturnType = new TypeToken<ModifyCacheSubnetGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies an existing cache subnet group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyCacheSubnetGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheSubnetQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> SubnetInUse </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidSubnet </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> SubnetNotAllowedFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyCacheSubnetGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyCacheSubnetGroupMessage modifyCacheSubnetGroupMessage, final ApiCallback<ModifyCacheSubnetGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyCacheSubnetGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyCacheSubnetGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyCacheSubnetGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyGlobalReplicationGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyGlobalReplicationGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyGlobalReplicationGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalReplicationGroupMessage modifyGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyGlobalReplicationGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyGlobalReplicationGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalReplicationGroupMessage modifyGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyGlobalReplicationGroup(Async)");
        }

        return pOSTModifyGlobalReplicationGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalReplicationGroupMessage, _callback);

    }

    /**
     * 
     * Modifies the settings for a Global datastore.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyGlobalReplicationGroupMessage  (optional)
     * @return ModifyGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyGlobalReplicationGroupResult pOSTModifyGlobalReplicationGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalReplicationGroupMessage modifyGlobalReplicationGroupMessage) throws ApiException {
        ApiResponse<ModifyGlobalReplicationGroupResult> localVarResp = pOSTModifyGlobalReplicationGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalReplicationGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the settings for a Global datastore.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyGlobalReplicationGroupMessage  (optional)
     * @return ApiResponse&lt;ModifyGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyGlobalReplicationGroupResult> pOSTModifyGlobalReplicationGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalReplicationGroupMessage modifyGlobalReplicationGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalReplicationGroupMessage, null);
        Type localVarReturnType = new TypeToken<ModifyGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the settings for a Global datastore.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyGlobalReplicationGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyGlobalReplicationGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyGlobalReplicationGroupMessage modifyGlobalReplicationGroupMessage, final ApiCallback<ModifyGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyGlobalReplicationGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyReplicationGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyReplicationGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyReplicationGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyReplicationGroupMessage modifyReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyReplicationGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyReplicationGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyReplicationGroupMessage modifyReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyReplicationGroup(Async)");
        }

        return pOSTModifyReplicationGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyReplicationGroupMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Modifies the settings for a replication group.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html\&quot;&gt;Scaling for Amazon ElastiCache for Redis (cluster mode enabled)&lt;/a&gt; in the ElastiCache User Guide&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html\&quot;&gt;ModifyReplicationGroupShardConfiguration&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyReplicationGroupMessage  (optional)
     * @return ModifyReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyReplicationGroupResult pOSTModifyReplicationGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyReplicationGroupMessage modifyReplicationGroupMessage) throws ApiException {
        ApiResponse<ModifyReplicationGroupResult> localVarResp = pOSTModifyReplicationGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyReplicationGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Modifies the settings for a replication group.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html\&quot;&gt;Scaling for Amazon ElastiCache for Redis (cluster mode enabled)&lt;/a&gt; in the ElastiCache User Guide&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html\&quot;&gt;ModifyReplicationGroupShardConfiguration&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyReplicationGroupMessage  (optional)
     * @return ApiResponse&lt;ModifyReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyReplicationGroupResult> pOSTModifyReplicationGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyReplicationGroupMessage modifyReplicationGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyReplicationGroupMessage, null);
        Type localVarReturnType = new TypeToken<ModifyReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Modifies the settings for a replication group.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/scaling-redis-cluster-mode-enabled.html\&quot;&gt;Scaling for Amazon ElastiCache for Redis (cluster mode enabled)&lt;/a&gt; in the ElastiCache User Guide&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_ModifyReplicationGroupShardConfiguration.html\&quot;&gt;ModifyReplicationGroupShardConfiguration&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This operation is valid for Redis only.&lt;/p&gt; &lt;/note&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyReplicationGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NodeQuotaForClusterExceededFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 492 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 493 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 494 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 495 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyReplicationGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyReplicationGroupMessage modifyReplicationGroupMessage, final ApiCallback<ModifyReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyReplicationGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyReplicationGroupShardConfiguration
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyReplicationGroupShardConfigurationMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyReplicationGroupShardConfigurationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyReplicationGroupShardConfigurationMessage modifyReplicationGroupShardConfigurationMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyReplicationGroupShardConfigurationMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyReplicationGroupShardConfiguration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyReplicationGroupShardConfigurationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyReplicationGroupShardConfigurationMessage modifyReplicationGroupShardConfigurationMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyReplicationGroupShardConfiguration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyReplicationGroupShardConfiguration(Async)");
        }

        return pOSTModifyReplicationGroupShardConfigurationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyReplicationGroupShardConfigurationMessage, _callback);

    }

    /**
     * 
     * Modifies a replication group&#39;s shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyReplicationGroupShardConfigurationMessage  (optional)
     * @return ModifyReplicationGroupShardConfigurationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ModifyReplicationGroupShardConfigurationResult pOSTModifyReplicationGroupShardConfiguration(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyReplicationGroupShardConfigurationMessage modifyReplicationGroupShardConfigurationMessage) throws ApiException {
        ApiResponse<ModifyReplicationGroupShardConfigurationResult> localVarResp = pOSTModifyReplicationGroupShardConfigurationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyReplicationGroupShardConfigurationMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies a replication group&#39;s shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyReplicationGroupShardConfigurationMessage  (optional)
     * @return ApiResponse&lt;ModifyReplicationGroupShardConfigurationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModifyReplicationGroupShardConfigurationResult> pOSTModifyReplicationGroupShardConfigurationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyReplicationGroupShardConfigurationMessage modifyReplicationGroupShardConfigurationMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyReplicationGroupShardConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyReplicationGroupShardConfigurationMessage, null);
        Type localVarReturnType = new TypeToken<ModifyReplicationGroupShardConfigurationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies a replication group&#39;s shards (node groups) by allowing you to add shards, remove shards, or rebalance the keyspaces among existing shards.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyReplicationGroupShardConfigurationMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidVPCNetworkStateFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InsufficientCacheClusterCapacityFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NodeGroupsPerReplicationGroupQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NodeQuotaForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyReplicationGroupShardConfigurationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyReplicationGroupShardConfigurationMessage modifyReplicationGroupShardConfigurationMessage, final ApiCallback<ModifyReplicationGroupShardConfigurationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyReplicationGroupShardConfigurationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyReplicationGroupShardConfigurationMessage, _callback);
        Type localVarReturnType = new TypeToken<ModifyReplicationGroupShardConfigurationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyUser
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyUserMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyUserCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyUserMessage modifyUserMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyUserMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyUser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyUserValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyUserMessage modifyUserMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyUser(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyUser(Async)");
        }

        return pOSTModifyUserCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyUserMessage, _callback);

    }

    /**
     * 
     * Changes user password(s) and/or access string.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyUserMessage  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public User pOSTModifyUser(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyUserMessage modifyUserMessage) throws ApiException {
        ApiResponse<User> localVarResp = pOSTModifyUserWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyUserMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Changes user password(s) and/or access string.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyUserMessage  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> pOSTModifyUserWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyUserMessage modifyUserMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyUserValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyUserMessage, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes user password(s) and/or access string.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyUserMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidUserStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyUserAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyUserMessage modifyUserMessage, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyUserValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyUserMessage, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTModifyUserGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyUserGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyUserGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyUserGroupMessage modifyUserGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyUserGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ModifyUserGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTModifyUserGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyUserGroupMessage modifyUserGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTModifyUserGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTModifyUserGroup(Async)");
        }

        return pOSTModifyUserGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyUserGroupMessage, _callback);

    }

    /**
     * 
     * Changes the list of users that belong to the user group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyUserGroupMessage  (optional)
     * @return UserGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public UserGroup pOSTModifyUserGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyUserGroupMessage modifyUserGroupMessage) throws ApiException {
        ApiResponse<UserGroup> localVarResp = pOSTModifyUserGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyUserGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Changes the list of users that belong to the user group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyUserGroupMessage  (optional)
     * @return ApiResponse&lt;UserGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserGroup> pOSTModifyUserGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyUserGroupMessage modifyUserGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTModifyUserGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyUserGroupMessage, null);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Changes the list of users that belong to the user group.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param modifyUserGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> DuplicateUserNameFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceLinkedRoleNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> DefaultUserRequired </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidUserGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTModifyUserGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ModifyUserGroupMessage modifyUserGroupMessage, final ApiCallback<UserGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTModifyUserGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, modifyUserGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<UserGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTPurchaseReservedCacheNodesOffering
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param purchaseReservedCacheNodesOfferingMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReservedCacheNodeAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReservedCacheNodeQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPurchaseReservedCacheNodesOfferingCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PurchaseReservedCacheNodesOfferingMessage purchaseReservedCacheNodesOfferingMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseReservedCacheNodesOfferingMessage;

        // create path and map variables
        String localVarPath = "/#Action=PurchaseReservedCacheNodesOffering";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTPurchaseReservedCacheNodesOfferingValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PurchaseReservedCacheNodesOfferingMessage purchaseReservedCacheNodesOfferingMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTPurchaseReservedCacheNodesOffering(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTPurchaseReservedCacheNodesOffering(Async)");
        }

        return pOSTPurchaseReservedCacheNodesOfferingCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, purchaseReservedCacheNodesOfferingMessage, _callback);

    }

    /**
     * 
     * Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Redis or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Memcached.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param purchaseReservedCacheNodesOfferingMessage  (optional)
     * @return PurchaseReservedCacheNodesOfferingResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReservedCacheNodeAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReservedCacheNodeQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseReservedCacheNodesOfferingResult pOSTPurchaseReservedCacheNodesOffering(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PurchaseReservedCacheNodesOfferingMessage purchaseReservedCacheNodesOfferingMessage) throws ApiException {
        ApiResponse<PurchaseReservedCacheNodesOfferingResult> localVarResp = pOSTPurchaseReservedCacheNodesOfferingWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, purchaseReservedCacheNodesOfferingMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Redis or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Memcached.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param purchaseReservedCacheNodesOfferingMessage  (optional)
     * @return ApiResponse&lt;PurchaseReservedCacheNodesOfferingResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReservedCacheNodeAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReservedCacheNodeQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PurchaseReservedCacheNodesOfferingResult> pOSTPurchaseReservedCacheNodesOfferingWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PurchaseReservedCacheNodesOfferingMessage purchaseReservedCacheNodesOfferingMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTPurchaseReservedCacheNodesOfferingValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, purchaseReservedCacheNodesOfferingMessage, null);
        Type localVarReturnType = new TypeToken<PurchaseReservedCacheNodesOfferingResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows you to purchase a reserved cache node offering. Reserved nodes are not eligible for cancellation and are non-refundable. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Redis or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/reserved-nodes.html\&quot;&gt;Managing Costs with Reserved Nodes&lt;/a&gt; for Memcached.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param purchaseReservedCacheNodesOfferingMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReservedCacheNodesOfferingNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ReservedCacheNodeAlreadyExistsFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReservedCacheNodeQuotaExceededFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> TagQuotaPerResourceExceeded </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTPurchaseReservedCacheNodesOfferingAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, PurchaseReservedCacheNodesOfferingMessage purchaseReservedCacheNodesOfferingMessage, final ApiCallback<PurchaseReservedCacheNodesOfferingResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTPurchaseReservedCacheNodesOfferingValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, purchaseReservedCacheNodesOfferingMessage, _callback);
        Type localVarReturnType = new TypeToken<PurchaseReservedCacheNodesOfferingResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRebalanceSlotsInGlobalReplicationGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebalanceSlotsInGlobalReplicationGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRebalanceSlotsInGlobalReplicationGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebalanceSlotsInGlobalReplicationGroupMessage rebalanceSlotsInGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rebalanceSlotsInGlobalReplicationGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=RebalanceSlotsInGlobalReplicationGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRebalanceSlotsInGlobalReplicationGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebalanceSlotsInGlobalReplicationGroupMessage rebalanceSlotsInGlobalReplicationGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRebalanceSlotsInGlobalReplicationGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRebalanceSlotsInGlobalReplicationGroup(Async)");
        }

        return pOSTRebalanceSlotsInGlobalReplicationGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebalanceSlotsInGlobalReplicationGroupMessage, _callback);

    }

    /**
     * 
     * Redistribute slots to ensure uniform distribution across existing shards in the cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebalanceSlotsInGlobalReplicationGroupMessage  (optional)
     * @return RebalanceSlotsInGlobalReplicationGroupResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public RebalanceSlotsInGlobalReplicationGroupResult pOSTRebalanceSlotsInGlobalReplicationGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebalanceSlotsInGlobalReplicationGroupMessage rebalanceSlotsInGlobalReplicationGroupMessage) throws ApiException {
        ApiResponse<RebalanceSlotsInGlobalReplicationGroupResult> localVarResp = pOSTRebalanceSlotsInGlobalReplicationGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebalanceSlotsInGlobalReplicationGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Redistribute slots to ensure uniform distribution across existing shards in the cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebalanceSlotsInGlobalReplicationGroupMessage  (optional)
     * @return ApiResponse&lt;RebalanceSlotsInGlobalReplicationGroupResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RebalanceSlotsInGlobalReplicationGroupResult> pOSTRebalanceSlotsInGlobalReplicationGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebalanceSlotsInGlobalReplicationGroupMessage rebalanceSlotsInGlobalReplicationGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRebalanceSlotsInGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebalanceSlotsInGlobalReplicationGroupMessage, null);
        Type localVarReturnType = new TypeToken<RebalanceSlotsInGlobalReplicationGroupResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Redistribute slots to ensure uniform distribution across existing shards in the cluster.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebalanceSlotsInGlobalReplicationGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> GlobalReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRebalanceSlotsInGlobalReplicationGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebalanceSlotsInGlobalReplicationGroupMessage rebalanceSlotsInGlobalReplicationGroupMessage, final ApiCallback<RebalanceSlotsInGlobalReplicationGroupResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRebalanceSlotsInGlobalReplicationGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebalanceSlotsInGlobalReplicationGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<RebalanceSlotsInGlobalReplicationGroupResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRebootCacheCluster
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebootCacheClusterMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRebootCacheClusterCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootCacheClusterMessage rebootCacheClusterMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rebootCacheClusterMessage;

        // create path and map variables
        String localVarPath = "/#Action=RebootCacheCluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRebootCacheClusterValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootCacheClusterMessage rebootCacheClusterMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRebootCacheCluster(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRebootCacheCluster(Async)");
        }

        return pOSTRebootCacheClusterCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootCacheClusterMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.&lt;/p&gt; &lt;p&gt;The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.&lt;/p&gt; &lt;p&gt;When the reboot is complete, a cluster event is created.&lt;/p&gt; &lt;p&gt;Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.&lt;/p&gt; &lt;p&gt;If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes.rebooting.html\&quot;&gt;Rebooting a Cluster&lt;/a&gt; for an alternate process.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebootCacheClusterMessage  (optional)
     * @return RebootCacheClusterResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public RebootCacheClusterResult pOSTRebootCacheCluster(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootCacheClusterMessage rebootCacheClusterMessage) throws ApiException {
        ApiResponse<RebootCacheClusterResult> localVarResp = pOSTRebootCacheClusterWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootCacheClusterMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.&lt;/p&gt; &lt;p&gt;The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.&lt;/p&gt; &lt;p&gt;When the reboot is complete, a cluster event is created.&lt;/p&gt; &lt;p&gt;Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.&lt;/p&gt; &lt;p&gt;If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes.rebooting.html\&quot;&gt;Rebooting a Cluster&lt;/a&gt; for an alternate process.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebootCacheClusterMessage  (optional)
     * @return ApiResponse&lt;RebootCacheClusterResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RebootCacheClusterResult> pOSTRebootCacheClusterWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootCacheClusterMessage rebootCacheClusterMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRebootCacheClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootCacheClusterMessage, null);
        Type localVarReturnType = new TypeToken<RebootCacheClusterResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Reboots some, or all, of the cache nodes within a provisioned cluster. This operation applies any modified cache parameter groups to the cluster. The reboot operation takes place as soon as possible, and results in a momentary outage to the cluster. During the reboot, the cluster status is set to REBOOTING.&lt;/p&gt; &lt;p&gt;The reboot causes the contents of the cache (for each cache node being rebooted) to be lost.&lt;/p&gt; &lt;p&gt;When the reboot is complete, a cluster event is created.&lt;/p&gt; &lt;p&gt;Rebooting a cluster is currently supported on Memcached and Redis (cluster mode disabled) clusters. Rebooting is not supported on Redis (cluster mode enabled) clusters.&lt;/p&gt; &lt;p&gt;If you make changes to parameters that require a Redis (cluster mode enabled) cluster reboot for the changes to be applied, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes.rebooting.html\&quot;&gt;Rebooting a Cluster&lt;/a&gt; for an alternate process.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param rebootCacheClusterMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRebootCacheClusterAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RebootCacheClusterMessage rebootCacheClusterMessage, final ApiCallback<RebootCacheClusterResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRebootCacheClusterValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, rebootCacheClusterMessage, _callback);
        Type localVarReturnType = new TypeToken<RebootCacheClusterResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRemoveTagsFromResource
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsFromResourceMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveTagsFromResourceCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeTagsFromResourceMessage;

        // create path and map variables
        String localVarPath = "/#Action=RemoveTagsFromResource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRemoveTagsFromResourceValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRemoveTagsFromResource(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRemoveTagsFromResource(Async)");
        }

        return pOSTRemoveTagsFromResourceCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage, _callback);

    }

    /**
     * 
     * Removes the tags identified by the &lt;code&gt;TagKeys&lt;/code&gt; list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsFromResourceMessage  (optional)
     * @return TagListMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public TagListMessage pOSTRemoveTagsFromResource(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage) throws ApiException {
        ApiResponse<TagListMessage> localVarResp = pOSTRemoveTagsFromResourceWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the tags identified by the &lt;code&gt;TagKeys&lt;/code&gt; list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsFromResourceMessage  (optional)
     * @return ApiResponse&lt;TagListMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TagListMessage> pOSTRemoveTagsFromResourceWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRemoveTagsFromResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage, null);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the tags identified by the &lt;code&gt;TagKeys&lt;/code&gt; list from the named resource. A tag is a key-value pair where the key and value are case-sensitive. You can use tags to categorize and track all your ElastiCache resources, with the exception of global replication group. When you add or remove tags on replication groups, those actions will be replicated to all nodes in the replication group. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/IAM.ResourceLevelPermissions.html\&quot;&gt;Resource-level permissions&lt;/a&gt;.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param removeTagsFromResourceMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheClusterNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> CacheSubnetGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ReservedCacheNodeNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SnapshotNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> UserNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> UserGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidARNFault </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> TagNotFoundFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRemoveTagsFromResourceAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RemoveTagsFromResourceMessage removeTagsFromResourceMessage, final ApiCallback<TagListMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRemoveTagsFromResourceValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, removeTagsFromResourceMessage, _callback);
        Type localVarReturnType = new TypeToken<TagListMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTResetCacheParameterGroup
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetCacheParameterGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTResetCacheParameterGroupCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetCacheParameterGroupMessage resetCacheParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resetCacheParameterGroupMessage;

        // create path and map variables
        String localVarPath = "/#Action=ResetCacheParameterGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTResetCacheParameterGroupValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetCacheParameterGroupMessage resetCacheParameterGroupMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTResetCacheParameterGroup(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTResetCacheParameterGroup(Async)");
        }

        return pOSTResetCacheParameterGroupCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetCacheParameterGroupMessage, _callback);

    }

    /**
     * 
     * Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the &lt;code&gt;ResetAllParameters&lt;/code&gt; and &lt;code&gt;CacheParameterGroupName&lt;/code&gt; parameters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetCacheParameterGroupMessage  (optional)
     * @return CacheParameterGroupNameMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public CacheParameterGroupNameMessage pOSTResetCacheParameterGroup(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetCacheParameterGroupMessage resetCacheParameterGroupMessage) throws ApiException {
        ApiResponse<CacheParameterGroupNameMessage> localVarResp = pOSTResetCacheParameterGroupWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetCacheParameterGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the &lt;code&gt;ResetAllParameters&lt;/code&gt; and &lt;code&gt;CacheParameterGroupName&lt;/code&gt; parameters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetCacheParameterGroupMessage  (optional)
     * @return ApiResponse&lt;CacheParameterGroupNameMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CacheParameterGroupNameMessage> pOSTResetCacheParameterGroupWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetCacheParameterGroupMessage resetCacheParameterGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTResetCacheParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetCacheParameterGroupMessage, null);
        Type localVarReturnType = new TypeToken<CacheParameterGroupNameMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Modifies the parameters of a cache parameter group to the engine or system default value. You can reset specific parameters by submitting a list of parameter names. To reset the entire cache parameter group, specify the &lt;code&gt;ResetAllParameters&lt;/code&gt; and &lt;code&gt;CacheParameterGroupName&lt;/code&gt; parameters.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param resetCacheParameterGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InvalidCacheParameterGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> CacheParameterGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidGlobalReplicationGroupStateFault </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTResetCacheParameterGroupAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, ResetCacheParameterGroupMessage resetCacheParameterGroupMessage, final ApiCallback<CacheParameterGroupNameMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTResetCacheParameterGroupValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, resetCacheParameterGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<CacheParameterGroupNameMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTRevokeCacheSecurityGroupIngress
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param revokeCacheSecurityGroupIngressMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRevokeCacheSecurityGroupIngressCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RevokeCacheSecurityGroupIngressMessage revokeCacheSecurityGroupIngressMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = revokeCacheSecurityGroupIngressMessage;

        // create path and map variables
        String localVarPath = "/#Action=RevokeCacheSecurityGroupIngress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTRevokeCacheSecurityGroupIngressValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RevokeCacheSecurityGroupIngressMessage revokeCacheSecurityGroupIngressMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTRevokeCacheSecurityGroupIngress(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTRevokeCacheSecurityGroupIngress(Async)");
        }

        return pOSTRevokeCacheSecurityGroupIngressCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, revokeCacheSecurityGroupIngressMessage, _callback);

    }

    /**
     * 
     * Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param revokeCacheSecurityGroupIngressMessage  (optional)
     * @return RevokeCacheSecurityGroupIngressResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public RevokeCacheSecurityGroupIngressResult pOSTRevokeCacheSecurityGroupIngress(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RevokeCacheSecurityGroupIngressMessage revokeCacheSecurityGroupIngressMessage) throws ApiException {
        ApiResponse<RevokeCacheSecurityGroupIngressResult> localVarResp = pOSTRevokeCacheSecurityGroupIngressWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, revokeCacheSecurityGroupIngressMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param revokeCacheSecurityGroupIngressMessage  (optional)
     * @return ApiResponse&lt;RevokeCacheSecurityGroupIngressResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RevokeCacheSecurityGroupIngressResult> pOSTRevokeCacheSecurityGroupIngressWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RevokeCacheSecurityGroupIngressMessage revokeCacheSecurityGroupIngressMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTRevokeCacheSecurityGroupIngressValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, revokeCacheSecurityGroupIngressMessage, null);
        Type localVarReturnType = new TypeToken<RevokeCacheSecurityGroupIngressResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Revokes ingress from a cache security group. Use this operation to disallow access from an Amazon EC2 security group that had been previously authorized.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param revokeCacheSecurityGroupIngressMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> CacheSecurityGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AuthorizationNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidCacheSecurityGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTRevokeCacheSecurityGroupIngressAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, RevokeCacheSecurityGroupIngressMessage revokeCacheSecurityGroupIngressMessage, final ApiCallback<RevokeCacheSecurityGroupIngressResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTRevokeCacheSecurityGroupIngressValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, revokeCacheSecurityGroupIngressMessage, _callback);
        Type localVarReturnType = new TypeToken<RevokeCacheSecurityGroupIngressResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTStartMigration
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startMigrationMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyUnderMigrationFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStartMigrationCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMigrationMessage startMigrationMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startMigrationMessage;

        // create path and map variables
        String localVarPath = "/#Action=StartMigration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTStartMigrationValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMigrationMessage startMigrationMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTStartMigration(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTStartMigration(Async)");
        }

        return pOSTStartMigrationCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMigrationMessage, _callback);

    }

    /**
     * 
     * Start the migration of data.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startMigrationMessage  (optional)
     * @return StartMigrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyUnderMigrationFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public StartMigrationResponse pOSTStartMigration(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMigrationMessage startMigrationMessage) throws ApiException {
        ApiResponse<StartMigrationResponse> localVarResp = pOSTStartMigrationWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMigrationMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * Start the migration of data.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startMigrationMessage  (optional)
     * @return ApiResponse&lt;StartMigrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyUnderMigrationFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StartMigrationResponse> pOSTStartMigrationWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMigrationMessage startMigrationMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTStartMigrationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMigrationMessage, null);
        Type localVarReturnType = new TypeToken<StartMigrationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start the migration of data.
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param startMigrationMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ReplicationGroupAlreadyUnderMigrationFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTStartMigrationAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, StartMigrationMessage startMigrationMessage, final ApiCallback<StartMigrationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTStartMigrationValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, startMigrationMessage, _callback);
        Type localVarReturnType = new TypeToken<StartMigrationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pOSTTestFailover
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param testFailoverMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> APICallRateForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NodeGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TestFailoverNotAvailableFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTestFailoverCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TestFailoverMessage testFailoverMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testFailoverMessage;

        // create path and map variables
        String localVarPath = "/#Action=TestFailover";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Action", action));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Version", version));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pOSTTestFailoverValidateBeforeCall(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TestFailoverMessage testFailoverMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'action' is set
        if (action == null) {
            throw new ApiException("Missing the required parameter 'action' when calling pOSTTestFailover(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling pOSTTestFailover(Async)");
        }

        return pOSTTestFailoverCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, testFailoverMessage, _callback);

    }

    /**
     * 
     * &lt;p&gt;Represents the input of a &lt;code&gt;TestFailover&lt;/code&gt; operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).&lt;/p&gt; &lt;p&gt;This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API. &lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Note the following&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.&lt;/p&gt; &lt;p&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Test Failover API called for node group &amp;lt;node-group-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Recovering cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Finished recovery for cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html\&quot;&gt;Viewing ElastiCache Events&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html\&quot;&gt;DescribeEvents&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Also see, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test\&quot;&gt;Testing Multi-AZ &lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param testFailoverMessage  (optional)
     * @return TestFailoverResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> APICallRateForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NodeGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TestFailoverNotAvailableFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public TestFailoverResult pOSTTestFailover(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TestFailoverMessage testFailoverMessage) throws ApiException {
        ApiResponse<TestFailoverResult> localVarResp = pOSTTestFailoverWithHttpInfo(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, testFailoverMessage);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Represents the input of a &lt;code&gt;TestFailover&lt;/code&gt; operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).&lt;/p&gt; &lt;p&gt;This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API. &lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Note the following&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.&lt;/p&gt; &lt;p&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Test Failover API called for node group &amp;lt;node-group-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Recovering cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Finished recovery for cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html\&quot;&gt;Viewing ElastiCache Events&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html\&quot;&gt;DescribeEvents&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Also see, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test\&quot;&gt;Testing Multi-AZ &lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param testFailoverMessage  (optional)
     * @return ApiResponse&lt;TestFailoverResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> APICallRateForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NodeGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TestFailoverNotAvailableFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestFailoverResult> pOSTTestFailoverWithHttpInfo(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TestFailoverMessage testFailoverMessage) throws ApiException {
        okhttp3.Call localVarCall = pOSTTestFailoverValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, testFailoverMessage, null);
        Type localVarReturnType = new TypeToken<TestFailoverResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Represents the input of a &lt;code&gt;TestFailover&lt;/code&gt; operation which test automatic failover on a specified node group (called shard in the console) in a replication group (called cluster in the console).&lt;/p&gt; &lt;p&gt;This API is designed for testing the behavior of your application in case of ElastiCache failover. It is not designed to be an operational tool for initiating a failover to overcome a problem you may have with the cluster. Moreover, in certain conditions such as large-scale operational events, Amazon may block this API. &lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Note the following&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;A customer can use this operation to test automatic failover on up to 5 shards (called node groups in the ElastiCache API and Amazon CLI) in any rolling 24-hour period.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation on shards in different clusters (called replication groups in the API and CLI), the calls can be made concurrently.&lt;/p&gt; &lt;p&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If calling this operation multiple times on different shards in the same Redis (cluster mode enabled) replication group, the first node replacement must complete before a subsequent call can be made.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;To determine whether the node replacement is complete you can check Events using the Amazon ElastiCache console, the Amazon CLI, or the ElastiCache API. Look for the following automatic failover related events, listed here in order of occurrance:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Test Failover API called for node group &amp;lt;node-group-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Replication group message: &lt;code&gt;Failover from primary node &amp;lt;primary-node-id&amp;gt; to replica node &amp;lt;node-id&amp;gt; completed&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Recovering cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Cache cluster message: &lt;code&gt;Finished recovery for cache nodes &amp;lt;node-id&amp;gt;&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For more information see:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/ECEvents.Viewing.html\&quot;&gt;Viewing ElastiCache Events&lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_DescribeEvents.html\&quot;&gt;DescribeEvents&lt;/a&gt; in the ElastiCache API Reference&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Also see, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/AutoFailover.html#auto-failover-test\&quot;&gt;Testing Multi-AZ &lt;/a&gt; in the &lt;i&gt;ElastiCache User Guide&lt;/i&gt;.&lt;/p&gt;
     * @param action  (required)
     * @param version  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param testFailoverMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> APICallRateForCustomerExceededFault </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidCacheClusterStateFault </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InvalidReplicationGroupStateFault </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NodeGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ReplicationGroupNotFoundFault </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> TestFailoverNotAvailableFault </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidKMSKeyFault </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidParameterValueException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidParameterCombinationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pOSTTestFailoverAsync(String action, String version, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, TestFailoverMessage testFailoverMessage, final ApiCallback<TestFailoverResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = pOSTTestFailoverValidateBeforeCall(action, version, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, testFailoverMessage, _callback);
        Type localVarReturnType = new TypeToken<TestFailoverResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
