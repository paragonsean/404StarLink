/*
 * Twilio - Ip_messaging
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.42.0
 * Contact: support@twilio.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ChannelEnumChannelType;
import org.openapitools.client.model.CredentialEnumPushService;
import org.openapitools.client.model.IpMessagingV1Credential;
import org.openapitools.client.model.IpMessagingV1Service;
import org.openapitools.client.model.IpMessagingV1ServiceChannel;
import org.openapitools.client.model.IpMessagingV1ServiceChannelInvite;
import org.openapitools.client.model.IpMessagingV1ServiceChannelMember;
import org.openapitools.client.model.IpMessagingV1ServiceChannelMessage;
import org.openapitools.client.model.IpMessagingV1ServiceRole;
import org.openapitools.client.model.IpMessagingV1ServiceUser;
import org.openapitools.client.model.ListChannelResponse;
import org.openapitools.client.model.ListCredentialResponse;
import org.openapitools.client.model.ListInviteResponse;
import org.openapitools.client.model.ListMemberResponse;
import org.openapitools.client.model.ListMessageResponse;
import org.openapitools.client.model.ListRoleResponse;
import org.openapitools.client.model.ListServiceResponse;
import org.openapitools.client.model.ListUserChannelResponse;
import org.openapitools.client.model.ListUserResponse;
import org.openapitools.client.model.MessageEnumOrderType;
import org.openapitools.client.model.RoleEnumRoleType;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createChannel
     * @param serviceSid  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param type  (optional)
     * @param uniqueName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelCall(String serviceSid, String attributes, String friendlyName, ChannelEnumChannelType type, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (type != null) {
            localVarFormParams.put("Type", type);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelValidateBeforeCall(String serviceSid, String attributes, String friendlyName, ChannelEnumChannelType type, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createChannel(Async)");
        }

        return createChannelCall(serviceSid, attributes, friendlyName, type, uniqueName, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param type  (optional)
     * @param uniqueName  (optional)
     * @return IpMessagingV1ServiceChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceChannel createChannel(String serviceSid, String attributes, String friendlyName, ChannelEnumChannelType type, String uniqueName) throws ApiException {
        ApiResponse<IpMessagingV1ServiceChannel> localVarResp = createChannelWithHttpInfo(serviceSid, attributes, friendlyName, type, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param type  (optional)
     * @param uniqueName  (optional)
     * @return ApiResponse&lt;IpMessagingV1ServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceChannel> createChannelWithHttpInfo(String serviceSid, String attributes, String friendlyName, ChannelEnumChannelType type, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = createChannelValidateBeforeCall(serviceSid, attributes, friendlyName, type, uniqueName, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param type  (optional)
     * @param uniqueName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createChannelAsync(String serviceSid, String attributes, String friendlyName, ChannelEnumChannelType type, String uniqueName, final ApiCallback<IpMessagingV1ServiceChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelValidateBeforeCall(serviceSid, attributes, friendlyName, type, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCredential
     * @param type  (required)
     * @param apiKey  (optional)
     * @param certificate  (optional)
     * @param friendlyName  (optional)
     * @param privateKey  (optional)
     * @param sandbox  (optional)
     * @param secret  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCredentialCall(CredentialEnumPushService type, String apiKey, String certificate, String friendlyName, String privateKey, Boolean sandbox, String secret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarFormParams.put("ApiKey", apiKey);
        }

        if (certificate != null) {
            localVarFormParams.put("Certificate", certificate);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (privateKey != null) {
            localVarFormParams.put("PrivateKey", privateKey);
        }

        if (sandbox != null) {
            localVarFormParams.put("Sandbox", sandbox);
        }

        if (secret != null) {
            localVarFormParams.put("Secret", secret);
        }

        if (type != null) {
            localVarFormParams.put("Type", type);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCredentialValidateBeforeCall(CredentialEnumPushService type, String apiKey, String certificate, String friendlyName, String privateKey, Boolean sandbox, String secret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createCredential(Async)");
        }

        return createCredentialCall(type, apiKey, certificate, friendlyName, privateKey, sandbox, secret, _callback);

    }

    /**
     * 
     * 
     * @param type  (required)
     * @param apiKey  (optional)
     * @param certificate  (optional)
     * @param friendlyName  (optional)
     * @param privateKey  (optional)
     * @param sandbox  (optional)
     * @param secret  (optional)
     * @return IpMessagingV1Credential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1Credential createCredential(CredentialEnumPushService type, String apiKey, String certificate, String friendlyName, String privateKey, Boolean sandbox, String secret) throws ApiException {
        ApiResponse<IpMessagingV1Credential> localVarResp = createCredentialWithHttpInfo(type, apiKey, certificate, friendlyName, privateKey, sandbox, secret);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param type  (required)
     * @param apiKey  (optional)
     * @param certificate  (optional)
     * @param friendlyName  (optional)
     * @param privateKey  (optional)
     * @param sandbox  (optional)
     * @param secret  (optional)
     * @return ApiResponse&lt;IpMessagingV1Credential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1Credential> createCredentialWithHttpInfo(CredentialEnumPushService type, String apiKey, String certificate, String friendlyName, String privateKey, Boolean sandbox, String secret) throws ApiException {
        okhttp3.Call localVarCall = createCredentialValidateBeforeCall(type, apiKey, certificate, friendlyName, privateKey, sandbox, secret, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1Credential>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param type  (required)
     * @param apiKey  (optional)
     * @param certificate  (optional)
     * @param friendlyName  (optional)
     * @param privateKey  (optional)
     * @param sandbox  (optional)
     * @param secret  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCredentialAsync(CredentialEnumPushService type, String apiKey, String certificate, String friendlyName, String privateKey, Boolean sandbox, String secret, final ApiCallback<IpMessagingV1Credential> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCredentialValidateBeforeCall(type, apiKey, certificate, friendlyName, privateKey, sandbox, secret, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1Credential>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createInvite
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (required)
     * @param roleSid  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInviteCall(String serviceSid, String channelSid, String identity, String roleSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identity != null) {
            localVarFormParams.put("Identity", identity);
        }

        if (roleSid != null) {
            localVarFormParams.put("RoleSid", roleSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInviteValidateBeforeCall(String serviceSid, String channelSid, String identity, String roleSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createInvite(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling createInvite(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling createInvite(Async)");
        }

        return createInviteCall(serviceSid, channelSid, identity, roleSid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (required)
     * @param roleSid  (optional)
     * @return IpMessagingV1ServiceChannelInvite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceChannelInvite createInvite(String serviceSid, String channelSid, String identity, String roleSid) throws ApiException {
        ApiResponse<IpMessagingV1ServiceChannelInvite> localVarResp = createInviteWithHttpInfo(serviceSid, channelSid, identity, roleSid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (required)
     * @param roleSid  (optional)
     * @return ApiResponse&lt;IpMessagingV1ServiceChannelInvite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceChannelInvite> createInviteWithHttpInfo(String serviceSid, String channelSid, String identity, String roleSid) throws ApiException {
        okhttp3.Call localVarCall = createInviteValidateBeforeCall(serviceSid, channelSid, identity, roleSid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelInvite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (required)
     * @param roleSid  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createInviteAsync(String serviceSid, String channelSid, String identity, String roleSid, final ApiCallback<IpMessagingV1ServiceChannelInvite> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInviteValidateBeforeCall(serviceSid, channelSid, identity, roleSid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelInvite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMember
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (required)
     * @param roleSid  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMemberCall(String serviceSid, String channelSid, String identity, String roleSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identity != null) {
            localVarFormParams.put("Identity", identity);
        }

        if (roleSid != null) {
            localVarFormParams.put("RoleSid", roleSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMemberValidateBeforeCall(String serviceSid, String channelSid, String identity, String roleSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createMember(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling createMember(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling createMember(Async)");
        }

        return createMemberCall(serviceSid, channelSid, identity, roleSid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (required)
     * @param roleSid  (optional)
     * @return IpMessagingV1ServiceChannelMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceChannelMember createMember(String serviceSid, String channelSid, String identity, String roleSid) throws ApiException {
        ApiResponse<IpMessagingV1ServiceChannelMember> localVarResp = createMemberWithHttpInfo(serviceSid, channelSid, identity, roleSid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (required)
     * @param roleSid  (optional)
     * @return ApiResponse&lt;IpMessagingV1ServiceChannelMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceChannelMember> createMemberWithHttpInfo(String serviceSid, String channelSid, String identity, String roleSid) throws ApiException {
        okhttp3.Call localVarCall = createMemberValidateBeforeCall(serviceSid, channelSid, identity, roleSid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (required)
     * @param roleSid  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMemberAsync(String serviceSid, String channelSid, String identity, String roleSid, final ApiCallback<IpMessagingV1ServiceChannelMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMemberValidateBeforeCall(serviceSid, channelSid, identity, roleSid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMessage
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param body  (required)
     * @param attributes  (optional)
     * @param from  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMessageCall(String serviceSid, String channelSid, String body, String attributes, String from, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (body != null) {
            localVarFormParams.put("Body", body);
        }

        if (from != null) {
            localVarFormParams.put("From", from);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMessageValidateBeforeCall(String serviceSid, String channelSid, String body, String attributes, String from, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createMessage(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling createMessage(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createMessage(Async)");
        }

        return createMessageCall(serviceSid, channelSid, body, attributes, from, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param body  (required)
     * @param attributes  (optional)
     * @param from  (optional)
     * @return IpMessagingV1ServiceChannelMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceChannelMessage createMessage(String serviceSid, String channelSid, String body, String attributes, String from) throws ApiException {
        ApiResponse<IpMessagingV1ServiceChannelMessage> localVarResp = createMessageWithHttpInfo(serviceSid, channelSid, body, attributes, from);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param body  (required)
     * @param attributes  (optional)
     * @param from  (optional)
     * @return ApiResponse&lt;IpMessagingV1ServiceChannelMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceChannelMessage> createMessageWithHttpInfo(String serviceSid, String channelSid, String body, String attributes, String from) throws ApiException {
        okhttp3.Call localVarCall = createMessageValidateBeforeCall(serviceSid, channelSid, body, attributes, from, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param body  (required)
     * @param attributes  (optional)
     * @param from  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMessageAsync(String serviceSid, String channelSid, String body, String attributes, String from, final ApiCallback<IpMessagingV1ServiceChannelMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMessageValidateBeforeCall(serviceSid, channelSid, body, attributes, from, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRole
     * @param serviceSid  (required)
     * @param friendlyName  (required)
     * @param permission  (required)
     * @param type  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleCall(String serviceSid, String friendlyName, List<String> permission, RoleEnumRoleType type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Roles"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (permission != null) {
            localVarFormParams.put("Permission", permission);
        }

        if (type != null) {
            localVarFormParams.put("Type", type);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoleValidateBeforeCall(String serviceSid, String friendlyName, List<String> permission, RoleEnumRoleType type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createRole(Async)");
        }

        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createRole(Async)");
        }

        // verify the required parameter 'permission' is set
        if (permission == null) {
            throw new ApiException("Missing the required parameter 'permission' when calling createRole(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createRole(Async)");
        }

        return createRoleCall(serviceSid, friendlyName, permission, type, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param friendlyName  (required)
     * @param permission  (required)
     * @param type  (required)
     * @return IpMessagingV1ServiceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceRole createRole(String serviceSid, String friendlyName, List<String> permission, RoleEnumRoleType type) throws ApiException {
        ApiResponse<IpMessagingV1ServiceRole> localVarResp = createRoleWithHttpInfo(serviceSid, friendlyName, permission, type);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param friendlyName  (required)
     * @param permission  (required)
     * @param type  (required)
     * @return ApiResponse&lt;IpMessagingV1ServiceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceRole> createRoleWithHttpInfo(String serviceSid, String friendlyName, List<String> permission, RoleEnumRoleType type) throws ApiException {
        okhttp3.Call localVarCall = createRoleValidateBeforeCall(serviceSid, friendlyName, permission, type, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param friendlyName  (required)
     * @param permission  (required)
     * @param type  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleAsync(String serviceSid, String friendlyName, List<String> permission, RoleEnumRoleType type, final ApiCallback<IpMessagingV1ServiceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoleValidateBeforeCall(serviceSid, friendlyName, permission, type, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createService
     * @param friendlyName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceCall(String friendlyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServiceValidateBeforeCall(String friendlyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'friendlyName' is set
        if (friendlyName == null) {
            throw new ApiException("Missing the required parameter 'friendlyName' when calling createService(Async)");
        }

        return createServiceCall(friendlyName, _callback);

    }

    /**
     * 
     * 
     * @param friendlyName  (required)
     * @return IpMessagingV1Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1Service createService(String friendlyName) throws ApiException {
        ApiResponse<IpMessagingV1Service> localVarResp = createServiceWithHttpInfo(friendlyName);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param friendlyName  (required)
     * @return ApiResponse&lt;IpMessagingV1Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1Service> createServiceWithHttpInfo(String friendlyName) throws ApiException {
        okhttp3.Call localVarCall = createServiceValidateBeforeCall(friendlyName, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param friendlyName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServiceAsync(String friendlyName, final ApiCallback<IpMessagingV1Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServiceValidateBeforeCall(friendlyName, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUser
     * @param serviceSid  (required)
     * @param identity  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param roleSid  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(String serviceSid, String identity, String attributes, String friendlyName, String roleSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Users"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (identity != null) {
            localVarFormParams.put("Identity", identity);
        }

        if (roleSid != null) {
            localVarFormParams.put("RoleSid", roleSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(String serviceSid, String identity, String attributes, String friendlyName, String roleSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling createUser(Async)");
        }

        // verify the required parameter 'identity' is set
        if (identity == null) {
            throw new ApiException("Missing the required parameter 'identity' when calling createUser(Async)");
        }

        return createUserCall(serviceSid, identity, attributes, friendlyName, roleSid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param identity  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param roleSid  (optional)
     * @return IpMessagingV1ServiceUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceUser createUser(String serviceSid, String identity, String attributes, String friendlyName, String roleSid) throws ApiException {
        ApiResponse<IpMessagingV1ServiceUser> localVarResp = createUserWithHttpInfo(serviceSid, identity, attributes, friendlyName, roleSid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param identity  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param roleSid  (optional)
     * @return ApiResponse&lt;IpMessagingV1ServiceUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceUser> createUserWithHttpInfo(String serviceSid, String identity, String attributes, String friendlyName, String roleSid) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(serviceSid, identity, attributes, friendlyName, roleSid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param identity  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param roleSid  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(String serviceSid, String identity, String attributes, String friendlyName, String roleSid, final ApiCallback<IpMessagingV1ServiceUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(serviceSid, identity, attributes, friendlyName, roleSid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannel
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelValidateBeforeCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling deleteChannel(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteChannel(Async)");
        }

        return deleteChannelCall(serviceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteChannel(String serviceSid, String sid) throws ApiException {
        deleteChannelWithHttpInfo(serviceSid, sid);
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteChannelWithHttpInfo(String serviceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(serviceSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteChannelAsync(String serviceSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(serviceSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCredential
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCredentialCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Credentials/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCredentialValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteCredential(Async)");
        }

        return deleteCredentialCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCredential(String sid) throws ApiException {
        deleteCredentialWithHttpInfo(sid);
    }

    /**
     * 
     * 
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCredentialWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteCredentialValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCredentialAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCredentialValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteInvite
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInviteCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInviteValidateBeforeCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling deleteInvite(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling deleteInvite(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteInvite(Async)");
        }

        return deleteInviteCall(serviceSid, channelSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteInvite(String serviceSid, String channelSid, String sid) throws ApiException {
        deleteInviteWithHttpInfo(serviceSid, channelSid, sid);
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteInviteWithHttpInfo(String serviceSid, String channelSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteInviteValidateBeforeCall(serviceSid, channelSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInviteAsync(String serviceSid, String channelSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInviteValidateBeforeCall(serviceSid, channelSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMember
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMemberCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMemberValidateBeforeCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling deleteMember(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling deleteMember(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteMember(Async)");
        }

        return deleteMemberCall(serviceSid, channelSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMember(String serviceSid, String channelSid, String sid) throws ApiException {
        deleteMemberWithHttpInfo(serviceSid, channelSid, sid);
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMemberWithHttpInfo(String serviceSid, String channelSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteMemberValidateBeforeCall(serviceSid, channelSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMemberAsync(String serviceSid, String channelSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMemberValidateBeforeCall(serviceSid, channelSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMessage
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessageCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMessageValidateBeforeCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling deleteMessage(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling deleteMessage(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteMessage(Async)");
        }

        return deleteMessageCall(serviceSid, channelSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMessage(String serviceSid, String channelSid, String sid) throws ApiException {
        deleteMessageWithHttpInfo(serviceSid, channelSid, sid);
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMessageWithHttpInfo(String serviceSid, String channelSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteMessageValidateBeforeCall(serviceSid, channelSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMessageAsync(String serviceSid, String channelSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMessageValidateBeforeCall(serviceSid, channelSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRole
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Roles/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling deleteRole(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteRole(Async)");
        }

        return deleteRoleCall(serviceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRole(String serviceSid, String sid) throws ApiException {
        deleteRoleWithHttpInfo(serviceSid, sid);
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRoleWithHttpInfo(String serviceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(serviceSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAsync(String serviceSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(serviceSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteService
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServiceValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteService(Async)");
        }

        return deleteServiceCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteService(String sid) throws ApiException {
        deleteServiceWithHttpInfo(sid);
    }

    /**
     * 
     * 
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServiceWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServiceAsync(String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServiceValidateBeforeCall(sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Users/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling deleteUser(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling deleteUser(Async)");
        }

        return deleteUserCall(serviceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUser(String serviceSid, String sid) throws ApiException {
        deleteUserWithHttpInfo(serviceSid, sid);
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(String serviceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(serviceSid, sid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The resource was deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(String serviceSid, String sid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(serviceSid, sid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchChannel
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchChannelCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchChannelValidateBeforeCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchChannel(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchChannel(Async)");
        }

        return fetchChannelCall(serviceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @return IpMessagingV1ServiceChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceChannel fetchChannel(String serviceSid, String sid) throws ApiException {
        ApiResponse<IpMessagingV1ServiceChannel> localVarResp = fetchChannelWithHttpInfo(serviceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;IpMessagingV1ServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceChannel> fetchChannelWithHttpInfo(String serviceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchChannelValidateBeforeCall(serviceSid, sid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchChannelAsync(String serviceSid, String sid, final ApiCallback<IpMessagingV1ServiceChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchChannelValidateBeforeCall(serviceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCredential
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCredentialCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Credentials/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCredentialValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchCredential(Async)");
        }

        return fetchCredentialCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid  (required)
     * @return IpMessagingV1Credential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1Credential fetchCredential(String sid) throws ApiException {
        ApiResponse<IpMessagingV1Credential> localVarResp = fetchCredentialWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid  (required)
     * @return ApiResponse&lt;IpMessagingV1Credential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1Credential> fetchCredentialWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchCredentialValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1Credential>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCredentialAsync(String sid, final ApiCallback<IpMessagingV1Credential> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCredentialValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1Credential>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchInvite
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchInviteCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchInviteValidateBeforeCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchInvite(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling fetchInvite(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchInvite(Async)");
        }

        return fetchInviteCall(serviceSid, channelSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @return IpMessagingV1ServiceChannelInvite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceChannelInvite fetchInvite(String serviceSid, String channelSid, String sid) throws ApiException {
        ApiResponse<IpMessagingV1ServiceChannelInvite> localVarResp = fetchInviteWithHttpInfo(serviceSid, channelSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;IpMessagingV1ServiceChannelInvite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceChannelInvite> fetchInviteWithHttpInfo(String serviceSid, String channelSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchInviteValidateBeforeCall(serviceSid, channelSid, sid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelInvite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchInviteAsync(String serviceSid, String channelSid, String sid, final ApiCallback<IpMessagingV1ServiceChannelInvite> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchInviteValidateBeforeCall(serviceSid, channelSid, sid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelInvite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMember
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMemberCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMemberValidateBeforeCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchMember(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling fetchMember(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchMember(Async)");
        }

        return fetchMemberCall(serviceSid, channelSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @return IpMessagingV1ServiceChannelMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceChannelMember fetchMember(String serviceSid, String channelSid, String sid) throws ApiException {
        ApiResponse<IpMessagingV1ServiceChannelMember> localVarResp = fetchMemberWithHttpInfo(serviceSid, channelSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;IpMessagingV1ServiceChannelMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceChannelMember> fetchMemberWithHttpInfo(String serviceSid, String channelSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchMemberValidateBeforeCall(serviceSid, channelSid, sid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMemberAsync(String serviceSid, String channelSid, String sid, final ApiCallback<IpMessagingV1ServiceChannelMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMemberValidateBeforeCall(serviceSid, channelSid, sid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMessage
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMessageCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMessageValidateBeforeCall(String serviceSid, String channelSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchMessage(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling fetchMessage(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchMessage(Async)");
        }

        return fetchMessageCall(serviceSid, channelSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @return IpMessagingV1ServiceChannelMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceChannelMessage fetchMessage(String serviceSid, String channelSid, String sid) throws ApiException {
        ApiResponse<IpMessagingV1ServiceChannelMessage> localVarResp = fetchMessageWithHttpInfo(serviceSid, channelSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;IpMessagingV1ServiceChannelMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceChannelMessage> fetchMessageWithHttpInfo(String serviceSid, String channelSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchMessageValidateBeforeCall(serviceSid, channelSid, sid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMessageAsync(String serviceSid, String channelSid, String sid, final ApiCallback<IpMessagingV1ServiceChannelMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMessageValidateBeforeCall(serviceSid, channelSid, sid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchRole
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRoleCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Roles/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchRoleValidateBeforeCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchRole(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchRole(Async)");
        }

        return fetchRoleCall(serviceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @return IpMessagingV1ServiceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceRole fetchRole(String serviceSid, String sid) throws ApiException {
        ApiResponse<IpMessagingV1ServiceRole> localVarResp = fetchRoleWithHttpInfo(serviceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;IpMessagingV1ServiceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceRole> fetchRoleWithHttpInfo(String serviceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchRoleValidateBeforeCall(serviceSid, sid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRoleAsync(String serviceSid, String sid, final ApiCallback<IpMessagingV1ServiceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchRoleValidateBeforeCall(serviceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchService
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceCall(String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchServiceValidateBeforeCall(String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchService(Async)");
        }

        return fetchServiceCall(sid, _callback);

    }

    /**
     * 
     * 
     * @param sid  (required)
     * @return IpMessagingV1Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1Service fetchService(String sid) throws ApiException {
        ApiResponse<IpMessagingV1Service> localVarResp = fetchServiceWithHttpInfo(sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid  (required)
     * @return ApiResponse&lt;IpMessagingV1Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1Service> fetchServiceWithHttpInfo(String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchServiceValidateBeforeCall(sid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchServiceAsync(String sid, final ApiCallback<IpMessagingV1Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchServiceValidateBeforeCall(sid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUser
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Users/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserValidateBeforeCall(String serviceSid, String sid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling fetchUser(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling fetchUser(Async)");
        }

        return fetchUserCall(serviceSid, sid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @return IpMessagingV1ServiceUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceUser fetchUser(String serviceSid, String sid) throws ApiException {
        ApiResponse<IpMessagingV1ServiceUser> localVarResp = fetchUserWithHttpInfo(serviceSid, sid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @return ApiResponse&lt;IpMessagingV1ServiceUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceUser> fetchUserWithHttpInfo(String serviceSid, String sid) throws ApiException {
        okhttp3.Call localVarCall = fetchUserValidateBeforeCall(serviceSid, sid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserAsync(String serviceSid, String sid, final ApiCallback<IpMessagingV1ServiceUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserValidateBeforeCall(serviceSid, sid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannel
     * @param serviceSid  (required)
     * @param type  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelCall(String serviceSid, List<ChannelEnumChannelType> type, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Type", type));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelValidateBeforeCall(String serviceSid, List<ChannelEnumChannelType> type, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listChannel(Async)");
        }

        return listChannelCall(serviceSid, type, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param type  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelResponse listChannel(String serviceSid, List<ChannelEnumChannelType> type, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListChannelResponse> localVarResp = listChannelWithHttpInfo(serviceSid, type, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param type  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListChannelResponse> listChannelWithHttpInfo(String serviceSid, List<ChannelEnumChannelType> type, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listChannelValidateBeforeCall(serviceSid, type, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param type  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listChannelAsync(String serviceSid, List<ChannelEnumChannelType> type, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelValidateBeforeCall(serviceSid, type, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCredential
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCredentialCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Credentials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCredentialValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listCredentialCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListCredentialResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListCredentialResponse listCredential(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListCredentialResponse> localVarResp = listCredentialWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListCredentialResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCredentialResponse> listCredentialWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listCredentialValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListCredentialResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCredentialAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListCredentialResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCredentialValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListCredentialResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInvite
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInviteCall(String serviceSid, String channelSid, List<String> identity, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Identity", identity));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInviteValidateBeforeCall(String serviceSid, String channelSid, List<String> identity, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listInvite(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling listInvite(Async)");
        }

        return listInviteCall(serviceSid, channelSid, identity, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListInviteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListInviteResponse listInvite(String serviceSid, String channelSid, List<String> identity, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListInviteResponse> localVarResp = listInviteWithHttpInfo(serviceSid, channelSid, identity, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListInviteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListInviteResponse> listInviteWithHttpInfo(String serviceSid, String channelSid, List<String> identity, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listInviteValidateBeforeCall(serviceSid, channelSid, identity, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListInviteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInviteAsync(String serviceSid, String channelSid, List<String> identity, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListInviteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInviteValidateBeforeCall(serviceSid, channelSid, identity, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListInviteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMember
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMemberCall(String serviceSid, String channelSid, List<String> identity, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (identity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "Identity", identity));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMemberValidateBeforeCall(String serviceSid, String channelSid, List<String> identity, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listMember(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling listMember(Async)");
        }

        return listMemberCall(serviceSid, channelSid, identity, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListMemberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListMemberResponse listMember(String serviceSid, String channelSid, List<String> identity, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListMemberResponse> localVarResp = listMemberWithHttpInfo(serviceSid, channelSid, identity, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListMemberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMemberResponse> listMemberWithHttpInfo(String serviceSid, String channelSid, List<String> identity, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listMemberValidateBeforeCall(serviceSid, channelSid, identity, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListMemberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param identity  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMemberAsync(String serviceSid, String channelSid, List<String> identity, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListMemberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMemberValidateBeforeCall(serviceSid, channelSid, identity, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListMemberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMessage
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param order  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessageCall(String serviceSid, String channelSid, MessageEnumOrderType order, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Order", order));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessageValidateBeforeCall(String serviceSid, String channelSid, MessageEnumOrderType order, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listMessage(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling listMessage(Async)");
        }

        return listMessageCall(serviceSid, channelSid, order, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param order  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListMessageResponse listMessage(String serviceSid, String channelSid, MessageEnumOrderType order, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListMessageResponse> localVarResp = listMessageWithHttpInfo(serviceSid, channelSid, order, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param order  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListMessageResponse> listMessageWithHttpInfo(String serviceSid, String channelSid, MessageEnumOrderType order, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listMessageValidateBeforeCall(serviceSid, channelSid, order, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param order  (optional)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMessageAsync(String serviceSid, String channelSid, MessageEnumOrderType order, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessageValidateBeforeCall(serviceSid, channelSid, order, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRole
     * @param serviceSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoleCall(String serviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Roles"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRoleValidateBeforeCall(String serviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listRole(Async)");
        }

        return listRoleCall(serviceSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListRoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListRoleResponse listRole(String serviceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListRoleResponse> localVarResp = listRoleWithHttpInfo(serviceSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListRoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRoleResponse> listRoleWithHttpInfo(String serviceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listRoleValidateBeforeCall(serviceSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoleAsync(String serviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRoleValidateBeforeCall(serviceSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listService
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServiceValidateBeforeCall(Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        return listServiceCall(pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListServiceResponse listService(Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListServiceResponse> localVarResp = listServiceWithHttpInfo(pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListServiceResponse> listServiceWithHttpInfo(Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listServiceValidateBeforeCall(pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listServiceAsync(Integer pageSize, Integer page, String pageToken, final ApiCallback<ListServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServiceValidateBeforeCall(pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUser
     * @param serviceSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserCall(String serviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Users"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserValidateBeforeCall(String serviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listUser(Async)");
        }

        return listUserCall(serviceSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListUserResponse listUser(String serviceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListUserResponse> localVarResp = listUserWithHttpInfo(serviceSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUserResponse> listUserWithHttpInfo(String serviceSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listUserValidateBeforeCall(serviceSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserAsync(String serviceSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserValidateBeforeCall(serviceSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUserChannel
     * @param serviceSid  (required)
     * @param userSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserChannelCall(String serviceSid, String userSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Users/{UserSid}/Channels"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "UserSid" + "}", localVarApiClient.escapeString(userSid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageToken", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserChannelValidateBeforeCall(String serviceSid, String userSid, Integer pageSize, Integer page, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling listUserChannel(Async)");
        }

        // verify the required parameter 'userSid' is set
        if (userSid == null) {
            throw new ApiException("Missing the required parameter 'userSid' when calling listUserChannel(Async)");
        }

        return listUserChannelCall(serviceSid, userSid, pageSize, page, pageToken, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param userSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ListUserChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListUserChannelResponse listUserChannel(String serviceSid, String userSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        ApiResponse<ListUserChannelResponse> localVarResp = listUserChannelWithHttpInfo(serviceSid, userSid, pageSize, page, pageToken);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param userSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @return ApiResponse&lt;ListUserChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUserChannelResponse> listUserChannelWithHttpInfo(String serviceSid, String userSid, Integer pageSize, Integer page, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listUserChannelValidateBeforeCall(serviceSid, userSid, pageSize, page, pageToken, null);
        Type localVarReturnType = new TypeToken<ListUserChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param userSid  (required)
     * @param pageSize How many resources to return in each list page. The default is 50, and the maximum is 1000. (optional)
     * @param page The page index. This value is simply for client state. (optional)
     * @param pageToken The page token. This is provided by the API. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUserChannelAsync(String serviceSid, String userSid, Integer pageSize, Integer page, String pageToken, final ApiCallback<ListUserChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserChannelValidateBeforeCall(serviceSid, userSid, pageSize, page, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ListUserChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChannel
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param uniqueName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelCall(String serviceSid, String sid, String attributes, String friendlyName, String uniqueName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (uniqueName != null) {
            localVarFormParams.put("UniqueName", uniqueName);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChannelValidateBeforeCall(String serviceSid, String sid, String attributes, String friendlyName, String uniqueName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling updateChannel(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateChannel(Async)");
        }

        return updateChannelCall(serviceSid, sid, attributes, friendlyName, uniqueName, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param uniqueName  (optional)
     * @return IpMessagingV1ServiceChannel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceChannel updateChannel(String serviceSid, String sid, String attributes, String friendlyName, String uniqueName) throws ApiException {
        ApiResponse<IpMessagingV1ServiceChannel> localVarResp = updateChannelWithHttpInfo(serviceSid, sid, attributes, friendlyName, uniqueName);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param uniqueName  (optional)
     * @return ApiResponse&lt;IpMessagingV1ServiceChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceChannel> updateChannelWithHttpInfo(String serviceSid, String sid, String attributes, String friendlyName, String uniqueName) throws ApiException {
        okhttp3.Call localVarCall = updateChannelValidateBeforeCall(serviceSid, sid, attributes, friendlyName, uniqueName, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param uniqueName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateChannelAsync(String serviceSid, String sid, String attributes, String friendlyName, String uniqueName, final ApiCallback<IpMessagingV1ServiceChannel> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChannelValidateBeforeCall(serviceSid, sid, attributes, friendlyName, uniqueName, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCredential
     * @param sid  (required)
     * @param apiKey  (optional)
     * @param certificate  (optional)
     * @param friendlyName  (optional)
     * @param privateKey  (optional)
     * @param sandbox  (optional)
     * @param secret  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCredentialCall(String sid, String apiKey, String certificate, String friendlyName, String privateKey, Boolean sandbox, String secret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Credentials/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarFormParams.put("ApiKey", apiKey);
        }

        if (certificate != null) {
            localVarFormParams.put("Certificate", certificate);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (privateKey != null) {
            localVarFormParams.put("PrivateKey", privateKey);
        }

        if (sandbox != null) {
            localVarFormParams.put("Sandbox", sandbox);
        }

        if (secret != null) {
            localVarFormParams.put("Secret", secret);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCredentialValidateBeforeCall(String sid, String apiKey, String certificate, String friendlyName, String privateKey, Boolean sandbox, String secret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateCredential(Async)");
        }

        return updateCredentialCall(sid, apiKey, certificate, friendlyName, privateKey, sandbox, secret, _callback);

    }

    /**
     * 
     * 
     * @param sid  (required)
     * @param apiKey  (optional)
     * @param certificate  (optional)
     * @param friendlyName  (optional)
     * @param privateKey  (optional)
     * @param sandbox  (optional)
     * @param secret  (optional)
     * @return IpMessagingV1Credential
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1Credential updateCredential(String sid, String apiKey, String certificate, String friendlyName, String privateKey, Boolean sandbox, String secret) throws ApiException {
        ApiResponse<IpMessagingV1Credential> localVarResp = updateCredentialWithHttpInfo(sid, apiKey, certificate, friendlyName, privateKey, sandbox, secret);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid  (required)
     * @param apiKey  (optional)
     * @param certificate  (optional)
     * @param friendlyName  (optional)
     * @param privateKey  (optional)
     * @param sandbox  (optional)
     * @param secret  (optional)
     * @return ApiResponse&lt;IpMessagingV1Credential&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1Credential> updateCredentialWithHttpInfo(String sid, String apiKey, String certificate, String friendlyName, String privateKey, Boolean sandbox, String secret) throws ApiException {
        okhttp3.Call localVarCall = updateCredentialValidateBeforeCall(sid, apiKey, certificate, friendlyName, privateKey, sandbox, secret, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1Credential>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid  (required)
     * @param apiKey  (optional)
     * @param certificate  (optional)
     * @param friendlyName  (optional)
     * @param privateKey  (optional)
     * @param sandbox  (optional)
     * @param secret  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCredentialAsync(String sid, String apiKey, String certificate, String friendlyName, String privateKey, Boolean sandbox, String secret, final ApiCallback<IpMessagingV1Credential> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCredentialValidateBeforeCall(sid, apiKey, certificate, friendlyName, privateKey, sandbox, secret, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1Credential>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMember
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param lastConsumedMessageIndex  (optional)
     * @param roleSid  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMemberCall(String serviceSid, String channelSid, String sid, Integer lastConsumedMessageIndex, String roleSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastConsumedMessageIndex != null) {
            localVarFormParams.put("LastConsumedMessageIndex", lastConsumedMessageIndex);
        }

        if (roleSid != null) {
            localVarFormParams.put("RoleSid", roleSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMemberValidateBeforeCall(String serviceSid, String channelSid, String sid, Integer lastConsumedMessageIndex, String roleSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling updateMember(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling updateMember(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateMember(Async)");
        }

        return updateMemberCall(serviceSid, channelSid, sid, lastConsumedMessageIndex, roleSid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param lastConsumedMessageIndex  (optional)
     * @param roleSid  (optional)
     * @return IpMessagingV1ServiceChannelMember
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceChannelMember updateMember(String serviceSid, String channelSid, String sid, Integer lastConsumedMessageIndex, String roleSid) throws ApiException {
        ApiResponse<IpMessagingV1ServiceChannelMember> localVarResp = updateMemberWithHttpInfo(serviceSid, channelSid, sid, lastConsumedMessageIndex, roleSid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param lastConsumedMessageIndex  (optional)
     * @param roleSid  (optional)
     * @return ApiResponse&lt;IpMessagingV1ServiceChannelMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceChannelMember> updateMemberWithHttpInfo(String serviceSid, String channelSid, String sid, Integer lastConsumedMessageIndex, String roleSid) throws ApiException {
        okhttp3.Call localVarCall = updateMemberValidateBeforeCall(serviceSid, channelSid, sid, lastConsumedMessageIndex, roleSid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelMember>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param lastConsumedMessageIndex  (optional)
     * @param roleSid  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMemberAsync(String serviceSid, String channelSid, String sid, Integer lastConsumedMessageIndex, String roleSid, final ApiCallback<IpMessagingV1ServiceChannelMember> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMemberValidateBeforeCall(serviceSid, channelSid, sid, lastConsumedMessageIndex, roleSid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelMember>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMessage
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param attributes  (optional)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessageCall(String serviceSid, String channelSid, String sid, String attributes, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "ChannelSid" + "}", localVarApiClient.escapeString(channelSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (body != null) {
            localVarFormParams.put("Body", body);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMessageValidateBeforeCall(String serviceSid, String channelSid, String sid, String attributes, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling updateMessage(Async)");
        }

        // verify the required parameter 'channelSid' is set
        if (channelSid == null) {
            throw new ApiException("Missing the required parameter 'channelSid' when calling updateMessage(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateMessage(Async)");
        }

        return updateMessageCall(serviceSid, channelSid, sid, attributes, body, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param attributes  (optional)
     * @param body  (optional)
     * @return IpMessagingV1ServiceChannelMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceChannelMessage updateMessage(String serviceSid, String channelSid, String sid, String attributes, String body) throws ApiException {
        ApiResponse<IpMessagingV1ServiceChannelMessage> localVarResp = updateMessageWithHttpInfo(serviceSid, channelSid, sid, attributes, body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param attributes  (optional)
     * @param body  (optional)
     * @return ApiResponse&lt;IpMessagingV1ServiceChannelMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceChannelMessage> updateMessageWithHttpInfo(String serviceSid, String channelSid, String sid, String attributes, String body) throws ApiException {
        okhttp3.Call localVarCall = updateMessageValidateBeforeCall(serviceSid, channelSid, sid, attributes, body, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param channelSid  (required)
     * @param sid  (required)
     * @param attributes  (optional)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMessageAsync(String serviceSid, String channelSid, String sid, String attributes, String body, final ApiCallback<IpMessagingV1ServiceChannelMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMessageValidateBeforeCall(serviceSid, channelSid, sid, attributes, body, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceChannelMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRole
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param permission  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleCall(String serviceSid, String sid, List<String> permission, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Roles/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (permission != null) {
            localVarFormParams.put("Permission", permission);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleValidateBeforeCall(String serviceSid, String sid, List<String> permission, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling updateRole(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateRole(Async)");
        }

        // verify the required parameter 'permission' is set
        if (permission == null) {
            throw new ApiException("Missing the required parameter 'permission' when calling updateRole(Async)");
        }

        return updateRoleCall(serviceSid, sid, permission, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param permission  (required)
     * @return IpMessagingV1ServiceRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceRole updateRole(String serviceSid, String sid, List<String> permission) throws ApiException {
        ApiResponse<IpMessagingV1ServiceRole> localVarResp = updateRoleWithHttpInfo(serviceSid, sid, permission);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param permission  (required)
     * @return ApiResponse&lt;IpMessagingV1ServiceRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceRole> updateRoleWithHttpInfo(String serviceSid, String sid, List<String> permission) throws ApiException {
        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(serviceSid, sid, permission, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param permission  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleAsync(String serviceSid, String sid, List<String> permission, final ApiCallback<IpMessagingV1ServiceRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(serviceSid, sid, permission, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateService
     * @param sid  (required)
     * @param consumptionReportInterval  (optional)
     * @param defaultChannelCreatorRoleSid  (optional)
     * @param defaultChannelRoleSid  (optional)
     * @param defaultServiceRoleSid  (optional)
     * @param friendlyName  (optional)
     * @param limitsChannelMembers  (optional)
     * @param limitsUserChannels  (optional)
     * @param notificationsAddedToChannelEnabled  (optional)
     * @param notificationsAddedToChannelTemplate  (optional)
     * @param notificationsInvitedToChannelEnabled  (optional)
     * @param notificationsInvitedToChannelTemplate  (optional)
     * @param notificationsNewMessageEnabled  (optional)
     * @param notificationsNewMessageTemplate  (optional)
     * @param notificationsRemovedFromChannelEnabled  (optional)
     * @param notificationsRemovedFromChannelTemplate  (optional)
     * @param postWebhookUrl  (optional)
     * @param preWebhookUrl  (optional)
     * @param reachabilityEnabled  (optional)
     * @param readStatusEnabled  (optional)
     * @param typingIndicatorTimeout  (optional)
     * @param webhookFilters  (optional)
     * @param webhookMethod  (optional)
     * @param webhooksOnChannelAddMethod  (optional)
     * @param webhooksOnChannelAddUrl  (optional)
     * @param webhooksOnChannelAddedMethod  (optional)
     * @param webhooksOnChannelAddedUrl  (optional)
     * @param webhooksOnChannelDestroyMethod  (optional)
     * @param webhooksOnChannelDestroyUrl  (optional)
     * @param webhooksOnChannelDestroyedMethod  (optional)
     * @param webhooksOnChannelDestroyedUrl  (optional)
     * @param webhooksOnChannelUpdateMethod  (optional)
     * @param webhooksOnChannelUpdateUrl  (optional)
     * @param webhooksOnChannelUpdatedMethod  (optional)
     * @param webhooksOnChannelUpdatedUrl  (optional)
     * @param webhooksOnMemberAddMethod  (optional)
     * @param webhooksOnMemberAddUrl  (optional)
     * @param webhooksOnMemberAddedMethod  (optional)
     * @param webhooksOnMemberAddedUrl  (optional)
     * @param webhooksOnMemberRemoveMethod  (optional)
     * @param webhooksOnMemberRemoveUrl  (optional)
     * @param webhooksOnMemberRemovedMethod  (optional)
     * @param webhooksOnMemberRemovedUrl  (optional)
     * @param webhooksOnMessageRemoveMethod  (optional)
     * @param webhooksOnMessageRemoveUrl  (optional)
     * @param webhooksOnMessageRemovedMethod  (optional)
     * @param webhooksOnMessageRemovedUrl  (optional)
     * @param webhooksOnMessageSendMethod  (optional)
     * @param webhooksOnMessageSendUrl  (optional)
     * @param webhooksOnMessageSentMethod  (optional)
     * @param webhooksOnMessageSentUrl  (optional)
     * @param webhooksOnMessageUpdateMethod  (optional)
     * @param webhooksOnMessageUpdateUrl  (optional)
     * @param webhooksOnMessageUpdatedMethod  (optional)
     * @param webhooksOnMessageUpdatedUrl  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceCall(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelTemplate, Boolean notificationsNewMessageEnabled, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelTemplate, URI postWebhookUrl, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, String webhooksOnChannelAddMethod, URI webhooksOnChannelAddUrl, String webhooksOnChannelAddedMethod, URI webhooksOnChannelAddedUrl, String webhooksOnChannelDestroyMethod, URI webhooksOnChannelDestroyUrl, String webhooksOnChannelDestroyedMethod, URI webhooksOnChannelDestroyedUrl, String webhooksOnChannelUpdateMethod, URI webhooksOnChannelUpdateUrl, String webhooksOnChannelUpdatedMethod, URI webhooksOnChannelUpdatedUrl, String webhooksOnMemberAddMethod, URI webhooksOnMemberAddUrl, String webhooksOnMemberAddedMethod, URI webhooksOnMemberAddedUrl, String webhooksOnMemberRemoveMethod, URI webhooksOnMemberRemoveUrl, String webhooksOnMemberRemovedMethod, URI webhooksOnMemberRemovedUrl, String webhooksOnMessageRemoveMethod, URI webhooksOnMessageRemoveUrl, String webhooksOnMessageRemovedMethod, URI webhooksOnMessageRemovedUrl, String webhooksOnMessageSendMethod, URI webhooksOnMessageSendUrl, String webhooksOnMessageSentMethod, URI webhooksOnMessageSentUrl, String webhooksOnMessageUpdateMethod, URI webhooksOnMessageUpdateUrl, String webhooksOnMessageUpdatedMethod, URI webhooksOnMessageUpdatedUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{Sid}"
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (consumptionReportInterval != null) {
            localVarFormParams.put("ConsumptionReportInterval", consumptionReportInterval);
        }

        if (defaultChannelCreatorRoleSid != null) {
            localVarFormParams.put("DefaultChannelCreatorRoleSid", defaultChannelCreatorRoleSid);
        }

        if (defaultChannelRoleSid != null) {
            localVarFormParams.put("DefaultChannelRoleSid", defaultChannelRoleSid);
        }

        if (defaultServiceRoleSid != null) {
            localVarFormParams.put("DefaultServiceRoleSid", defaultServiceRoleSid);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (limitsChannelMembers != null) {
            localVarFormParams.put("Limits.ChannelMembers", limitsChannelMembers);
        }

        if (limitsUserChannels != null) {
            localVarFormParams.put("Limits.UserChannels", limitsUserChannels);
        }

        if (notificationsAddedToChannelEnabled != null) {
            localVarFormParams.put("Notifications.AddedToChannel.Enabled", notificationsAddedToChannelEnabled);
        }

        if (notificationsAddedToChannelTemplate != null) {
            localVarFormParams.put("Notifications.AddedToChannel.Template", notificationsAddedToChannelTemplate);
        }

        if (notificationsInvitedToChannelEnabled != null) {
            localVarFormParams.put("Notifications.InvitedToChannel.Enabled", notificationsInvitedToChannelEnabled);
        }

        if (notificationsInvitedToChannelTemplate != null) {
            localVarFormParams.put("Notifications.InvitedToChannel.Template", notificationsInvitedToChannelTemplate);
        }

        if (notificationsNewMessageEnabled != null) {
            localVarFormParams.put("Notifications.NewMessage.Enabled", notificationsNewMessageEnabled);
        }

        if (notificationsNewMessageTemplate != null) {
            localVarFormParams.put("Notifications.NewMessage.Template", notificationsNewMessageTemplate);
        }

        if (notificationsRemovedFromChannelEnabled != null) {
            localVarFormParams.put("Notifications.RemovedFromChannel.Enabled", notificationsRemovedFromChannelEnabled);
        }

        if (notificationsRemovedFromChannelTemplate != null) {
            localVarFormParams.put("Notifications.RemovedFromChannel.Template", notificationsRemovedFromChannelTemplate);
        }

        if (postWebhookUrl != null) {
            localVarFormParams.put("PostWebhookUrl", postWebhookUrl);
        }

        if (preWebhookUrl != null) {
            localVarFormParams.put("PreWebhookUrl", preWebhookUrl);
        }

        if (reachabilityEnabled != null) {
            localVarFormParams.put("ReachabilityEnabled", reachabilityEnabled);
        }

        if (readStatusEnabled != null) {
            localVarFormParams.put("ReadStatusEnabled", readStatusEnabled);
        }

        if (typingIndicatorTimeout != null) {
            localVarFormParams.put("TypingIndicatorTimeout", typingIndicatorTimeout);
        }

        if (webhookFilters != null) {
            localVarFormParams.put("WebhookFilters", webhookFilters);
        }

        if (webhookMethod != null) {
            localVarFormParams.put("WebhookMethod", webhookMethod);
        }

        if (webhooksOnChannelAddMethod != null) {
            localVarFormParams.put("Webhooks.OnChannelAdd.Method", webhooksOnChannelAddMethod);
        }

        if (webhooksOnChannelAddUrl != null) {
            localVarFormParams.put("Webhooks.OnChannelAdd.Url", webhooksOnChannelAddUrl);
        }

        if (webhooksOnChannelAddedMethod != null) {
            localVarFormParams.put("Webhooks.OnChannelAdded.Method", webhooksOnChannelAddedMethod);
        }

        if (webhooksOnChannelAddedUrl != null) {
            localVarFormParams.put("Webhooks.OnChannelAdded.Url", webhooksOnChannelAddedUrl);
        }

        if (webhooksOnChannelDestroyMethod != null) {
            localVarFormParams.put("Webhooks.OnChannelDestroy.Method", webhooksOnChannelDestroyMethod);
        }

        if (webhooksOnChannelDestroyUrl != null) {
            localVarFormParams.put("Webhooks.OnChannelDestroy.Url", webhooksOnChannelDestroyUrl);
        }

        if (webhooksOnChannelDestroyedMethod != null) {
            localVarFormParams.put("Webhooks.OnChannelDestroyed.Method", webhooksOnChannelDestroyedMethod);
        }

        if (webhooksOnChannelDestroyedUrl != null) {
            localVarFormParams.put("Webhooks.OnChannelDestroyed.Url", webhooksOnChannelDestroyedUrl);
        }

        if (webhooksOnChannelUpdateMethod != null) {
            localVarFormParams.put("Webhooks.OnChannelUpdate.Method", webhooksOnChannelUpdateMethod);
        }

        if (webhooksOnChannelUpdateUrl != null) {
            localVarFormParams.put("Webhooks.OnChannelUpdate.Url", webhooksOnChannelUpdateUrl);
        }

        if (webhooksOnChannelUpdatedMethod != null) {
            localVarFormParams.put("Webhooks.OnChannelUpdated.Method", webhooksOnChannelUpdatedMethod);
        }

        if (webhooksOnChannelUpdatedUrl != null) {
            localVarFormParams.put("Webhooks.OnChannelUpdated.Url", webhooksOnChannelUpdatedUrl);
        }

        if (webhooksOnMemberAddMethod != null) {
            localVarFormParams.put("Webhooks.OnMemberAdd.Method", webhooksOnMemberAddMethod);
        }

        if (webhooksOnMemberAddUrl != null) {
            localVarFormParams.put("Webhooks.OnMemberAdd.Url", webhooksOnMemberAddUrl);
        }

        if (webhooksOnMemberAddedMethod != null) {
            localVarFormParams.put("Webhooks.OnMemberAdded.Method", webhooksOnMemberAddedMethod);
        }

        if (webhooksOnMemberAddedUrl != null) {
            localVarFormParams.put("Webhooks.OnMemberAdded.Url", webhooksOnMemberAddedUrl);
        }

        if (webhooksOnMemberRemoveMethod != null) {
            localVarFormParams.put("Webhooks.OnMemberRemove.Method", webhooksOnMemberRemoveMethod);
        }

        if (webhooksOnMemberRemoveUrl != null) {
            localVarFormParams.put("Webhooks.OnMemberRemove.Url", webhooksOnMemberRemoveUrl);
        }

        if (webhooksOnMemberRemovedMethod != null) {
            localVarFormParams.put("Webhooks.OnMemberRemoved.Method", webhooksOnMemberRemovedMethod);
        }

        if (webhooksOnMemberRemovedUrl != null) {
            localVarFormParams.put("Webhooks.OnMemberRemoved.Url", webhooksOnMemberRemovedUrl);
        }

        if (webhooksOnMessageRemoveMethod != null) {
            localVarFormParams.put("Webhooks.OnMessageRemove.Method", webhooksOnMessageRemoveMethod);
        }

        if (webhooksOnMessageRemoveUrl != null) {
            localVarFormParams.put("Webhooks.OnMessageRemove.Url", webhooksOnMessageRemoveUrl);
        }

        if (webhooksOnMessageRemovedMethod != null) {
            localVarFormParams.put("Webhooks.OnMessageRemoved.Method", webhooksOnMessageRemovedMethod);
        }

        if (webhooksOnMessageRemovedUrl != null) {
            localVarFormParams.put("Webhooks.OnMessageRemoved.Url", webhooksOnMessageRemovedUrl);
        }

        if (webhooksOnMessageSendMethod != null) {
            localVarFormParams.put("Webhooks.OnMessageSend.Method", webhooksOnMessageSendMethod);
        }

        if (webhooksOnMessageSendUrl != null) {
            localVarFormParams.put("Webhooks.OnMessageSend.Url", webhooksOnMessageSendUrl);
        }

        if (webhooksOnMessageSentMethod != null) {
            localVarFormParams.put("Webhooks.OnMessageSent.Method", webhooksOnMessageSentMethod);
        }

        if (webhooksOnMessageSentUrl != null) {
            localVarFormParams.put("Webhooks.OnMessageSent.Url", webhooksOnMessageSentUrl);
        }

        if (webhooksOnMessageUpdateMethod != null) {
            localVarFormParams.put("Webhooks.OnMessageUpdate.Method", webhooksOnMessageUpdateMethod);
        }

        if (webhooksOnMessageUpdateUrl != null) {
            localVarFormParams.put("Webhooks.OnMessageUpdate.Url", webhooksOnMessageUpdateUrl);
        }

        if (webhooksOnMessageUpdatedMethod != null) {
            localVarFormParams.put("Webhooks.OnMessageUpdated.Method", webhooksOnMessageUpdatedMethod);
        }

        if (webhooksOnMessageUpdatedUrl != null) {
            localVarFormParams.put("Webhooks.OnMessageUpdated.Url", webhooksOnMessageUpdatedUrl);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServiceValidateBeforeCall(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelTemplate, Boolean notificationsNewMessageEnabled, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelTemplate, URI postWebhookUrl, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, String webhooksOnChannelAddMethod, URI webhooksOnChannelAddUrl, String webhooksOnChannelAddedMethod, URI webhooksOnChannelAddedUrl, String webhooksOnChannelDestroyMethod, URI webhooksOnChannelDestroyUrl, String webhooksOnChannelDestroyedMethod, URI webhooksOnChannelDestroyedUrl, String webhooksOnChannelUpdateMethod, URI webhooksOnChannelUpdateUrl, String webhooksOnChannelUpdatedMethod, URI webhooksOnChannelUpdatedUrl, String webhooksOnMemberAddMethod, URI webhooksOnMemberAddUrl, String webhooksOnMemberAddedMethod, URI webhooksOnMemberAddedUrl, String webhooksOnMemberRemoveMethod, URI webhooksOnMemberRemoveUrl, String webhooksOnMemberRemovedMethod, URI webhooksOnMemberRemovedUrl, String webhooksOnMessageRemoveMethod, URI webhooksOnMessageRemoveUrl, String webhooksOnMessageRemovedMethod, URI webhooksOnMessageRemovedUrl, String webhooksOnMessageSendMethod, URI webhooksOnMessageSendUrl, String webhooksOnMessageSentMethod, URI webhooksOnMessageSentUrl, String webhooksOnMessageUpdateMethod, URI webhooksOnMessageUpdateUrl, String webhooksOnMessageUpdatedMethod, URI webhooksOnMessageUpdatedUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateService(Async)");
        }

        return updateServiceCall(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, notificationsAddedToChannelEnabled, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelTemplate, notificationsNewMessageEnabled, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelTemplate, postWebhookUrl, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod, webhooksOnChannelAddMethod, webhooksOnChannelAddUrl, webhooksOnChannelAddedMethod, webhooksOnChannelAddedUrl, webhooksOnChannelDestroyMethod, webhooksOnChannelDestroyUrl, webhooksOnChannelDestroyedMethod, webhooksOnChannelDestroyedUrl, webhooksOnChannelUpdateMethod, webhooksOnChannelUpdateUrl, webhooksOnChannelUpdatedMethod, webhooksOnChannelUpdatedUrl, webhooksOnMemberAddMethod, webhooksOnMemberAddUrl, webhooksOnMemberAddedMethod, webhooksOnMemberAddedUrl, webhooksOnMemberRemoveMethod, webhooksOnMemberRemoveUrl, webhooksOnMemberRemovedMethod, webhooksOnMemberRemovedUrl, webhooksOnMessageRemoveMethod, webhooksOnMessageRemoveUrl, webhooksOnMessageRemovedMethod, webhooksOnMessageRemovedUrl, webhooksOnMessageSendMethod, webhooksOnMessageSendUrl, webhooksOnMessageSentMethod, webhooksOnMessageSentUrl, webhooksOnMessageUpdateMethod, webhooksOnMessageUpdateUrl, webhooksOnMessageUpdatedMethod, webhooksOnMessageUpdatedUrl, _callback);

    }

    /**
     * 
     * 
     * @param sid  (required)
     * @param consumptionReportInterval  (optional)
     * @param defaultChannelCreatorRoleSid  (optional)
     * @param defaultChannelRoleSid  (optional)
     * @param defaultServiceRoleSid  (optional)
     * @param friendlyName  (optional)
     * @param limitsChannelMembers  (optional)
     * @param limitsUserChannels  (optional)
     * @param notificationsAddedToChannelEnabled  (optional)
     * @param notificationsAddedToChannelTemplate  (optional)
     * @param notificationsInvitedToChannelEnabled  (optional)
     * @param notificationsInvitedToChannelTemplate  (optional)
     * @param notificationsNewMessageEnabled  (optional)
     * @param notificationsNewMessageTemplate  (optional)
     * @param notificationsRemovedFromChannelEnabled  (optional)
     * @param notificationsRemovedFromChannelTemplate  (optional)
     * @param postWebhookUrl  (optional)
     * @param preWebhookUrl  (optional)
     * @param reachabilityEnabled  (optional)
     * @param readStatusEnabled  (optional)
     * @param typingIndicatorTimeout  (optional)
     * @param webhookFilters  (optional)
     * @param webhookMethod  (optional)
     * @param webhooksOnChannelAddMethod  (optional)
     * @param webhooksOnChannelAddUrl  (optional)
     * @param webhooksOnChannelAddedMethod  (optional)
     * @param webhooksOnChannelAddedUrl  (optional)
     * @param webhooksOnChannelDestroyMethod  (optional)
     * @param webhooksOnChannelDestroyUrl  (optional)
     * @param webhooksOnChannelDestroyedMethod  (optional)
     * @param webhooksOnChannelDestroyedUrl  (optional)
     * @param webhooksOnChannelUpdateMethod  (optional)
     * @param webhooksOnChannelUpdateUrl  (optional)
     * @param webhooksOnChannelUpdatedMethod  (optional)
     * @param webhooksOnChannelUpdatedUrl  (optional)
     * @param webhooksOnMemberAddMethod  (optional)
     * @param webhooksOnMemberAddUrl  (optional)
     * @param webhooksOnMemberAddedMethod  (optional)
     * @param webhooksOnMemberAddedUrl  (optional)
     * @param webhooksOnMemberRemoveMethod  (optional)
     * @param webhooksOnMemberRemoveUrl  (optional)
     * @param webhooksOnMemberRemovedMethod  (optional)
     * @param webhooksOnMemberRemovedUrl  (optional)
     * @param webhooksOnMessageRemoveMethod  (optional)
     * @param webhooksOnMessageRemoveUrl  (optional)
     * @param webhooksOnMessageRemovedMethod  (optional)
     * @param webhooksOnMessageRemovedUrl  (optional)
     * @param webhooksOnMessageSendMethod  (optional)
     * @param webhooksOnMessageSendUrl  (optional)
     * @param webhooksOnMessageSentMethod  (optional)
     * @param webhooksOnMessageSentUrl  (optional)
     * @param webhooksOnMessageUpdateMethod  (optional)
     * @param webhooksOnMessageUpdateUrl  (optional)
     * @param webhooksOnMessageUpdatedMethod  (optional)
     * @param webhooksOnMessageUpdatedUrl  (optional)
     * @return IpMessagingV1Service
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1Service updateService(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelTemplate, Boolean notificationsNewMessageEnabled, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelTemplate, URI postWebhookUrl, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, String webhooksOnChannelAddMethod, URI webhooksOnChannelAddUrl, String webhooksOnChannelAddedMethod, URI webhooksOnChannelAddedUrl, String webhooksOnChannelDestroyMethod, URI webhooksOnChannelDestroyUrl, String webhooksOnChannelDestroyedMethod, URI webhooksOnChannelDestroyedUrl, String webhooksOnChannelUpdateMethod, URI webhooksOnChannelUpdateUrl, String webhooksOnChannelUpdatedMethod, URI webhooksOnChannelUpdatedUrl, String webhooksOnMemberAddMethod, URI webhooksOnMemberAddUrl, String webhooksOnMemberAddedMethod, URI webhooksOnMemberAddedUrl, String webhooksOnMemberRemoveMethod, URI webhooksOnMemberRemoveUrl, String webhooksOnMemberRemovedMethod, URI webhooksOnMemberRemovedUrl, String webhooksOnMessageRemoveMethod, URI webhooksOnMessageRemoveUrl, String webhooksOnMessageRemovedMethod, URI webhooksOnMessageRemovedUrl, String webhooksOnMessageSendMethod, URI webhooksOnMessageSendUrl, String webhooksOnMessageSentMethod, URI webhooksOnMessageSentUrl, String webhooksOnMessageUpdateMethod, URI webhooksOnMessageUpdateUrl, String webhooksOnMessageUpdatedMethod, URI webhooksOnMessageUpdatedUrl) throws ApiException {
        ApiResponse<IpMessagingV1Service> localVarResp = updateServiceWithHttpInfo(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, notificationsAddedToChannelEnabled, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelTemplate, notificationsNewMessageEnabled, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelTemplate, postWebhookUrl, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod, webhooksOnChannelAddMethod, webhooksOnChannelAddUrl, webhooksOnChannelAddedMethod, webhooksOnChannelAddedUrl, webhooksOnChannelDestroyMethod, webhooksOnChannelDestroyUrl, webhooksOnChannelDestroyedMethod, webhooksOnChannelDestroyedUrl, webhooksOnChannelUpdateMethod, webhooksOnChannelUpdateUrl, webhooksOnChannelUpdatedMethod, webhooksOnChannelUpdatedUrl, webhooksOnMemberAddMethod, webhooksOnMemberAddUrl, webhooksOnMemberAddedMethod, webhooksOnMemberAddedUrl, webhooksOnMemberRemoveMethod, webhooksOnMemberRemoveUrl, webhooksOnMemberRemovedMethod, webhooksOnMemberRemovedUrl, webhooksOnMessageRemoveMethod, webhooksOnMessageRemoveUrl, webhooksOnMessageRemovedMethod, webhooksOnMessageRemovedUrl, webhooksOnMessageSendMethod, webhooksOnMessageSendUrl, webhooksOnMessageSentMethod, webhooksOnMessageSentUrl, webhooksOnMessageUpdateMethod, webhooksOnMessageUpdateUrl, webhooksOnMessageUpdatedMethod, webhooksOnMessageUpdatedUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param sid  (required)
     * @param consumptionReportInterval  (optional)
     * @param defaultChannelCreatorRoleSid  (optional)
     * @param defaultChannelRoleSid  (optional)
     * @param defaultServiceRoleSid  (optional)
     * @param friendlyName  (optional)
     * @param limitsChannelMembers  (optional)
     * @param limitsUserChannels  (optional)
     * @param notificationsAddedToChannelEnabled  (optional)
     * @param notificationsAddedToChannelTemplate  (optional)
     * @param notificationsInvitedToChannelEnabled  (optional)
     * @param notificationsInvitedToChannelTemplate  (optional)
     * @param notificationsNewMessageEnabled  (optional)
     * @param notificationsNewMessageTemplate  (optional)
     * @param notificationsRemovedFromChannelEnabled  (optional)
     * @param notificationsRemovedFromChannelTemplate  (optional)
     * @param postWebhookUrl  (optional)
     * @param preWebhookUrl  (optional)
     * @param reachabilityEnabled  (optional)
     * @param readStatusEnabled  (optional)
     * @param typingIndicatorTimeout  (optional)
     * @param webhookFilters  (optional)
     * @param webhookMethod  (optional)
     * @param webhooksOnChannelAddMethod  (optional)
     * @param webhooksOnChannelAddUrl  (optional)
     * @param webhooksOnChannelAddedMethod  (optional)
     * @param webhooksOnChannelAddedUrl  (optional)
     * @param webhooksOnChannelDestroyMethod  (optional)
     * @param webhooksOnChannelDestroyUrl  (optional)
     * @param webhooksOnChannelDestroyedMethod  (optional)
     * @param webhooksOnChannelDestroyedUrl  (optional)
     * @param webhooksOnChannelUpdateMethod  (optional)
     * @param webhooksOnChannelUpdateUrl  (optional)
     * @param webhooksOnChannelUpdatedMethod  (optional)
     * @param webhooksOnChannelUpdatedUrl  (optional)
     * @param webhooksOnMemberAddMethod  (optional)
     * @param webhooksOnMemberAddUrl  (optional)
     * @param webhooksOnMemberAddedMethod  (optional)
     * @param webhooksOnMemberAddedUrl  (optional)
     * @param webhooksOnMemberRemoveMethod  (optional)
     * @param webhooksOnMemberRemoveUrl  (optional)
     * @param webhooksOnMemberRemovedMethod  (optional)
     * @param webhooksOnMemberRemovedUrl  (optional)
     * @param webhooksOnMessageRemoveMethod  (optional)
     * @param webhooksOnMessageRemoveUrl  (optional)
     * @param webhooksOnMessageRemovedMethod  (optional)
     * @param webhooksOnMessageRemovedUrl  (optional)
     * @param webhooksOnMessageSendMethod  (optional)
     * @param webhooksOnMessageSendUrl  (optional)
     * @param webhooksOnMessageSentMethod  (optional)
     * @param webhooksOnMessageSentUrl  (optional)
     * @param webhooksOnMessageUpdateMethod  (optional)
     * @param webhooksOnMessageUpdateUrl  (optional)
     * @param webhooksOnMessageUpdatedMethod  (optional)
     * @param webhooksOnMessageUpdatedUrl  (optional)
     * @return ApiResponse&lt;IpMessagingV1Service&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1Service> updateServiceWithHttpInfo(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelTemplate, Boolean notificationsNewMessageEnabled, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelTemplate, URI postWebhookUrl, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, String webhooksOnChannelAddMethod, URI webhooksOnChannelAddUrl, String webhooksOnChannelAddedMethod, URI webhooksOnChannelAddedUrl, String webhooksOnChannelDestroyMethod, URI webhooksOnChannelDestroyUrl, String webhooksOnChannelDestroyedMethod, URI webhooksOnChannelDestroyedUrl, String webhooksOnChannelUpdateMethod, URI webhooksOnChannelUpdateUrl, String webhooksOnChannelUpdatedMethod, URI webhooksOnChannelUpdatedUrl, String webhooksOnMemberAddMethod, URI webhooksOnMemberAddUrl, String webhooksOnMemberAddedMethod, URI webhooksOnMemberAddedUrl, String webhooksOnMemberRemoveMethod, URI webhooksOnMemberRemoveUrl, String webhooksOnMemberRemovedMethod, URI webhooksOnMemberRemovedUrl, String webhooksOnMessageRemoveMethod, URI webhooksOnMessageRemoveUrl, String webhooksOnMessageRemovedMethod, URI webhooksOnMessageRemovedUrl, String webhooksOnMessageSendMethod, URI webhooksOnMessageSendUrl, String webhooksOnMessageSentMethod, URI webhooksOnMessageSentUrl, String webhooksOnMessageUpdateMethod, URI webhooksOnMessageUpdateUrl, String webhooksOnMessageUpdatedMethod, URI webhooksOnMessageUpdatedUrl) throws ApiException {
        okhttp3.Call localVarCall = updateServiceValidateBeforeCall(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, notificationsAddedToChannelEnabled, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelTemplate, notificationsNewMessageEnabled, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelTemplate, postWebhookUrl, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod, webhooksOnChannelAddMethod, webhooksOnChannelAddUrl, webhooksOnChannelAddedMethod, webhooksOnChannelAddedUrl, webhooksOnChannelDestroyMethod, webhooksOnChannelDestroyUrl, webhooksOnChannelDestroyedMethod, webhooksOnChannelDestroyedUrl, webhooksOnChannelUpdateMethod, webhooksOnChannelUpdateUrl, webhooksOnChannelUpdatedMethod, webhooksOnChannelUpdatedUrl, webhooksOnMemberAddMethod, webhooksOnMemberAddUrl, webhooksOnMemberAddedMethod, webhooksOnMemberAddedUrl, webhooksOnMemberRemoveMethod, webhooksOnMemberRemoveUrl, webhooksOnMemberRemovedMethod, webhooksOnMemberRemovedUrl, webhooksOnMessageRemoveMethod, webhooksOnMessageRemoveUrl, webhooksOnMessageRemovedMethod, webhooksOnMessageRemovedUrl, webhooksOnMessageSendMethod, webhooksOnMessageSendUrl, webhooksOnMessageSentMethod, webhooksOnMessageSentUrl, webhooksOnMessageUpdateMethod, webhooksOnMessageUpdateUrl, webhooksOnMessageUpdatedMethod, webhooksOnMessageUpdatedUrl, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1Service>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sid  (required)
     * @param consumptionReportInterval  (optional)
     * @param defaultChannelCreatorRoleSid  (optional)
     * @param defaultChannelRoleSid  (optional)
     * @param defaultServiceRoleSid  (optional)
     * @param friendlyName  (optional)
     * @param limitsChannelMembers  (optional)
     * @param limitsUserChannels  (optional)
     * @param notificationsAddedToChannelEnabled  (optional)
     * @param notificationsAddedToChannelTemplate  (optional)
     * @param notificationsInvitedToChannelEnabled  (optional)
     * @param notificationsInvitedToChannelTemplate  (optional)
     * @param notificationsNewMessageEnabled  (optional)
     * @param notificationsNewMessageTemplate  (optional)
     * @param notificationsRemovedFromChannelEnabled  (optional)
     * @param notificationsRemovedFromChannelTemplate  (optional)
     * @param postWebhookUrl  (optional)
     * @param preWebhookUrl  (optional)
     * @param reachabilityEnabled  (optional)
     * @param readStatusEnabled  (optional)
     * @param typingIndicatorTimeout  (optional)
     * @param webhookFilters  (optional)
     * @param webhookMethod  (optional)
     * @param webhooksOnChannelAddMethod  (optional)
     * @param webhooksOnChannelAddUrl  (optional)
     * @param webhooksOnChannelAddedMethod  (optional)
     * @param webhooksOnChannelAddedUrl  (optional)
     * @param webhooksOnChannelDestroyMethod  (optional)
     * @param webhooksOnChannelDestroyUrl  (optional)
     * @param webhooksOnChannelDestroyedMethod  (optional)
     * @param webhooksOnChannelDestroyedUrl  (optional)
     * @param webhooksOnChannelUpdateMethod  (optional)
     * @param webhooksOnChannelUpdateUrl  (optional)
     * @param webhooksOnChannelUpdatedMethod  (optional)
     * @param webhooksOnChannelUpdatedUrl  (optional)
     * @param webhooksOnMemberAddMethod  (optional)
     * @param webhooksOnMemberAddUrl  (optional)
     * @param webhooksOnMemberAddedMethod  (optional)
     * @param webhooksOnMemberAddedUrl  (optional)
     * @param webhooksOnMemberRemoveMethod  (optional)
     * @param webhooksOnMemberRemoveUrl  (optional)
     * @param webhooksOnMemberRemovedMethod  (optional)
     * @param webhooksOnMemberRemovedUrl  (optional)
     * @param webhooksOnMessageRemoveMethod  (optional)
     * @param webhooksOnMessageRemoveUrl  (optional)
     * @param webhooksOnMessageRemovedMethod  (optional)
     * @param webhooksOnMessageRemovedUrl  (optional)
     * @param webhooksOnMessageSendMethod  (optional)
     * @param webhooksOnMessageSendUrl  (optional)
     * @param webhooksOnMessageSentMethod  (optional)
     * @param webhooksOnMessageSentUrl  (optional)
     * @param webhooksOnMessageUpdateMethod  (optional)
     * @param webhooksOnMessageUpdateUrl  (optional)
     * @param webhooksOnMessageUpdatedMethod  (optional)
     * @param webhooksOnMessageUpdatedUrl  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServiceAsync(String sid, Integer consumptionReportInterval, String defaultChannelCreatorRoleSid, String defaultChannelRoleSid, String defaultServiceRoleSid, String friendlyName, Integer limitsChannelMembers, Integer limitsUserChannels, Boolean notificationsAddedToChannelEnabled, String notificationsAddedToChannelTemplate, Boolean notificationsInvitedToChannelEnabled, String notificationsInvitedToChannelTemplate, Boolean notificationsNewMessageEnabled, String notificationsNewMessageTemplate, Boolean notificationsRemovedFromChannelEnabled, String notificationsRemovedFromChannelTemplate, URI postWebhookUrl, URI preWebhookUrl, Boolean reachabilityEnabled, Boolean readStatusEnabled, Integer typingIndicatorTimeout, List<String> webhookFilters, String webhookMethod, String webhooksOnChannelAddMethod, URI webhooksOnChannelAddUrl, String webhooksOnChannelAddedMethod, URI webhooksOnChannelAddedUrl, String webhooksOnChannelDestroyMethod, URI webhooksOnChannelDestroyUrl, String webhooksOnChannelDestroyedMethod, URI webhooksOnChannelDestroyedUrl, String webhooksOnChannelUpdateMethod, URI webhooksOnChannelUpdateUrl, String webhooksOnChannelUpdatedMethod, URI webhooksOnChannelUpdatedUrl, String webhooksOnMemberAddMethod, URI webhooksOnMemberAddUrl, String webhooksOnMemberAddedMethod, URI webhooksOnMemberAddedUrl, String webhooksOnMemberRemoveMethod, URI webhooksOnMemberRemoveUrl, String webhooksOnMemberRemovedMethod, URI webhooksOnMemberRemovedUrl, String webhooksOnMessageRemoveMethod, URI webhooksOnMessageRemoveUrl, String webhooksOnMessageRemovedMethod, URI webhooksOnMessageRemovedUrl, String webhooksOnMessageSendMethod, URI webhooksOnMessageSendUrl, String webhooksOnMessageSentMethod, URI webhooksOnMessageSentUrl, String webhooksOnMessageUpdateMethod, URI webhooksOnMessageUpdateUrl, String webhooksOnMessageUpdatedMethod, URI webhooksOnMessageUpdatedUrl, final ApiCallback<IpMessagingV1Service> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServiceValidateBeforeCall(sid, consumptionReportInterval, defaultChannelCreatorRoleSid, defaultChannelRoleSid, defaultServiceRoleSid, friendlyName, limitsChannelMembers, limitsUserChannels, notificationsAddedToChannelEnabled, notificationsAddedToChannelTemplate, notificationsInvitedToChannelEnabled, notificationsInvitedToChannelTemplate, notificationsNewMessageEnabled, notificationsNewMessageTemplate, notificationsRemovedFromChannelEnabled, notificationsRemovedFromChannelTemplate, postWebhookUrl, preWebhookUrl, reachabilityEnabled, readStatusEnabled, typingIndicatorTimeout, webhookFilters, webhookMethod, webhooksOnChannelAddMethod, webhooksOnChannelAddUrl, webhooksOnChannelAddedMethod, webhooksOnChannelAddedUrl, webhooksOnChannelDestroyMethod, webhooksOnChannelDestroyUrl, webhooksOnChannelDestroyedMethod, webhooksOnChannelDestroyedUrl, webhooksOnChannelUpdateMethod, webhooksOnChannelUpdateUrl, webhooksOnChannelUpdatedMethod, webhooksOnChannelUpdatedUrl, webhooksOnMemberAddMethod, webhooksOnMemberAddUrl, webhooksOnMemberAddedMethod, webhooksOnMemberAddedUrl, webhooksOnMemberRemoveMethod, webhooksOnMemberRemoveUrl, webhooksOnMemberRemovedMethod, webhooksOnMemberRemovedUrl, webhooksOnMessageRemoveMethod, webhooksOnMessageRemoveUrl, webhooksOnMessageRemovedMethod, webhooksOnMessageRemovedUrl, webhooksOnMessageSendMethod, webhooksOnMessageSendUrl, webhooksOnMessageSentMethod, webhooksOnMessageSentUrl, webhooksOnMessageUpdateMethod, webhooksOnMessageUpdateUrl, webhooksOnMessageUpdatedMethod, webhooksOnMessageUpdatedUrl, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1Service>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param roleSid  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String serviceSid, String sid, String attributes, String friendlyName, String roleSid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] { "https://ip-messaging.twilio.com" };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/Services/{ServiceSid}/Users/{Sid}"
            .replace("{" + "ServiceSid" + "}", localVarApiClient.escapeString(serviceSid.toString()))
            .replace("{" + "Sid" + "}", localVarApiClient.escapeString(sid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attributes != null) {
            localVarFormParams.put("Attributes", attributes);
        }

        if (friendlyName != null) {
            localVarFormParams.put("FriendlyName", friendlyName);
        }

        if (roleSid != null) {
            localVarFormParams.put("RoleSid", roleSid);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accountSid_authToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String serviceSid, String sid, String attributes, String friendlyName, String roleSid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serviceSid' is set
        if (serviceSid == null) {
            throw new ApiException("Missing the required parameter 'serviceSid' when calling updateUser(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling updateUser(Async)");
        }

        return updateUserCall(serviceSid, sid, attributes, friendlyName, roleSid, _callback);

    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param roleSid  (optional)
     * @return IpMessagingV1ServiceUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IpMessagingV1ServiceUser updateUser(String serviceSid, String sid, String attributes, String friendlyName, String roleSid) throws ApiException {
        ApiResponse<IpMessagingV1ServiceUser> localVarResp = updateUserWithHttpInfo(serviceSid, sid, attributes, friendlyName, roleSid);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param roleSid  (optional)
     * @return ApiResponse&lt;IpMessagingV1ServiceUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IpMessagingV1ServiceUser> updateUserWithHttpInfo(String serviceSid, String sid, String attributes, String friendlyName, String roleSid) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(serviceSid, sid, attributes, friendlyName, roleSid, null);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param serviceSid  (required)
     * @param sid  (required)
     * @param attributes  (optional)
     * @param friendlyName  (optional)
     * @param roleSid  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String serviceSid, String sid, String attributes, String friendlyName, String roleSid, final ApiCallback<IpMessagingV1ServiceUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(serviceSid, sid, attributes, friendlyName, roleSid, _callback);
        Type localVarReturnType = new TypeToken<IpMessagingV1ServiceUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
