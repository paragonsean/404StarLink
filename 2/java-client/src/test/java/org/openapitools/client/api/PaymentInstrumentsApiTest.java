/*
 * Configuration API
 * The Configuration API enables you to create a platform where you can onboard your users as account holders and create balance accounts, cards, and business accounts.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Versioning The Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/bcl/v2/accountHolders ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v2`.
 *
 * The version of the OpenAPI document: 2
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PaymentInstrument;
import org.openapitools.client.model.PaymentInstrumentInfo;
import org.openapitools.client.model.PaymentInstrumentRevealInfo;
import org.openapitools.client.model.PaymentInstrumentUpdateRequest;
import org.openapitools.client.model.RestServiceError;
import org.openapitools.client.model.TransactionRulesResponse;
import org.openapitools.client.model.UpdatePaymentInstrument;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentInstrumentsApi
 */
@Disabled
public class PaymentInstrumentsApiTest {

    private final PaymentInstrumentsApi api = new PaymentInstrumentsApi();

    /**
     * Get a payment instrument
     *
     * Returns the details of a payment instrument.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentInstrumentsIdTest() throws ApiException {
        String id = null;
        PaymentInstrument response = api.getPaymentInstrumentsId(id);
        // TODO: test validations
    }

    /**
     * Get the PAN of a payment instrument
     *
     * Returns the primary account number (PAN) of a payment instrument.  To make this request, your API credential must have the following [role](https://docs.adyen.com/issuing/manage-access/api-credentials-web-service#api-permissions):  * Balance Platform BCL PCI role
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentInstrumentsIdRevealTest() throws ApiException {
        String id = null;
        PaymentInstrumentRevealInfo response = api.getPaymentInstrumentsIdReveal(id);
        // TODO: test validations
    }

    /**
     * Get all transaction rules for a payment instrument
     *
     * Returns a list of transaction rules associated with a payment instrument.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentInstrumentsIdTransactionRulesTest() throws ApiException {
        String id = null;
        TransactionRulesResponse response = api.getPaymentInstrumentsIdTransactionRules(id);
        // TODO: test validations
    }

    /**
     * Update a payment instrument
     *
     * Updates a payment instrument. Once a payment instrument is already active, you can only update its status. However, for cards created with **inactive** status, you can still update the balance account associated with the card.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchPaymentInstrumentsIdTest() throws ApiException {
        String id = null;
        PaymentInstrumentUpdateRequest paymentInstrumentUpdateRequest = null;
        UpdatePaymentInstrument response = api.patchPaymentInstrumentsId(id, paymentInstrumentUpdateRequest);
        // TODO: test validations
    }

    /**
     * Create a payment instrument
     *
     * Creates a payment instrument to issue a physical card, a virtual card, or a business account to your user.   For more information, refer to [Issue cards](https://docs.adyen.com/issuing/create-cards) or [Issue business accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPaymentInstrumentsTest() throws ApiException {
        PaymentInstrumentInfo paymentInstrumentInfo = null;
        PaymentInstrument response = api.postPaymentInstruments(paymentInstrumentInfo);
        // TODO: test validations
    }

}
