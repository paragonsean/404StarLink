/*
 * Configuration API
 * The Configuration API enables you to create a platform where you can onboard your users as account holders and create balance accounts, cards, and business accounts.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Versioning The Configuration API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/bcl/v2/accountHolders ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the API key or the username and password to send requests to `https://balanceplatform-api-live.adyen.com/bcl/v2`.
 *
 * The version of the OpenAPI document: 2
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RestServiceError;
import org.openapitools.client.model.TransactionRule;
import org.openapitools.client.model.TransactionRuleInfo;
import org.openapitools.client.model.TransactionRuleResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionRulesApi
 */
@Disabled
public class TransactionRulesApiTest {

    private final TransactionRulesApi api = new TransactionRulesApi();

    /**
     * Delete a transaction rule
     *
     * Deletes a transaction rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTransactionRulesTransactionRuleIdTest() throws ApiException {
        String transactionRuleId = null;
        TransactionRule response = api.deleteTransactionRulesTransactionRuleId(transactionRuleId);
        // TODO: test validations
    }

    /**
     * Get a transaction rule
     *
     * Returns the details of a transaction rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionRulesTransactionRuleIdTest() throws ApiException {
        String transactionRuleId = null;
        TransactionRuleResponse response = api.getTransactionRulesTransactionRuleId(transactionRuleId);
        // TODO: test validations
    }

    /**
     * Update a transaction rule
     *
     * Updates a transaction rule.   * To update only the status of a transaction rule, send only the &#x60;status&#x60; parameter. All other parameters not provided in the request are left unchanged.  * When updating any other parameter, you need to send all existing resource parameters. If you omit a parameter in the request, that parameter is removed from the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchTransactionRulesTransactionRuleIdTest() throws ApiException {
        String transactionRuleId = null;
        TransactionRuleInfo transactionRuleInfo = null;
        TransactionRule response = api.patchTransactionRulesTransactionRuleId(transactionRuleId, transactionRuleInfo);
        // TODO: test validations
    }

    /**
     * Create a transaction rule
     *
     * Creates a [transaction rule](https://docs.adyen.com/issuing/transaction-rules). When your user makes a transaction with their Adyen-issued card, the transaction is allowed or declined based on the conditions and outcome defined in the transaction rule. You can apply the transaction rule to several cards, such as all the cards in your platform, or to a specific card. For use cases, see [examples](https://docs.adyen.com/issuing/transaction-rules/examples).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTransactionRulesTest() throws ApiException {
        TransactionRuleInfo transactionRuleInfo = null;
        TransactionRule response = api.postTransactionRules(transactionRuleInfo);
        // TODO: test validations
    }

}
