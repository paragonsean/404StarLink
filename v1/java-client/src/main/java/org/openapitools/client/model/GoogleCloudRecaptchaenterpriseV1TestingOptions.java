/*
 * reCAPTCHA Enterprise API
 * Help protect your website from fraudulent activity, spam, and abuse without creating friction.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options for user acceptance testing.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:56:52.022302-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecaptchaenterpriseV1TestingOptions {
  /**
   * For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if CHALLENGE.
   */
  @JsonAdapter(TestingChallengeEnum.Adapter.class)
  public enum TestingChallengeEnum {
    TESTING_CHALLENGE_UNSPECIFIED("TESTING_CHALLENGE_UNSPECIFIED"),
    
    NOCAPTCHA("NOCAPTCHA"),
    
    UNSOLVABLE_CHALLENGE("UNSOLVABLE_CHALLENGE");

    private String value;

    TestingChallengeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TestingChallengeEnum fromValue(String value) {
      for (TestingChallengeEnum b : TestingChallengeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TestingChallengeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TestingChallengeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TestingChallengeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TestingChallengeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TestingChallengeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TESTING_CHALLENGE = "testingChallenge";
  @SerializedName(SERIALIZED_NAME_TESTING_CHALLENGE)
  private TestingChallengeEnum testingChallenge;

  public static final String SERIALIZED_NAME_TESTING_SCORE = "testingScore";
  @SerializedName(SERIALIZED_NAME_TESTING_SCORE)
  private Float testingScore;

  public GoogleCloudRecaptchaenterpriseV1TestingOptions() {
  }

  public GoogleCloudRecaptchaenterpriseV1TestingOptions testingChallenge(TestingChallengeEnum testingChallenge) {
    this.testingChallenge = testingChallenge;
    return this;
  }

  /**
   * For challenge-based keys only (CHECKBOX, INVISIBLE), all challenge requests for this site will return nocaptcha if NOCAPTCHA, or an unsolvable challenge if CHALLENGE.
   * @return testingChallenge
   */
  @javax.annotation.Nullable
  public TestingChallengeEnum getTestingChallenge() {
    return testingChallenge;
  }

  public void setTestingChallenge(TestingChallengeEnum testingChallenge) {
    this.testingChallenge = testingChallenge;
  }


  public GoogleCloudRecaptchaenterpriseV1TestingOptions testingScore(Float testingScore) {
    this.testingScore = testingScore;
    return this;
  }

  /**
   * All assessments for this Key will return this score. Must be between 0 (likely not legitimate) and 1 (likely legitimate) inclusive.
   * @return testingScore
   */
  @javax.annotation.Nullable
  public Float getTestingScore() {
    return testingScore;
  }

  public void setTestingScore(Float testingScore) {
    this.testingScore = testingScore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecaptchaenterpriseV1TestingOptions googleCloudRecaptchaenterpriseV1TestingOptions = (GoogleCloudRecaptchaenterpriseV1TestingOptions) o;
    return Objects.equals(this.testingChallenge, googleCloudRecaptchaenterpriseV1TestingOptions.testingChallenge) &&
        Objects.equals(this.testingScore, googleCloudRecaptchaenterpriseV1TestingOptions.testingScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testingChallenge, testingScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecaptchaenterpriseV1TestingOptions {\n");
    sb.append("    testingChallenge: ").append(toIndentedString(testingChallenge)).append("\n");
    sb.append("    testingScore: ").append(toIndentedString(testingScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("testingChallenge");
    openapiFields.add("testingScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecaptchaenterpriseV1TestingOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecaptchaenterpriseV1TestingOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecaptchaenterpriseV1TestingOptions is not found in the empty JSON string", GoogleCloudRecaptchaenterpriseV1TestingOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecaptchaenterpriseV1TestingOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecaptchaenterpriseV1TestingOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("testingChallenge") != null && !jsonObj.get("testingChallenge").isJsonNull()) && !jsonObj.get("testingChallenge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `testingChallenge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("testingChallenge").toString()));
      }
      // validate the optional field `testingChallenge`
      if (jsonObj.get("testingChallenge") != null && !jsonObj.get("testingChallenge").isJsonNull()) {
        TestingChallengeEnum.validateJsonElement(jsonObj.get("testingChallenge"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecaptchaenterpriseV1TestingOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecaptchaenterpriseV1TestingOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecaptchaenterpriseV1TestingOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecaptchaenterpriseV1TestingOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecaptchaenterpriseV1TestingOptions>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecaptchaenterpriseV1TestingOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecaptchaenterpriseV1TestingOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecaptchaenterpriseV1TestingOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecaptchaenterpriseV1TestingOptions
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecaptchaenterpriseV1TestingOptions
   */
  public static GoogleCloudRecaptchaenterpriseV1TestingOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecaptchaenterpriseV1TestingOptions.class);
  }

  /**
   * Convert an instance of GoogleCloudRecaptchaenterpriseV1TestingOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

