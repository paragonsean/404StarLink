/*
 * Notebooks API
 * Notebooks API is used to manage notebook resources in Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines flags that are used to run the diagnostic tool
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:00:12.602654-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiagnosticConfig {
  public static final String SERIALIZED_NAME_COPY_HOME_FILES_FLAG_ENABLED = "copyHomeFilesFlagEnabled";
  @SerializedName(SERIALIZED_NAME_COPY_HOME_FILES_FLAG_ENABLED)
  private Boolean copyHomeFilesFlagEnabled;

  public static final String SERIALIZED_NAME_GCS_BUCKET = "gcsBucket";
  @SerializedName(SERIALIZED_NAME_GCS_BUCKET)
  private String gcsBucket;

  public static final String SERIALIZED_NAME_PACKET_CAPTURE_FLAG_ENABLED = "packetCaptureFlagEnabled";
  @SerializedName(SERIALIZED_NAME_PACKET_CAPTURE_FLAG_ENABLED)
  private Boolean packetCaptureFlagEnabled;

  public static final String SERIALIZED_NAME_RELATIVE_PATH = "relativePath";
  @SerializedName(SERIALIZED_NAME_RELATIVE_PATH)
  private String relativePath;

  public static final String SERIALIZED_NAME_REPAIR_FLAG_ENABLED = "repairFlagEnabled";
  @SerializedName(SERIALIZED_NAME_REPAIR_FLAG_ENABLED)
  private Boolean repairFlagEnabled;

  public DiagnosticConfig() {
  }

  public DiagnosticConfig copyHomeFilesFlagEnabled(Boolean copyHomeFilesFlagEnabled) {
    this.copyHomeFilesFlagEnabled = copyHomeFilesFlagEnabled;
    return this;
  }

  /**
   * Optional. Enables flag to copy all &#x60;/home/jupyter&#x60; folder contents
   * @return copyHomeFilesFlagEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCopyHomeFilesFlagEnabled() {
    return copyHomeFilesFlagEnabled;
  }

  public void setCopyHomeFilesFlagEnabled(Boolean copyHomeFilesFlagEnabled) {
    this.copyHomeFilesFlagEnabled = copyHomeFilesFlagEnabled;
  }


  public DiagnosticConfig gcsBucket(String gcsBucket) {
    this.gcsBucket = gcsBucket;
    return this;
  }

  /**
   * Required. User Cloud Storage bucket location (REQUIRED). Must be formatted with path prefix (&#x60;gs://$GCS_BUCKET&#x60;). Permissions: User Managed Notebooks: - storage.buckets.writer: Must be given to the project&#39;s service account attached to VM. Google Managed Notebooks: - storage.buckets.writer: Must be given to the project&#39;s service account or user credentials attached to VM depending on authentication mode. Cloud Storage bucket Log file will be written to &#x60;gs://$GCS_BUCKET/$RELATIVE_PATH/$VM_DATE_$TIME.tar.gz&#x60;
   * @return gcsBucket
   */
  @javax.annotation.Nullable
  public String getGcsBucket() {
    return gcsBucket;
  }

  public void setGcsBucket(String gcsBucket) {
    this.gcsBucket = gcsBucket;
  }


  public DiagnosticConfig packetCaptureFlagEnabled(Boolean packetCaptureFlagEnabled) {
    this.packetCaptureFlagEnabled = packetCaptureFlagEnabled;
    return this;
  }

  /**
   * Optional. Enables flag to capture packets from the instance for 30 seconds
   * @return packetCaptureFlagEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPacketCaptureFlagEnabled() {
    return packetCaptureFlagEnabled;
  }

  public void setPacketCaptureFlagEnabled(Boolean packetCaptureFlagEnabled) {
    this.packetCaptureFlagEnabled = packetCaptureFlagEnabled;
  }


  public DiagnosticConfig relativePath(String relativePath) {
    this.relativePath = relativePath;
    return this;
  }

  /**
   * Optional. Defines the relative storage path in the Cloud Storage bucket where the diagnostic logs will be written: Default path will be the root directory of the Cloud Storage bucket (&#x60;gs://$GCS_BUCKET/$DATE_$TIME.tar.gz&#x60;) Example of full path where Log file will be written: &#x60;gs://$GCS_BUCKET/$RELATIVE_PATH/&#x60;
   * @return relativePath
   */
  @javax.annotation.Nullable
  public String getRelativePath() {
    return relativePath;
  }

  public void setRelativePath(String relativePath) {
    this.relativePath = relativePath;
  }


  public DiagnosticConfig repairFlagEnabled(Boolean repairFlagEnabled) {
    this.repairFlagEnabled = repairFlagEnabled;
    return this;
  }

  /**
   * Optional. Enables flag to repair service for instance
   * @return repairFlagEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRepairFlagEnabled() {
    return repairFlagEnabled;
  }

  public void setRepairFlagEnabled(Boolean repairFlagEnabled) {
    this.repairFlagEnabled = repairFlagEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticConfig diagnosticConfig = (DiagnosticConfig) o;
    return Objects.equals(this.copyHomeFilesFlagEnabled, diagnosticConfig.copyHomeFilesFlagEnabled) &&
        Objects.equals(this.gcsBucket, diagnosticConfig.gcsBucket) &&
        Objects.equals(this.packetCaptureFlagEnabled, diagnosticConfig.packetCaptureFlagEnabled) &&
        Objects.equals(this.relativePath, diagnosticConfig.relativePath) &&
        Objects.equals(this.repairFlagEnabled, diagnosticConfig.repairFlagEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyHomeFilesFlagEnabled, gcsBucket, packetCaptureFlagEnabled, relativePath, repairFlagEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticConfig {\n");
    sb.append("    copyHomeFilesFlagEnabled: ").append(toIndentedString(copyHomeFilesFlagEnabled)).append("\n");
    sb.append("    gcsBucket: ").append(toIndentedString(gcsBucket)).append("\n");
    sb.append("    packetCaptureFlagEnabled: ").append(toIndentedString(packetCaptureFlagEnabled)).append("\n");
    sb.append("    relativePath: ").append(toIndentedString(relativePath)).append("\n");
    sb.append("    repairFlagEnabled: ").append(toIndentedString(repairFlagEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("copyHomeFilesFlagEnabled");
    openapiFields.add("gcsBucket");
    openapiFields.add("packetCaptureFlagEnabled");
    openapiFields.add("relativePath");
    openapiFields.add("repairFlagEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiagnosticConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiagnosticConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiagnosticConfig is not found in the empty JSON string", DiagnosticConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiagnosticConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiagnosticConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gcsBucket") != null && !jsonObj.get("gcsBucket").isJsonNull()) && !jsonObj.get("gcsBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcsBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcsBucket").toString()));
      }
      if ((jsonObj.get("relativePath") != null && !jsonObj.get("relativePath").isJsonNull()) && !jsonObj.get("relativePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativePath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiagnosticConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiagnosticConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiagnosticConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiagnosticConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DiagnosticConfig>() {
           @Override
           public void write(JsonWriter out, DiagnosticConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiagnosticConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiagnosticConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiagnosticConfig
   * @throws IOException if the JSON string is invalid with respect to DiagnosticConfig
   */
  public static DiagnosticConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiagnosticConfig.class);
  }

  /**
   * Convert an instance of DiagnosticConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

