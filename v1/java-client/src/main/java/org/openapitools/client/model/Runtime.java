/*
 * Notebooks API
 * Notebooks API is used to manage notebook resources in Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.RuntimeAccessConfig;
import org.openapitools.client.model.RuntimeMetrics;
import org.openapitools.client.model.RuntimeSoftwareConfig;
import org.openapitools.client.model.VirtualMachine;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of a Runtime for a managed notebook instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:09:43.451204-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Runtime {
  public static final String SERIALIZED_NAME_ACCESS_CONFIG = "accessConfig";
  @SerializedName(SERIALIZED_NAME_ACCESS_CONFIG)
  private RuntimeAccessConfig accessConfig;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  /**
   * Output only. Runtime health_state.
   */
  @JsonAdapter(HealthStateEnum.Adapter.class)
  public enum HealthStateEnum {
    HEALTH_STATE_UNSPECIFIED("HEALTH_STATE_UNSPECIFIED"),
    
    HEALTHY("HEALTHY"),
    
    UNHEALTHY("UNHEALTHY"),
    
    AGENT_NOT_INSTALLED("AGENT_NOT_INSTALLED"),
    
    AGENT_NOT_RUNNING("AGENT_NOT_RUNNING");

    private String value;

    HealthStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HealthStateEnum fromValue(String value) {
      for (HealthStateEnum b : HealthStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HealthStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HealthStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HealthStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEALTH_STATE = "healthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthStateEnum healthState;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private RuntimeMetrics metrics;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOFTWARE_CONFIG = "softwareConfig";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_CONFIG)
  private RuntimeSoftwareConfig softwareConfig;

  /**
   * Output only. Runtime state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    STARTING("STARTING"),
    
    PROVISIONING("PROVISIONING"),
    
    ACTIVE("ACTIVE"),
    
    STOPPING("STOPPING"),
    
    STOPPED("STOPPED"),
    
    DELETING("DELETING"),
    
    UPGRADING("UPGRADING"),
    
    INITIALIZING("INITIALIZING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VIRTUAL_MACHINE = "virtualMachine";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_MACHINE)
  private VirtualMachine virtualMachine;

  public Runtime() {
  }

  public Runtime(
     String createTime, 
     HealthStateEnum healthState, 
     String name, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.healthState = healthState;
    this.name = name;
    this.state = state;
    this.updateTime = updateTime;
  }

  public Runtime accessConfig(RuntimeAccessConfig accessConfig) {
    this.accessConfig = accessConfig;
    return this;
  }

  /**
   * Get accessConfig
   * @return accessConfig
   */
  @javax.annotation.Nullable
  public RuntimeAccessConfig getAccessConfig() {
    return accessConfig;
  }

  public void setAccessConfig(RuntimeAccessConfig accessConfig) {
    this.accessConfig = accessConfig;
  }


  /**
   * Output only. Runtime creation time.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. Runtime health_state.
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthStateEnum getHealthState() {
    return healthState;
  }



  public Runtime labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Runtime putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Runtime metrics(RuntimeMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public RuntimeMetrics getMetrics() {
    return metrics;
  }

  public void setMetrics(RuntimeMetrics metrics) {
    this.metrics = metrics;
  }


  /**
   * Output only. The resource name of the runtime. Format: &#x60;projects/{project}/locations/{location}/runtimes/{runtimeId}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Runtime softwareConfig(RuntimeSoftwareConfig softwareConfig) {
    this.softwareConfig = softwareConfig;
    return this;
  }

  /**
   * Get softwareConfig
   * @return softwareConfig
   */
  @javax.annotation.Nullable
  public RuntimeSoftwareConfig getSoftwareConfig() {
    return softwareConfig;
  }

  public void setSoftwareConfig(RuntimeSoftwareConfig softwareConfig) {
    this.softwareConfig = softwareConfig;
  }


  /**
   * Output only. Runtime state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Runtime update time.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public Runtime virtualMachine(VirtualMachine virtualMachine) {
    this.virtualMachine = virtualMachine;
    return this;
  }

  /**
   * Get virtualMachine
   * @return virtualMachine
   */
  @javax.annotation.Nullable
  public VirtualMachine getVirtualMachine() {
    return virtualMachine;
  }

  public void setVirtualMachine(VirtualMachine virtualMachine) {
    this.virtualMachine = virtualMachine;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Runtime runtime = (Runtime) o;
    return Objects.equals(this.accessConfig, runtime.accessConfig) &&
        Objects.equals(this.createTime, runtime.createTime) &&
        Objects.equals(this.healthState, runtime.healthState) &&
        Objects.equals(this.labels, runtime.labels) &&
        Objects.equals(this.metrics, runtime.metrics) &&
        Objects.equals(this.name, runtime.name) &&
        Objects.equals(this.softwareConfig, runtime.softwareConfig) &&
        Objects.equals(this.state, runtime.state) &&
        Objects.equals(this.updateTime, runtime.updateTime) &&
        Objects.equals(this.virtualMachine, runtime.virtualMachine);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessConfig, createTime, healthState, labels, metrics, name, softwareConfig, state, updateTime, virtualMachine);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Runtime {\n");
    sb.append("    accessConfig: ").append(toIndentedString(accessConfig)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    softwareConfig: ").append(toIndentedString(softwareConfig)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    virtualMachine: ").append(toIndentedString(virtualMachine)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessConfig");
    openapiFields.add("createTime");
    openapiFields.add("healthState");
    openapiFields.add("labels");
    openapiFields.add("metrics");
    openapiFields.add("name");
    openapiFields.add("softwareConfig");
    openapiFields.add("state");
    openapiFields.add("updateTime");
    openapiFields.add("virtualMachine");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Runtime
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Runtime.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Runtime is not found in the empty JSON string", Runtime.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Runtime.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Runtime` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessConfig`
      if (jsonObj.get("accessConfig") != null && !jsonObj.get("accessConfig").isJsonNull()) {
        RuntimeAccessConfig.validateJsonElement(jsonObj.get("accessConfig"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("healthState") != null && !jsonObj.get("healthState").isJsonNull()) && !jsonObj.get("healthState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthState").toString()));
      }
      // validate the optional field `healthState`
      if (jsonObj.get("healthState") != null && !jsonObj.get("healthState").isJsonNull()) {
        HealthStateEnum.validateJsonElement(jsonObj.get("healthState"));
      }
      // validate the optional field `metrics`
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        RuntimeMetrics.validateJsonElement(jsonObj.get("metrics"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `softwareConfig`
      if (jsonObj.get("softwareConfig") != null && !jsonObj.get("softwareConfig").isJsonNull()) {
        RuntimeSoftwareConfig.validateJsonElement(jsonObj.get("softwareConfig"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `virtualMachine`
      if (jsonObj.get("virtualMachine") != null && !jsonObj.get("virtualMachine").isJsonNull()) {
        VirtualMachine.validateJsonElement(jsonObj.get("virtualMachine"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Runtime.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Runtime' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Runtime> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Runtime.class));

       return (TypeAdapter<T>) new TypeAdapter<Runtime>() {
           @Override
           public void write(JsonWriter out, Runtime value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Runtime read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Runtime given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Runtime
   * @throws IOException if the JSON string is invalid with respect to Runtime
   */
  public static Runtime fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Runtime.class);
  }

  /**
   * Convert an instance of Runtime to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

