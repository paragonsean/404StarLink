/*
 * Notebooks API
 * Notebooks API is used to manage notebook resources in Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response for checking if a notebook instance is healthy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:09:43.451204-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetInstanceHealthResponse {
  public static final String SERIALIZED_NAME_HEALTH_INFO = "healthInfo";
  @SerializedName(SERIALIZED_NAME_HEALTH_INFO)
  private Map<String, String> healthInfo = new HashMap<>();

  /**
   * Output only. Runtime health_state.
   */
  @JsonAdapter(HealthStateEnum.Adapter.class)
  public enum HealthStateEnum {
    HEALTH_STATE_UNSPECIFIED("HEALTH_STATE_UNSPECIFIED"),
    
    HEALTHY("HEALTHY"),
    
    UNHEALTHY("UNHEALTHY"),
    
    AGENT_NOT_INSTALLED("AGENT_NOT_INSTALLED"),
    
    AGENT_NOT_RUNNING("AGENT_NOT_RUNNING");

    private String value;

    HealthStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HealthStateEnum fromValue(String value) {
      for (HealthStateEnum b : HealthStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HealthStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HealthStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HealthStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEALTH_STATE = "healthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthStateEnum healthState;

  public GetInstanceHealthResponse() {
  }

  public GetInstanceHealthResponse(
     Map<String, String> healthInfo, 
     HealthStateEnum healthState
  ) {
    this();
    this.healthInfo = healthInfo;
    this.healthState = healthState;
  }

  /**
   * Output only. Additional information about instance health. Example: healthInfo\&quot;: { \&quot;docker_proxy_agent_status\&quot;: \&quot;1\&quot;, \&quot;docker_status\&quot;: \&quot;1\&quot;, \&quot;jupyterlab_api_status\&quot;: \&quot;-1\&quot;, \&quot;jupyterlab_status\&quot;: \&quot;-1\&quot;, \&quot;updated\&quot;: \&quot;2020-10-18 09:40:03.573409\&quot; }
   * @return healthInfo
   */
  @javax.annotation.Nullable
  public Map<String, String> getHealthInfo() {
    return healthInfo;
  }



  /**
   * Output only. Runtime health_state.
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthStateEnum getHealthState() {
    return healthState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetInstanceHealthResponse getInstanceHealthResponse = (GetInstanceHealthResponse) o;
    return Objects.equals(this.healthInfo, getInstanceHealthResponse.healthInfo) &&
        Objects.equals(this.healthState, getInstanceHealthResponse.healthState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthInfo, healthState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetInstanceHealthResponse {\n");
    sb.append("    healthInfo: ").append(toIndentedString(healthInfo)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("healthInfo");
    openapiFields.add("healthState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetInstanceHealthResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetInstanceHealthResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetInstanceHealthResponse is not found in the empty JSON string", GetInstanceHealthResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetInstanceHealthResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetInstanceHealthResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("healthState") != null && !jsonObj.get("healthState").isJsonNull()) && !jsonObj.get("healthState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthState").toString()));
      }
      // validate the optional field `healthState`
      if (jsonObj.get("healthState") != null && !jsonObj.get("healthState").isJsonNull()) {
        HealthStateEnum.validateJsonElement(jsonObj.get("healthState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetInstanceHealthResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetInstanceHealthResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetInstanceHealthResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetInstanceHealthResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetInstanceHealthResponse>() {
           @Override
           public void write(JsonWriter out, GetInstanceHealthResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetInstanceHealthResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetInstanceHealthResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetInstanceHealthResponse
   * @throws IOException if the JSON string is invalid with respect to GetInstanceHealthResponse
   */
  public static GetInstanceHealthResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetInstanceHealthResponse.class);
  }

  /**
   * Convert an instance of GetInstanceHealthResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

