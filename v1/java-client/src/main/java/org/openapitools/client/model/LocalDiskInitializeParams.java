/*
 * Notebooks API
 * Notebooks API is used to manage notebook resources in Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new runtime. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:00:12.602654-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LocalDiskInitializeParams {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISK_NAME = "diskName";
  @SerializedName(SERIALIZED_NAME_DISK_NAME)
  private String diskName;

  public static final String SERIALIZED_NAME_DISK_SIZE_GB = "diskSizeGb";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_GB)
  private String diskSizeGb;

  /**
   * Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (&#x60;PD_STANDARD&#x60;).
   */
  @JsonAdapter(DiskTypeEnum.Adapter.class)
  public enum DiskTypeEnum {
    DISK_TYPE_UNSPECIFIED("DISK_TYPE_UNSPECIFIED"),
    
    PD_STANDARD("PD_STANDARD"),
    
    PD_SSD("PD_SSD"),
    
    PD_BALANCED("PD_BALANCED"),
    
    PD_EXTREME("PD_EXTREME");

    private String value;

    DiskTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiskTypeEnum fromValue(String value) {
      for (DiskTypeEnum b : DiskTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiskTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiskTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiskTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiskTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DiskTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISK_TYPE = "diskType";
  @SerializedName(SERIALIZED_NAME_DISK_TYPE)
  private DiskTypeEnum diskType;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public LocalDiskInitializeParams() {
  }

  public LocalDiskInitializeParams description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. Provide this property when creating the disk.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public LocalDiskInitializeParams diskName(String diskName) {
    this.diskName = diskName;
    return this;
  }

  /**
   * Optional. Specifies the disk name. If not specified, the default is to use the name of the instance. If the disk with the instance name exists already in the given zone/region, a new name will be automatically generated.
   * @return diskName
   */
  @javax.annotation.Nullable
  public String getDiskName() {
    return diskName;
  }

  public void setDiskName(String diskName) {
    this.diskName = diskName;
  }


  public LocalDiskInitializeParams diskSizeGb(String diskSizeGb) {
    this.diskSizeGb = diskSizeGb;
    return this;
  }

  /**
   * Optional. Specifies the size of the disk in base-2 GB. If not specified, the disk will be the same size as the image (usually 10GB). If specified, the size must be equal to or larger than 10GB. Default 100 GB.
   * @return diskSizeGb
   */
  @javax.annotation.Nullable
  public String getDiskSizeGb() {
    return diskSizeGb;
  }

  public void setDiskSizeGb(String diskSizeGb) {
    this.diskSizeGb = diskSizeGb;
  }


  public LocalDiskInitializeParams diskType(DiskTypeEnum diskType) {
    this.diskType = diskType;
    return this;
  }

  /**
   * Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (&#x60;PD_STANDARD&#x60;).
   * @return diskType
   */
  @javax.annotation.Nullable
  public DiskTypeEnum getDiskType() {
    return diskType;
  }

  public void setDiskType(DiskTypeEnum diskType) {
    this.diskType = diskType;
  }


  public LocalDiskInitializeParams labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public LocalDiskInitializeParams putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocalDiskInitializeParams localDiskInitializeParams = (LocalDiskInitializeParams) o;
    return Objects.equals(this.description, localDiskInitializeParams.description) &&
        Objects.equals(this.diskName, localDiskInitializeParams.diskName) &&
        Objects.equals(this.diskSizeGb, localDiskInitializeParams.diskSizeGb) &&
        Objects.equals(this.diskType, localDiskInitializeParams.diskType) &&
        Objects.equals(this.labels, localDiskInitializeParams.labels);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, diskName, diskSizeGb, diskType, labels);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocalDiskInitializeParams {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    diskName: ").append(toIndentedString(diskName)).append("\n");
    sb.append("    diskSizeGb: ").append(toIndentedString(diskSizeGb)).append("\n");
    sb.append("    diskType: ").append(toIndentedString(diskType)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("diskName");
    openapiFields.add("diskSizeGb");
    openapiFields.add("diskType");
    openapiFields.add("labels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LocalDiskInitializeParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LocalDiskInitializeParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocalDiskInitializeParams is not found in the empty JSON string", LocalDiskInitializeParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LocalDiskInitializeParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocalDiskInitializeParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("diskName") != null && !jsonObj.get("diskName").isJsonNull()) && !jsonObj.get("diskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskName").toString()));
      }
      if ((jsonObj.get("diskSizeGb") != null && !jsonObj.get("diskSizeGb").isJsonNull()) && !jsonObj.get("diskSizeGb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskSizeGb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskSizeGb").toString()));
      }
      if ((jsonObj.get("diskType") != null && !jsonObj.get("diskType").isJsonNull()) && !jsonObj.get("diskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskType").toString()));
      }
      // validate the optional field `diskType`
      if (jsonObj.get("diskType") != null && !jsonObj.get("diskType").isJsonNull()) {
        DiskTypeEnum.validateJsonElement(jsonObj.get("diskType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocalDiskInitializeParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocalDiskInitializeParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocalDiskInitializeParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocalDiskInitializeParams.class));

       return (TypeAdapter<T>) new TypeAdapter<LocalDiskInitializeParams>() {
           @Override
           public void write(JsonWriter out, LocalDiskInitializeParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocalDiskInitializeParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LocalDiskInitializeParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LocalDiskInitializeParams
   * @throws IOException if the JSON string is invalid with respect to LocalDiskInitializeParams
   */
  public static LocalDiskInitializeParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocalDiskInitializeParams.class);
  }

  /**
   * Convert an instance of LocalDiskInitializeParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

