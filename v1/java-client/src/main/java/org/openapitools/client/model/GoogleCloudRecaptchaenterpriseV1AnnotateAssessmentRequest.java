/*
 * reCAPTCHA Enterprise API
 * Help protect your website from fraudulent activity, spam, and abuse without creating friction.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudRecaptchaenterpriseV1TransactionEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The request message to annotate an Assessment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:04:34.115959-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest {
  /**
   * Optional. The annotation that will be assigned to the Event. This field can be left empty to provide reasons that apply to an event without concluding whether the event is legitimate or fraudulent.
   */
  @JsonAdapter(AnnotationEnum.Adapter.class)
  public enum AnnotationEnum {
    ANNOTATION_UNSPECIFIED("ANNOTATION_UNSPECIFIED"),
    
    LEGITIMATE("LEGITIMATE"),
    
    FRAUDULENT("FRAUDULENT"),
    
    PASSWORD_CORRECT("PASSWORD_CORRECT"),
    
    PASSWORD_INCORRECT("PASSWORD_INCORRECT");

    private String value;

    AnnotationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AnnotationEnum fromValue(String value) {
      for (AnnotationEnum b : AnnotationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AnnotationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AnnotationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AnnotationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AnnotationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AnnotationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANNOTATION = "annotation";
  @SerializedName(SERIALIZED_NAME_ANNOTATION)
  private AnnotationEnum annotation;

  public static final String SERIALIZED_NAME_HASHED_ACCOUNT_ID = "hashedAccountId";
  @SerializedName(SERIALIZED_NAME_HASHED_ACCOUNT_ID)
  private byte[] hashedAccountId;

  /**
   * Gets or Sets reasons
   */
  @JsonAdapter(ReasonsEnum.Adapter.class)
  public enum ReasonsEnum {
    REASON_UNSPECIFIED("REASON_UNSPECIFIED"),
    
    CHARGEBACK("CHARGEBACK"),
    
    CHARGEBACK_FRAUD("CHARGEBACK_FRAUD"),
    
    CHARGEBACK_DISPUTE("CHARGEBACK_DISPUTE"),
    
    REFUND("REFUND"),
    
    REFUND_FRAUD("REFUND_FRAUD"),
    
    TRANSACTION_ACCEPTED("TRANSACTION_ACCEPTED"),
    
    TRANSACTION_DECLINED("TRANSACTION_DECLINED"),
    
    PAYMENT_HEURISTICS("PAYMENT_HEURISTICS"),
    
    INITIATED_TWO_FACTOR("INITIATED_TWO_FACTOR"),
    
    PASSED_TWO_FACTOR("PASSED_TWO_FACTOR"),
    
    FAILED_TWO_FACTOR("FAILED_TWO_FACTOR"),
    
    CORRECT_PASSWORD("CORRECT_PASSWORD"),
    
    INCORRECT_PASSWORD("INCORRECT_PASSWORD"),
    
    SOCIAL_SPAM("SOCIAL_SPAM");

    private String value;

    ReasonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonsEnum fromValue(String value) {
      for (ReasonsEnum b : ReasonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASONS = "reasons";
  @SerializedName(SERIALIZED_NAME_REASONS)
  private List<ReasonsEnum> reasons = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTION_EVENT = "transactionEvent";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_EVENT)
  private GoogleCloudRecaptchaenterpriseV1TransactionEvent transactionEvent;

  public GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest() {
  }

  public GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest annotation(AnnotationEnum annotation) {
    this.annotation = annotation;
    return this;
  }

  /**
   * Optional. The annotation that will be assigned to the Event. This field can be left empty to provide reasons that apply to an event without concluding whether the event is legitimate or fraudulent.
   * @return annotation
   */
  @javax.annotation.Nullable
  public AnnotationEnum getAnnotation() {
    return annotation;
  }

  public void setAnnotation(AnnotationEnum annotation) {
    this.annotation = annotation;
  }


  public GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest hashedAccountId(byte[] hashedAccountId) {
    this.hashedAccountId = hashedAccountId;
    return this;
  }

  /**
   * Optional. Unique stable hashed user identifier to apply to the assessment. This is an alternative to setting the hashed_account_id in CreateAssessment, for example when the account identifier is not yet known in the initial request. It is recommended that the identifier is hashed using hmac-sha256 with stable secret.
   * @return hashedAccountId
   */
  @javax.annotation.Nullable
  public byte[] getHashedAccountId() {
    return hashedAccountId;
  }

  public void setHashedAccountId(byte[] hashedAccountId) {
    this.hashedAccountId = hashedAccountId;
  }


  public GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest reasons(List<ReasonsEnum> reasons) {
    this.reasons = reasons;
    return this;
  }

  public GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest addReasonsItem(ReasonsEnum reasonsItem) {
    if (this.reasons == null) {
      this.reasons = new ArrayList<>();
    }
    this.reasons.add(reasonsItem);
    return this;
  }

  /**
   * Optional. Optional reasons for the annotation that will be assigned to the Event.
   * @return reasons
   */
  @javax.annotation.Nullable
  public List<ReasonsEnum> getReasons() {
    return reasons;
  }

  public void setReasons(List<ReasonsEnum> reasons) {
    this.reasons = reasons;
  }


  public GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest transactionEvent(GoogleCloudRecaptchaenterpriseV1TransactionEvent transactionEvent) {
    this.transactionEvent = transactionEvent;
    return this;
  }

  /**
   * Get transactionEvent
   * @return transactionEvent
   */
  @javax.annotation.Nullable
  public GoogleCloudRecaptchaenterpriseV1TransactionEvent getTransactionEvent() {
    return transactionEvent;
  }

  public void setTransactionEvent(GoogleCloudRecaptchaenterpriseV1TransactionEvent transactionEvent) {
    this.transactionEvent = transactionEvent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest googleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest = (GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest) o;
    return Objects.equals(this.annotation, googleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.annotation) &&
        Arrays.equals(this.hashedAccountId, googleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.hashedAccountId) &&
        Objects.equals(this.reasons, googleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.reasons) &&
        Objects.equals(this.transactionEvent, googleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.transactionEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotation, Arrays.hashCode(hashedAccountId), reasons, transactionEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest {\n");
    sb.append("    annotation: ").append(toIndentedString(annotation)).append("\n");
    sb.append("    hashedAccountId: ").append(toIndentedString(hashedAccountId)).append("\n");
    sb.append("    reasons: ").append(toIndentedString(reasons)).append("\n");
    sb.append("    transactionEvent: ").append(toIndentedString(transactionEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotation");
    openapiFields.add("hashedAccountId");
    openapiFields.add("reasons");
    openapiFields.add("transactionEvent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest is not found in the empty JSON string", GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("annotation") != null && !jsonObj.get("annotation").isJsonNull()) && !jsonObj.get("annotation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annotation").toString()));
      }
      // validate the optional field `annotation`
      if (jsonObj.get("annotation") != null && !jsonObj.get("annotation").isJsonNull()) {
        AnnotationEnum.validateJsonElement(jsonObj.get("annotation"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reasons") != null && !jsonObj.get("reasons").isJsonNull() && !jsonObj.get("reasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasons` to be an array in the JSON string but got `%s`", jsonObj.get("reasons").toString()));
      }
      // validate the optional field `transactionEvent`
      if (jsonObj.get("transactionEvent") != null && !jsonObj.get("transactionEvent").isJsonNull()) {
        GoogleCloudRecaptchaenterpriseV1TransactionEvent.validateJsonElement(jsonObj.get("transactionEvent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest
   */
  public static GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudRecaptchaenterpriseV1AnnotateAssessmentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

