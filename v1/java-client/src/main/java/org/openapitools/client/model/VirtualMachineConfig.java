/*
 * Notebooks API
 * Notebooks API is used to manage notebook resources in Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ContainerImage;
import org.openapitools.client.model.EncryptionConfig;
import org.openapitools.client.model.LocalDisk;
import org.openapitools.client.model.RuntimeAcceleratorConfig;
import org.openapitools.client.model.RuntimeShieldedInstanceConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The config settings for virtual machine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:09:43.451204-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineConfig {
  public static final String SERIALIZED_NAME_ACCELERATOR_CONFIG = "acceleratorConfig";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_CONFIG)
  private RuntimeAcceleratorConfig acceleratorConfig;

  public static final String SERIALIZED_NAME_BOOT_IMAGE = "bootImage";
  @SerializedName(SERIALIZED_NAME_BOOT_IMAGE)
  private Object bootImage;

  public static final String SERIALIZED_NAME_CONTAINER_IMAGES = "containerImages";
  @SerializedName(SERIALIZED_NAME_CONTAINER_IMAGES)
  private List<ContainerImage> containerImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_DISK = "dataDisk";
  @SerializedName(SERIALIZED_NAME_DATA_DISK)
  private LocalDisk dataDisk;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIG = "encryptionConfig";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIG)
  private EncryptionConfig encryptionConfig;

  public static final String SERIALIZED_NAME_GUEST_ATTRIBUTES = "guestAttributes";
  @SerializedName(SERIALIZED_NAME_GUEST_ATTRIBUTES)
  private Map<String, String> guestAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_INTERNAL_IP_ONLY = "internalIpOnly";
  @SerializedName(SERIALIZED_NAME_INTERNAL_IP_ONLY)
  private Boolean internalIpOnly;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MACHINE_TYPE = "machineType";
  @SerializedName(SERIALIZED_NAME_MACHINE_TYPE)
  private String machineType;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  /**
   * Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
   */
  @JsonAdapter(NicTypeEnum.Adapter.class)
  public enum NicTypeEnum {
    UNSPECIFIED_NIC_TYPE("UNSPECIFIED_NIC_TYPE"),
    
    VIRTIO_NET("VIRTIO_NET"),
    
    GVNIC("GVNIC");

    private String value;

    NicTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NicTypeEnum fromValue(String value) {
      for (NicTypeEnum b : NicTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NicTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NicTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NicTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NicTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NicTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NIC_TYPE = "nicType";
  @SerializedName(SERIALIZED_NAME_NIC_TYPE)
  private NicTypeEnum nicType;

  public static final String SERIALIZED_NAME_RESERVED_IP_RANGE = "reservedIpRange";
  @SerializedName(SERIALIZED_NAME_RESERVED_IP_RANGE)
  private String reservedIpRange;

  public static final String SERIALIZED_NAME_SHIELDED_INSTANCE_CONFIG = "shieldedInstanceConfig";
  @SerializedName(SERIALIZED_NAME_SHIELDED_INSTANCE_CONFIG)
  private RuntimeShieldedInstanceConfig shieldedInstanceConfig;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private String subnet;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public VirtualMachineConfig() {
  }

  public VirtualMachineConfig(
     Map<String, String> guestAttributes, 
     String zone
  ) {
    this();
    this.guestAttributes = guestAttributes;
    this.zone = zone;
  }

  public VirtualMachineConfig acceleratorConfig(RuntimeAcceleratorConfig acceleratorConfig) {
    this.acceleratorConfig = acceleratorConfig;
    return this;
  }

  /**
   * Get acceleratorConfig
   * @return acceleratorConfig
   */
  @javax.annotation.Nullable
  public RuntimeAcceleratorConfig getAcceleratorConfig() {
    return acceleratorConfig;
  }

  public void setAcceleratorConfig(RuntimeAcceleratorConfig acceleratorConfig) {
    this.acceleratorConfig = acceleratorConfig;
  }


  public VirtualMachineConfig bootImage(Object bootImage) {
    this.bootImage = bootImage;
    return this;
  }

  /**
   * Definition of the boot image used by the Runtime. Used to facilitate runtime upgradeability.
   * @return bootImage
   */
  @javax.annotation.Nullable
  public Object getBootImage() {
    return bootImage;
  }

  public void setBootImage(Object bootImage) {
    this.bootImage = bootImage;
  }


  public VirtualMachineConfig containerImages(List<ContainerImage> containerImages) {
    this.containerImages = containerImages;
    return this;
  }

  public VirtualMachineConfig addContainerImagesItem(ContainerImage containerImagesItem) {
    if (this.containerImages == null) {
      this.containerImages = new ArrayList<>();
    }
    this.containerImages.add(containerImagesItem);
    return this;
  }

  /**
   * Optional. Use a list of container images to use as Kernels in the notebook instance.
   * @return containerImages
   */
  @javax.annotation.Nullable
  public List<ContainerImage> getContainerImages() {
    return containerImages;
  }

  public void setContainerImages(List<ContainerImage> containerImages) {
    this.containerImages = containerImages;
  }


  public VirtualMachineConfig dataDisk(LocalDisk dataDisk) {
    this.dataDisk = dataDisk;
    return this;
  }

  /**
   * Get dataDisk
   * @return dataDisk
   */
  @javax.annotation.Nullable
  public LocalDisk getDataDisk() {
    return dataDisk;
  }

  public void setDataDisk(LocalDisk dataDisk) {
    this.dataDisk = dataDisk;
  }


  public VirtualMachineConfig encryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Get encryptionConfig
   * @return encryptionConfig
   */
  @javax.annotation.Nullable
  public EncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  public void setEncryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
  }


  /**
   * Output only. The Compute Engine guest attributes. (see [Project and instance guest attributes](https://cloud.google.com/compute/docs/storing-retrieving-metadata#guest_attributes)).
   * @return guestAttributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getGuestAttributes() {
    return guestAttributes;
  }



  public VirtualMachineConfig internalIpOnly(Boolean internalIpOnly) {
    this.internalIpOnly = internalIpOnly;
    return this;
  }

  /**
   * Optional. If true, runtime will only have internal IP addresses. By default, runtimes are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each vm. This &#x60;internal_ip_only&#x60; restriction can only be enabled for subnetwork enabled networks, and all dependencies must be configured to be accessible without external IP addresses.
   * @return internalIpOnly
   */
  @javax.annotation.Nullable
  public Boolean getInternalIpOnly() {
    return internalIpOnly;
  }

  public void setInternalIpOnly(Boolean internalIpOnly) {
    this.internalIpOnly = internalIpOnly;
  }


  public VirtualMachineConfig labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public VirtualMachineConfig putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public VirtualMachineConfig machineType(String machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * Required. The Compute Engine machine type used for runtimes. Short name is valid. Examples: * &#x60;n1-standard-2&#x60; * &#x60;e2-standard-8&#x60;
   * @return machineType
   */
  @javax.annotation.Nullable
  public String getMachineType() {
    return machineType;
  }

  public void setMachineType(String machineType) {
    this.machineType = machineType;
  }


  public VirtualMachineConfig metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public VirtualMachineConfig putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Optional. The Compute Engine metadata entries to add to virtual machine. (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public VirtualMachineConfig network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork. If neither &#x60;network&#x60; nor &#x60;subnet&#x60; is specified, the \&quot;default\&quot; network of the project is used, if it exists. A full URL or partial URI. Examples: * &#x60;https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default&#x60; * &#x60;projects/[project_id]/global/networks/default&#x60; Runtimes are managed resources inside Google Infrastructure. Runtimes support the following network configurations: * Google Managed Network (Network &amp; subnet are empty) * Consumer Project VPC (network &amp; subnet are required). Requires configuring Private Service Access. * Shared VPC (network &amp; subnet are required). Requires configuring Private Service Access.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public VirtualMachineConfig nicType(NicTypeEnum nicType) {
    this.nicType = nicType;
    return this;
  }

  /**
   * Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
   * @return nicType
   */
  @javax.annotation.Nullable
  public NicTypeEnum getNicType() {
    return nicType;
  }

  public void setNicType(NicTypeEnum nicType) {
    this.nicType = nicType;
  }


  public VirtualMachineConfig reservedIpRange(String reservedIpRange) {
    this.reservedIpRange = reservedIpRange;
    return this;
  }

  /**
   * Optional. Reserved IP Range name is used for VPC Peering. The subnetwork allocation will use the range *name* if it&#39;s assigned. Example: managed-notebooks-range-c PEERING_RANGE_NAME_3&#x3D;managed-notebooks-range-c gcloud compute addresses create $PEERING_RANGE_NAME_3 \\ --global \\ --prefix-length&#x3D;24 \\ --description&#x3D;\&quot;Google Cloud Managed Notebooks Range 24 c\&quot; \\ --network&#x3D;$NETWORK \\ --addresses&#x3D;192.168.0.0 \\ --purpose&#x3D;VPC_PEERING Field value will be: &#x60;managed-notebooks-range-c&#x60;
   * @return reservedIpRange
   */
  @javax.annotation.Nullable
  public String getReservedIpRange() {
    return reservedIpRange;
  }

  public void setReservedIpRange(String reservedIpRange) {
    this.reservedIpRange = reservedIpRange;
  }


  public VirtualMachineConfig shieldedInstanceConfig(RuntimeShieldedInstanceConfig shieldedInstanceConfig) {
    this.shieldedInstanceConfig = shieldedInstanceConfig;
    return this;
  }

  /**
   * Get shieldedInstanceConfig
   * @return shieldedInstanceConfig
   */
  @javax.annotation.Nullable
  public RuntimeShieldedInstanceConfig getShieldedInstanceConfig() {
    return shieldedInstanceConfig;
  }

  public void setShieldedInstanceConfig(RuntimeShieldedInstanceConfig shieldedInstanceConfig) {
    this.shieldedInstanceConfig = shieldedInstanceConfig;
  }


  public VirtualMachineConfig subnet(String subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network. A full URL or partial URI are valid. Examples: * &#x60;https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0&#x60; * &#x60;projects/[project_id]/regions/us-east1/subnetworks/sub0&#x60;
   * @return subnet
   */
  @javax.annotation.Nullable
  public String getSubnet() {
    return subnet;
  }

  public void setSubnet(String subnet) {
    this.subnet = subnet;
  }


  public VirtualMachineConfig tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public VirtualMachineConfig addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  /**
   * Output only. The zone where the virtual machine is located. If using regional request, the notebooks service will pick a location in the corresponding runtime region. On a get request, zone will always be present. Example: * &#x60;us-central1-b&#x60;
   * @return zone
   */
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineConfig virtualMachineConfig = (VirtualMachineConfig) o;
    return Objects.equals(this.acceleratorConfig, virtualMachineConfig.acceleratorConfig) &&
        Objects.equals(this.bootImage, virtualMachineConfig.bootImage) &&
        Objects.equals(this.containerImages, virtualMachineConfig.containerImages) &&
        Objects.equals(this.dataDisk, virtualMachineConfig.dataDisk) &&
        Objects.equals(this.encryptionConfig, virtualMachineConfig.encryptionConfig) &&
        Objects.equals(this.guestAttributes, virtualMachineConfig.guestAttributes) &&
        Objects.equals(this.internalIpOnly, virtualMachineConfig.internalIpOnly) &&
        Objects.equals(this.labels, virtualMachineConfig.labels) &&
        Objects.equals(this.machineType, virtualMachineConfig.machineType) &&
        Objects.equals(this.metadata, virtualMachineConfig.metadata) &&
        Objects.equals(this.network, virtualMachineConfig.network) &&
        Objects.equals(this.nicType, virtualMachineConfig.nicType) &&
        Objects.equals(this.reservedIpRange, virtualMachineConfig.reservedIpRange) &&
        Objects.equals(this.shieldedInstanceConfig, virtualMachineConfig.shieldedInstanceConfig) &&
        Objects.equals(this.subnet, virtualMachineConfig.subnet) &&
        Objects.equals(this.tags, virtualMachineConfig.tags) &&
        Objects.equals(this.zone, virtualMachineConfig.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceleratorConfig, bootImage, containerImages, dataDisk, encryptionConfig, guestAttributes, internalIpOnly, labels, machineType, metadata, network, nicType, reservedIpRange, shieldedInstanceConfig, subnet, tags, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineConfig {\n");
    sb.append("    acceleratorConfig: ").append(toIndentedString(acceleratorConfig)).append("\n");
    sb.append("    bootImage: ").append(toIndentedString(bootImage)).append("\n");
    sb.append("    containerImages: ").append(toIndentedString(containerImages)).append("\n");
    sb.append("    dataDisk: ").append(toIndentedString(dataDisk)).append("\n");
    sb.append("    encryptionConfig: ").append(toIndentedString(encryptionConfig)).append("\n");
    sb.append("    guestAttributes: ").append(toIndentedString(guestAttributes)).append("\n");
    sb.append("    internalIpOnly: ").append(toIndentedString(internalIpOnly)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    nicType: ").append(toIndentedString(nicType)).append("\n");
    sb.append("    reservedIpRange: ").append(toIndentedString(reservedIpRange)).append("\n");
    sb.append("    shieldedInstanceConfig: ").append(toIndentedString(shieldedInstanceConfig)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceleratorConfig");
    openapiFields.add("bootImage");
    openapiFields.add("containerImages");
    openapiFields.add("dataDisk");
    openapiFields.add("encryptionConfig");
    openapiFields.add("guestAttributes");
    openapiFields.add("internalIpOnly");
    openapiFields.add("labels");
    openapiFields.add("machineType");
    openapiFields.add("metadata");
    openapiFields.add("network");
    openapiFields.add("nicType");
    openapiFields.add("reservedIpRange");
    openapiFields.add("shieldedInstanceConfig");
    openapiFields.add("subnet");
    openapiFields.add("tags");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineConfig is not found in the empty JSON string", VirtualMachineConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `acceleratorConfig`
      if (jsonObj.get("acceleratorConfig") != null && !jsonObj.get("acceleratorConfig").isJsonNull()) {
        RuntimeAcceleratorConfig.validateJsonElement(jsonObj.get("acceleratorConfig"));
      }
      if (jsonObj.get("containerImages") != null && !jsonObj.get("containerImages").isJsonNull()) {
        JsonArray jsonArraycontainerImages = jsonObj.getAsJsonArray("containerImages");
        if (jsonArraycontainerImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("containerImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `containerImages` to be an array in the JSON string but got `%s`", jsonObj.get("containerImages").toString()));
          }

          // validate the optional field `containerImages` (array)
          for (int i = 0; i < jsonArraycontainerImages.size(); i++) {
            ContainerImage.validateJsonElement(jsonArraycontainerImages.get(i));
          };
        }
      }
      // validate the optional field `dataDisk`
      if (jsonObj.get("dataDisk") != null && !jsonObj.get("dataDisk").isJsonNull()) {
        LocalDisk.validateJsonElement(jsonObj.get("dataDisk"));
      }
      // validate the optional field `encryptionConfig`
      if (jsonObj.get("encryptionConfig") != null && !jsonObj.get("encryptionConfig").isJsonNull()) {
        EncryptionConfig.validateJsonElement(jsonObj.get("encryptionConfig"));
      }
      if ((jsonObj.get("machineType") != null && !jsonObj.get("machineType").isJsonNull()) && !jsonObj.get("machineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineType").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("nicType") != null && !jsonObj.get("nicType").isJsonNull()) && !jsonObj.get("nicType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nicType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nicType").toString()));
      }
      // validate the optional field `nicType`
      if (jsonObj.get("nicType") != null && !jsonObj.get("nicType").isJsonNull()) {
        NicTypeEnum.validateJsonElement(jsonObj.get("nicType"));
      }
      if ((jsonObj.get("reservedIpRange") != null && !jsonObj.get("reservedIpRange").isJsonNull()) && !jsonObj.get("reservedIpRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservedIpRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservedIpRange").toString()));
      }
      // validate the optional field `shieldedInstanceConfig`
      if (jsonObj.get("shieldedInstanceConfig") != null && !jsonObj.get("shieldedInstanceConfig").isJsonNull()) {
        RuntimeShieldedInstanceConfig.validateJsonElement(jsonObj.get("shieldedInstanceConfig"));
      }
      if ((jsonObj.get("subnet") != null && !jsonObj.get("subnet").isJsonNull()) && !jsonObj.get("subnet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnet").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineConfig>() {
           @Override
           public void write(JsonWriter out, VirtualMachineConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineConfig
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineConfig
   */
  public static VirtualMachineConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineConfig.class);
  }

  /**
   * Convert an instance of VirtualMachineConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

