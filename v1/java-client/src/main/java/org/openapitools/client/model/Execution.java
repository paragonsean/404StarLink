/*
 * Notebooks API
 * Notebooks API is used to manage notebook resources in Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExecutionTemplate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The definition of a single executed notebook.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:00:12.602654-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Execution {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXECUTION_TEMPLATE = "executionTemplate";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TEMPLATE)
  private ExecutionTemplate executionTemplate;

  public static final String SERIALIZED_NAME_JOB_URI = "jobUri";
  @SerializedName(SERIALIZED_NAME_JOB_URI)
  private String jobUri;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUT_NOTEBOOK_FILE = "outputNotebookFile";
  @SerializedName(SERIALIZED_NAME_OUTPUT_NOTEBOOK_FILE)
  private String outputNotebookFile;

  /**
   * Output only. State of the underlying AI Platform job.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    QUEUED("QUEUED"),
    
    PREPARING("PREPARING"),
    
    RUNNING("RUNNING"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED"),
    
    CANCELLING("CANCELLING"),
    
    CANCELLED("CANCELLED"),
    
    EXPIRED("EXPIRED"),
    
    INITIALIZING("INITIALIZING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Execution() {
  }

  public Execution(
     String createTime, 
     String displayName, 
     String jobUri, 
     String name, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.displayName = displayName;
    this.jobUri = jobUri;
    this.name = name;
    this.state = state;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Time the Execution was instantiated.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Execution description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A brief description of this execution.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. Name used for UI purposes. Name can only contain alphanumeric characters and underscores &#39;_&#39;.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  public Execution executionTemplate(ExecutionTemplate executionTemplate) {
    this.executionTemplate = executionTemplate;
    return this;
  }

  /**
   * Get executionTemplate
   * @return executionTemplate
   */
  @javax.annotation.Nullable
  public ExecutionTemplate getExecutionTemplate() {
    return executionTemplate;
  }

  public void setExecutionTemplate(ExecutionTemplate executionTemplate) {
    this.executionTemplate = executionTemplate;
  }


  /**
   * Output only. The URI of the external job used to execute the notebook.
   * @return jobUri
   */
  @javax.annotation.Nullable
  public String getJobUri() {
    return jobUri;
  }



  /**
   * Output only. The resource name of the execute. Format: &#x60;projects/{project_id}/locations/{location}/executions/{execution_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Execution outputNotebookFile(String outputNotebookFile) {
    this.outputNotebookFile = outputNotebookFile;
    return this;
  }

  /**
   * Output notebook file generated by this execution
   * @return outputNotebookFile
   */
  @javax.annotation.Nullable
  public String getOutputNotebookFile() {
    return outputNotebookFile;
  }

  public void setOutputNotebookFile(String outputNotebookFile) {
    this.outputNotebookFile = outputNotebookFile;
  }


  /**
   * Output only. State of the underlying AI Platform job.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Time the Execution was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Execution execution = (Execution) o;
    return Objects.equals(this.createTime, execution.createTime) &&
        Objects.equals(this.description, execution.description) &&
        Objects.equals(this.displayName, execution.displayName) &&
        Objects.equals(this.executionTemplate, execution.executionTemplate) &&
        Objects.equals(this.jobUri, execution.jobUri) &&
        Objects.equals(this.name, execution.name) &&
        Objects.equals(this.outputNotebookFile, execution.outputNotebookFile) &&
        Objects.equals(this.state, execution.state) &&
        Objects.equals(this.updateTime, execution.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, displayName, executionTemplate, jobUri, name, outputNotebookFile, state, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Execution {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    executionTemplate: ").append(toIndentedString(executionTemplate)).append("\n");
    sb.append("    jobUri: ").append(toIndentedString(jobUri)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputNotebookFile: ").append(toIndentedString(outputNotebookFile)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("executionTemplate");
    openapiFields.add("jobUri");
    openapiFields.add("name");
    openapiFields.add("outputNotebookFile");
    openapiFields.add("state");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Execution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Execution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Execution is not found in the empty JSON string", Execution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Execution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Execution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `executionTemplate`
      if (jsonObj.get("executionTemplate") != null && !jsonObj.get("executionTemplate").isJsonNull()) {
        ExecutionTemplate.validateJsonElement(jsonObj.get("executionTemplate"));
      }
      if ((jsonObj.get("jobUri") != null && !jsonObj.get("jobUri").isJsonNull()) && !jsonObj.get("jobUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobUri").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("outputNotebookFile") != null && !jsonObj.get("outputNotebookFile").isJsonNull()) && !jsonObj.get("outputNotebookFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputNotebookFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputNotebookFile").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Execution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Execution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Execution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Execution.class));

       return (TypeAdapter<T>) new TypeAdapter<Execution>() {
           @Override
           public void write(JsonWriter out, Execution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Execution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Execution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Execution
   * @throws IOException if the JSON string is invalid with respect to Execution
   */
  public static Execution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Execution.class);
  }

  /**
   * Convert an instance of Execution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

