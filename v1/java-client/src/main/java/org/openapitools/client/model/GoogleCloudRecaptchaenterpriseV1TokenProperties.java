/*
 * reCAPTCHA Enterprise API
 * Help protect your website from fraudulent activity, spam, and abuse without creating friction.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the provided event token.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:56:52.022302-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudRecaptchaenterpriseV1TokenProperties {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_ANDROID_PACKAGE_NAME = "androidPackageName";
  @SerializedName(SERIALIZED_NAME_ANDROID_PACKAGE_NAME)
  private String androidPackageName;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  /**
   * Reason associated with the response when valid &#x3D; false.
   */
  @JsonAdapter(InvalidReasonEnum.Adapter.class)
  public enum InvalidReasonEnum {
    INVALID_REASON_UNSPECIFIED("INVALID_REASON_UNSPECIFIED"),
    
    UNKNOWN_INVALID_REASON("UNKNOWN_INVALID_REASON"),
    
    MALFORMED("MALFORMED"),
    
    EXPIRED("EXPIRED"),
    
    DUPE("DUPE"),
    
    MISSING("MISSING"),
    
    BROWSER_ERROR("BROWSER_ERROR");

    private String value;

    InvalidReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvalidReasonEnum fromValue(String value) {
      for (InvalidReasonEnum b : InvalidReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvalidReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvalidReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvalidReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvalidReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvalidReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVALID_REASON = "invalidReason";
  @SerializedName(SERIALIZED_NAME_INVALID_REASON)
  private InvalidReasonEnum invalidReason;

  public static final String SERIALIZED_NAME_IOS_BUNDLE_ID = "iosBundleId";
  @SerializedName(SERIALIZED_NAME_IOS_BUNDLE_ID)
  private String iosBundleId;

  public static final String SERIALIZED_NAME_VALID = "valid";
  @SerializedName(SERIALIZED_NAME_VALID)
  private Boolean valid;

  public GoogleCloudRecaptchaenterpriseV1TokenProperties() {
  }

  public GoogleCloudRecaptchaenterpriseV1TokenProperties action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Action name provided at token generation.
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public GoogleCloudRecaptchaenterpriseV1TokenProperties androidPackageName(String androidPackageName) {
    this.androidPackageName = androidPackageName;
    return this;
  }

  /**
   * The name of the Android package with which the token was generated (Android keys only).
   * @return androidPackageName
   */
  @javax.annotation.Nullable
  public String getAndroidPackageName() {
    return androidPackageName;
  }

  public void setAndroidPackageName(String androidPackageName) {
    this.androidPackageName = androidPackageName;
  }


  public GoogleCloudRecaptchaenterpriseV1TokenProperties createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * The timestamp corresponding to the generation of the token.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public GoogleCloudRecaptchaenterpriseV1TokenProperties hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * The hostname of the page on which the token was generated (Web keys only).
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public GoogleCloudRecaptchaenterpriseV1TokenProperties invalidReason(InvalidReasonEnum invalidReason) {
    this.invalidReason = invalidReason;
    return this;
  }

  /**
   * Reason associated with the response when valid &#x3D; false.
   * @return invalidReason
   */
  @javax.annotation.Nullable
  public InvalidReasonEnum getInvalidReason() {
    return invalidReason;
  }

  public void setInvalidReason(InvalidReasonEnum invalidReason) {
    this.invalidReason = invalidReason;
  }


  public GoogleCloudRecaptchaenterpriseV1TokenProperties iosBundleId(String iosBundleId) {
    this.iosBundleId = iosBundleId;
    return this;
  }

  /**
   * The ID of the iOS bundle with which the token was generated (iOS keys only).
   * @return iosBundleId
   */
  @javax.annotation.Nullable
  public String getIosBundleId() {
    return iosBundleId;
  }

  public void setIosBundleId(String iosBundleId) {
    this.iosBundleId = iosBundleId;
  }


  public GoogleCloudRecaptchaenterpriseV1TokenProperties valid(Boolean valid) {
    this.valid = valid;
    return this;
  }

  /**
   * Whether the provided user response token is valid. When valid &#x3D; false, the reason could be specified in invalid_reason or it could also be due to a user failing to solve a challenge or a sitekey mismatch (i.e the sitekey used to generate the token was different than the one specified in the assessment).
   * @return valid
   */
  @javax.annotation.Nullable
  public Boolean getValid() {
    return valid;
  }

  public void setValid(Boolean valid) {
    this.valid = valid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudRecaptchaenterpriseV1TokenProperties googleCloudRecaptchaenterpriseV1TokenProperties = (GoogleCloudRecaptchaenterpriseV1TokenProperties) o;
    return Objects.equals(this.action, googleCloudRecaptchaenterpriseV1TokenProperties.action) &&
        Objects.equals(this.androidPackageName, googleCloudRecaptchaenterpriseV1TokenProperties.androidPackageName) &&
        Objects.equals(this.createTime, googleCloudRecaptchaenterpriseV1TokenProperties.createTime) &&
        Objects.equals(this.hostname, googleCloudRecaptchaenterpriseV1TokenProperties.hostname) &&
        Objects.equals(this.invalidReason, googleCloudRecaptchaenterpriseV1TokenProperties.invalidReason) &&
        Objects.equals(this.iosBundleId, googleCloudRecaptchaenterpriseV1TokenProperties.iosBundleId) &&
        Objects.equals(this.valid, googleCloudRecaptchaenterpriseV1TokenProperties.valid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, androidPackageName, createTime, hostname, invalidReason, iosBundleId, valid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudRecaptchaenterpriseV1TokenProperties {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    androidPackageName: ").append(toIndentedString(androidPackageName)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    invalidReason: ").append(toIndentedString(invalidReason)).append("\n");
    sb.append("    iosBundleId: ").append(toIndentedString(iosBundleId)).append("\n");
    sb.append("    valid: ").append(toIndentedString(valid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("androidPackageName");
    openapiFields.add("createTime");
    openapiFields.add("hostname");
    openapiFields.add("invalidReason");
    openapiFields.add("iosBundleId");
    openapiFields.add("valid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudRecaptchaenterpriseV1TokenProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudRecaptchaenterpriseV1TokenProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudRecaptchaenterpriseV1TokenProperties is not found in the empty JSON string", GoogleCloudRecaptchaenterpriseV1TokenProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudRecaptchaenterpriseV1TokenProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudRecaptchaenterpriseV1TokenProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if ((jsonObj.get("androidPackageName") != null && !jsonObj.get("androidPackageName").isJsonNull()) && !jsonObj.get("androidPackageName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `androidPackageName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("androidPackageName").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) && !jsonObj.get("hostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostname").toString()));
      }
      if ((jsonObj.get("invalidReason") != null && !jsonObj.get("invalidReason").isJsonNull()) && !jsonObj.get("invalidReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invalidReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invalidReason").toString()));
      }
      // validate the optional field `invalidReason`
      if (jsonObj.get("invalidReason") != null && !jsonObj.get("invalidReason").isJsonNull()) {
        InvalidReasonEnum.validateJsonElement(jsonObj.get("invalidReason"));
      }
      if ((jsonObj.get("iosBundleId") != null && !jsonObj.get("iosBundleId").isJsonNull()) && !jsonObj.get("iosBundleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iosBundleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iosBundleId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudRecaptchaenterpriseV1TokenProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudRecaptchaenterpriseV1TokenProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudRecaptchaenterpriseV1TokenProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudRecaptchaenterpriseV1TokenProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudRecaptchaenterpriseV1TokenProperties>() {
           @Override
           public void write(JsonWriter out, GoogleCloudRecaptchaenterpriseV1TokenProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudRecaptchaenterpriseV1TokenProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudRecaptchaenterpriseV1TokenProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudRecaptchaenterpriseV1TokenProperties
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudRecaptchaenterpriseV1TokenProperties
   */
  public static GoogleCloudRecaptchaenterpriseV1TokenProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudRecaptchaenterpriseV1TokenProperties.class);
  }

  /**
   * Convert an instance of GoogleCloudRecaptchaenterpriseV1TokenProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

