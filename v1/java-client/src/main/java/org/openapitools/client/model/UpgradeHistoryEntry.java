/*
 * Notebooks API
 * Notebooks API is used to manage notebook resources in Google Cloud.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The entry of VM image upgrade history.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:00:12.602654-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpgradeHistoryEntry {
  /**
   * Action. Rolloback or Upgrade.
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    ACTION_UNSPECIFIED("ACTION_UNSPECIFIED"),
    
    UPGRADE("UPGRADE"),
    
    ROLLBACK("ROLLBACK");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_CONTAINER_IMAGE = "containerImage";
  @SerializedName(SERIALIZED_NAME_CONTAINER_IMAGE)
  private String containerImage;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_FRAMEWORK = "framework";
  @SerializedName(SERIALIZED_NAME_FRAMEWORK)
  private String framework;

  public static final String SERIALIZED_NAME_SNAPSHOT = "snapshot";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT)
  private String snapshot;

  /**
   * The state of this instance upgrade history entry.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    STARTED("STARTED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TARGET_IMAGE = "targetImage";
  @SerializedName(SERIALIZED_NAME_TARGET_IMAGE)
  private String targetImage;

  public static final String SERIALIZED_NAME_TARGET_VERSION = "targetVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_VERSION)
  private String targetVersion;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VM_IMAGE = "vmImage";
  @SerializedName(SERIALIZED_NAME_VM_IMAGE)
  private String vmImage;

  public UpgradeHistoryEntry() {
  }

  public UpgradeHistoryEntry action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * Action. Rolloback or Upgrade.
   * @return action
   */
  @javax.annotation.Nullable
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public UpgradeHistoryEntry containerImage(String containerImage) {
    this.containerImage = containerImage;
    return this;
  }

  /**
   * The container image before this instance upgrade.
   * @return containerImage
   */
  @javax.annotation.Nullable
  public String getContainerImage() {
    return containerImage;
  }

  public void setContainerImage(String containerImage) {
    this.containerImage = containerImage;
  }


  public UpgradeHistoryEntry createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * The time that this instance upgrade history entry is created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public UpgradeHistoryEntry framework(String framework) {
    this.framework = framework;
    return this;
  }

  /**
   * The framework of this notebook instance.
   * @return framework
   */
  @javax.annotation.Nullable
  public String getFramework() {
    return framework;
  }

  public void setFramework(String framework) {
    this.framework = framework;
  }


  public UpgradeHistoryEntry snapshot(String snapshot) {
    this.snapshot = snapshot;
    return this;
  }

  /**
   * The snapshot of the boot disk of this notebook instance before upgrade.
   * @return snapshot
   */
  @javax.annotation.Nullable
  public String getSnapshot() {
    return snapshot;
  }

  public void setSnapshot(String snapshot) {
    this.snapshot = snapshot;
  }


  public UpgradeHistoryEntry state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of this instance upgrade history entry.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public UpgradeHistoryEntry targetImage(String targetImage) {
    this.targetImage = targetImage;
    return this;
  }

  /**
   * Target VM Image. Format: &#x60;ainotebooks-vm/project/image-name/name&#x60;.
   * @return targetImage
   */
  @javax.annotation.Nullable
  public String getTargetImage() {
    return targetImage;
  }

  public void setTargetImage(String targetImage) {
    this.targetImage = targetImage;
  }


  public UpgradeHistoryEntry targetVersion(String targetVersion) {
    this.targetVersion = targetVersion;
    return this;
  }

  /**
   * Target VM Version, like m63.
   * @return targetVersion
   */
  @javax.annotation.Nullable
  public String getTargetVersion() {
    return targetVersion;
  }

  public void setTargetVersion(String targetVersion) {
    this.targetVersion = targetVersion;
  }


  public UpgradeHistoryEntry version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The version of the notebook instance before this upgrade.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public UpgradeHistoryEntry vmImage(String vmImage) {
    this.vmImage = vmImage;
    return this;
  }

  /**
   * The VM image before this instance upgrade.
   * @return vmImage
   */
  @javax.annotation.Nullable
  public String getVmImage() {
    return vmImage;
  }

  public void setVmImage(String vmImage) {
    this.vmImage = vmImage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeHistoryEntry upgradeHistoryEntry = (UpgradeHistoryEntry) o;
    return Objects.equals(this.action, upgradeHistoryEntry.action) &&
        Objects.equals(this.containerImage, upgradeHistoryEntry.containerImage) &&
        Objects.equals(this.createTime, upgradeHistoryEntry.createTime) &&
        Objects.equals(this.framework, upgradeHistoryEntry.framework) &&
        Objects.equals(this.snapshot, upgradeHistoryEntry.snapshot) &&
        Objects.equals(this.state, upgradeHistoryEntry.state) &&
        Objects.equals(this.targetImage, upgradeHistoryEntry.targetImage) &&
        Objects.equals(this.targetVersion, upgradeHistoryEntry.targetVersion) &&
        Objects.equals(this.version, upgradeHistoryEntry.version) &&
        Objects.equals(this.vmImage, upgradeHistoryEntry.vmImage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, containerImage, createTime, framework, snapshot, state, targetImage, targetVersion, version, vmImage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeHistoryEntry {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    containerImage: ").append(toIndentedString(containerImage)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    framework: ").append(toIndentedString(framework)).append("\n");
    sb.append("    snapshot: ").append(toIndentedString(snapshot)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    targetImage: ").append(toIndentedString(targetImage)).append("\n");
    sb.append("    targetVersion: ").append(toIndentedString(targetVersion)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    vmImage: ").append(toIndentedString(vmImage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("containerImage");
    openapiFields.add("createTime");
    openapiFields.add("framework");
    openapiFields.add("snapshot");
    openapiFields.add("state");
    openapiFields.add("targetImage");
    openapiFields.add("targetVersion");
    openapiFields.add("version");
    openapiFields.add("vmImage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpgradeHistoryEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpgradeHistoryEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpgradeHistoryEntry is not found in the empty JSON string", UpgradeHistoryEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpgradeHistoryEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpgradeHistoryEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        ActionEnum.validateJsonElement(jsonObj.get("action"));
      }
      if ((jsonObj.get("containerImage") != null && !jsonObj.get("containerImage").isJsonNull()) && !jsonObj.get("containerImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerImage").toString()));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("framework") != null && !jsonObj.get("framework").isJsonNull()) && !jsonObj.get("framework").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `framework` to be a primitive type in the JSON string but got `%s`", jsonObj.get("framework").toString()));
      }
      if ((jsonObj.get("snapshot") != null && !jsonObj.get("snapshot").isJsonNull()) && !jsonObj.get("snapshot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshot").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("targetImage") != null && !jsonObj.get("targetImage").isJsonNull()) && !jsonObj.get("targetImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetImage").toString()));
      }
      if ((jsonObj.get("targetVersion") != null && !jsonObj.get("targetVersion").isJsonNull()) && !jsonObj.get("targetVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetVersion").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("vmImage") != null && !jsonObj.get("vmImage").isJsonNull()) && !jsonObj.get("vmImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmImage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpgradeHistoryEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpgradeHistoryEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpgradeHistoryEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpgradeHistoryEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<UpgradeHistoryEntry>() {
           @Override
           public void write(JsonWriter out, UpgradeHistoryEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpgradeHistoryEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpgradeHistoryEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpgradeHistoryEntry
   * @throws IOException if the JSON string is invalid with respect to UpgradeHistoryEntry
   */
  public static UpgradeHistoryEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpgradeHistoryEntry.class);
  }

  /**
   * Convert an instance of UpgradeHistoryEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

