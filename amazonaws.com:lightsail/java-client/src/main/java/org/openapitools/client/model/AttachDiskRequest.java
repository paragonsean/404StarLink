/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AttachDiskRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:59:36.256697-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttachDiskRequest {
  public static final String SERIALIZED_NAME_DISK_NAME = "diskName";
  @SerializedName(SERIALIZED_NAME_DISK_NAME)
  private String diskName;

  public static final String SERIALIZED_NAME_INSTANCE_NAME = "instanceName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME)
  private String instanceName;

  public static final String SERIALIZED_NAME_DISK_PATH = "diskPath";
  @SerializedName(SERIALIZED_NAME_DISK_PATH)
  private String diskPath;

  public static final String SERIALIZED_NAME_AUTO_MOUNTING = "autoMounting";
  @SerializedName(SERIALIZED_NAME_AUTO_MOUNTING)
  private Boolean autoMounting;

  public AttachDiskRequest() {
  }

  public AttachDiskRequest diskName(String diskName) {
    this.diskName = diskName;
    return this;
  }

  /**
   * Get diskName
   * @return diskName
   */
  @javax.annotation.Nonnull
  public String getDiskName() {
    return diskName;
  }

  public void setDiskName(String diskName) {
    this.diskName = diskName;
  }


  public AttachDiskRequest instanceName(String instanceName) {
    this.instanceName = instanceName;
    return this;
  }

  /**
   * Get instanceName
   * @return instanceName
   */
  @javax.annotation.Nonnull
  public String getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(String instanceName) {
    this.instanceName = instanceName;
  }


  public AttachDiskRequest diskPath(String diskPath) {
    this.diskPath = diskPath;
    return this;
  }

  /**
   * Get diskPath
   * @return diskPath
   */
  @javax.annotation.Nonnull
  public String getDiskPath() {
    return diskPath;
  }

  public void setDiskPath(String diskPath) {
    this.diskPath = diskPath;
  }


  public AttachDiskRequest autoMounting(Boolean autoMounting) {
    this.autoMounting = autoMounting;
    return this;
  }

  /**
   * Get autoMounting
   * @return autoMounting
   */
  @javax.annotation.Nullable
  public Boolean getAutoMounting() {
    return autoMounting;
  }

  public void setAutoMounting(Boolean autoMounting) {
    this.autoMounting = autoMounting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachDiskRequest attachDiskRequest = (AttachDiskRequest) o;
    return Objects.equals(this.diskName, attachDiskRequest.diskName) &&
        Objects.equals(this.instanceName, attachDiskRequest.instanceName) &&
        Objects.equals(this.diskPath, attachDiskRequest.diskPath) &&
        Objects.equals(this.autoMounting, attachDiskRequest.autoMounting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskName, instanceName, diskPath, autoMounting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachDiskRequest {\n");
    sb.append("    diskName: ").append(toIndentedString(diskName)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    diskPath: ").append(toIndentedString(diskPath)).append("\n");
    sb.append("    autoMounting: ").append(toIndentedString(autoMounting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diskName");
    openapiFields.add("instanceName");
    openapiFields.add("diskPath");
    openapiFields.add("autoMounting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("diskName");
    openapiRequiredFields.add("instanceName");
    openapiRequiredFields.add("diskPath");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttachDiskRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttachDiskRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttachDiskRequest is not found in the empty JSON string", AttachDiskRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttachDiskRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttachDiskRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AttachDiskRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `diskName`
      String.validateJsonElement(jsonObj.get("diskName"));
      // validate the required field `instanceName`
      String.validateJsonElement(jsonObj.get("instanceName"));
      // validate the required field `diskPath`
      String.validateJsonElement(jsonObj.get("diskPath"));
      // validate the optional field `autoMounting`
      if (jsonObj.get("autoMounting") != null && !jsonObj.get("autoMounting").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("autoMounting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttachDiskRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttachDiskRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttachDiskRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttachDiskRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AttachDiskRequest>() {
           @Override
           public void write(JsonWriter out, AttachDiskRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttachDiskRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttachDiskRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttachDiskRequest
   * @throws IOException if the JSON string is invalid with respect to AttachDiskRequest
   */
  public static AttachDiskRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttachDiskRequest.class);
  }

  /**
   * Convert an instance of AttachDiskRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

