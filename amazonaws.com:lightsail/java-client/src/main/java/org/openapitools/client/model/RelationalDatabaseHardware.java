/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RelationalDatabaseHardware
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:08:53.071508-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RelationalDatabaseHardware {
  public static final String SERIALIZED_NAME_CPU_COUNT = "cpuCount";
  @SerializedName(SERIALIZED_NAME_CPU_COUNT)
  private Integer cpuCount;

  public static final String SERIALIZED_NAME_DISK_SIZE_IN_GB = "diskSizeInGb";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_IN_GB)
  private Integer diskSizeInGb;

  public static final String SERIALIZED_NAME_RAM_SIZE_IN_GB = "ramSizeInGb";
  @SerializedName(SERIALIZED_NAME_RAM_SIZE_IN_GB)
  private Float ramSizeInGb;

  public RelationalDatabaseHardware() {
  }

  public RelationalDatabaseHardware cpuCount(Integer cpuCount) {
    this.cpuCount = cpuCount;
    return this;
  }

  /**
   * Get cpuCount
   * @return cpuCount
   */
  @javax.annotation.Nullable
  public Integer getCpuCount() {
    return cpuCount;
  }

  public void setCpuCount(Integer cpuCount) {
    this.cpuCount = cpuCount;
  }


  public RelationalDatabaseHardware diskSizeInGb(Integer diskSizeInGb) {
    this.diskSizeInGb = diskSizeInGb;
    return this;
  }

  /**
   * Get diskSizeInGb
   * @return diskSizeInGb
   */
  @javax.annotation.Nullable
  public Integer getDiskSizeInGb() {
    return diskSizeInGb;
  }

  public void setDiskSizeInGb(Integer diskSizeInGb) {
    this.diskSizeInGb = diskSizeInGb;
  }


  public RelationalDatabaseHardware ramSizeInGb(Float ramSizeInGb) {
    this.ramSizeInGb = ramSizeInGb;
    return this;
  }

  /**
   * Get ramSizeInGb
   * @return ramSizeInGb
   */
  @javax.annotation.Nullable
  public Float getRamSizeInGb() {
    return ramSizeInGb;
  }

  public void setRamSizeInGb(Float ramSizeInGb) {
    this.ramSizeInGb = ramSizeInGb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationalDatabaseHardware relationalDatabaseHardware = (RelationalDatabaseHardware) o;
    return Objects.equals(this.cpuCount, relationalDatabaseHardware.cpuCount) &&
        Objects.equals(this.diskSizeInGb, relationalDatabaseHardware.diskSizeInGb) &&
        Objects.equals(this.ramSizeInGb, relationalDatabaseHardware.ramSizeInGb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpuCount, diskSizeInGb, ramSizeInGb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationalDatabaseHardware {\n");
    sb.append("    cpuCount: ").append(toIndentedString(cpuCount)).append("\n");
    sb.append("    diskSizeInGb: ").append(toIndentedString(diskSizeInGb)).append("\n");
    sb.append("    ramSizeInGb: ").append(toIndentedString(ramSizeInGb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cpuCount");
    openapiFields.add("diskSizeInGb");
    openapiFields.add("ramSizeInGb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RelationalDatabaseHardware
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelationalDatabaseHardware.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelationalDatabaseHardware is not found in the empty JSON string", RelationalDatabaseHardware.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelationalDatabaseHardware.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelationalDatabaseHardware` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cpuCount`
      if (jsonObj.get("cpuCount") != null && !jsonObj.get("cpuCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("cpuCount"));
      }
      // validate the optional field `diskSizeInGb`
      if (jsonObj.get("diskSizeInGb") != null && !jsonObj.get("diskSizeInGb").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("diskSizeInGb"));
      }
      // validate the optional field `ramSizeInGb`
      if (jsonObj.get("ramSizeInGb") != null && !jsonObj.get("ramSizeInGb").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("ramSizeInGb"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelationalDatabaseHardware.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelationalDatabaseHardware' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelationalDatabaseHardware> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelationalDatabaseHardware.class));

       return (TypeAdapter<T>) new TypeAdapter<RelationalDatabaseHardware>() {
           @Override
           public void write(JsonWriter out, RelationalDatabaseHardware value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelationalDatabaseHardware read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RelationalDatabaseHardware given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RelationalDatabaseHardware
   * @throws IOException if the JSON string is invalid with respect to RelationalDatabaseHardware
   */
  public static RelationalDatabaseHardware fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelationalDatabaseHardware.class);
  }

  /**
   * Convert an instance of RelationalDatabaseHardware to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

