/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateRelationalDatabaseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:59:36.256697-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateRelationalDatabaseRequest {
  public static final String SERIALIZED_NAME_RELATIONAL_DATABASE_NAME = "relationalDatabaseName";
  @SerializedName(SERIALIZED_NAME_RELATIONAL_DATABASE_NAME)
  private String relationalDatabaseName;

  public static final String SERIALIZED_NAME_MASTER_USER_PASSWORD = "masterUserPassword";
  @SerializedName(SERIALIZED_NAME_MASTER_USER_PASSWORD)
  private String masterUserPassword;

  public static final String SERIALIZED_NAME_ROTATE_MASTER_USER_PASSWORD = "rotateMasterUserPassword";
  @SerializedName(SERIALIZED_NAME_ROTATE_MASTER_USER_PASSWORD)
  private Boolean rotateMasterUserPassword;

  public static final String SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW = "preferredBackupWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_BACKUP_WINDOW)
  private String preferredBackupWindow;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "preferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_ENABLE_BACKUP_RETENTION = "enableBackupRetention";
  @SerializedName(SERIALIZED_NAME_ENABLE_BACKUP_RETENTION)
  private Boolean enableBackupRetention;

  public static final String SERIALIZED_NAME_DISABLE_BACKUP_RETENTION = "disableBackupRetention";
  @SerializedName(SERIALIZED_NAME_DISABLE_BACKUP_RETENTION)
  private Boolean disableBackupRetention;

  public static final String SERIALIZED_NAME_PUBLICLY_ACCESSIBLE = "publiclyAccessible";
  @SerializedName(SERIALIZED_NAME_PUBLICLY_ACCESSIBLE)
  private Boolean publiclyAccessible;

  public static final String SERIALIZED_NAME_APPLY_IMMEDIATELY = "applyImmediately";
  @SerializedName(SERIALIZED_NAME_APPLY_IMMEDIATELY)
  private Boolean applyImmediately;

  public static final String SERIALIZED_NAME_CA_CERTIFICATE_IDENTIFIER = "caCertificateIdentifier";
  @SerializedName(SERIALIZED_NAME_CA_CERTIFICATE_IDENTIFIER)
  private String caCertificateIdentifier;

  public UpdateRelationalDatabaseRequest() {
  }

  public UpdateRelationalDatabaseRequest relationalDatabaseName(String relationalDatabaseName) {
    this.relationalDatabaseName = relationalDatabaseName;
    return this;
  }

  /**
   * Get relationalDatabaseName
   * @return relationalDatabaseName
   */
  @javax.annotation.Nonnull
  public String getRelationalDatabaseName() {
    return relationalDatabaseName;
  }

  public void setRelationalDatabaseName(String relationalDatabaseName) {
    this.relationalDatabaseName = relationalDatabaseName;
  }


  public UpdateRelationalDatabaseRequest masterUserPassword(String masterUserPassword) {
    this.masterUserPassword = masterUserPassword;
    return this;
  }

  /**
   * Get masterUserPassword
   * @return masterUserPassword
   */
  @javax.annotation.Nullable
  public String getMasterUserPassword() {
    return masterUserPassword;
  }

  public void setMasterUserPassword(String masterUserPassword) {
    this.masterUserPassword = masterUserPassword;
  }


  public UpdateRelationalDatabaseRequest rotateMasterUserPassword(Boolean rotateMasterUserPassword) {
    this.rotateMasterUserPassword = rotateMasterUserPassword;
    return this;
  }

  /**
   * Get rotateMasterUserPassword
   * @return rotateMasterUserPassword
   */
  @javax.annotation.Nullable
  public Boolean getRotateMasterUserPassword() {
    return rotateMasterUserPassword;
  }

  public void setRotateMasterUserPassword(Boolean rotateMasterUserPassword) {
    this.rotateMasterUserPassword = rotateMasterUserPassword;
  }


  public UpdateRelationalDatabaseRequest preferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
    return this;
  }

  /**
   * Get preferredBackupWindow
   * @return preferredBackupWindow
   */
  @javax.annotation.Nullable
  public String getPreferredBackupWindow() {
    return preferredBackupWindow;
  }

  public void setPreferredBackupWindow(String preferredBackupWindow) {
    this.preferredBackupWindow = preferredBackupWindow;
  }


  public UpdateRelationalDatabaseRequest preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Get preferredMaintenanceWindow
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public UpdateRelationalDatabaseRequest enableBackupRetention(Boolean enableBackupRetention) {
    this.enableBackupRetention = enableBackupRetention;
    return this;
  }

  /**
   * Get enableBackupRetention
   * @return enableBackupRetention
   */
  @javax.annotation.Nullable
  public Boolean getEnableBackupRetention() {
    return enableBackupRetention;
  }

  public void setEnableBackupRetention(Boolean enableBackupRetention) {
    this.enableBackupRetention = enableBackupRetention;
  }


  public UpdateRelationalDatabaseRequest disableBackupRetention(Boolean disableBackupRetention) {
    this.disableBackupRetention = disableBackupRetention;
    return this;
  }

  /**
   * Get disableBackupRetention
   * @return disableBackupRetention
   */
  @javax.annotation.Nullable
  public Boolean getDisableBackupRetention() {
    return disableBackupRetention;
  }

  public void setDisableBackupRetention(Boolean disableBackupRetention) {
    this.disableBackupRetention = disableBackupRetention;
  }


  public UpdateRelationalDatabaseRequest publiclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
    return this;
  }

  /**
   * Get publiclyAccessible
   * @return publiclyAccessible
   */
  @javax.annotation.Nullable
  public Boolean getPubliclyAccessible() {
    return publiclyAccessible;
  }

  public void setPubliclyAccessible(Boolean publiclyAccessible) {
    this.publiclyAccessible = publiclyAccessible;
  }


  public UpdateRelationalDatabaseRequest applyImmediately(Boolean applyImmediately) {
    this.applyImmediately = applyImmediately;
    return this;
  }

  /**
   * Get applyImmediately
   * @return applyImmediately
   */
  @javax.annotation.Nullable
  public Boolean getApplyImmediately() {
    return applyImmediately;
  }

  public void setApplyImmediately(Boolean applyImmediately) {
    this.applyImmediately = applyImmediately;
  }


  public UpdateRelationalDatabaseRequest caCertificateIdentifier(String caCertificateIdentifier) {
    this.caCertificateIdentifier = caCertificateIdentifier;
    return this;
  }

  /**
   * Get caCertificateIdentifier
   * @return caCertificateIdentifier
   */
  @javax.annotation.Nullable
  public String getCaCertificateIdentifier() {
    return caCertificateIdentifier;
  }

  public void setCaCertificateIdentifier(String caCertificateIdentifier) {
    this.caCertificateIdentifier = caCertificateIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateRelationalDatabaseRequest updateRelationalDatabaseRequest = (UpdateRelationalDatabaseRequest) o;
    return Objects.equals(this.relationalDatabaseName, updateRelationalDatabaseRequest.relationalDatabaseName) &&
        Objects.equals(this.masterUserPassword, updateRelationalDatabaseRequest.masterUserPassword) &&
        Objects.equals(this.rotateMasterUserPassword, updateRelationalDatabaseRequest.rotateMasterUserPassword) &&
        Objects.equals(this.preferredBackupWindow, updateRelationalDatabaseRequest.preferredBackupWindow) &&
        Objects.equals(this.preferredMaintenanceWindow, updateRelationalDatabaseRequest.preferredMaintenanceWindow) &&
        Objects.equals(this.enableBackupRetention, updateRelationalDatabaseRequest.enableBackupRetention) &&
        Objects.equals(this.disableBackupRetention, updateRelationalDatabaseRequest.disableBackupRetention) &&
        Objects.equals(this.publiclyAccessible, updateRelationalDatabaseRequest.publiclyAccessible) &&
        Objects.equals(this.applyImmediately, updateRelationalDatabaseRequest.applyImmediately) &&
        Objects.equals(this.caCertificateIdentifier, updateRelationalDatabaseRequest.caCertificateIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relationalDatabaseName, masterUserPassword, rotateMasterUserPassword, preferredBackupWindow, preferredMaintenanceWindow, enableBackupRetention, disableBackupRetention, publiclyAccessible, applyImmediately, caCertificateIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateRelationalDatabaseRequest {\n");
    sb.append("    relationalDatabaseName: ").append(toIndentedString(relationalDatabaseName)).append("\n");
    sb.append("    masterUserPassword: ").append(toIndentedString(masterUserPassword)).append("\n");
    sb.append("    rotateMasterUserPassword: ").append(toIndentedString(rotateMasterUserPassword)).append("\n");
    sb.append("    preferredBackupWindow: ").append(toIndentedString(preferredBackupWindow)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    enableBackupRetention: ").append(toIndentedString(enableBackupRetention)).append("\n");
    sb.append("    disableBackupRetention: ").append(toIndentedString(disableBackupRetention)).append("\n");
    sb.append("    publiclyAccessible: ").append(toIndentedString(publiclyAccessible)).append("\n");
    sb.append("    applyImmediately: ").append(toIndentedString(applyImmediately)).append("\n");
    sb.append("    caCertificateIdentifier: ").append(toIndentedString(caCertificateIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("relationalDatabaseName");
    openapiFields.add("masterUserPassword");
    openapiFields.add("rotateMasterUserPassword");
    openapiFields.add("preferredBackupWindow");
    openapiFields.add("preferredMaintenanceWindow");
    openapiFields.add("enableBackupRetention");
    openapiFields.add("disableBackupRetention");
    openapiFields.add("publiclyAccessible");
    openapiFields.add("applyImmediately");
    openapiFields.add("caCertificateIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("relationalDatabaseName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateRelationalDatabaseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateRelationalDatabaseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateRelationalDatabaseRequest is not found in the empty JSON string", UpdateRelationalDatabaseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateRelationalDatabaseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateRelationalDatabaseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateRelationalDatabaseRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `relationalDatabaseName`
      String.validateJsonElement(jsonObj.get("relationalDatabaseName"));
      // validate the optional field `masterUserPassword`
      if (jsonObj.get("masterUserPassword") != null && !jsonObj.get("masterUserPassword").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("masterUserPassword"));
      }
      // validate the optional field `rotateMasterUserPassword`
      if (jsonObj.get("rotateMasterUserPassword") != null && !jsonObj.get("rotateMasterUserPassword").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("rotateMasterUserPassword"));
      }
      // validate the optional field `preferredBackupWindow`
      if (jsonObj.get("preferredBackupWindow") != null && !jsonObj.get("preferredBackupWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("preferredBackupWindow"));
      }
      // validate the optional field `preferredMaintenanceWindow`
      if (jsonObj.get("preferredMaintenanceWindow") != null && !jsonObj.get("preferredMaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("preferredMaintenanceWindow"));
      }
      // validate the optional field `enableBackupRetention`
      if (jsonObj.get("enableBackupRetention") != null && !jsonObj.get("enableBackupRetention").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("enableBackupRetention"));
      }
      // validate the optional field `disableBackupRetention`
      if (jsonObj.get("disableBackupRetention") != null && !jsonObj.get("disableBackupRetention").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("disableBackupRetention"));
      }
      // validate the optional field `publiclyAccessible`
      if (jsonObj.get("publiclyAccessible") != null && !jsonObj.get("publiclyAccessible").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("publiclyAccessible"));
      }
      // validate the optional field `applyImmediately`
      if (jsonObj.get("applyImmediately") != null && !jsonObj.get("applyImmediately").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("applyImmediately"));
      }
      // validate the optional field `caCertificateIdentifier`
      if (jsonObj.get("caCertificateIdentifier") != null && !jsonObj.get("caCertificateIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("caCertificateIdentifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateRelationalDatabaseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateRelationalDatabaseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateRelationalDatabaseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateRelationalDatabaseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateRelationalDatabaseRequest>() {
           @Override
           public void write(JsonWriter out, UpdateRelationalDatabaseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateRelationalDatabaseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateRelationalDatabaseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateRelationalDatabaseRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateRelationalDatabaseRequest
   */
  public static UpdateRelationalDatabaseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateRelationalDatabaseRequest.class);
  }

  /**
   * Convert an instance of UpdateRelationalDatabaseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

