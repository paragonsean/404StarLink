/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateDistributionRequestCacheBehaviorSettings;
import org.openapitools.client.model.CreateDistributionRequestDefaultCacheBehavior;
import org.openapitools.client.model.CreateDistributionRequestOrigin;
import org.openapitools.client.model.IpAddressType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDistributionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:59:36.256697-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDistributionRequest {
  public static final String SERIALIZED_NAME_DISTRIBUTION_NAME = "distributionName";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_NAME)
  private String distributionName;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private CreateDistributionRequestOrigin origin;

  public static final String SERIALIZED_NAME_DEFAULT_CACHE_BEHAVIOR = "defaultCacheBehavior";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CACHE_BEHAVIOR)
  private CreateDistributionRequestDefaultCacheBehavior defaultCacheBehavior;

  public static final String SERIALIZED_NAME_CACHE_BEHAVIOR_SETTINGS = "cacheBehaviorSettings";
  @SerializedName(SERIALIZED_NAME_CACHE_BEHAVIOR_SETTINGS)
  private CreateDistributionRequestCacheBehaviorSettings cacheBehaviorSettings;

  public static final String SERIALIZED_NAME_CACHE_BEHAVIORS = "cacheBehaviors";
  @SerializedName(SERIALIZED_NAME_CACHE_BEHAVIORS)
  private List cacheBehaviors;

  public static final String SERIALIZED_NAME_BUNDLE_ID = "bundleId";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  private String bundleId;

  public static final String SERIALIZED_NAME_IP_ADDRESS_TYPE = "ipAddressType";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS_TYPE)
  private IpAddressType ipAddressType;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CreateDistributionRequest() {
  }

  public CreateDistributionRequest distributionName(String distributionName) {
    this.distributionName = distributionName;
    return this;
  }

  /**
   * Get distributionName
   * @return distributionName
   */
  @javax.annotation.Nonnull
  public String getDistributionName() {
    return distributionName;
  }

  public void setDistributionName(String distributionName) {
    this.distributionName = distributionName;
  }


  public CreateDistributionRequest origin(CreateDistributionRequestOrigin origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Get origin
   * @return origin
   */
  @javax.annotation.Nonnull
  public CreateDistributionRequestOrigin getOrigin() {
    return origin;
  }

  public void setOrigin(CreateDistributionRequestOrigin origin) {
    this.origin = origin;
  }


  public CreateDistributionRequest defaultCacheBehavior(CreateDistributionRequestDefaultCacheBehavior defaultCacheBehavior) {
    this.defaultCacheBehavior = defaultCacheBehavior;
    return this;
  }

  /**
   * Get defaultCacheBehavior
   * @return defaultCacheBehavior
   */
  @javax.annotation.Nonnull
  public CreateDistributionRequestDefaultCacheBehavior getDefaultCacheBehavior() {
    return defaultCacheBehavior;
  }

  public void setDefaultCacheBehavior(CreateDistributionRequestDefaultCacheBehavior defaultCacheBehavior) {
    this.defaultCacheBehavior = defaultCacheBehavior;
  }


  public CreateDistributionRequest cacheBehaviorSettings(CreateDistributionRequestCacheBehaviorSettings cacheBehaviorSettings) {
    this.cacheBehaviorSettings = cacheBehaviorSettings;
    return this;
  }

  /**
   * Get cacheBehaviorSettings
   * @return cacheBehaviorSettings
   */
  @javax.annotation.Nullable
  public CreateDistributionRequestCacheBehaviorSettings getCacheBehaviorSettings() {
    return cacheBehaviorSettings;
  }

  public void setCacheBehaviorSettings(CreateDistributionRequestCacheBehaviorSettings cacheBehaviorSettings) {
    this.cacheBehaviorSettings = cacheBehaviorSettings;
  }


  public CreateDistributionRequest cacheBehaviors(List cacheBehaviors) {
    this.cacheBehaviors = cacheBehaviors;
    return this;
  }

  /**
   * Get cacheBehaviors
   * @return cacheBehaviors
   */
  @javax.annotation.Nullable
  public List getCacheBehaviors() {
    return cacheBehaviors;
  }

  public void setCacheBehaviors(List cacheBehaviors) {
    this.cacheBehaviors = cacheBehaviors;
  }


  public CreateDistributionRequest bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Get bundleId
   * @return bundleId
   */
  @javax.annotation.Nonnull
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }


  public CreateDistributionRequest ipAddressType(IpAddressType ipAddressType) {
    this.ipAddressType = ipAddressType;
    return this;
  }

  /**
   * Get ipAddressType
   * @return ipAddressType
   */
  @javax.annotation.Nullable
  public IpAddressType getIpAddressType() {
    return ipAddressType;
  }

  public void setIpAddressType(IpAddressType ipAddressType) {
    this.ipAddressType = ipAddressType;
  }


  public CreateDistributionRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDistributionRequest createDistributionRequest = (CreateDistributionRequest) o;
    return Objects.equals(this.distributionName, createDistributionRequest.distributionName) &&
        Objects.equals(this.origin, createDistributionRequest.origin) &&
        Objects.equals(this.defaultCacheBehavior, createDistributionRequest.defaultCacheBehavior) &&
        Objects.equals(this.cacheBehaviorSettings, createDistributionRequest.cacheBehaviorSettings) &&
        Objects.equals(this.cacheBehaviors, createDistributionRequest.cacheBehaviors) &&
        Objects.equals(this.bundleId, createDistributionRequest.bundleId) &&
        Objects.equals(this.ipAddressType, createDistributionRequest.ipAddressType) &&
        Objects.equals(this.tags, createDistributionRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distributionName, origin, defaultCacheBehavior, cacheBehaviorSettings, cacheBehaviors, bundleId, ipAddressType, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDistributionRequest {\n");
    sb.append("    distributionName: ").append(toIndentedString(distributionName)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    defaultCacheBehavior: ").append(toIndentedString(defaultCacheBehavior)).append("\n");
    sb.append("    cacheBehaviorSettings: ").append(toIndentedString(cacheBehaviorSettings)).append("\n");
    sb.append("    cacheBehaviors: ").append(toIndentedString(cacheBehaviors)).append("\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    ipAddressType: ").append(toIndentedString(ipAddressType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("distributionName");
    openapiFields.add("origin");
    openapiFields.add("defaultCacheBehavior");
    openapiFields.add("cacheBehaviorSettings");
    openapiFields.add("cacheBehaviors");
    openapiFields.add("bundleId");
    openapiFields.add("ipAddressType");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("distributionName");
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("defaultCacheBehavior");
    openapiRequiredFields.add("bundleId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDistributionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDistributionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDistributionRequest is not found in the empty JSON string", CreateDistributionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDistributionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDistributionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDistributionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `distributionName`
      String.validateJsonElement(jsonObj.get("distributionName"));
      // validate the required field `origin`
      CreateDistributionRequestOrigin.validateJsonElement(jsonObj.get("origin"));
      // validate the required field `defaultCacheBehavior`
      CreateDistributionRequestDefaultCacheBehavior.validateJsonElement(jsonObj.get("defaultCacheBehavior"));
      // validate the optional field `cacheBehaviorSettings`
      if (jsonObj.get("cacheBehaviorSettings") != null && !jsonObj.get("cacheBehaviorSettings").isJsonNull()) {
        CreateDistributionRequestCacheBehaviorSettings.validateJsonElement(jsonObj.get("cacheBehaviorSettings"));
      }
      // validate the optional field `cacheBehaviors`
      if (jsonObj.get("cacheBehaviors") != null && !jsonObj.get("cacheBehaviors").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("cacheBehaviors"));
      }
      // validate the required field `bundleId`
      String.validateJsonElement(jsonObj.get("bundleId"));
      // validate the optional field `ipAddressType`
      if (jsonObj.get("ipAddressType") != null && !jsonObj.get("ipAddressType").isJsonNull()) {
        IpAddressType.validateJsonElement(jsonObj.get("ipAddressType"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDistributionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDistributionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDistributionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDistributionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDistributionRequest>() {
           @Override
           public void write(JsonWriter out, CreateDistributionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDistributionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDistributionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDistributionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDistributionRequest
   */
  public static CreateDistributionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDistributionRequest.class);
  }

  /**
   * Convert an instance of CreateDistributionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

