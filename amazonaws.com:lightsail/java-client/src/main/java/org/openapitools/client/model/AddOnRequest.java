/*
 * Amazon Lightsail
 * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes everything you need to launch your project quickly - instances (virtual private servers), container services, storage buckets, managed databases, SSD-based block storage, static IP addresses, load balancers, content delivery network (CDN) distributions, DNS management of registered domains, and resource snapshots (backups) - for a low, predictable monthly price.</p> <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API, Command Line Interface (CLI), or SDKs. For more information about Lightsail concepts and tasks, see the <a href=\"https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli\">Amazon Lightsail Developer Guide</a>.</p> <p>This API Reference provides detailed information about the actions, data types, parameters, and errors of the Lightsail service. For more information about the supported Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/lightsail.html\">Amazon Lightsail Endpoints and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AddOnRequestAutoSnapshotAddOnRequest;
import org.openapitools.client.model.AddOnRequestStopInstanceOnIdleRequest;
import org.openapitools.client.model.AddOnType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Describes a request to enable, modify, or disable an add-on for an Amazon Lightsail resource.&lt;/p&gt; &lt;note&gt; &lt;p&gt;An additional cost may be associated with enabling add-ons. For more information, see the &lt;a href&#x3D;\&quot;https://aws.amazon.com/lightsail/pricing/\&quot;&gt;Lightsail pricing page&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:59:36.256697-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddOnRequest {
  public static final String SERIALIZED_NAME_ADD_ON_TYPE = "addOnType";
  @SerializedName(SERIALIZED_NAME_ADD_ON_TYPE)
  private AddOnType addOnType;

  public static final String SERIALIZED_NAME_AUTO_SNAPSHOT_ADD_ON_REQUEST = "autoSnapshotAddOnRequest";
  @SerializedName(SERIALIZED_NAME_AUTO_SNAPSHOT_ADD_ON_REQUEST)
  private AddOnRequestAutoSnapshotAddOnRequest autoSnapshotAddOnRequest;

  public static final String SERIALIZED_NAME_STOP_INSTANCE_ON_IDLE_REQUEST = "stopInstanceOnIdleRequest";
  @SerializedName(SERIALIZED_NAME_STOP_INSTANCE_ON_IDLE_REQUEST)
  private AddOnRequestStopInstanceOnIdleRequest stopInstanceOnIdleRequest;

  public AddOnRequest() {
  }

  public AddOnRequest addOnType(AddOnType addOnType) {
    this.addOnType = addOnType;
    return this;
  }

  /**
   * Get addOnType
   * @return addOnType
   */
  @javax.annotation.Nonnull
  public AddOnType getAddOnType() {
    return addOnType;
  }

  public void setAddOnType(AddOnType addOnType) {
    this.addOnType = addOnType;
  }


  public AddOnRequest autoSnapshotAddOnRequest(AddOnRequestAutoSnapshotAddOnRequest autoSnapshotAddOnRequest) {
    this.autoSnapshotAddOnRequest = autoSnapshotAddOnRequest;
    return this;
  }

  /**
   * Get autoSnapshotAddOnRequest
   * @return autoSnapshotAddOnRequest
   */
  @javax.annotation.Nullable
  public AddOnRequestAutoSnapshotAddOnRequest getAutoSnapshotAddOnRequest() {
    return autoSnapshotAddOnRequest;
  }

  public void setAutoSnapshotAddOnRequest(AddOnRequestAutoSnapshotAddOnRequest autoSnapshotAddOnRequest) {
    this.autoSnapshotAddOnRequest = autoSnapshotAddOnRequest;
  }


  public AddOnRequest stopInstanceOnIdleRequest(AddOnRequestStopInstanceOnIdleRequest stopInstanceOnIdleRequest) {
    this.stopInstanceOnIdleRequest = stopInstanceOnIdleRequest;
    return this;
  }

  /**
   * Get stopInstanceOnIdleRequest
   * @return stopInstanceOnIdleRequest
   */
  @javax.annotation.Nullable
  public AddOnRequestStopInstanceOnIdleRequest getStopInstanceOnIdleRequest() {
    return stopInstanceOnIdleRequest;
  }

  public void setStopInstanceOnIdleRequest(AddOnRequestStopInstanceOnIdleRequest stopInstanceOnIdleRequest) {
    this.stopInstanceOnIdleRequest = stopInstanceOnIdleRequest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddOnRequest addOnRequest = (AddOnRequest) o;
    return Objects.equals(this.addOnType, addOnRequest.addOnType) &&
        Objects.equals(this.autoSnapshotAddOnRequest, addOnRequest.autoSnapshotAddOnRequest) &&
        Objects.equals(this.stopInstanceOnIdleRequest, addOnRequest.stopInstanceOnIdleRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addOnType, autoSnapshotAddOnRequest, stopInstanceOnIdleRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddOnRequest {\n");
    sb.append("    addOnType: ").append(toIndentedString(addOnType)).append("\n");
    sb.append("    autoSnapshotAddOnRequest: ").append(toIndentedString(autoSnapshotAddOnRequest)).append("\n");
    sb.append("    stopInstanceOnIdleRequest: ").append(toIndentedString(stopInstanceOnIdleRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addOnType");
    openapiFields.add("autoSnapshotAddOnRequest");
    openapiFields.add("stopInstanceOnIdleRequest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("addOnType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddOnRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddOnRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddOnRequest is not found in the empty JSON string", AddOnRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddOnRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddOnRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddOnRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `addOnType`
      AddOnType.validateJsonElement(jsonObj.get("addOnType"));
      // validate the optional field `autoSnapshotAddOnRequest`
      if (jsonObj.get("autoSnapshotAddOnRequest") != null && !jsonObj.get("autoSnapshotAddOnRequest").isJsonNull()) {
        AddOnRequestAutoSnapshotAddOnRequest.validateJsonElement(jsonObj.get("autoSnapshotAddOnRequest"));
      }
      // validate the optional field `stopInstanceOnIdleRequest`
      if (jsonObj.get("stopInstanceOnIdleRequest") != null && !jsonObj.get("stopInstanceOnIdleRequest").isJsonNull()) {
        AddOnRequestStopInstanceOnIdleRequest.validateJsonElement(jsonObj.get("stopInstanceOnIdleRequest"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddOnRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddOnRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddOnRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddOnRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddOnRequest>() {
           @Override
           public void write(JsonWriter out, AddOnRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddOnRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddOnRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddOnRequest
   * @throws IOException if the JSON string is invalid with respect to AddOnRequest
   */
  public static AddOnRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddOnRequest.class);
  }

  /**
   * Convert an instance of AddOnRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

