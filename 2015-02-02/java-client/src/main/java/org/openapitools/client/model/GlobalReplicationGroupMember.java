/*
 * Amazon ElastiCache
 * <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
 *
 * The version of the OpenAPI document: 2015-02-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AutomaticFailoverStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A member of a Global datastore. It contains the Replication Group Id, the Amazon region and the role of the replication group. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:56:10.865581-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GlobalReplicationGroupMember {
  public static final String SERIALIZED_NAME_REPLICATION_GROUP_ID = "ReplicationGroupId";
  @SerializedName(SERIALIZED_NAME_REPLICATION_GROUP_ID)
  private String replicationGroupId;

  public static final String SERIALIZED_NAME_REPLICATION_GROUP_REGION = "ReplicationGroupRegion";
  @SerializedName(SERIALIZED_NAME_REPLICATION_GROUP_REGION)
  private String replicationGroupRegion;

  public static final String SERIALIZED_NAME_ROLE = "Role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_AUTOMATIC_FAILOVER = "AutomaticFailover";
  @SerializedName(SERIALIZED_NAME_AUTOMATIC_FAILOVER)
  private AutomaticFailoverStatus automaticFailover;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public GlobalReplicationGroupMember() {
  }

  public GlobalReplicationGroupMember replicationGroupId(String replicationGroupId) {
    this.replicationGroupId = replicationGroupId;
    return this;
  }

  /**
   * Get replicationGroupId
   * @return replicationGroupId
   */
  @javax.annotation.Nullable
  public String getReplicationGroupId() {
    return replicationGroupId;
  }

  public void setReplicationGroupId(String replicationGroupId) {
    this.replicationGroupId = replicationGroupId;
  }


  public GlobalReplicationGroupMember replicationGroupRegion(String replicationGroupRegion) {
    this.replicationGroupRegion = replicationGroupRegion;
    return this;
  }

  /**
   * Get replicationGroupRegion
   * @return replicationGroupRegion
   */
  @javax.annotation.Nullable
  public String getReplicationGroupRegion() {
    return replicationGroupRegion;
  }

  public void setReplicationGroupRegion(String replicationGroupRegion) {
    this.replicationGroupRegion = replicationGroupRegion;
  }


  public GlobalReplicationGroupMember role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public GlobalReplicationGroupMember automaticFailover(AutomaticFailoverStatus automaticFailover) {
    this.automaticFailover = automaticFailover;
    return this;
  }

  /**
   * Get automaticFailover
   * @return automaticFailover
   */
  @javax.annotation.Nullable
  public AutomaticFailoverStatus getAutomaticFailover() {
    return automaticFailover;
  }

  public void setAutomaticFailover(AutomaticFailoverStatus automaticFailover) {
    this.automaticFailover = automaticFailover;
  }


  public GlobalReplicationGroupMember status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalReplicationGroupMember globalReplicationGroupMember = (GlobalReplicationGroupMember) o;
    return Objects.equals(this.replicationGroupId, globalReplicationGroupMember.replicationGroupId) &&
        Objects.equals(this.replicationGroupRegion, globalReplicationGroupMember.replicationGroupRegion) &&
        Objects.equals(this.role, globalReplicationGroupMember.role) &&
        Objects.equals(this.automaticFailover, globalReplicationGroupMember.automaticFailover) &&
        Objects.equals(this.status, globalReplicationGroupMember.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(replicationGroupId, replicationGroupRegion, role, automaticFailover, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalReplicationGroupMember {\n");
    sb.append("    replicationGroupId: ").append(toIndentedString(replicationGroupId)).append("\n");
    sb.append("    replicationGroupRegion: ").append(toIndentedString(replicationGroupRegion)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    automaticFailover: ").append(toIndentedString(automaticFailover)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReplicationGroupId");
    openapiFields.add("ReplicationGroupRegion");
    openapiFields.add("Role");
    openapiFields.add("AutomaticFailover");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GlobalReplicationGroupMember
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GlobalReplicationGroupMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalReplicationGroupMember is not found in the empty JSON string", GlobalReplicationGroupMember.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GlobalReplicationGroupMember.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GlobalReplicationGroupMember` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReplicationGroupId`
      if (jsonObj.get("ReplicationGroupId") != null && !jsonObj.get("ReplicationGroupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationGroupId"));
      }
      // validate the optional field `ReplicationGroupRegion`
      if (jsonObj.get("ReplicationGroupRegion") != null && !jsonObj.get("ReplicationGroupRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplicationGroupRegion"));
      }
      // validate the optional field `Role`
      if (jsonObj.get("Role") != null && !jsonObj.get("Role").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Role"));
      }
      // validate the optional field `AutomaticFailover`
      if (jsonObj.get("AutomaticFailover") != null && !jsonObj.get("AutomaticFailover").isJsonNull()) {
        AutomaticFailoverStatus.validateJsonElement(jsonObj.get("AutomaticFailover"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalReplicationGroupMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalReplicationGroupMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalReplicationGroupMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalReplicationGroupMember.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalReplicationGroupMember>() {
           @Override
           public void write(JsonWriter out, GlobalReplicationGroupMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalReplicationGroupMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GlobalReplicationGroupMember given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GlobalReplicationGroupMember
   * @throws IOException if the JSON string is invalid with respect to GlobalReplicationGroupMember
   */
  public static GlobalReplicationGroupMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalReplicationGroupMember.class);
  }

  /**
   * Convert an instance of GlobalReplicationGroupMember to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

