/*
 * Amazon ElastiCache
 * <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
 *
 * The version of the OpenAPI document: 2015-02-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AZMode;
import org.openapitools.client.model.AuthTokenUpdateStrategyType;
import org.openapitools.client.model.IpDiscovery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the input of a &lt;code&gt;ModifyCacheCluster&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:54:01.012361-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModifyCacheClusterMessage {
  public static final String SERIALIZED_NAME_CACHE_CLUSTER_ID = "CacheClusterId";
  @SerializedName(SERIALIZED_NAME_CACHE_CLUSTER_ID)
  private String cacheClusterId;

  public static final String SERIALIZED_NAME_NUM_CACHE_NODES = "NumCacheNodes";
  @SerializedName(SERIALIZED_NAME_NUM_CACHE_NODES)
  private Integer numCacheNodes;

  public static final String SERIALIZED_NAME_CACHE_NODE_IDS_TO_REMOVE = "CacheNodeIdsToRemove";
  @SerializedName(SERIALIZED_NAME_CACHE_NODE_IDS_TO_REMOVE)
  private List cacheNodeIdsToRemove;

  public static final String SERIALIZED_NAME_AZ_MODE = "AZMode";
  @SerializedName(SERIALIZED_NAME_AZ_MODE)
  private AZMode azMode;

  public static final String SERIALIZED_NAME_NEW_AVAILABILITY_ZONES = "NewAvailabilityZones";
  @SerializedName(SERIALIZED_NAME_NEW_AVAILABILITY_ZONES)
  private List newAvailabilityZones;

  public static final String SERIALIZED_NAME_CACHE_SECURITY_GROUP_NAMES = "CacheSecurityGroupNames";
  @SerializedName(SERIALIZED_NAME_CACHE_SECURITY_GROUP_NAMES)
  private List cacheSecurityGroupNames;

  public static final String SERIALIZED_NAME_SECURITY_GROUP_IDS = "SecurityGroupIds";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP_IDS)
  private List securityGroupIds;

  public static final String SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW = "PreferredMaintenanceWindow";
  @SerializedName(SERIALIZED_NAME_PREFERRED_MAINTENANCE_WINDOW)
  private String preferredMaintenanceWindow;

  public static final String SERIALIZED_NAME_NOTIFICATION_TOPIC_ARN = "NotificationTopicArn";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TOPIC_ARN)
  private String notificationTopicArn;

  public static final String SERIALIZED_NAME_CACHE_PARAMETER_GROUP_NAME = "CacheParameterGroupName";
  @SerializedName(SERIALIZED_NAME_CACHE_PARAMETER_GROUP_NAME)
  private String cacheParameterGroupName;

  public static final String SERIALIZED_NAME_NOTIFICATION_TOPIC_STATUS = "NotificationTopicStatus";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TOPIC_STATUS)
  private String notificationTopicStatus;

  public static final String SERIALIZED_NAME_APPLY_IMMEDIATELY = "ApplyImmediately";
  @SerializedName(SERIALIZED_NAME_APPLY_IMMEDIATELY)
  private Boolean applyImmediately;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_AUTO_MINOR_VERSION_UPGRADE = "AutoMinorVersionUpgrade";
  @SerializedName(SERIALIZED_NAME_AUTO_MINOR_VERSION_UPGRADE)
  private Boolean autoMinorVersionUpgrade;

  public static final String SERIALIZED_NAME_SNAPSHOT_RETENTION_LIMIT = "SnapshotRetentionLimit";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_RETENTION_LIMIT)
  private Integer snapshotRetentionLimit;

  public static final String SERIALIZED_NAME_SNAPSHOT_WINDOW = "SnapshotWindow";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_WINDOW)
  private String snapshotWindow;

  public static final String SERIALIZED_NAME_CACHE_NODE_TYPE = "CacheNodeType";
  @SerializedName(SERIALIZED_NAME_CACHE_NODE_TYPE)
  private String cacheNodeType;

  public static final String SERIALIZED_NAME_AUTH_TOKEN = "AuthToken";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN)
  private String authToken;

  public static final String SERIALIZED_NAME_AUTH_TOKEN_UPDATE_STRATEGY = "AuthTokenUpdateStrategy";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN_UPDATE_STRATEGY)
  private AuthTokenUpdateStrategyType authTokenUpdateStrategy;

  public static final String SERIALIZED_NAME_LOG_DELIVERY_CONFIGURATIONS = "LogDeliveryConfigurations";
  @SerializedName(SERIALIZED_NAME_LOG_DELIVERY_CONFIGURATIONS)
  private List logDeliveryConfigurations;

  public static final String SERIALIZED_NAME_IP_DISCOVERY = "IpDiscovery";
  @SerializedName(SERIALIZED_NAME_IP_DISCOVERY)
  private IpDiscovery ipDiscovery;

  public ModifyCacheClusterMessage() {
  }

  public ModifyCacheClusterMessage cacheClusterId(String cacheClusterId) {
    this.cacheClusterId = cacheClusterId;
    return this;
  }

  /**
   * Get cacheClusterId
   * @return cacheClusterId
   */
  @javax.annotation.Nonnull
  public String getCacheClusterId() {
    return cacheClusterId;
  }

  public void setCacheClusterId(String cacheClusterId) {
    this.cacheClusterId = cacheClusterId;
  }


  public ModifyCacheClusterMessage numCacheNodes(Integer numCacheNodes) {
    this.numCacheNodes = numCacheNodes;
    return this;
  }

  /**
   * Get numCacheNodes
   * @return numCacheNodes
   */
  @javax.annotation.Nullable
  public Integer getNumCacheNodes() {
    return numCacheNodes;
  }

  public void setNumCacheNodes(Integer numCacheNodes) {
    this.numCacheNodes = numCacheNodes;
  }


  public ModifyCacheClusterMessage cacheNodeIdsToRemove(List cacheNodeIdsToRemove) {
    this.cacheNodeIdsToRemove = cacheNodeIdsToRemove;
    return this;
  }

  /**
   * Get cacheNodeIdsToRemove
   * @return cacheNodeIdsToRemove
   */
  @javax.annotation.Nullable
  public List getCacheNodeIdsToRemove() {
    return cacheNodeIdsToRemove;
  }

  public void setCacheNodeIdsToRemove(List cacheNodeIdsToRemove) {
    this.cacheNodeIdsToRemove = cacheNodeIdsToRemove;
  }


  public ModifyCacheClusterMessage azMode(AZMode azMode) {
    this.azMode = azMode;
    return this;
  }

  /**
   * Get azMode
   * @return azMode
   */
  @javax.annotation.Nullable
  public AZMode getAzMode() {
    return azMode;
  }

  public void setAzMode(AZMode azMode) {
    this.azMode = azMode;
  }


  public ModifyCacheClusterMessage newAvailabilityZones(List newAvailabilityZones) {
    this.newAvailabilityZones = newAvailabilityZones;
    return this;
  }

  /**
   * Get newAvailabilityZones
   * @return newAvailabilityZones
   */
  @javax.annotation.Nullable
  public List getNewAvailabilityZones() {
    return newAvailabilityZones;
  }

  public void setNewAvailabilityZones(List newAvailabilityZones) {
    this.newAvailabilityZones = newAvailabilityZones;
  }


  public ModifyCacheClusterMessage cacheSecurityGroupNames(List cacheSecurityGroupNames) {
    this.cacheSecurityGroupNames = cacheSecurityGroupNames;
    return this;
  }

  /**
   * Get cacheSecurityGroupNames
   * @return cacheSecurityGroupNames
   */
  @javax.annotation.Nullable
  public List getCacheSecurityGroupNames() {
    return cacheSecurityGroupNames;
  }

  public void setCacheSecurityGroupNames(List cacheSecurityGroupNames) {
    this.cacheSecurityGroupNames = cacheSecurityGroupNames;
  }


  public ModifyCacheClusterMessage securityGroupIds(List securityGroupIds) {
    this.securityGroupIds = securityGroupIds;
    return this;
  }

  /**
   * Get securityGroupIds
   * @return securityGroupIds
   */
  @javax.annotation.Nullable
  public List getSecurityGroupIds() {
    return securityGroupIds;
  }

  public void setSecurityGroupIds(List securityGroupIds) {
    this.securityGroupIds = securityGroupIds;
  }


  public ModifyCacheClusterMessage preferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
    return this;
  }

  /**
   * Get preferredMaintenanceWindow
   * @return preferredMaintenanceWindow
   */
  @javax.annotation.Nullable
  public String getPreferredMaintenanceWindow() {
    return preferredMaintenanceWindow;
  }

  public void setPreferredMaintenanceWindow(String preferredMaintenanceWindow) {
    this.preferredMaintenanceWindow = preferredMaintenanceWindow;
  }


  public ModifyCacheClusterMessage notificationTopicArn(String notificationTopicArn) {
    this.notificationTopicArn = notificationTopicArn;
    return this;
  }

  /**
   * Get notificationTopicArn
   * @return notificationTopicArn
   */
  @javax.annotation.Nullable
  public String getNotificationTopicArn() {
    return notificationTopicArn;
  }

  public void setNotificationTopicArn(String notificationTopicArn) {
    this.notificationTopicArn = notificationTopicArn;
  }


  public ModifyCacheClusterMessage cacheParameterGroupName(String cacheParameterGroupName) {
    this.cacheParameterGroupName = cacheParameterGroupName;
    return this;
  }

  /**
   * Get cacheParameterGroupName
   * @return cacheParameterGroupName
   */
  @javax.annotation.Nullable
  public String getCacheParameterGroupName() {
    return cacheParameterGroupName;
  }

  public void setCacheParameterGroupName(String cacheParameterGroupName) {
    this.cacheParameterGroupName = cacheParameterGroupName;
  }


  public ModifyCacheClusterMessage notificationTopicStatus(String notificationTopicStatus) {
    this.notificationTopicStatus = notificationTopicStatus;
    return this;
  }

  /**
   * Get notificationTopicStatus
   * @return notificationTopicStatus
   */
  @javax.annotation.Nullable
  public String getNotificationTopicStatus() {
    return notificationTopicStatus;
  }

  public void setNotificationTopicStatus(String notificationTopicStatus) {
    this.notificationTopicStatus = notificationTopicStatus;
  }


  public ModifyCacheClusterMessage applyImmediately(Boolean applyImmediately) {
    this.applyImmediately = applyImmediately;
    return this;
  }

  /**
   * Get applyImmediately
   * @return applyImmediately
   */
  @javax.annotation.Nullable
  public Boolean getApplyImmediately() {
    return applyImmediately;
  }

  public void setApplyImmediately(Boolean applyImmediately) {
    this.applyImmediately = applyImmediately;
  }


  public ModifyCacheClusterMessage engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public ModifyCacheClusterMessage autoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
    this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
    return this;
  }

  /**
   * Get autoMinorVersionUpgrade
   * @return autoMinorVersionUpgrade
   */
  @javax.annotation.Nullable
  public Boolean getAutoMinorVersionUpgrade() {
    return autoMinorVersionUpgrade;
  }

  public void setAutoMinorVersionUpgrade(Boolean autoMinorVersionUpgrade) {
    this.autoMinorVersionUpgrade = autoMinorVersionUpgrade;
  }


  public ModifyCacheClusterMessage snapshotRetentionLimit(Integer snapshotRetentionLimit) {
    this.snapshotRetentionLimit = snapshotRetentionLimit;
    return this;
  }

  /**
   * Get snapshotRetentionLimit
   * @return snapshotRetentionLimit
   */
  @javax.annotation.Nullable
  public Integer getSnapshotRetentionLimit() {
    return snapshotRetentionLimit;
  }

  public void setSnapshotRetentionLimit(Integer snapshotRetentionLimit) {
    this.snapshotRetentionLimit = snapshotRetentionLimit;
  }


  public ModifyCacheClusterMessage snapshotWindow(String snapshotWindow) {
    this.snapshotWindow = snapshotWindow;
    return this;
  }

  /**
   * Get snapshotWindow
   * @return snapshotWindow
   */
  @javax.annotation.Nullable
  public String getSnapshotWindow() {
    return snapshotWindow;
  }

  public void setSnapshotWindow(String snapshotWindow) {
    this.snapshotWindow = snapshotWindow;
  }


  public ModifyCacheClusterMessage cacheNodeType(String cacheNodeType) {
    this.cacheNodeType = cacheNodeType;
    return this;
  }

  /**
   * Get cacheNodeType
   * @return cacheNodeType
   */
  @javax.annotation.Nullable
  public String getCacheNodeType() {
    return cacheNodeType;
  }

  public void setCacheNodeType(String cacheNodeType) {
    this.cacheNodeType = cacheNodeType;
  }


  public ModifyCacheClusterMessage authToken(String authToken) {
    this.authToken = authToken;
    return this;
  }

  /**
   * Get authToken
   * @return authToken
   */
  @javax.annotation.Nullable
  public String getAuthToken() {
    return authToken;
  }

  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }


  public ModifyCacheClusterMessage authTokenUpdateStrategy(AuthTokenUpdateStrategyType authTokenUpdateStrategy) {
    this.authTokenUpdateStrategy = authTokenUpdateStrategy;
    return this;
  }

  /**
   * Get authTokenUpdateStrategy
   * @return authTokenUpdateStrategy
   */
  @javax.annotation.Nullable
  public AuthTokenUpdateStrategyType getAuthTokenUpdateStrategy() {
    return authTokenUpdateStrategy;
  }

  public void setAuthTokenUpdateStrategy(AuthTokenUpdateStrategyType authTokenUpdateStrategy) {
    this.authTokenUpdateStrategy = authTokenUpdateStrategy;
  }


  public ModifyCacheClusterMessage logDeliveryConfigurations(List logDeliveryConfigurations) {
    this.logDeliveryConfigurations = logDeliveryConfigurations;
    return this;
  }

  /**
   * Get logDeliveryConfigurations
   * @return logDeliveryConfigurations
   */
  @javax.annotation.Nullable
  public List getLogDeliveryConfigurations() {
    return logDeliveryConfigurations;
  }

  public void setLogDeliveryConfigurations(List logDeliveryConfigurations) {
    this.logDeliveryConfigurations = logDeliveryConfigurations;
  }


  public ModifyCacheClusterMessage ipDiscovery(IpDiscovery ipDiscovery) {
    this.ipDiscovery = ipDiscovery;
    return this;
  }

  /**
   * Get ipDiscovery
   * @return ipDiscovery
   */
  @javax.annotation.Nullable
  public IpDiscovery getIpDiscovery() {
    return ipDiscovery;
  }

  public void setIpDiscovery(IpDiscovery ipDiscovery) {
    this.ipDiscovery = ipDiscovery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModifyCacheClusterMessage modifyCacheClusterMessage = (ModifyCacheClusterMessage) o;
    return Objects.equals(this.cacheClusterId, modifyCacheClusterMessage.cacheClusterId) &&
        Objects.equals(this.numCacheNodes, modifyCacheClusterMessage.numCacheNodes) &&
        Objects.equals(this.cacheNodeIdsToRemove, modifyCacheClusterMessage.cacheNodeIdsToRemove) &&
        Objects.equals(this.azMode, modifyCacheClusterMessage.azMode) &&
        Objects.equals(this.newAvailabilityZones, modifyCacheClusterMessage.newAvailabilityZones) &&
        Objects.equals(this.cacheSecurityGroupNames, modifyCacheClusterMessage.cacheSecurityGroupNames) &&
        Objects.equals(this.securityGroupIds, modifyCacheClusterMessage.securityGroupIds) &&
        Objects.equals(this.preferredMaintenanceWindow, modifyCacheClusterMessage.preferredMaintenanceWindow) &&
        Objects.equals(this.notificationTopicArn, modifyCacheClusterMessage.notificationTopicArn) &&
        Objects.equals(this.cacheParameterGroupName, modifyCacheClusterMessage.cacheParameterGroupName) &&
        Objects.equals(this.notificationTopicStatus, modifyCacheClusterMessage.notificationTopicStatus) &&
        Objects.equals(this.applyImmediately, modifyCacheClusterMessage.applyImmediately) &&
        Objects.equals(this.engineVersion, modifyCacheClusterMessage.engineVersion) &&
        Objects.equals(this.autoMinorVersionUpgrade, modifyCacheClusterMessage.autoMinorVersionUpgrade) &&
        Objects.equals(this.snapshotRetentionLimit, modifyCacheClusterMessage.snapshotRetentionLimit) &&
        Objects.equals(this.snapshotWindow, modifyCacheClusterMessage.snapshotWindow) &&
        Objects.equals(this.cacheNodeType, modifyCacheClusterMessage.cacheNodeType) &&
        Objects.equals(this.authToken, modifyCacheClusterMessage.authToken) &&
        Objects.equals(this.authTokenUpdateStrategy, modifyCacheClusterMessage.authTokenUpdateStrategy) &&
        Objects.equals(this.logDeliveryConfigurations, modifyCacheClusterMessage.logDeliveryConfigurations) &&
        Objects.equals(this.ipDiscovery, modifyCacheClusterMessage.ipDiscovery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheClusterId, numCacheNodes, cacheNodeIdsToRemove, azMode, newAvailabilityZones, cacheSecurityGroupNames, securityGroupIds, preferredMaintenanceWindow, notificationTopicArn, cacheParameterGroupName, notificationTopicStatus, applyImmediately, engineVersion, autoMinorVersionUpgrade, snapshotRetentionLimit, snapshotWindow, cacheNodeType, authToken, authTokenUpdateStrategy, logDeliveryConfigurations, ipDiscovery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModifyCacheClusterMessage {\n");
    sb.append("    cacheClusterId: ").append(toIndentedString(cacheClusterId)).append("\n");
    sb.append("    numCacheNodes: ").append(toIndentedString(numCacheNodes)).append("\n");
    sb.append("    cacheNodeIdsToRemove: ").append(toIndentedString(cacheNodeIdsToRemove)).append("\n");
    sb.append("    azMode: ").append(toIndentedString(azMode)).append("\n");
    sb.append("    newAvailabilityZones: ").append(toIndentedString(newAvailabilityZones)).append("\n");
    sb.append("    cacheSecurityGroupNames: ").append(toIndentedString(cacheSecurityGroupNames)).append("\n");
    sb.append("    securityGroupIds: ").append(toIndentedString(securityGroupIds)).append("\n");
    sb.append("    preferredMaintenanceWindow: ").append(toIndentedString(preferredMaintenanceWindow)).append("\n");
    sb.append("    notificationTopicArn: ").append(toIndentedString(notificationTopicArn)).append("\n");
    sb.append("    cacheParameterGroupName: ").append(toIndentedString(cacheParameterGroupName)).append("\n");
    sb.append("    notificationTopicStatus: ").append(toIndentedString(notificationTopicStatus)).append("\n");
    sb.append("    applyImmediately: ").append(toIndentedString(applyImmediately)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    autoMinorVersionUpgrade: ").append(toIndentedString(autoMinorVersionUpgrade)).append("\n");
    sb.append("    snapshotRetentionLimit: ").append(toIndentedString(snapshotRetentionLimit)).append("\n");
    sb.append("    snapshotWindow: ").append(toIndentedString(snapshotWindow)).append("\n");
    sb.append("    cacheNodeType: ").append(toIndentedString(cacheNodeType)).append("\n");
    sb.append("    authToken: ").append(toIndentedString(authToken)).append("\n");
    sb.append("    authTokenUpdateStrategy: ").append(toIndentedString(authTokenUpdateStrategy)).append("\n");
    sb.append("    logDeliveryConfigurations: ").append(toIndentedString(logDeliveryConfigurations)).append("\n");
    sb.append("    ipDiscovery: ").append(toIndentedString(ipDiscovery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CacheClusterId");
    openapiFields.add("NumCacheNodes");
    openapiFields.add("CacheNodeIdsToRemove");
    openapiFields.add("AZMode");
    openapiFields.add("NewAvailabilityZones");
    openapiFields.add("CacheSecurityGroupNames");
    openapiFields.add("SecurityGroupIds");
    openapiFields.add("PreferredMaintenanceWindow");
    openapiFields.add("NotificationTopicArn");
    openapiFields.add("CacheParameterGroupName");
    openapiFields.add("NotificationTopicStatus");
    openapiFields.add("ApplyImmediately");
    openapiFields.add("EngineVersion");
    openapiFields.add("AutoMinorVersionUpgrade");
    openapiFields.add("SnapshotRetentionLimit");
    openapiFields.add("SnapshotWindow");
    openapiFields.add("CacheNodeType");
    openapiFields.add("AuthToken");
    openapiFields.add("AuthTokenUpdateStrategy");
    openapiFields.add("LogDeliveryConfigurations");
    openapiFields.add("IpDiscovery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CacheClusterId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModifyCacheClusterMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModifyCacheClusterMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModifyCacheClusterMessage is not found in the empty JSON string", ModifyCacheClusterMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModifyCacheClusterMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModifyCacheClusterMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModifyCacheClusterMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `CacheClusterId`
      String.validateJsonElement(jsonObj.get("CacheClusterId"));
      // validate the optional field `NumCacheNodes`
      if (jsonObj.get("NumCacheNodes") != null && !jsonObj.get("NumCacheNodes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumCacheNodes"));
      }
      // validate the optional field `CacheNodeIdsToRemove`
      if (jsonObj.get("CacheNodeIdsToRemove") != null && !jsonObj.get("CacheNodeIdsToRemove").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CacheNodeIdsToRemove"));
      }
      // validate the optional field `AZMode`
      if (jsonObj.get("AZMode") != null && !jsonObj.get("AZMode").isJsonNull()) {
        AZMode.validateJsonElement(jsonObj.get("AZMode"));
      }
      // validate the optional field `NewAvailabilityZones`
      if (jsonObj.get("NewAvailabilityZones") != null && !jsonObj.get("NewAvailabilityZones").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NewAvailabilityZones"));
      }
      // validate the optional field `CacheSecurityGroupNames`
      if (jsonObj.get("CacheSecurityGroupNames") != null && !jsonObj.get("CacheSecurityGroupNames").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CacheSecurityGroupNames"));
      }
      // validate the optional field `SecurityGroupIds`
      if (jsonObj.get("SecurityGroupIds") != null && !jsonObj.get("SecurityGroupIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("SecurityGroupIds"));
      }
      // validate the optional field `PreferredMaintenanceWindow`
      if (jsonObj.get("PreferredMaintenanceWindow") != null && !jsonObj.get("PreferredMaintenanceWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredMaintenanceWindow"));
      }
      // validate the optional field `NotificationTopicArn`
      if (jsonObj.get("NotificationTopicArn") != null && !jsonObj.get("NotificationTopicArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NotificationTopicArn"));
      }
      // validate the optional field `CacheParameterGroupName`
      if (jsonObj.get("CacheParameterGroupName") != null && !jsonObj.get("CacheParameterGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CacheParameterGroupName"));
      }
      // validate the optional field `NotificationTopicStatus`
      if (jsonObj.get("NotificationTopicStatus") != null && !jsonObj.get("NotificationTopicStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NotificationTopicStatus"));
      }
      // validate the optional field `ApplyImmediately`
      if (jsonObj.get("ApplyImmediately") != null && !jsonObj.get("ApplyImmediately").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ApplyImmediately"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `AutoMinorVersionUpgrade`
      if (jsonObj.get("AutoMinorVersionUpgrade") != null && !jsonObj.get("AutoMinorVersionUpgrade").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AutoMinorVersionUpgrade"));
      }
      // validate the optional field `SnapshotRetentionLimit`
      if (jsonObj.get("SnapshotRetentionLimit") != null && !jsonObj.get("SnapshotRetentionLimit").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SnapshotRetentionLimit"));
      }
      // validate the optional field `SnapshotWindow`
      if (jsonObj.get("SnapshotWindow") != null && !jsonObj.get("SnapshotWindow").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnapshotWindow"));
      }
      // validate the optional field `CacheNodeType`
      if (jsonObj.get("CacheNodeType") != null && !jsonObj.get("CacheNodeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CacheNodeType"));
      }
      // validate the optional field `AuthToken`
      if (jsonObj.get("AuthToken") != null && !jsonObj.get("AuthToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AuthToken"));
      }
      // validate the optional field `AuthTokenUpdateStrategy`
      if (jsonObj.get("AuthTokenUpdateStrategy") != null && !jsonObj.get("AuthTokenUpdateStrategy").isJsonNull()) {
        AuthTokenUpdateStrategyType.validateJsonElement(jsonObj.get("AuthTokenUpdateStrategy"));
      }
      // validate the optional field `LogDeliveryConfigurations`
      if (jsonObj.get("LogDeliveryConfigurations") != null && !jsonObj.get("LogDeliveryConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LogDeliveryConfigurations"));
      }
      // validate the optional field `IpDiscovery`
      if (jsonObj.get("IpDiscovery") != null && !jsonObj.get("IpDiscovery").isJsonNull()) {
        IpDiscovery.validateJsonElement(jsonObj.get("IpDiscovery"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModifyCacheClusterMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModifyCacheClusterMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModifyCacheClusterMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModifyCacheClusterMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ModifyCacheClusterMessage>() {
           @Override
           public void write(JsonWriter out, ModifyCacheClusterMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModifyCacheClusterMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModifyCacheClusterMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModifyCacheClusterMessage
   * @throws IOException if the JSON string is invalid with respect to ModifyCacheClusterMessage
   */
  public static ModifyCacheClusterMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModifyCacheClusterMessage.class);
  }

  /**
   * Convert an instance of ModifyCacheClusterMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

