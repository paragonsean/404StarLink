/*
 * Amazon ElastiCache
 * <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
 *
 * The version of the OpenAPI document: 2015-02-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthTokenUpdateStatus;
import org.openapitools.client.model.TransitEncryptionMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A group of settings that are applied to the cluster in the future, or that are currently being applied.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:03:47.534295-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PendingModifiedValues {
  public static final String SERIALIZED_NAME_NUM_CACHE_NODES = "NumCacheNodes";
  @SerializedName(SERIALIZED_NAME_NUM_CACHE_NODES)
  private Integer numCacheNodes;

  public static final String SERIALIZED_NAME_CACHE_NODE_IDS_TO_REMOVE = "CacheNodeIdsToRemove";
  @SerializedName(SERIALIZED_NAME_CACHE_NODE_IDS_TO_REMOVE)
  private List cacheNodeIdsToRemove;

  public static final String SERIALIZED_NAME_ENGINE_VERSION = "EngineVersion";
  @SerializedName(SERIALIZED_NAME_ENGINE_VERSION)
  private String engineVersion;

  public static final String SERIALIZED_NAME_CACHE_NODE_TYPE = "CacheNodeType";
  @SerializedName(SERIALIZED_NAME_CACHE_NODE_TYPE)
  private String cacheNodeType;

  public static final String SERIALIZED_NAME_AUTH_TOKEN_STATUS = "AuthTokenStatus";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN_STATUS)
  private AuthTokenUpdateStatus authTokenStatus;

  public static final String SERIALIZED_NAME_LOG_DELIVERY_CONFIGURATIONS = "LogDeliveryConfigurations";
  @SerializedName(SERIALIZED_NAME_LOG_DELIVERY_CONFIGURATIONS)
  private List logDeliveryConfigurations;

  public static final String SERIALIZED_NAME_TRANSIT_ENCRYPTION_ENABLED = "TransitEncryptionEnabled";
  @SerializedName(SERIALIZED_NAME_TRANSIT_ENCRYPTION_ENABLED)
  private Boolean transitEncryptionEnabled;

  public static final String SERIALIZED_NAME_TRANSIT_ENCRYPTION_MODE = "TransitEncryptionMode";
  @SerializedName(SERIALIZED_NAME_TRANSIT_ENCRYPTION_MODE)
  private TransitEncryptionMode transitEncryptionMode;

  public PendingModifiedValues() {
  }

  public PendingModifiedValues numCacheNodes(Integer numCacheNodes) {
    this.numCacheNodes = numCacheNodes;
    return this;
  }

  /**
   * Get numCacheNodes
   * @return numCacheNodes
   */
  @javax.annotation.Nullable
  public Integer getNumCacheNodes() {
    return numCacheNodes;
  }

  public void setNumCacheNodes(Integer numCacheNodes) {
    this.numCacheNodes = numCacheNodes;
  }


  public PendingModifiedValues cacheNodeIdsToRemove(List cacheNodeIdsToRemove) {
    this.cacheNodeIdsToRemove = cacheNodeIdsToRemove;
    return this;
  }

  /**
   * Get cacheNodeIdsToRemove
   * @return cacheNodeIdsToRemove
   */
  @javax.annotation.Nullable
  public List getCacheNodeIdsToRemove() {
    return cacheNodeIdsToRemove;
  }

  public void setCacheNodeIdsToRemove(List cacheNodeIdsToRemove) {
    this.cacheNodeIdsToRemove = cacheNodeIdsToRemove;
  }


  public PendingModifiedValues engineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
    return this;
  }

  /**
   * Get engineVersion
   * @return engineVersion
   */
  @javax.annotation.Nullable
  public String getEngineVersion() {
    return engineVersion;
  }

  public void setEngineVersion(String engineVersion) {
    this.engineVersion = engineVersion;
  }


  public PendingModifiedValues cacheNodeType(String cacheNodeType) {
    this.cacheNodeType = cacheNodeType;
    return this;
  }

  /**
   * Get cacheNodeType
   * @return cacheNodeType
   */
  @javax.annotation.Nullable
  public String getCacheNodeType() {
    return cacheNodeType;
  }

  public void setCacheNodeType(String cacheNodeType) {
    this.cacheNodeType = cacheNodeType;
  }


  public PendingModifiedValues authTokenStatus(AuthTokenUpdateStatus authTokenStatus) {
    this.authTokenStatus = authTokenStatus;
    return this;
  }

  /**
   * Get authTokenStatus
   * @return authTokenStatus
   */
  @javax.annotation.Nullable
  public AuthTokenUpdateStatus getAuthTokenStatus() {
    return authTokenStatus;
  }

  public void setAuthTokenStatus(AuthTokenUpdateStatus authTokenStatus) {
    this.authTokenStatus = authTokenStatus;
  }


  public PendingModifiedValues logDeliveryConfigurations(List logDeliveryConfigurations) {
    this.logDeliveryConfigurations = logDeliveryConfigurations;
    return this;
  }

  /**
   * Get logDeliveryConfigurations
   * @return logDeliveryConfigurations
   */
  @javax.annotation.Nullable
  public List getLogDeliveryConfigurations() {
    return logDeliveryConfigurations;
  }

  public void setLogDeliveryConfigurations(List logDeliveryConfigurations) {
    this.logDeliveryConfigurations = logDeliveryConfigurations;
  }


  public PendingModifiedValues transitEncryptionEnabled(Boolean transitEncryptionEnabled) {
    this.transitEncryptionEnabled = transitEncryptionEnabled;
    return this;
  }

  /**
   * Get transitEncryptionEnabled
   * @return transitEncryptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTransitEncryptionEnabled() {
    return transitEncryptionEnabled;
  }

  public void setTransitEncryptionEnabled(Boolean transitEncryptionEnabled) {
    this.transitEncryptionEnabled = transitEncryptionEnabled;
  }


  public PendingModifiedValues transitEncryptionMode(TransitEncryptionMode transitEncryptionMode) {
    this.transitEncryptionMode = transitEncryptionMode;
    return this;
  }

  /**
   * Get transitEncryptionMode
   * @return transitEncryptionMode
   */
  @javax.annotation.Nullable
  public TransitEncryptionMode getTransitEncryptionMode() {
    return transitEncryptionMode;
  }

  public void setTransitEncryptionMode(TransitEncryptionMode transitEncryptionMode) {
    this.transitEncryptionMode = transitEncryptionMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PendingModifiedValues pendingModifiedValues = (PendingModifiedValues) o;
    return Objects.equals(this.numCacheNodes, pendingModifiedValues.numCacheNodes) &&
        Objects.equals(this.cacheNodeIdsToRemove, pendingModifiedValues.cacheNodeIdsToRemove) &&
        Objects.equals(this.engineVersion, pendingModifiedValues.engineVersion) &&
        Objects.equals(this.cacheNodeType, pendingModifiedValues.cacheNodeType) &&
        Objects.equals(this.authTokenStatus, pendingModifiedValues.authTokenStatus) &&
        Objects.equals(this.logDeliveryConfigurations, pendingModifiedValues.logDeliveryConfigurations) &&
        Objects.equals(this.transitEncryptionEnabled, pendingModifiedValues.transitEncryptionEnabled) &&
        Objects.equals(this.transitEncryptionMode, pendingModifiedValues.transitEncryptionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(numCacheNodes, cacheNodeIdsToRemove, engineVersion, cacheNodeType, authTokenStatus, logDeliveryConfigurations, transitEncryptionEnabled, transitEncryptionMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PendingModifiedValues {\n");
    sb.append("    numCacheNodes: ").append(toIndentedString(numCacheNodes)).append("\n");
    sb.append("    cacheNodeIdsToRemove: ").append(toIndentedString(cacheNodeIdsToRemove)).append("\n");
    sb.append("    engineVersion: ").append(toIndentedString(engineVersion)).append("\n");
    sb.append("    cacheNodeType: ").append(toIndentedString(cacheNodeType)).append("\n");
    sb.append("    authTokenStatus: ").append(toIndentedString(authTokenStatus)).append("\n");
    sb.append("    logDeliveryConfigurations: ").append(toIndentedString(logDeliveryConfigurations)).append("\n");
    sb.append("    transitEncryptionEnabled: ").append(toIndentedString(transitEncryptionEnabled)).append("\n");
    sb.append("    transitEncryptionMode: ").append(toIndentedString(transitEncryptionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NumCacheNodes");
    openapiFields.add("CacheNodeIdsToRemove");
    openapiFields.add("EngineVersion");
    openapiFields.add("CacheNodeType");
    openapiFields.add("AuthTokenStatus");
    openapiFields.add("LogDeliveryConfigurations");
    openapiFields.add("TransitEncryptionEnabled");
    openapiFields.add("TransitEncryptionMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PendingModifiedValues
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PendingModifiedValues.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PendingModifiedValues is not found in the empty JSON string", PendingModifiedValues.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PendingModifiedValues.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PendingModifiedValues` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `NumCacheNodes`
      if (jsonObj.get("NumCacheNodes") != null && !jsonObj.get("NumCacheNodes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumCacheNodes"));
      }
      // validate the optional field `CacheNodeIdsToRemove`
      if (jsonObj.get("CacheNodeIdsToRemove") != null && !jsonObj.get("CacheNodeIdsToRemove").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CacheNodeIdsToRemove"));
      }
      // validate the optional field `EngineVersion`
      if (jsonObj.get("EngineVersion") != null && !jsonObj.get("EngineVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EngineVersion"));
      }
      // validate the optional field `CacheNodeType`
      if (jsonObj.get("CacheNodeType") != null && !jsonObj.get("CacheNodeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CacheNodeType"));
      }
      // validate the optional field `AuthTokenStatus`
      if (jsonObj.get("AuthTokenStatus") != null && !jsonObj.get("AuthTokenStatus").isJsonNull()) {
        AuthTokenUpdateStatus.validateJsonElement(jsonObj.get("AuthTokenStatus"));
      }
      // validate the optional field `LogDeliveryConfigurations`
      if (jsonObj.get("LogDeliveryConfigurations") != null && !jsonObj.get("LogDeliveryConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LogDeliveryConfigurations"));
      }
      // validate the optional field `TransitEncryptionEnabled`
      if (jsonObj.get("TransitEncryptionEnabled") != null && !jsonObj.get("TransitEncryptionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("TransitEncryptionEnabled"));
      }
      // validate the optional field `TransitEncryptionMode`
      if (jsonObj.get("TransitEncryptionMode") != null && !jsonObj.get("TransitEncryptionMode").isJsonNull()) {
        TransitEncryptionMode.validateJsonElement(jsonObj.get("TransitEncryptionMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PendingModifiedValues.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PendingModifiedValues' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PendingModifiedValues> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PendingModifiedValues.class));

       return (TypeAdapter<T>) new TypeAdapter<PendingModifiedValues>() {
           @Override
           public void write(JsonWriter out, PendingModifiedValues value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PendingModifiedValues read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PendingModifiedValues given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PendingModifiedValues
   * @throws IOException if the JSON string is invalid with respect to PendingModifiedValues
   */
  public static PendingModifiedValues fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PendingModifiedValues.class);
  }

  /**
   * Convert an instance of PendingModifiedValues to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

