/*
 * The SureVoIP RESTful API
 * # Introduction Welcome to the SureVoIP RESTful hypermedia API (sometimes known as a VoIP REST API, Telecom REST API, SIP API, Hypermedia API or just VoIP API.)  The SureVoIP API is a way for you to automate your interaction with the SureVoIP platforms. With the API, you can create your own scripts, applications or mashups which can: * List calls * create customers * search numbers * provision numbers * send SMS texts * create outbound calls * schedule announcements * schedule call hangups with an announcement * subscribe to events/alerts * track calls * retrieve invoices * grab your SIP details * check your IP address * be 100% self-sufficient * and much more! 
 *
 * The version of the OpenAPI document: 9dcb0dc8
 * Contact: support@surevoip.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AnnouncementsPost201ResponseAnnouncementUrl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnnouncementsPost201ResponseAnnouncement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T01:53:21.684504-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnnouncementsPost201ResponseAnnouncement {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private String creationDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FILE_INTERNAL = "file_internal";
  @SerializedName(SERIALIZED_NAME_FILE_INTERNAL)
  private String fileInternal;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_SRC_IP_ADDRESS = "src_ip_address";
  @SerializedName(SERIALIZED_NAME_SRC_IP_ADDRESS)
  private String srcIpAddress;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private AnnouncementsPost201ResponseAnnouncementUrl url;

  public AnnouncementsPost201ResponseAnnouncement() {
  }

  public AnnouncementsPost201ResponseAnnouncement creationDate(String creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public String getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(String creationDate) {
    this.creationDate = creationDate;
  }


  public AnnouncementsPost201ResponseAnnouncement description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AnnouncementsPost201ResponseAnnouncement fileInternal(String fileInternal) {
    this.fileInternal = fileInternal;
    return this;
  }

  /**
   * Get fileInternal
   * @return fileInternal
   */
  @javax.annotation.Nullable
  public String getFileInternal() {
    return fileInternal;
  }

  public void setFileInternal(String fileInternal) {
    this.fileInternal = fileInternal;
  }


  public AnnouncementsPost201ResponseAnnouncement filename(String filename) {
    this.filename = filename;
    return this;
  }

  /**
   * Get filename
   * @return filename
   */
  @javax.annotation.Nullable
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public AnnouncementsPost201ResponseAnnouncement id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AnnouncementsPost201ResponseAnnouncement size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public AnnouncementsPost201ResponseAnnouncement srcIpAddress(String srcIpAddress) {
    this.srcIpAddress = srcIpAddress;
    return this;
  }

  /**
   * Get srcIpAddress
   * @return srcIpAddress
   */
  @javax.annotation.Nullable
  public String getSrcIpAddress() {
    return srcIpAddress;
  }

  public void setSrcIpAddress(String srcIpAddress) {
    this.srcIpAddress = srcIpAddress;
  }


  public AnnouncementsPost201ResponseAnnouncement url(AnnouncementsPost201ResponseAnnouncementUrl url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public AnnouncementsPost201ResponseAnnouncementUrl getUrl() {
    return url;
  }

  public void setUrl(AnnouncementsPost201ResponseAnnouncementUrl url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnnouncementsPost201ResponseAnnouncement announcementsPost201ResponseAnnouncement = (AnnouncementsPost201ResponseAnnouncement) o;
    return Objects.equals(this.creationDate, announcementsPost201ResponseAnnouncement.creationDate) &&
        Objects.equals(this.description, announcementsPost201ResponseAnnouncement.description) &&
        Objects.equals(this.fileInternal, announcementsPost201ResponseAnnouncement.fileInternal) &&
        Objects.equals(this.filename, announcementsPost201ResponseAnnouncement.filename) &&
        Objects.equals(this.id, announcementsPost201ResponseAnnouncement.id) &&
        Objects.equals(this.size, announcementsPost201ResponseAnnouncement.size) &&
        Objects.equals(this.srcIpAddress, announcementsPost201ResponseAnnouncement.srcIpAddress) &&
        Objects.equals(this.url, announcementsPost201ResponseAnnouncement.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, description, fileInternal, filename, id, size, srcIpAddress, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnnouncementsPost201ResponseAnnouncement {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    fileInternal: ").append(toIndentedString(fileInternal)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    srcIpAddress: ").append(toIndentedString(srcIpAddress)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creation_date");
    openapiFields.add("description");
    openapiFields.add("file_internal");
    openapiFields.add("filename");
    openapiFields.add("id");
    openapiFields.add("size");
    openapiFields.add("src_ip_address");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnnouncementsPost201ResponseAnnouncement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnnouncementsPost201ResponseAnnouncement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnnouncementsPost201ResponseAnnouncement is not found in the empty JSON string", AnnouncementsPost201ResponseAnnouncement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnnouncementsPost201ResponseAnnouncement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnnouncementsPost201ResponseAnnouncement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creation_date") != null && !jsonObj.get("creation_date").isJsonNull()) && !jsonObj.get("creation_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creation_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creation_date").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("file_internal") != null && !jsonObj.get("file_internal").isJsonNull()) && !jsonObj.get("file_internal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_internal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_internal").toString()));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("src_ip_address") != null && !jsonObj.get("src_ip_address").isJsonNull()) && !jsonObj.get("src_ip_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `src_ip_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("src_ip_address").toString()));
      }
      // validate the optional field `url`
      if (jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) {
        AnnouncementsPost201ResponseAnnouncementUrl.validateJsonElement(jsonObj.get("url"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnnouncementsPost201ResponseAnnouncement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnnouncementsPost201ResponseAnnouncement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnnouncementsPost201ResponseAnnouncement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnnouncementsPost201ResponseAnnouncement.class));

       return (TypeAdapter<T>) new TypeAdapter<AnnouncementsPost201ResponseAnnouncement>() {
           @Override
           public void write(JsonWriter out, AnnouncementsPost201ResponseAnnouncement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnnouncementsPost201ResponseAnnouncement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnnouncementsPost201ResponseAnnouncement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnnouncementsPost201ResponseAnnouncement
   * @throws IOException if the JSON string is invalid with respect to AnnouncementsPost201ResponseAnnouncement
   */
  public static AnnouncementsPost201ResponseAnnouncement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnnouncementsPost201ResponseAnnouncement.class);
  }

  /**
   * Convert an instance of AnnouncementsPost201ResponseAnnouncement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

