# coding: utf-8

"""
    eBay Finances API

    This API is used to retrieve seller payouts and monetary transaction details related to those payouts.

    The version of the OpenAPI document: v1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.transaction_summary_response import TransactionSummaryResponse

class TestTransactionSummaryResponse(unittest.TestCase):
    """TransactionSummaryResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TransactionSummaryResponse:
        """Test TransactionSummaryResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TransactionSummaryResponse`
        """
        model = TransactionSummaryResponse()
        if include_optional:
            return TransactionSummaryResponse(
                adjustment_amount = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    exchange_rate = '', 
                    value = '', ),
                adjustment_booking_entry = '',
                adjustment_count = 56,
                balance_transfer_amount = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    exchange_rate = '', 
                    value = '', ),
                balance_transfer_booking_entry = '',
                balance_transfer_count = 56,
                credit_amount = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    exchange_rate = '', 
                    value = '', ),
                credit_booking_entry = '',
                credit_count = 56,
                dispute_amount = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    exchange_rate = '', 
                    value = '', ),
                dispute_booking_entry = '',
                dispute_count = 56,
                loan_repayment_amount = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    exchange_rate = '', 
                    value = '', ),
                loan_repayment_booking_entry = '',
                loan_repayment_count = 56,
                non_sale_charge_amount = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    exchange_rate = '', 
                    value = '', ),
                non_sale_charge_booking_entry = '',
                non_sale_charge_count = 56,
                on_hold_amount = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    exchange_rate = '', 
                    value = '', ),
                on_hold_booking_entry = '',
                on_hold_count = 56,
                refund_amount = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    exchange_rate = '', 
                    value = '', ),
                refund_booking_entry = '',
                refund_count = 56,
                shipping_label_amount = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    exchange_rate = '', 
                    value = '', ),
                shipping_label_booking_entry = '',
                shipping_label_count = 56,
                transfer_amount = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    exchange_rate = '', 
                    value = '', ),
                transfer_booking_entry = '',
                transfer_count = 56,
                withdrawal_amount = openapi_client.models.amount.Amount(
                    converted_from_currency = '', 
                    converted_from_value = '', 
                    currency = '', 
                    exchange_rate = '', 
                    value = '', ),
                withdrawal_booking_entry = '',
                withdrawal_count = 56
            )
        else:
            return TransactionSummaryResponse(
        )
        """

    def testTransactionSummaryResponse(self):
        """Test TransactionSummaryResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
