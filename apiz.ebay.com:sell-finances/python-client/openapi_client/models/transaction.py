# coding: utf-8

"""
    eBay Finances API

    This API is used to retrieve seller payouts and monetary transaction details related to those payouts.

    The version of the OpenAPI document: v1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from openapi_client.models.buyer import Buyer
from openapi_client.models.fee_jurisdiction import FeeJurisdiction
from openapi_client.models.order_line_item import OrderLineItem
from openapi_client.models.reference import Reference
from typing import Optional, Set
from typing_extensions import Self

class Transaction(BaseModel):
    """
    This type is used to express the details of one of the following monetary transactions: a buyer's payment for an order, a refund to the buyer for a returned item or cancelled order, or a credit issued by eBay to the seller's account.
    """ # noqa: E501
    amount: Optional[Amount] = None
    booking_entry: Optional[StrictStr] = Field(default=None, description="The enumeration value returned in this field indicates if the monetary transaction amount is a (<code>CREDIT</code>) or a (<code>DEBIT</code>) to the seller's account. Typically, the <code>SALE</code> and <code>CREDIT</code> transaction types are credits to the seller's account, and the <code>REFUND</code>, <code>DISPUTE</code>, <code>SHIPPING_LABEL</code>, and <code>TRANSFER</code> transaction types are debits to the seller's account. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:BookingEntryEnum'>eBay API documentation</a>", alias="bookingEntry")
    buyer: Optional[Buyer] = None
    e_bay_collected_tax_amount: Optional[Amount] = Field(default=None, alias="eBayCollectedTaxAmount")
    fee_jurisdiction: Optional[FeeJurisdiction] = Field(default=None, alias="feeJurisdiction")
    fee_type: Optional[StrictStr] = Field(default=None, description="The type of fee. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/api:FeeTypeEnum'>eBay API documentation</a>", alias="feeType")
    order_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the eBay order associated with the monetary transaction.", alias="orderId")
    order_line_items: Optional[List[OrderLineItem]] = Field(default=None, description="This array shows the fees that are deducted from a seller payout for each line item in an order.<br><br><span class=\"tablenote\"><strong>Note:</strong> In some cases, a transaction fee might be returned asynchronously from the associated order. In such cases, you can determine the order to which the fee applies by examining the referenceID value of the fee, which should match the ID of the order.", alias="orderLineItems")
    payments_entity: Optional[StrictStr] = Field(default=None, description="This string value indicates the entity that is processing  the payment.", alias="paymentsEntity")
    payout_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the seller payout associated with the monetary transaction. This identifier is generated once eBay begins processing the payout for the corresponding order. This field will not be returned if eBay has not yet begun processing the payout for an order.", alias="payoutId")
    references: Optional[List[Reference]] = Field(default=None, description="This field contains reference information for the transaction fee. This includes an ID and the type of ID provided (such as item ID).")
    sales_record_reference: Optional[StrictStr] = Field(default=None, description="The Sales Record Number associated with a sales order. Sales Record Numbers are Selling Manager/Selling Manager Pro identifiers that are created at order checkout.<br><br><span class=\"tablenote\"><strong>Note:</strong> For all orders originating after February 1, 2020, a value of <code>0</code> will be returned in this field. The Sales Record Number field has also been removed from Seller Hub. Instead of <strong>salesRecordReference</strong>, depend on <strong>orderId</strong> instead as the identifier of the order. The <strong>salesRecordReference</strong> field has been scheduled for deprecation, and a date for when this field will no longer be returned at all will be announced soon.</span>", alias="salesRecordReference")
    total_fee_amount: Optional[Amount] = Field(default=None, alias="totalFeeAmount")
    total_fee_basis_amount: Optional[Amount] = Field(default=None, alias="totalFeeBasisAmount")
    transaction_date: Optional[StrictStr] = Field(default=None, description="This timestamp indicates when the monetary transaction (order purchase, buyer refund, seller credit) occurred. The following (UTC) format is used: <code>YYYY-MM-DDTHH:MM:SS.SSSZ</code>. For example, <code>2015-08-04T19:09:02.768Z</code>.", alias="transactionDate")
    transaction_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the monetary transaction. A monetary transaction can be a sales order, an order refund to the buyer, a credit to the seller's account, a debit to the seller for the purchase of a shipping label, or a transaction where eBay recouped money from the seller if the seller lost a buyer-initiated payment dispute.", alias="transactionId")
    transaction_memo: Optional[StrictStr] = Field(default=None, description="This field provides more details on shipping label transactions and transactions where the funds are being held by eBay. For shipping label transactions, the <b>transactionMemo</b> gives details about a purchase, a refund, or a price adjustment to the cost of the shipping label. For on-hold transactions, the <b>transactionMemo</b> provides information on the reason for the hold or when the hold will be released (e.g., \"Funds on hold. Estimated release on Jun 1\").<br><br>This field is only returned if applicable/available.", alias="transactionMemo")
    transaction_status: Optional[StrictStr] = Field(default=None, description="This enumeration value indicates the current status of the seller payout associated with the monetary transaction. See the <code>TransactionStatusEnum</code> type for more information on the different states. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:TransactionStatusEnum'>eBay API documentation</a>", alias="transactionStatus")
    transaction_type: Optional[StrictStr] = Field(default=None, description="This enumeration value indicates the type of monetary transaction. Examples of monetary transactions include a buyer's payment for an order, a refund to the buyer for a returned item or cancelled order, or a credit issued by eBay to the seller's account. For a complete list of monetary transaction types within the <strong>Finances API</strong>, see the <a href=\"/api-docs/sell/finances/types/pay:TransactionTypeEnum\">TransactionTypeEnum</a> type. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/finances/types/pay:TransactionTypeEnum'>eBay API documentation</a>", alias="transactionType")
    __properties: ClassVar[List[str]] = ["amount", "bookingEntry", "buyer", "eBayCollectedTaxAmount", "feeJurisdiction", "feeType", "orderId", "orderLineItems", "paymentsEntity", "payoutId", "references", "salesRecordReference", "totalFeeAmount", "totalFeeBasisAmount", "transactionDate", "transactionId", "transactionMemo", "transactionStatus", "transactionType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buyer
        if self.buyer:
            _dict['buyer'] = self.buyer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of e_bay_collected_tax_amount
        if self.e_bay_collected_tax_amount:
            _dict['eBayCollectedTaxAmount'] = self.e_bay_collected_tax_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fee_jurisdiction
        if self.fee_jurisdiction:
            _dict['feeJurisdiction'] = self.fee_jurisdiction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in order_line_items (list)
        _items = []
        if self.order_line_items:
            for _item_order_line_items in self.order_line_items:
                if _item_order_line_items:
                    _items.append(_item_order_line_items.to_dict())
            _dict['orderLineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in references (list)
        _items = []
        if self.references:
            for _item_references in self.references:
                if _item_references:
                    _items.append(_item_references.to_dict())
            _dict['references'] = _items
        # override the default output from pydantic by calling `to_dict()` of total_fee_amount
        if self.total_fee_amount:
            _dict['totalFeeAmount'] = self.total_fee_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_fee_basis_amount
        if self.total_fee_basis_amount:
            _dict['totalFeeBasisAmount'] = self.total_fee_basis_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": Amount.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "bookingEntry": obj.get("bookingEntry"),
            "buyer": Buyer.from_dict(obj["buyer"]) if obj.get("buyer") is not None else None,
            "eBayCollectedTaxAmount": Amount.from_dict(obj["eBayCollectedTaxAmount"]) if obj.get("eBayCollectedTaxAmount") is not None else None,
            "feeJurisdiction": FeeJurisdiction.from_dict(obj["feeJurisdiction"]) if obj.get("feeJurisdiction") is not None else None,
            "feeType": obj.get("feeType"),
            "orderId": obj.get("orderId"),
            "orderLineItems": [OrderLineItem.from_dict(_item) for _item in obj["orderLineItems"]] if obj.get("orderLineItems") is not None else None,
            "paymentsEntity": obj.get("paymentsEntity"),
            "payoutId": obj.get("payoutId"),
            "references": [Reference.from_dict(_item) for _item in obj["references"]] if obj.get("references") is not None else None,
            "salesRecordReference": obj.get("salesRecordReference"),
            "totalFeeAmount": Amount.from_dict(obj["totalFeeAmount"]) if obj.get("totalFeeAmount") is not None else None,
            "totalFeeBasisAmount": Amount.from_dict(obj["totalFeeBasisAmount"]) if obj.get("totalFeeBasisAmount") is not None else None,
            "transactionDate": obj.get("transactionDate"),
            "transactionId": obj.get("transactionId"),
            "transactionMemo": obj.get("transactionMemo"),
            "transactionStatus": obj.get("transactionStatus"),
            "transactionType": obj.get("transactionType")
        })
        return _obj


