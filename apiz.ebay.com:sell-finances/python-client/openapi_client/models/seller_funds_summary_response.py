# coding: utf-8

"""
    eBay Finances API

    This API is used to retrieve seller payouts and monetary transaction details related to those payouts.

    The version of the OpenAPI document: v1.15.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from typing import Optional, Set
from typing_extensions import Self

class SellerFundsSummaryResponse(BaseModel):
    """
    This type is used by the response payload of the <strong>getSellerFundsSummary</strong> method. All of the funds returned in  <strong>getSellerFundsSummary</strong> are funds that have not yet been paid to the seller through a seller payout. If there are no funds that are pending, on hold, or being processed for the seller's account, no response payload is returned, and an http status code of <code>204 - No Content</code> is returned instead.
    """ # noqa: E501
    available_funds: Optional[Amount] = Field(default=None, alias="availableFunds")
    funds_on_hold: Optional[Amount] = Field(default=None, alias="fundsOnHold")
    processing_funds: Optional[Amount] = Field(default=None, alias="processingFunds")
    total_funds: Optional[Amount] = Field(default=None, alias="totalFunds")
    __properties: ClassVar[List[str]] = ["availableFunds", "fundsOnHold", "processingFunds", "totalFunds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SellerFundsSummaryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of available_funds
        if self.available_funds:
            _dict['availableFunds'] = self.available_funds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of funds_on_hold
        if self.funds_on_hold:
            _dict['fundsOnHold'] = self.funds_on_hold.to_dict()
        # override the default output from pydantic by calling `to_dict()` of processing_funds
        if self.processing_funds:
            _dict['processingFunds'] = self.processing_funds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_funds
        if self.total_funds:
            _dict['totalFunds'] = self.total_funds.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SellerFundsSummaryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableFunds": Amount.from_dict(obj["availableFunds"]) if obj.get("availableFunds") is not None else None,
            "fundsOnHold": Amount.from_dict(obj["fundsOnHold"]) if obj.get("fundsOnHold") is not None else None,
            "processingFunds": Amount.from_dict(obj["processingFunds"]) if obj.get("processingFunds") is not None else None,
            "totalFunds": Amount.from_dict(obj["totalFunds"]) if obj.get("totalFunds") is not None else None
        })
        return _obj


