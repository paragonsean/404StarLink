# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bitbucket_server_repository_id import BitbucketServerRepositoryId
from openapi_client.models.bitbucket_server_secrets import BitbucketServerSecrets
from typing import Optional, Set
from typing_extensions import Self

class BitbucketServerConfig(BaseModel):
    """
    BitbucketServerConfig represents the configuration for a Bitbucket Server.
    """ # noqa: E501
    api_key: Optional[StrictStr] = Field(default=None, description="Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.", alias="apiKey")
    connected_repositories: Optional[List[BitbucketServerRepositoryId]] = Field(default=None, description="Output only. Connected Bitbucket Server repositories for this config.", alias="connectedRepositories")
    create_time: Optional[StrictStr] = Field(default=None, description="Time when the config was created.", alias="createTime")
    host_uri: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.", alias="hostUri")
    name: Optional[StrictStr] = Field(default=None, description="The resource name for the config.")
    peered_network: Optional[StrictStr] = Field(default=None, description="Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.", alias="peeredNetwork")
    secrets: Optional[BitbucketServerSecrets] = None
    ssl_ca: Optional[StrictStr] = Field(default=None, description="Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.", alias="sslCa")
    username: Optional[StrictStr] = Field(default=None, description="Username of the account Cloud Build will use on Bitbucket Server.")
    webhook_key: Optional[StrictStr] = Field(default=None, description="Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.", alias="webhookKey")
    __properties: ClassVar[List[str]] = ["apiKey", "connectedRepositories", "createTime", "hostUri", "name", "peeredNetwork", "secrets", "sslCa", "username", "webhookKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BitbucketServerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connected_repositories",
            "webhook_key",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in connected_repositories (list)
        _items = []
        if self.connected_repositories:
            for _item_connected_repositories in self.connected_repositories:
                if _item_connected_repositories:
                    _items.append(_item_connected_repositories.to_dict())
            _dict['connectedRepositories'] = _items
        # override the default output from pydantic by calling `to_dict()` of secrets
        if self.secrets:
            _dict['secrets'] = self.secrets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BitbucketServerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiKey": obj.get("apiKey"),
            "connectedRepositories": [BitbucketServerRepositoryId.from_dict(_item) for _item in obj["connectedRepositories"]] if obj.get("connectedRepositories") is not None else None,
            "createTime": obj.get("createTime"),
            "hostUri": obj.get("hostUri"),
            "name": obj.get("name"),
            "peeredNetwork": obj.get("peeredNetwork"),
            "secrets": BitbucketServerSecrets.from_dict(obj["secrets"]) if obj.get("secrets") is not None else None,
            "sslCa": obj.get("sslCa"),
            "username": obj.get("username"),
            "webhookKey": obj.get("webhookKey")
        })
        return _obj


