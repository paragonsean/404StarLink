# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.git_hub_enterprise_secrets import GitHubEnterpriseSecrets
from typing import Optional, Set
from typing_extensions import Self

class GitHubEnterpriseConfig(BaseModel):
    """
    GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.
    """ # noqa: E501
    app_id: Optional[StrictStr] = Field(default=None, description="Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server.", alias="appId")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the installation was associated with the project.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Name to display for this config.", alias="displayName")
    host_url: Optional[StrictStr] = Field(default=None, description="The URL of the github enterprise host the configuration is for.", alias="hostUrl")
    name: Optional[StrictStr] = Field(default=None, description="Optional. The full resource name for the GitHubEnterpriseConfig For example: \"projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}\"")
    peered_network: Optional[StrictStr] = Field(default=None, description="Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.", alias="peeredNetwork")
    secrets: Optional[GitHubEnterpriseSecrets] = None
    ssl_ca: Optional[StrictStr] = Field(default=None, description="Optional. SSL certificate to use for requests to GitHub Enterprise.", alias="sslCa")
    webhook_key: Optional[StrictStr] = Field(default=None, description="The key that should be attached to webhook calls to the ReceiveWebhook endpoint.", alias="webhookKey")
    __properties: ClassVar[List[str]] = ["appId", "createTime", "displayName", "hostUrl", "name", "peeredNetwork", "secrets", "sslCa", "webhookKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GitHubEnterpriseConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of secrets
        if self.secrets:
            _dict['secrets'] = self.secrets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GitHubEnterpriseConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appId": obj.get("appId"),
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "hostUrl": obj.get("hostUrl"),
            "name": obj.get("name"),
            "peeredNetwork": obj.get("peeredNetwork"),
            "secrets": GitHubEnterpriseSecrets.from_dict(obj["secrets"]) if obj.get("secrets") is not None else None,
            "sslCa": obj.get("sslCa"),
            "webhookKey": obj.get("webhookKey")
        })
        return _obj


