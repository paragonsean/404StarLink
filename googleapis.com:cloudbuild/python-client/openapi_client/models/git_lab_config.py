# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.git_lab_enterprise_config import GitLabEnterpriseConfig
from openapi_client.models.git_lab_repository_id import GitLabRepositoryId
from openapi_client.models.git_lab_secrets import GitLabSecrets
from typing import Optional, Set
from typing_extensions import Self

class GitLabConfig(BaseModel):
    """
    GitLabConfig represents the configuration for a GitLab integration.
    """ # noqa: E501
    connected_repositories: Optional[List[GitLabRepositoryId]] = Field(default=None, description="Connected GitLab.com or GitLabEnterprise repositories for this config.", alias="connectedRepositories")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the config was created.", alias="createTime")
    enterprise_config: Optional[GitLabEnterpriseConfig] = Field(default=None, alias="enterpriseConfig")
    name: Optional[StrictStr] = Field(default=None, description="The resource name for the config.")
    secrets: Optional[GitLabSecrets] = None
    username: Optional[StrictStr] = Field(default=None, description="Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.")
    webhook_key: Optional[StrictStr] = Field(default=None, description="Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.", alias="webhookKey")
    __properties: ClassVar[List[str]] = ["connectedRepositories", "createTime", "enterpriseConfig", "name", "secrets", "username", "webhookKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GitLabConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "webhook_key",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in connected_repositories (list)
        _items = []
        if self.connected_repositories:
            for _item_connected_repositories in self.connected_repositories:
                if _item_connected_repositories:
                    _items.append(_item_connected_repositories.to_dict())
            _dict['connectedRepositories'] = _items
        # override the default output from pydantic by calling `to_dict()` of enterprise_config
        if self.enterprise_config:
            _dict['enterpriseConfig'] = self.enterprise_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secrets
        if self.secrets:
            _dict['secrets'] = self.secrets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GitLabConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectedRepositories": [GitLabRepositoryId.from_dict(_item) for _item in obj["connectedRepositories"]] if obj.get("connectedRepositories") is not None else None,
            "createTime": obj.get("createTime"),
            "enterpriseConfig": GitLabEnterpriseConfig.from_dict(obj["enterpriseConfig"]) if obj.get("enterpriseConfig") is not None else None,
            "name": obj.get("name"),
            "secrets": GitLabSecrets.from_dict(obj["secrets"]) if obj.get("secrets") is not None else None,
            "username": obj.get("username"),
            "webhookKey": obj.get("webhookKey")
        })
        return _obj


