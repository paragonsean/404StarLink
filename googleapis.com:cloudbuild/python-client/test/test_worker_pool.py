# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.worker_pool import WorkerPool

class TestWorkerPool(unittest.TestCase):
    """WorkerPool unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkerPool:
        """Test WorkerPool
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkerPool`
        """
        model = WorkerPool()
        if include_optional:
            return WorkerPool(
                annotations = {
                    'key' : ''
                    },
                create_time = '',
                delete_time = '',
                display_name = '',
                etag = '',
                name = '',
                private_pool_v1_config = openapi_client.models.private_pool_v1_config.PrivatePoolV1Config(
                    network_config = openapi_client.models.network_config.NetworkConfig(
                        egress_option = 'EGRESS_OPTION_UNSPECIFIED', 
                        peered_network = '', 
                        peered_network_ip_range = '', ), 
                    worker_config = openapi_client.models.worker_config.WorkerConfig(
                        disk_size_gb = '', 
                        machine_type = '', ), ),
                state = 'STATE_UNSPECIFIED',
                uid = '',
                update_time = ''
            )
        else:
            return WorkerPool(
        )
        """

    def testWorkerPool(self):
        """Test WorkerPool"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
