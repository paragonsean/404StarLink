/*
 * AWS SecurityHub
 * <p>Security Hub provides you with a comprehensive view of the security state of your Amazon Web Services environment and resources. It also provides you with the readiness status of your environment based on controls from supported security standards. Security Hub collects security data from Amazon Web Services accounts, services, and integrated third-party products and helps you analyze security trends in your environment to identify the highest priority security issues. For more information about Security Hub, see the <a href=\"https://docs.aws.amazon.com/securityhub/latest/userguide/what-is-securityhub.html\">Security HubUser Guide</a>.</p> <p>When you use operations in the Security Hub API, the requests are executed only in the Amazon Web Services Region that is currently active or in the specific Amazon Web Services Region that you specify in your request. Any configuration or settings change that results from the operation is applied only to that Region. To make the same change in other Regions, run the same command for each Region in which you want to apply the change.</p> <p>For example, if your Region is set to <code>us-west-2</code>, when you use <code>CreateMembers</code> to add a member account to Security Hub, the association of the member account with the administrator account is created only in the <code>us-west-2</code> Region. Security Hub must be enabled for the member account in the same Region that the invitation was sent from.</p> <p>The following throttling limits apply to using Security Hub API operations.</p> <ul> <li> <p> <code>BatchEnableStandards</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 1 request per second.</p> </li> <li> <p> <code>GetFindings</code> - <code>RateLimit</code> of 3 requests per second. <code>BurstLimit</code> of 6 requests per second.</p> </li> <li> <p> <code>BatchImportFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>BatchUpdateFindings</code> - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> <li> <p> <code>UpdateStandardsControl</code> - <code>RateLimit</code> of 1 request per second. <code>BurstLimit</code> of 5 requests per second.</p> </li> <li> <p>All other operations - <code>RateLimit</code> of 10 requests per second. <code>BurstLimit</code> of 30 requests per second.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-10-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AwsSecurityFindingAction;
import org.openapitools.client.model.AwsSecurityFindingCompliance;
import org.openapitools.client.model.AwsSecurityFindingFindingProviderFields;
import org.openapitools.client.model.AwsSecurityFindingNetwork;
import org.openapitools.client.model.AwsSecurityFindingNote;
import org.openapitools.client.model.AwsSecurityFindingPatchSummary;
import org.openapitools.client.model.AwsSecurityFindingProcess;
import org.openapitools.client.model.AwsSecurityFindingRemediation;
import org.openapitools.client.model.AwsSecurityFindingSeverity;
import org.openapitools.client.model.AwsSecurityFindingWorkflow;
import org.openapitools.client.model.RecordState;
import org.openapitools.client.model.VerificationState;
import org.openapitools.client.model.WorkflowState;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AwsSecurityFinding
 */
public class AwsSecurityFindingTest {
    private final AwsSecurityFinding model = new AwsSecurityFinding();

    /**
     * Model tests for AwsSecurityFinding
     */
    @Test
    public void testAwsSecurityFinding() {
        // TODO: test AwsSecurityFinding
    }

    /**
     * Test the property 'schemaVersion'
     */
    @Test
    public void schemaVersionTest() {
        // TODO: test schemaVersion
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'productArn'
     */
    @Test
    public void productArnTest() {
        // TODO: test productArn
    }

    /**
     * Test the property 'productName'
     */
    @Test
    public void productNameTest() {
        // TODO: test productName
    }

    /**
     * Test the property 'companyName'
     */
    @Test
    public void companyNameTest() {
        // TODO: test companyName
    }

    /**
     * Test the property 'region'
     */
    @Test
    public void regionTest() {
        // TODO: test region
    }

    /**
     * Test the property 'generatorId'
     */
    @Test
    public void generatorIdTest() {
        // TODO: test generatorId
    }

    /**
     * Test the property 'awsAccountId'
     */
    @Test
    public void awsAccountIdTest() {
        // TODO: test awsAccountId
    }

    /**
     * Test the property 'types'
     */
    @Test
    public void typesTest() {
        // TODO: test types
    }

    /**
     * Test the property 'firstObservedAt'
     */
    @Test
    public void firstObservedAtTest() {
        // TODO: test firstObservedAt
    }

    /**
     * Test the property 'lastObservedAt'
     */
    @Test
    public void lastObservedAtTest() {
        // TODO: test lastObservedAt
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'severity'
     */
    @Test
    public void severityTest() {
        // TODO: test severity
    }

    /**
     * Test the property 'confidence'
     */
    @Test
    public void confidenceTest() {
        // TODO: test confidence
    }

    /**
     * Test the property 'criticality'
     */
    @Test
    public void criticalityTest() {
        // TODO: test criticality
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'remediation'
     */
    @Test
    public void remediationTest() {
        // TODO: test remediation
    }

    /**
     * Test the property 'sourceUrl'
     */
    @Test
    public void sourceUrlTest() {
        // TODO: test sourceUrl
    }

    /**
     * Test the property 'productFields'
     */
    @Test
    public void productFieldsTest() {
        // TODO: test productFields
    }

    /**
     * Test the property 'userDefinedFields'
     */
    @Test
    public void userDefinedFieldsTest() {
        // TODO: test userDefinedFields
    }

    /**
     * Test the property 'malware'
     */
    @Test
    public void malwareTest() {
        // TODO: test malware
    }

    /**
     * Test the property 'network'
     */
    @Test
    public void networkTest() {
        // TODO: test network
    }

    /**
     * Test the property 'networkPath'
     */
    @Test
    public void networkPathTest() {
        // TODO: test networkPath
    }

    /**
     * Test the property 'process'
     */
    @Test
    public void processTest() {
        // TODO: test process
    }

    /**
     * Test the property 'threats'
     */
    @Test
    public void threatsTest() {
        // TODO: test threats
    }

    /**
     * Test the property 'threatIntelIndicators'
     */
    @Test
    public void threatIntelIndicatorsTest() {
        // TODO: test threatIntelIndicators
    }

    /**
     * Test the property 'resources'
     */
    @Test
    public void resourcesTest() {
        // TODO: test resources
    }

    /**
     * Test the property 'compliance'
     */
    @Test
    public void complianceTest() {
        // TODO: test compliance
    }

    /**
     * Test the property 'verificationState'
     */
    @Test
    public void verificationStateTest() {
        // TODO: test verificationState
    }

    /**
     * Test the property 'workflowState'
     */
    @Test
    public void workflowStateTest() {
        // TODO: test workflowState
    }

    /**
     * Test the property 'workflow'
     */
    @Test
    public void workflowTest() {
        // TODO: test workflow
    }

    /**
     * Test the property 'recordState'
     */
    @Test
    public void recordStateTest() {
        // TODO: test recordState
    }

    /**
     * Test the property 'relatedFindings'
     */
    @Test
    public void relatedFindingsTest() {
        // TODO: test relatedFindings
    }

    /**
     * Test the property 'note'
     */
    @Test
    public void noteTest() {
        // TODO: test note
    }

    /**
     * Test the property 'vulnerabilities'
     */
    @Test
    public void vulnerabilitiesTest() {
        // TODO: test vulnerabilities
    }

    /**
     * Test the property 'patchSummary'
     */
    @Test
    public void patchSummaryTest() {
        // TODO: test patchSummary
    }

    /**
     * Test the property 'action'
     */
    @Test
    public void actionTest() {
        // TODO: test action
    }

    /**
     * Test the property 'findingProviderFields'
     */
    @Test
    public void findingProviderFieldsTest() {
        // TODO: test findingProviderFields
    }

    /**
     * Test the property 'sample'
     */
    @Test
    public void sampleTest() {
        // TODO: test sample
    }

}
