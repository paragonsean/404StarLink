# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.m2ts_settings_dvb_nit_settings import M2tsSettingsDvbNitSettings
from openapi_client.models.m2ts_settings_dvb_sdt_settings import M2tsSettingsDvbSdtSettings
from openapi_client.models.m2ts_settings_dvb_tdt_settings import M2tsSettingsDvbTdtSettings
from openapi_client.models.m2ts_settings_scte35_esam import M2tsSettingsScte35Esam
from typing import Optional, Set
from typing_extensions import Self

class M2tsSettings(BaseModel):
    """
    MPEG-2 TS container settings. These apply to outputs in a File output group when the output's container (ContainerType) is MPEG-2 Transport Stream (M2TS). In these assets, data is organized by the program map table (PMT). Each transport stream program contains subsets of data, including audio, video, and metadata. Each of these subsets of data has a numerical label called a packet identifier (PID). Each transport stream program corresponds to one MediaConvert output. The PMT lists the types of data in a program along with their PID. Downstream systems and players use the program map table to look up the PID for each type of data it accesses and then uses the PIDs to locate specific data within the asset.
    """ # noqa: E501
    audio_buffer_model: Optional[Any] = Field(default=None, alias="AudioBufferModel")
    audio_duration: Optional[Any] = Field(default=None, alias="AudioDuration")
    audio_frames_per_pes: Optional[Any] = Field(default=None, alias="AudioFramesPerPes")
    audio_pids: Optional[Any] = Field(default=None, alias="AudioPids")
    bitrate: Optional[Any] = Field(default=None, alias="Bitrate")
    buffer_model: Optional[Any] = Field(default=None, alias="BufferModel")
    data_pts_control: Optional[Any] = Field(default=None, alias="DataPTSControl")
    dvb_nit_settings: Optional[M2tsSettingsDvbNitSettings] = Field(default=None, alias="DvbNitSettings")
    dvb_sdt_settings: Optional[M2tsSettingsDvbSdtSettings] = Field(default=None, alias="DvbSdtSettings")
    dvb_sub_pids: Optional[Any] = Field(default=None, alias="DvbSubPids")
    dvb_tdt_settings: Optional[M2tsSettingsDvbTdtSettings] = Field(default=None, alias="DvbTdtSettings")
    dvb_teletext_pid: Optional[Any] = Field(default=None, alias="DvbTeletextPid")
    ebp_audio_interval: Optional[Any] = Field(default=None, alias="EbpAudioInterval")
    ebp_placement: Optional[Any] = Field(default=None, alias="EbpPlacement")
    es_rate_in_pes: Optional[Any] = Field(default=None, alias="EsRateInPes")
    force_ts_video_ebp_order: Optional[Any] = Field(default=None, alias="ForceTsVideoEbpOrder")
    fragment_time: Optional[Any] = Field(default=None, alias="FragmentTime")
    klv_metadata: Optional[Any] = Field(default=None, alias="KlvMetadata")
    max_pcr_interval: Optional[Any] = Field(default=None, alias="MaxPcrInterval")
    min_ebp_interval: Optional[Any] = Field(default=None, alias="MinEbpInterval")
    nielsen_id3: Optional[Any] = Field(default=None, alias="NielsenId3")
    null_packet_bitrate: Optional[Any] = Field(default=None, alias="NullPacketBitrate")
    pat_interval: Optional[Any] = Field(default=None, alias="PatInterval")
    pcr_control: Optional[Any] = Field(default=None, alias="PcrControl")
    pcr_pid: Optional[Any] = Field(default=None, alias="PcrPid")
    pmt_interval: Optional[Any] = Field(default=None, alias="PmtInterval")
    pmt_pid: Optional[Any] = Field(default=None, alias="PmtPid")
    private_metadata_pid: Optional[Any] = Field(default=None, alias="PrivateMetadataPid")
    program_number: Optional[Any] = Field(default=None, alias="ProgramNumber")
    rate_mode: Optional[Any] = Field(default=None, alias="RateMode")
    scte35_esam: Optional[M2tsSettingsScte35Esam] = Field(default=None, alias="Scte35Esam")
    scte35_pid: Optional[Any] = Field(default=None, alias="Scte35Pid")
    scte35_source: Optional[Any] = Field(default=None, alias="Scte35Source")
    segmentation_markers: Optional[Any] = Field(default=None, alias="SegmentationMarkers")
    segmentation_style: Optional[Any] = Field(default=None, alias="SegmentationStyle")
    segmentation_time: Optional[Any] = Field(default=None, alias="SegmentationTime")
    timed_metadata_pid: Optional[Any] = Field(default=None, alias="TimedMetadataPid")
    transport_stream_id: Optional[Any] = Field(default=None, alias="TransportStreamId")
    video_pid: Optional[Any] = Field(default=None, alias="VideoPid")
    __properties: ClassVar[List[str]] = ["AudioBufferModel", "AudioDuration", "AudioFramesPerPes", "AudioPids", "Bitrate", "BufferModel", "DataPTSControl", "DvbNitSettings", "DvbSdtSettings", "DvbSubPids", "DvbTdtSettings", "DvbTeletextPid", "EbpAudioInterval", "EbpPlacement", "EsRateInPes", "ForceTsVideoEbpOrder", "FragmentTime", "KlvMetadata", "MaxPcrInterval", "MinEbpInterval", "NielsenId3", "NullPacketBitrate", "PatInterval", "PcrControl", "PcrPid", "PmtInterval", "PmtPid", "PrivateMetadataPid", "ProgramNumber", "RateMode", "Scte35Esam", "Scte35Pid", "Scte35Source", "SegmentationMarkers", "SegmentationStyle", "SegmentationTime", "TimedMetadataPid", "TransportStreamId", "VideoPid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of M2tsSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio_buffer_model
        if self.audio_buffer_model:
            _dict['AudioBufferModel'] = self.audio_buffer_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audio_duration
        if self.audio_duration:
            _dict['AudioDuration'] = self.audio_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of buffer_model
        if self.buffer_model:
            _dict['BufferModel'] = self.buffer_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_pts_control
        if self.data_pts_control:
            _dict['DataPTSControl'] = self.data_pts_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dvb_nit_settings
        if self.dvb_nit_settings:
            _dict['DvbNitSettings'] = self.dvb_nit_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dvb_sdt_settings
        if self.dvb_sdt_settings:
            _dict['DvbSdtSettings'] = self.dvb_sdt_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dvb_tdt_settings
        if self.dvb_tdt_settings:
            _dict['DvbTdtSettings'] = self.dvb_tdt_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ebp_audio_interval
        if self.ebp_audio_interval:
            _dict['EbpAudioInterval'] = self.ebp_audio_interval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ebp_placement
        if self.ebp_placement:
            _dict['EbpPlacement'] = self.ebp_placement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of es_rate_in_pes
        if self.es_rate_in_pes:
            _dict['EsRateInPes'] = self.es_rate_in_pes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of force_ts_video_ebp_order
        if self.force_ts_video_ebp_order:
            _dict['ForceTsVideoEbpOrder'] = self.force_ts_video_ebp_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of klv_metadata
        if self.klv_metadata:
            _dict['KlvMetadata'] = self.klv_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nielsen_id3
        if self.nielsen_id3:
            _dict['NielsenId3'] = self.nielsen_id3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pcr_control
        if self.pcr_control:
            _dict['PcrControl'] = self.pcr_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rate_mode
        if self.rate_mode:
            _dict['RateMode'] = self.rate_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scte35_esam
        if self.scte35_esam:
            _dict['Scte35Esam'] = self.scte35_esam.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scte35_source
        if self.scte35_source:
            _dict['Scte35Source'] = self.scte35_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segmentation_markers
        if self.segmentation_markers:
            _dict['SegmentationMarkers'] = self.segmentation_markers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segmentation_style
        if self.segmentation_style:
            _dict['SegmentationStyle'] = self.segmentation_style.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of M2tsSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AudioBufferModel": M2tsAudioBufferModel.from_dict(obj["AudioBufferModel"]) if obj.get("AudioBufferModel") is not None else None,
            "AudioDuration": M2tsAudioDuration.from_dict(obj["AudioDuration"]) if obj.get("AudioDuration") is not None else None,
            "AudioFramesPerPes": obj.get("AudioFramesPerPes"),
            "AudioPids": obj.get("AudioPids"),
            "Bitrate": obj.get("Bitrate"),
            "BufferModel": M2tsBufferModel.from_dict(obj["BufferModel"]) if obj.get("BufferModel") is not None else None,
            "DataPTSControl": M2tsDataPtsControl.from_dict(obj["DataPTSControl"]) if obj.get("DataPTSControl") is not None else None,
            "DvbNitSettings": M2tsSettingsDvbNitSettings.from_dict(obj["DvbNitSettings"]) if obj.get("DvbNitSettings") is not None else None,
            "DvbSdtSettings": M2tsSettingsDvbSdtSettings.from_dict(obj["DvbSdtSettings"]) if obj.get("DvbSdtSettings") is not None else None,
            "DvbSubPids": obj.get("DvbSubPids"),
            "DvbTdtSettings": M2tsSettingsDvbTdtSettings.from_dict(obj["DvbTdtSettings"]) if obj.get("DvbTdtSettings") is not None else None,
            "DvbTeletextPid": obj.get("DvbTeletextPid"),
            "EbpAudioInterval": M2tsEbpAudioInterval.from_dict(obj["EbpAudioInterval"]) if obj.get("EbpAudioInterval") is not None else None,
            "EbpPlacement": M2tsEbpPlacement.from_dict(obj["EbpPlacement"]) if obj.get("EbpPlacement") is not None else None,
            "EsRateInPes": M2tsEsRateInPes.from_dict(obj["EsRateInPes"]) if obj.get("EsRateInPes") is not None else None,
            "ForceTsVideoEbpOrder": M2tsForceTsVideoEbpOrder.from_dict(obj["ForceTsVideoEbpOrder"]) if obj.get("ForceTsVideoEbpOrder") is not None else None,
            "FragmentTime": obj.get("FragmentTime"),
            "KlvMetadata": M2tsKlvMetadata.from_dict(obj["KlvMetadata"]) if obj.get("KlvMetadata") is not None else None,
            "MaxPcrInterval": obj.get("MaxPcrInterval"),
            "MinEbpInterval": obj.get("MinEbpInterval"),
            "NielsenId3": M2tsNielsenId3.from_dict(obj["NielsenId3"]) if obj.get("NielsenId3") is not None else None,
            "NullPacketBitrate": obj.get("NullPacketBitrate"),
            "PatInterval": obj.get("PatInterval"),
            "PcrControl": M2tsPcrControl.from_dict(obj["PcrControl"]) if obj.get("PcrControl") is not None else None,
            "PcrPid": obj.get("PcrPid"),
            "PmtInterval": obj.get("PmtInterval"),
            "PmtPid": obj.get("PmtPid"),
            "PrivateMetadataPid": obj.get("PrivateMetadataPid"),
            "ProgramNumber": obj.get("ProgramNumber"),
            "RateMode": M2tsRateMode.from_dict(obj["RateMode"]) if obj.get("RateMode") is not None else None,
            "Scte35Esam": M2tsSettingsScte35Esam.from_dict(obj["Scte35Esam"]) if obj.get("Scte35Esam") is not None else None,
            "Scte35Pid": obj.get("Scte35Pid"),
            "Scte35Source": M2tsScte35Source.from_dict(obj["Scte35Source"]) if obj.get("Scte35Source") is not None else None,
            "SegmentationMarkers": M2tsSegmentationMarkers.from_dict(obj["SegmentationMarkers"]) if obj.get("SegmentationMarkers") is not None else None,
            "SegmentationStyle": M2tsSegmentationStyle.from_dict(obj["SegmentationStyle"]) if obj.get("SegmentationStyle") is not None else None,
            "SegmentationTime": obj.get("SegmentationTime"),
            "TimedMetadataPid": obj.get("TimedMetadataPid"),
            "TransportStreamId": obj.get("TransportStreamId"),
            "VideoPid": obj.get("VideoPid")
        })
        return _obj


