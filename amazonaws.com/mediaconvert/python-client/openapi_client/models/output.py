# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_preset_request_settings_container_settings import CreatePresetRequestSettingsContainerSettings
from openapi_client.models.create_preset_request_settings_video_description import CreatePresetRequestSettingsVideoDescription
from openapi_client.models.output_output_settings import OutputOutputSettings
from typing import Optional, Set
from typing_extensions import Self

class Output(BaseModel):
    """
    Each output in your job is a collection of settings that describes how you want MediaConvert to encode a single output file or stream. For more information, see https://docs.aws.amazon.com/mediaconvert/latest/ug/create-outputs.html.
    """ # noqa: E501
    audio_descriptions: Optional[Any] = Field(default=None, alias="AudioDescriptions")
    caption_descriptions: Optional[Any] = Field(default=None, alias="CaptionDescriptions")
    container_settings: Optional[CreatePresetRequestSettingsContainerSettings] = Field(default=None, alias="ContainerSettings")
    extension: Optional[Any] = Field(default=None, alias="Extension")
    name_modifier: Optional[Any] = Field(default=None, alias="NameModifier")
    output_settings: Optional[OutputOutputSettings] = Field(default=None, alias="OutputSettings")
    preset: Optional[Any] = Field(default=None, alias="Preset")
    video_description: Optional[CreatePresetRequestSettingsVideoDescription] = Field(default=None, alias="VideoDescription")
    __properties: ClassVar[List[str]] = ["AudioDescriptions", "CaptionDescriptions", "ContainerSettings", "Extension", "NameModifier", "OutputSettings", "Preset", "VideoDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Output from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of container_settings
        if self.container_settings:
            _dict['ContainerSettings'] = self.container_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_settings
        if self.output_settings:
            _dict['OutputSettings'] = self.output_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_description
        if self.video_description:
            _dict['VideoDescription'] = self.video_description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Output from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AudioDescriptions": obj.get("AudioDescriptions"),
            "CaptionDescriptions": obj.get("CaptionDescriptions"),
            "ContainerSettings": CreatePresetRequestSettingsContainerSettings.from_dict(obj["ContainerSettings"]) if obj.get("ContainerSettings") is not None else None,
            "Extension": obj.get("Extension"),
            "NameModifier": obj.get("NameModifier"),
            "OutputSettings": OutputOutputSettings.from_dict(obj["OutputSettings"]) if obj.get("OutputSettings") is not None else None,
            "Preset": obj.get("Preset"),
            "VideoDescription": CreatePresetRequestSettingsVideoDescription.from_dict(obj["VideoDescription"]) if obj.get("VideoDescription") is not None else None
        })
        return _obj


