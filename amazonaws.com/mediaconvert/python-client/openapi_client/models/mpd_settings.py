# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MpdSettings(BaseModel):
    """
    These settings relate to the fragmented MP4 container for the segments in your DASH outputs.
    """ # noqa: E501
    accessibility_caption_hints: Optional[Any] = Field(default=None, alias="AccessibilityCaptionHints")
    audio_duration: Optional[Any] = Field(default=None, alias="AudioDuration")
    caption_container_type: Optional[Any] = Field(default=None, alias="CaptionContainerType")
    klv_metadata: Optional[Any] = Field(default=None, alias="KlvMetadata")
    manifest_metadata_signaling: Optional[Any] = Field(default=None, alias="ManifestMetadataSignaling")
    scte35_esam: Optional[Any] = Field(default=None, alias="Scte35Esam")
    scte35_source: Optional[Any] = Field(default=None, alias="Scte35Source")
    timed_metadata: Optional[Any] = Field(default=None, alias="TimedMetadata")
    timed_metadata_box_version: Optional[Any] = Field(default=None, alias="TimedMetadataBoxVersion")
    timed_metadata_scheme_id_uri: Optional[Any] = Field(default=None, alias="TimedMetadataSchemeIdUri")
    timed_metadata_value: Optional[Any] = Field(default=None, alias="TimedMetadataValue")
    __properties: ClassVar[List[str]] = ["AccessibilityCaptionHints", "AudioDuration", "CaptionContainerType", "KlvMetadata", "ManifestMetadataSignaling", "Scte35Esam", "Scte35Source", "TimedMetadata", "TimedMetadataBoxVersion", "TimedMetadataSchemeIdUri", "TimedMetadataValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MpdSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accessibility_caption_hints
        if self.accessibility_caption_hints:
            _dict['AccessibilityCaptionHints'] = self.accessibility_caption_hints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audio_duration
        if self.audio_duration:
            _dict['AudioDuration'] = self.audio_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of caption_container_type
        if self.caption_container_type:
            _dict['CaptionContainerType'] = self.caption_container_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of klv_metadata
        if self.klv_metadata:
            _dict['KlvMetadata'] = self.klv_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manifest_metadata_signaling
        if self.manifest_metadata_signaling:
            _dict['ManifestMetadataSignaling'] = self.manifest_metadata_signaling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scte35_esam
        if self.scte35_esam:
            _dict['Scte35Esam'] = self.scte35_esam.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scte35_source
        if self.scte35_source:
            _dict['Scte35Source'] = self.scte35_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timed_metadata
        if self.timed_metadata:
            _dict['TimedMetadata'] = self.timed_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timed_metadata_box_version
        if self.timed_metadata_box_version:
            _dict['TimedMetadataBoxVersion'] = self.timed_metadata_box_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MpdSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccessibilityCaptionHints": MpdAccessibilityCaptionHints.from_dict(obj["AccessibilityCaptionHints"]) if obj.get("AccessibilityCaptionHints") is not None else None,
            "AudioDuration": MpdAudioDuration.from_dict(obj["AudioDuration"]) if obj.get("AudioDuration") is not None else None,
            "CaptionContainerType": MpdCaptionContainerType.from_dict(obj["CaptionContainerType"]) if obj.get("CaptionContainerType") is not None else None,
            "KlvMetadata": MpdKlvMetadata.from_dict(obj["KlvMetadata"]) if obj.get("KlvMetadata") is not None else None,
            "ManifestMetadataSignaling": MpdManifestMetadataSignaling.from_dict(obj["ManifestMetadataSignaling"]) if obj.get("ManifestMetadataSignaling") is not None else None,
            "Scte35Esam": MpdScte35Esam.from_dict(obj["Scte35Esam"]) if obj.get("Scte35Esam") is not None else None,
            "Scte35Source": MpdScte35Source.from_dict(obj["Scte35Source"]) if obj.get("Scte35Source") is not None else None,
            "TimedMetadata": MpdTimedMetadata.from_dict(obj["TimedMetadata"]) if obj.get("TimedMetadata") is not None else None,
            "TimedMetadataBoxVersion": MpdTimedMetadataBoxVersion.from_dict(obj["TimedMetadataBoxVersion"]) if obj.get("TimedMetadataBoxVersion") is not None else None,
            "TimedMetadataSchemeIdUri": obj.get("TimedMetadataSchemeIdUri"),
            "TimedMetadataValue": obj.get("TimedMetadataValue")
        })
        return _obj


