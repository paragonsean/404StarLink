# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.acceleration_status import AccelerationStatus
from openapi_client.models.billing_tags_source import BillingTagsSource
from openapi_client.models.create_job_request_settings import CreateJobRequestSettings
from openapi_client.models.datetime import datetime
from openapi_client.models.dict import Dict
from openapi_client.models.int import int
from openapi_client.models.job_acceleration_settings import JobAccelerationSettings
from openapi_client.models.job_messages import JobMessages
from openapi_client.models.job_phase import JobPhase
from openapi_client.models.job_status import JobStatus
from openapi_client.models.job_timing import JobTiming
from openapi_client.models.list import List
from openapi_client.models.simulate_reserved_queue import SimulateReservedQueue
from openapi_client.models.status_update_interval import StatusUpdateInterval
from openapi_client.models.str import str
from typing import Optional, Set
from typing_extensions import Self

class CreateJobResponseJob(BaseModel):
    """
    CreateJobResponseJob
    """ # noqa: E501
    acceleration_settings: Optional[JobAccelerationSettings] = Field(default=None, alias="AccelerationSettings")
    acceleration_status: Optional[Any] = Field(default=None, alias="AccelerationStatus")
    arn: Optional[Any] = Field(default=None, alias="Arn")
    billing_tags_source: Optional[Any] = Field(default=None, alias="BillingTagsSource")
    client_request_token: Optional[Any] = Field(default=None, alias="ClientRequestToken")
    created_at: Optional[Any] = Field(default=None, alias="CreatedAt")
    current_phase: Optional[Any] = Field(default=None, alias="CurrentPhase")
    error_code: Optional[Any] = Field(default=None, alias="ErrorCode")
    error_message: Optional[Any] = Field(default=None, alias="ErrorMessage")
    hop_destinations: Optional[Any] = Field(default=None, alias="HopDestinations")
    id: Optional[Any] = Field(default=None, alias="Id")
    job_percent_complete: Optional[Any] = Field(default=None, alias="JobPercentComplete")
    job_template: Optional[Any] = Field(default=None, alias="JobTemplate")
    messages: Optional[JobMessages] = Field(default=None, alias="Messages")
    output_group_details: Optional[Any] = Field(default=None, alias="OutputGroupDetails")
    priority: Optional[Any] = Field(default=None, alias="Priority")
    queue: Optional[Any] = Field(default=None, alias="Queue")
    queue_transitions: Optional[Any] = Field(default=None, alias="QueueTransitions")
    retry_count: Optional[Any] = Field(default=None, alias="RetryCount")
    role: Any = Field(alias="Role")
    settings: CreateJobRequestSettings = Field(alias="Settings")
    simulate_reserved_queue: Optional[Any] = Field(default=None, alias="SimulateReservedQueue")
    status: Optional[Any] = Field(default=None, alias="Status")
    status_update_interval: Optional[Any] = Field(default=None, alias="StatusUpdateInterval")
    timing: Optional[JobTiming] = Field(default=None, alias="Timing")
    user_metadata: Optional[Any] = Field(default=None, alias="UserMetadata")
    warnings: Optional[Any] = Field(default=None, alias="Warnings")
    __properties: ClassVar[List[str]] = ["AccelerationSettings", "AccelerationStatus", "Arn", "BillingTagsSource", "ClientRequestToken", "CreatedAt", "CurrentPhase", "ErrorCode", "ErrorMessage", "HopDestinations", "Id", "JobPercentComplete", "JobTemplate", "Messages", "OutputGroupDetails", "Priority", "Queue", "QueueTransitions", "RetryCount", "Role", "Settings", "SimulateReservedQueue", "Status", "StatusUpdateInterval", "Timing", "UserMetadata", "Warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateJobResponseJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of acceleration_settings
        if self.acceleration_settings:
            _dict['AccelerationSettings'] = self.acceleration_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of acceleration_status
        if self.acceleration_status:
            _dict['AccelerationStatus'] = self.acceleration_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_tags_source
        if self.billing_tags_source:
            _dict['BillingTagsSource'] = self.billing_tags_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_phase
        if self.current_phase:
            _dict['CurrentPhase'] = self.current_phase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of messages
        if self.messages:
            _dict['Messages'] = self.messages.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['Settings'] = self.settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of simulate_reserved_queue
        if self.simulate_reserved_queue:
            _dict['SimulateReservedQueue'] = self.simulate_reserved_queue.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['Status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status_update_interval
        if self.status_update_interval:
            _dict['StatusUpdateInterval'] = self.status_update_interval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timing
        if self.timing:
            _dict['Timing'] = self.timing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateJobResponseJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccelerationSettings": JobAccelerationSettings.from_dict(obj["AccelerationSettings"]) if obj.get("AccelerationSettings") is not None else None,
            "AccelerationStatus": AccelerationStatus.from_dict(obj["AccelerationStatus"]) if obj.get("AccelerationStatus") is not None else None,
            "Arn": obj.get("Arn"),
            "BillingTagsSource": BillingTagsSource.from_dict(obj["BillingTagsSource"]) if obj.get("BillingTagsSource") is not None else None,
            "ClientRequestToken": obj.get("ClientRequestToken"),
            "CreatedAt": obj.get("CreatedAt"),
            "CurrentPhase": JobPhase.from_dict(obj["CurrentPhase"]) if obj.get("CurrentPhase") is not None else None,
            "ErrorCode": obj.get("ErrorCode"),
            "ErrorMessage": obj.get("ErrorMessage"),
            "HopDestinations": obj.get("HopDestinations"),
            "Id": obj.get("Id"),
            "JobPercentComplete": obj.get("JobPercentComplete"),
            "JobTemplate": obj.get("JobTemplate"),
            "Messages": JobMessages.from_dict(obj["Messages"]) if obj.get("Messages") is not None else None,
            "OutputGroupDetails": obj.get("OutputGroupDetails"),
            "Priority": obj.get("Priority"),
            "Queue": obj.get("Queue"),
            "QueueTransitions": obj.get("QueueTransitions"),
            "RetryCount": obj.get("RetryCount"),
            "Role": obj.get("Role"),
            "Settings": CreateJobRequestSettings.from_dict(obj["Settings"]) if obj.get("Settings") is not None else None,
            "SimulateReservedQueue": SimulateReservedQueue.from_dict(obj["SimulateReservedQueue"]) if obj.get("SimulateReservedQueue") is not None else None,
            "Status": JobStatus.from_dict(obj["Status"]) if obj.get("Status") is not None else None,
            "StatusUpdateInterval": StatusUpdateInterval.from_dict(obj["StatusUpdateInterval"]) if obj.get("StatusUpdateInterval") is not None else None,
            "Timing": JobTiming.from_dict(obj["Timing"]) if obj.get("Timing") is not None else None,
            "UserMetadata": obj.get("UserMetadata"),
            "Warnings": obj.get("Warnings")
        })
        return _obj


