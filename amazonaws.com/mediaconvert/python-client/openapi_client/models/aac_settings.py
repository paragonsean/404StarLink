# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AacSettings(BaseModel):
    """
    Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AAC. The service accepts one of two mutually exclusive groups of AAC settings--VBR and CBR. To select one of these modes, set the value of Bitrate control mode (rateControlMode) to \"VBR\" or \"CBR\". In VBR mode, you control the audio quality with the setting VBR quality (vbrQuality). In CBR mode, you use the setting Bitrate (bitrate). Defaults and valid values depend on the rate control mode.
    """ # noqa: E501
    audio_description_broadcaster_mix: Optional[Any] = Field(default=None, alias="AudioDescriptionBroadcasterMix")
    bitrate: Optional[Any] = Field(default=None, alias="Bitrate")
    codec_profile: Optional[Any] = Field(default=None, alias="CodecProfile")
    coding_mode: Optional[Any] = Field(default=None, alias="CodingMode")
    rate_control_mode: Optional[Any] = Field(default=None, alias="RateControlMode")
    raw_format: Optional[Any] = Field(default=None, alias="RawFormat")
    sample_rate: Optional[Any] = Field(default=None, alias="SampleRate")
    specification: Optional[Any] = Field(default=None, alias="Specification")
    vbr_quality: Optional[Any] = Field(default=None, alias="VbrQuality")
    __properties: ClassVar[List[str]] = ["AudioDescriptionBroadcasterMix", "Bitrate", "CodecProfile", "CodingMode", "RateControlMode", "RawFormat", "SampleRate", "Specification", "VbrQuality"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AacSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio_description_broadcaster_mix
        if self.audio_description_broadcaster_mix:
            _dict['AudioDescriptionBroadcasterMix'] = self.audio_description_broadcaster_mix.to_dict()
        # override the default output from pydantic by calling `to_dict()` of codec_profile
        if self.codec_profile:
            _dict['CodecProfile'] = self.codec_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coding_mode
        if self.coding_mode:
            _dict['CodingMode'] = self.coding_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rate_control_mode
        if self.rate_control_mode:
            _dict['RateControlMode'] = self.rate_control_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of raw_format
        if self.raw_format:
            _dict['RawFormat'] = self.raw_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of specification
        if self.specification:
            _dict['Specification'] = self.specification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vbr_quality
        if self.vbr_quality:
            _dict['VbrQuality'] = self.vbr_quality.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AacSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AudioDescriptionBroadcasterMix": AacAudioDescriptionBroadcasterMix.from_dict(obj["AudioDescriptionBroadcasterMix"]) if obj.get("AudioDescriptionBroadcasterMix") is not None else None,
            "Bitrate": obj.get("Bitrate"),
            "CodecProfile": AacCodecProfile.from_dict(obj["CodecProfile"]) if obj.get("CodecProfile") is not None else None,
            "CodingMode": AacCodingMode.from_dict(obj["CodingMode"]) if obj.get("CodingMode") is not None else None,
            "RateControlMode": AacRateControlMode.from_dict(obj["RateControlMode"]) if obj.get("RateControlMode") is not None else None,
            "RawFormat": AacRawFormat.from_dict(obj["RawFormat"]) if obj.get("RawFormat") is not None else None,
            "SampleRate": obj.get("SampleRate"),
            "Specification": AacSpecification.from_dict(obj["Specification"]) if obj.get("Specification") is not None else None,
            "VbrQuality": AacVbrQuality.from_dict(obj["VbrQuality"]) if obj.get("VbrQuality") is not None else None
        })
        return _obj


