# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.noise_reducer_filter import NoiseReducerFilter
from openapi_client.models.noise_reducer_filter_settings import NoiseReducerFilterSettings
from openapi_client.models.noise_reducer_spatial_filter_settings import NoiseReducerSpatialFilterSettings
from openapi_client.models.noise_reducer_temporal_filter_settings import NoiseReducerTemporalFilterSettings
from typing import Optional, Set
from typing_extensions import Self

class VideoPreprocessorNoiseReducer(BaseModel):
    """
    VideoPreprocessorNoiseReducer
    """ # noqa: E501
    filter: Optional[Any] = Field(default=None, alias="Filter")
    filter_settings: Optional[NoiseReducerFilterSettings] = Field(default=None, alias="FilterSettings")
    spatial_filter_settings: Optional[NoiseReducerSpatialFilterSettings] = Field(default=None, alias="SpatialFilterSettings")
    temporal_filter_settings: Optional[NoiseReducerTemporalFilterSettings] = Field(default=None, alias="TemporalFilterSettings")
    __properties: ClassVar[List[str]] = ["Filter", "FilterSettings", "SpatialFilterSettings", "TemporalFilterSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoPreprocessorNoiseReducer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['Filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter_settings
        if self.filter_settings:
            _dict['FilterSettings'] = self.filter_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spatial_filter_settings
        if self.spatial_filter_settings:
            _dict['SpatialFilterSettings'] = self.spatial_filter_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of temporal_filter_settings
        if self.temporal_filter_settings:
            _dict['TemporalFilterSettings'] = self.temporal_filter_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoPreprocessorNoiseReducer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Filter": NoiseReducerFilter.from_dict(obj["Filter"]) if obj.get("Filter") is not None else None,
            "FilterSettings": NoiseReducerFilterSettings.from_dict(obj["FilterSettings"]) if obj.get("FilterSettings") is not None else None,
            "SpatialFilterSettings": NoiseReducerSpatialFilterSettings.from_dict(obj["SpatialFilterSettings"]) if obj.get("SpatialFilterSettings") is not None else None,
            "TemporalFilterSettings": NoiseReducerTemporalFilterSettings.from_dict(obj["TemporalFilterSettings"]) if obj.get("TemporalFilterSettings") is not None else None
        })
        return _obj


