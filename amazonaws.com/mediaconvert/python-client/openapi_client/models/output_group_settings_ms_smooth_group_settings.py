# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cmaf_group_settings_destination_settings import CmafGroupSettingsDestinationSettings
from openapi_client.models.int import int
from openapi_client.models.list import List
from openapi_client.models.ms_smooth_audio_deduplication import MsSmoothAudioDeduplication
from openapi_client.models.ms_smooth_fragment_length_control import MsSmoothFragmentLengthControl
from openapi_client.models.ms_smooth_group_settings_encryption import MsSmoothGroupSettingsEncryption
from openapi_client.models.ms_smooth_manifest_encoding import MsSmoothManifestEncoding
from openapi_client.models.str import str
from typing import Optional, Set
from typing_extensions import Self

class OutputGroupSettingsMsSmoothGroupSettings(BaseModel):
    """
    OutputGroupSettingsMsSmoothGroupSettings
    """ # noqa: E501
    additional_manifests: Optional[Any] = Field(default=None, alias="AdditionalManifests")
    audio_deduplication: Optional[Any] = Field(default=None, alias="AudioDeduplication")
    destination: Optional[Any] = Field(default=None, alias="Destination")
    destination_settings: Optional[CmafGroupSettingsDestinationSettings] = Field(default=None, alias="DestinationSettings")
    encryption: Optional[MsSmoothGroupSettingsEncryption] = Field(default=None, alias="Encryption")
    fragment_length: Optional[Any] = Field(default=None, alias="FragmentLength")
    fragment_length_control: Optional[Any] = Field(default=None, alias="FragmentLengthControl")
    manifest_encoding: Optional[Any] = Field(default=None, alias="ManifestEncoding")
    __properties: ClassVar[List[str]] = ["AdditionalManifests", "AudioDeduplication", "Destination", "DestinationSettings", "Encryption", "FragmentLength", "FragmentLengthControl", "ManifestEncoding"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutputGroupSettingsMsSmoothGroupSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio_deduplication
        if self.audio_deduplication:
            _dict['AudioDeduplication'] = self.audio_deduplication.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_settings
        if self.destination_settings:
            _dict['DestinationSettings'] = self.destination_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['Encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fragment_length_control
        if self.fragment_length_control:
            _dict['FragmentLengthControl'] = self.fragment_length_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manifest_encoding
        if self.manifest_encoding:
            _dict['ManifestEncoding'] = self.manifest_encoding.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutputGroupSettingsMsSmoothGroupSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AdditionalManifests": obj.get("AdditionalManifests"),
            "AudioDeduplication": MsSmoothAudioDeduplication.from_dict(obj["AudioDeduplication"]) if obj.get("AudioDeduplication") is not None else None,
            "Destination": obj.get("Destination"),
            "DestinationSettings": CmafGroupSettingsDestinationSettings.from_dict(obj["DestinationSettings"]) if obj.get("DestinationSettings") is not None else None,
            "Encryption": MsSmoothGroupSettingsEncryption.from_dict(obj["Encryption"]) if obj.get("Encryption") is not None else None,
            "FragmentLength": obj.get("FragmentLength"),
            "FragmentLengthControl": MsSmoothFragmentLengthControl.from_dict(obj["FragmentLengthControl"]) if obj.get("FragmentLengthControl") is not None else None,
            "ManifestEncoding": MsSmoothManifestEncoding.from_dict(obj["ManifestEncoding"]) if obj.get("ManifestEncoding") is not None else None
        })
        return _obj


