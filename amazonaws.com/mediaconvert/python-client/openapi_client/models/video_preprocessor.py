# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.video_preprocessor_color_corrector import VideoPreprocessorColorCorrector
from openapi_client.models.video_preprocessor_deinterlacer import VideoPreprocessorDeinterlacer
from openapi_client.models.video_preprocessor_dolby_vision import VideoPreprocessorDolbyVision
from openapi_client.models.video_preprocessor_hdr10_plus import VideoPreprocessorHdr10Plus
from openapi_client.models.video_preprocessor_image_inserter import VideoPreprocessorImageInserter
from openapi_client.models.video_preprocessor_noise_reducer import VideoPreprocessorNoiseReducer
from openapi_client.models.video_preprocessor_partner_watermarking import VideoPreprocessorPartnerWatermarking
from openapi_client.models.video_preprocessor_timecode_burnin import VideoPreprocessorTimecodeBurnin
from typing import Optional, Set
from typing_extensions import Self

class VideoPreprocessor(BaseModel):
    """
    Find additional transcoding features under Preprocessors (VideoPreprocessors). Enable the features at each output individually. These features are disabled by default.
    """ # noqa: E501
    color_corrector: Optional[VideoPreprocessorColorCorrector] = Field(default=None, alias="ColorCorrector")
    deinterlacer: Optional[VideoPreprocessorDeinterlacer] = Field(default=None, alias="Deinterlacer")
    dolby_vision: Optional[VideoPreprocessorDolbyVision] = Field(default=None, alias="DolbyVision")
    hdr10_plus: Optional[VideoPreprocessorHdr10Plus] = Field(default=None, alias="Hdr10Plus")
    image_inserter: Optional[VideoPreprocessorImageInserter] = Field(default=None, alias="ImageInserter")
    noise_reducer: Optional[VideoPreprocessorNoiseReducer] = Field(default=None, alias="NoiseReducer")
    partner_watermarking: Optional[VideoPreprocessorPartnerWatermarking] = Field(default=None, alias="PartnerWatermarking")
    timecode_burnin: Optional[VideoPreprocessorTimecodeBurnin] = Field(default=None, alias="TimecodeBurnin")
    __properties: ClassVar[List[str]] = ["ColorCorrector", "Deinterlacer", "DolbyVision", "Hdr10Plus", "ImageInserter", "NoiseReducer", "PartnerWatermarking", "TimecodeBurnin"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VideoPreprocessor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of color_corrector
        if self.color_corrector:
            _dict['ColorCorrector'] = self.color_corrector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deinterlacer
        if self.deinterlacer:
            _dict['Deinterlacer'] = self.deinterlacer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dolby_vision
        if self.dolby_vision:
            _dict['DolbyVision'] = self.dolby_vision.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hdr10_plus
        if self.hdr10_plus:
            _dict['Hdr10Plus'] = self.hdr10_plus.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_inserter
        if self.image_inserter:
            _dict['ImageInserter'] = self.image_inserter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of noise_reducer
        if self.noise_reducer:
            _dict['NoiseReducer'] = self.noise_reducer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partner_watermarking
        if self.partner_watermarking:
            _dict['PartnerWatermarking'] = self.partner_watermarking.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timecode_burnin
        if self.timecode_burnin:
            _dict['TimecodeBurnin'] = self.timecode_burnin.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VideoPreprocessor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ColorCorrector": VideoPreprocessorColorCorrector.from_dict(obj["ColorCorrector"]) if obj.get("ColorCorrector") is not None else None,
            "Deinterlacer": VideoPreprocessorDeinterlacer.from_dict(obj["Deinterlacer"]) if obj.get("Deinterlacer") is not None else None,
            "DolbyVision": VideoPreprocessorDolbyVision.from_dict(obj["DolbyVision"]) if obj.get("DolbyVision") is not None else None,
            "Hdr10Plus": VideoPreprocessorHdr10Plus.from_dict(obj["Hdr10Plus"]) if obj.get("Hdr10Plus") is not None else None,
            "ImageInserter": VideoPreprocessorImageInserter.from_dict(obj["ImageInserter"]) if obj.get("ImageInserter") is not None else None,
            "NoiseReducer": VideoPreprocessorNoiseReducer.from_dict(obj["NoiseReducer"]) if obj.get("NoiseReducer") is not None else None,
            "PartnerWatermarking": VideoPreprocessorPartnerWatermarking.from_dict(obj["PartnerWatermarking"]) if obj.get("PartnerWatermarking") is not None else None,
            "TimecodeBurnin": VideoPreprocessorTimecodeBurnin.from_dict(obj["TimecodeBurnin"]) if obj.get("TimecodeBurnin") is not None else None
        })
        return _obj


