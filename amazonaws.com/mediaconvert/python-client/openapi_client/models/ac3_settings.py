# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Ac3Settings(BaseModel):
    """
    Required when you set (Codec) under (AudioDescriptions)>(CodecSettings) to the value AC3.
    """ # noqa: E501
    bitrate: Optional[Any] = Field(default=None, alias="Bitrate")
    bitstream_mode: Optional[Any] = Field(default=None, alias="BitstreamMode")
    coding_mode: Optional[Any] = Field(default=None, alias="CodingMode")
    dialnorm: Optional[Any] = Field(default=None, alias="Dialnorm")
    dynamic_range_compression_line: Optional[Any] = Field(default=None, alias="DynamicRangeCompressionLine")
    dynamic_range_compression_profile: Optional[Any] = Field(default=None, alias="DynamicRangeCompressionProfile")
    dynamic_range_compression_rf: Optional[Any] = Field(default=None, alias="DynamicRangeCompressionRf")
    lfe_filter: Optional[Any] = Field(default=None, alias="LfeFilter")
    metadata_control: Optional[Any] = Field(default=None, alias="MetadataControl")
    sample_rate: Optional[Any] = Field(default=None, alias="SampleRate")
    __properties: ClassVar[List[str]] = ["Bitrate", "BitstreamMode", "CodingMode", "Dialnorm", "DynamicRangeCompressionLine", "DynamicRangeCompressionProfile", "DynamicRangeCompressionRf", "LfeFilter", "MetadataControl", "SampleRate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Ac3Settings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bitstream_mode
        if self.bitstream_mode:
            _dict['BitstreamMode'] = self.bitstream_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coding_mode
        if self.coding_mode:
            _dict['CodingMode'] = self.coding_mode.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dynamic_range_compression_line
        if self.dynamic_range_compression_line:
            _dict['DynamicRangeCompressionLine'] = self.dynamic_range_compression_line.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dynamic_range_compression_profile
        if self.dynamic_range_compression_profile:
            _dict['DynamicRangeCompressionProfile'] = self.dynamic_range_compression_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dynamic_range_compression_rf
        if self.dynamic_range_compression_rf:
            _dict['DynamicRangeCompressionRf'] = self.dynamic_range_compression_rf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lfe_filter
        if self.lfe_filter:
            _dict['LfeFilter'] = self.lfe_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata_control
        if self.metadata_control:
            _dict['MetadataControl'] = self.metadata_control.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Ac3Settings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Bitrate": obj.get("Bitrate"),
            "BitstreamMode": Ac3BitstreamMode.from_dict(obj["BitstreamMode"]) if obj.get("BitstreamMode") is not None else None,
            "CodingMode": Ac3CodingMode.from_dict(obj["CodingMode"]) if obj.get("CodingMode") is not None else None,
            "Dialnorm": obj.get("Dialnorm"),
            "DynamicRangeCompressionLine": Ac3DynamicRangeCompressionLine.from_dict(obj["DynamicRangeCompressionLine"]) if obj.get("DynamicRangeCompressionLine") is not None else None,
            "DynamicRangeCompressionProfile": Ac3DynamicRangeCompressionProfile.from_dict(obj["DynamicRangeCompressionProfile"]) if obj.get("DynamicRangeCompressionProfile") is not None else None,
            "DynamicRangeCompressionRf": Ac3DynamicRangeCompressionRf.from_dict(obj["DynamicRangeCompressionRf"]) if obj.get("DynamicRangeCompressionRf") is not None else None,
            "LfeFilter": Ac3LfeFilter.from_dict(obj["LfeFilter"]) if obj.get("LfeFilter") is not None else None,
            "MetadataControl": Ac3MetadataControl.from_dict(obj["MetadataControl"]) if obj.get("MetadataControl") is not None else None,
            "SampleRate": obj.get("SampleRate")
        })
        return _obj


