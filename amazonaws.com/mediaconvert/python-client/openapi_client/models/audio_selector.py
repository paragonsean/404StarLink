# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.audio_selector_hls_rendition_group_settings import AudioSelectorHlsRenditionGroupSettings
from openapi_client.models.audio_selector_remix_settings import AudioSelectorRemixSettings
from typing import Optional, Set
from typing_extensions import Self

class AudioSelector(BaseModel):
    """
    Use Audio selectors (AudioSelectors) to specify a track or set of tracks from the input that you will use in your outputs. You can use multiple Audio selectors per input.
    """ # noqa: E501
    audio_duration_correction: Optional[Any] = Field(default=None, alias="AudioDurationCorrection")
    custom_language_code: Optional[Any] = Field(default=None, alias="CustomLanguageCode")
    default_selection: Optional[Any] = Field(default=None, alias="DefaultSelection")
    external_audio_file_input: Optional[Any] = Field(default=None, alias="ExternalAudioFileInput")
    hls_rendition_group_settings: Optional[AudioSelectorHlsRenditionGroupSettings] = Field(default=None, alias="HlsRenditionGroupSettings")
    language_code: Optional[Any] = Field(default=None, alias="LanguageCode")
    offset: Optional[Any] = Field(default=None, alias="Offset")
    pids: Optional[Any] = Field(default=None, alias="Pids")
    program_selection: Optional[Any] = Field(default=None, alias="ProgramSelection")
    remix_settings: Optional[AudioSelectorRemixSettings] = Field(default=None, alias="RemixSettings")
    selector_type: Optional[Any] = Field(default=None, alias="SelectorType")
    tracks: Optional[Any] = Field(default=None, alias="Tracks")
    __properties: ClassVar[List[str]] = ["AudioDurationCorrection", "CustomLanguageCode", "DefaultSelection", "ExternalAudioFileInput", "HlsRenditionGroupSettings", "LanguageCode", "Offset", "Pids", "ProgramSelection", "RemixSettings", "SelectorType", "Tracks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AudioSelector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio_duration_correction
        if self.audio_duration_correction:
            _dict['AudioDurationCorrection'] = self.audio_duration_correction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_selection
        if self.default_selection:
            _dict['DefaultSelection'] = self.default_selection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hls_rendition_group_settings
        if self.hls_rendition_group_settings:
            _dict['HlsRenditionGroupSettings'] = self.hls_rendition_group_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_code
        if self.language_code:
            _dict['LanguageCode'] = self.language_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remix_settings
        if self.remix_settings:
            _dict['RemixSettings'] = self.remix_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selector_type
        if self.selector_type:
            _dict['SelectorType'] = self.selector_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AudioSelector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AudioDurationCorrection": AudioDurationCorrection.from_dict(obj["AudioDurationCorrection"]) if obj.get("AudioDurationCorrection") is not None else None,
            "CustomLanguageCode": obj.get("CustomLanguageCode"),
            "DefaultSelection": AudioDefaultSelection.from_dict(obj["DefaultSelection"]) if obj.get("DefaultSelection") is not None else None,
            "ExternalAudioFileInput": obj.get("ExternalAudioFileInput"),
            "HlsRenditionGroupSettings": AudioSelectorHlsRenditionGroupSettings.from_dict(obj["HlsRenditionGroupSettings"]) if obj.get("HlsRenditionGroupSettings") is not None else None,
            "LanguageCode": LanguageCode.from_dict(obj["LanguageCode"]) if obj.get("LanguageCode") is not None else None,
            "Offset": obj.get("Offset"),
            "Pids": obj.get("Pids"),
            "ProgramSelection": obj.get("ProgramSelection"),
            "RemixSettings": AudioSelectorRemixSettings.from_dict(obj["RemixSettings"]) if obj.get("RemixSettings") is not None else None,
            "SelectorType": AudioSelectorType.from_dict(obj["SelectorType"]) if obj.get("SelectorType") is not None else None,
            "Tracks": obj.get("Tracks")
        })
        return _obj


