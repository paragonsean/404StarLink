# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class M3u8Settings(BaseModel):
    """
    These settings relate to the MPEG-2 transport stream (MPEG2-TS) container for the MPEG2-TS segments in your HLS outputs.
    """ # noqa: E501
    audio_duration: Optional[Any] = Field(default=None, alias="AudioDuration")
    audio_frames_per_pes: Optional[Any] = Field(default=None, alias="AudioFramesPerPes")
    audio_pids: Optional[Any] = Field(default=None, alias="AudioPids")
    data_pts_control: Optional[Any] = Field(default=None, alias="DataPTSControl")
    max_pcr_interval: Optional[Any] = Field(default=None, alias="MaxPcrInterval")
    nielsen_id3: Optional[Any] = Field(default=None, alias="NielsenId3")
    pat_interval: Optional[Any] = Field(default=None, alias="PatInterval")
    pcr_control: Optional[Any] = Field(default=None, alias="PcrControl")
    pcr_pid: Optional[Any] = Field(default=None, alias="PcrPid")
    pmt_interval: Optional[Any] = Field(default=None, alias="PmtInterval")
    pmt_pid: Optional[Any] = Field(default=None, alias="PmtPid")
    private_metadata_pid: Optional[Any] = Field(default=None, alias="PrivateMetadataPid")
    program_number: Optional[Any] = Field(default=None, alias="ProgramNumber")
    scte35_pid: Optional[Any] = Field(default=None, alias="Scte35Pid")
    scte35_source: Optional[Any] = Field(default=None, alias="Scte35Source")
    timed_metadata: Optional[Any] = Field(default=None, alias="TimedMetadata")
    timed_metadata_pid: Optional[Any] = Field(default=None, alias="TimedMetadataPid")
    transport_stream_id: Optional[Any] = Field(default=None, alias="TransportStreamId")
    video_pid: Optional[Any] = Field(default=None, alias="VideoPid")
    __properties: ClassVar[List[str]] = ["AudioDuration", "AudioFramesPerPes", "AudioPids", "DataPTSControl", "MaxPcrInterval", "NielsenId3", "PatInterval", "PcrControl", "PcrPid", "PmtInterval", "PmtPid", "PrivateMetadataPid", "ProgramNumber", "Scte35Pid", "Scte35Source", "TimedMetadata", "TimedMetadataPid", "TransportStreamId", "VideoPid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of M3u8Settings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audio_duration
        if self.audio_duration:
            _dict['AudioDuration'] = self.audio_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_pts_control
        if self.data_pts_control:
            _dict['DataPTSControl'] = self.data_pts_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nielsen_id3
        if self.nielsen_id3:
            _dict['NielsenId3'] = self.nielsen_id3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pcr_control
        if self.pcr_control:
            _dict['PcrControl'] = self.pcr_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scte35_source
        if self.scte35_source:
            _dict['Scte35Source'] = self.scte35_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timed_metadata
        if self.timed_metadata:
            _dict['TimedMetadata'] = self.timed_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of M3u8Settings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AudioDuration": M3u8AudioDuration.from_dict(obj["AudioDuration"]) if obj.get("AudioDuration") is not None else None,
            "AudioFramesPerPes": obj.get("AudioFramesPerPes"),
            "AudioPids": obj.get("AudioPids"),
            "DataPTSControl": M3u8DataPtsControl.from_dict(obj["DataPTSControl"]) if obj.get("DataPTSControl") is not None else None,
            "MaxPcrInterval": obj.get("MaxPcrInterval"),
            "NielsenId3": M3u8NielsenId3.from_dict(obj["NielsenId3"]) if obj.get("NielsenId3") is not None else None,
            "PatInterval": obj.get("PatInterval"),
            "PcrControl": M3u8PcrControl.from_dict(obj["PcrControl"]) if obj.get("PcrControl") is not None else None,
            "PcrPid": obj.get("PcrPid"),
            "PmtInterval": obj.get("PmtInterval"),
            "PmtPid": obj.get("PmtPid"),
            "PrivateMetadataPid": obj.get("PrivateMetadataPid"),
            "ProgramNumber": obj.get("ProgramNumber"),
            "Scte35Pid": obj.get("Scte35Pid"),
            "Scte35Source": M3u8Scte35Source.from_dict(obj["Scte35Source"]) if obj.get("Scte35Source") is not None else None,
            "TimedMetadata": TimedMetadata.from_dict(obj["TimedMetadata"]) if obj.get("TimedMetadata") is not None else None,
            "TimedMetadataPid": obj.get("TimedMetadataPid"),
            "TransportStreamId": obj.get("TransportStreamId"),
            "VideoPid": obj.get("VideoPid")
        })
        return _obj


