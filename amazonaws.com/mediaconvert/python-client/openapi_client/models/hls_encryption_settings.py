# coding: utf-8

"""
    AWS Elemental MediaConvert

    AWS Elemental MediaConvert

    The version of the OpenAPI document: 2017-08-29
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cmaf_encryption_settings_static_key_provider import CmafEncryptionSettingsStaticKeyProvider
from openapi_client.models.dash_iso_encryption_settings_speke_key_provider import DashIsoEncryptionSettingsSpekeKeyProvider
from typing import Optional, Set
from typing_extensions import Self

class HlsEncryptionSettings(BaseModel):
    """
    Settings for HLS encryption
    """ # noqa: E501
    constant_initialization_vector: Optional[Any] = Field(default=None, alias="ConstantInitializationVector")
    encryption_method: Optional[Any] = Field(default=None, alias="EncryptionMethod")
    initialization_vector_in_manifest: Optional[Any] = Field(default=None, alias="InitializationVectorInManifest")
    offline_encrypted: Optional[Any] = Field(default=None, alias="OfflineEncrypted")
    speke_key_provider: Optional[DashIsoEncryptionSettingsSpekeKeyProvider] = Field(default=None, alias="SpekeKeyProvider")
    static_key_provider: Optional[CmafEncryptionSettingsStaticKeyProvider] = Field(default=None, alias="StaticKeyProvider")
    type: Optional[Any] = Field(default=None, alias="Type")
    __properties: ClassVar[List[str]] = ["ConstantInitializationVector", "EncryptionMethod", "InitializationVectorInManifest", "OfflineEncrypted", "SpekeKeyProvider", "StaticKeyProvider", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HlsEncryptionSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_method
        if self.encryption_method:
            _dict['EncryptionMethod'] = self.encryption_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initialization_vector_in_manifest
        if self.initialization_vector_in_manifest:
            _dict['InitializationVectorInManifest'] = self.initialization_vector_in_manifest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offline_encrypted
        if self.offline_encrypted:
            _dict['OfflineEncrypted'] = self.offline_encrypted.to_dict()
        # override the default output from pydantic by calling `to_dict()` of speke_key_provider
        if self.speke_key_provider:
            _dict['SpekeKeyProvider'] = self.speke_key_provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of static_key_provider
        if self.static_key_provider:
            _dict['StaticKeyProvider'] = self.static_key_provider.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['Type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HlsEncryptionSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ConstantInitializationVector": obj.get("ConstantInitializationVector"),
            "EncryptionMethod": HlsEncryptionType.from_dict(obj["EncryptionMethod"]) if obj.get("EncryptionMethod") is not None else None,
            "InitializationVectorInManifest": HlsInitializationVectorInManifest.from_dict(obj["InitializationVectorInManifest"]) if obj.get("InitializationVectorInManifest") is not None else None,
            "OfflineEncrypted": HlsOfflineEncrypted.from_dict(obj["OfflineEncrypted"]) if obj.get("OfflineEncrypted") is not None else None,
            "SpekeKeyProvider": DashIsoEncryptionSettingsSpekeKeyProvider.from_dict(obj["SpekeKeyProvider"]) if obj.get("SpekeKeyProvider") is not None else None,
            "StaticKeyProvider": CmafEncryptionSettingsStaticKeyProvider.from_dict(obj["StaticKeyProvider"]) if obj.get("StaticKeyProvider") is not None else None,
            "Type": HlsKeyProviderType.from_dict(obj["Type"]) if obj.get("Type") is not None else None
        })
        return _obj


