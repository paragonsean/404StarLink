/*
 * Amazon WorkMail
 * <p>WorkMail is a secure, managed business email and calendaring service with support for existing desktop and mobile email clients. You can access your email, contacts, and calendars using Microsoft Outlook, your browser, or other native iOS and Android email applications. You can integrate WorkMail with your existing corporate directory and control both the keys that encrypt your data and the location in which your data is stored.</p> <p>The WorkMail API is designed for the following scenarios:</p> <ul> <li> <p>Listing and describing organizations</p> </li> </ul> <ul> <li> <p>Managing users</p> </li> </ul> <ul> <li> <p>Managing groups</p> </li> </ul> <ul> <li> <p>Managing resources</p> </li> </ul> <p>All WorkMail API operations are Amazon-authenticated and certificate-signed. They not only require the use of the AWS SDK, but also allow for the exclusive use of AWS Identity and Access Management users and roles to help facilitate access, trust, and permission policies. By creating a role and allowing an IAM user to access the WorkMail site, the IAM user gains full administrative visibility into the entire WorkMail organization (or as set in the IAM policy). This includes, but is not limited to, the ability to create, update, and delete users, groups, and resources. This allows developers to perform the scenarios listed above, as well as give users the ability to grant access on a selective basis using the IAM model.</p>
 *
 * The version of the OpenAPI document: 2017-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssociateDelegateToResourceRequest;
import org.openapitools.client.model.AssociateMemberToGroupRequest;
import org.openapitools.client.model.AssumeImpersonationRoleRequest;
import org.openapitools.client.model.AssumeImpersonationRoleResponse;
import org.openapitools.client.model.CancelMailboxExportJobRequest;
import org.openapitools.client.model.CreateAliasRequest;
import org.openapitools.client.model.CreateAvailabilityConfigurationRequest;
import org.openapitools.client.model.CreateGroupRequest;
import org.openapitools.client.model.CreateGroupResponse;
import org.openapitools.client.model.CreateImpersonationRoleRequest;
import org.openapitools.client.model.CreateImpersonationRoleResponse;
import org.openapitools.client.model.CreateMobileDeviceAccessRuleRequest;
import org.openapitools.client.model.CreateMobileDeviceAccessRuleResponse;
import org.openapitools.client.model.CreateOrganizationRequest;
import org.openapitools.client.model.CreateOrganizationResponse;
import org.openapitools.client.model.CreateResourceRequest;
import org.openapitools.client.model.CreateResourceResponse;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.CreateUserResponse;
import org.openapitools.client.model.DeleteAccessControlRuleRequest;
import org.openapitools.client.model.DeleteAliasRequest;
import org.openapitools.client.model.DeleteAvailabilityConfigurationRequest;
import org.openapitools.client.model.DeleteEmailMonitoringConfigurationRequest;
import org.openapitools.client.model.DeleteGroupRequest;
import org.openapitools.client.model.DeleteImpersonationRoleRequest;
import org.openapitools.client.model.DeleteMailboxPermissionsRequest;
import org.openapitools.client.model.DeleteMobileDeviceAccessOverrideRequest;
import org.openapitools.client.model.DeleteMobileDeviceAccessRuleRequest;
import org.openapitools.client.model.DeleteOrganizationRequest;
import org.openapitools.client.model.DeleteOrganizationResponse;
import org.openapitools.client.model.DeleteResourceRequest;
import org.openapitools.client.model.DeleteRetentionPolicyRequest;
import org.openapitools.client.model.DeleteUserRequest;
import org.openapitools.client.model.DeregisterFromWorkMailRequest;
import org.openapitools.client.model.DeregisterMailDomainRequest;
import org.openapitools.client.model.DescribeEmailMonitoringConfigurationRequest;
import org.openapitools.client.model.DescribeEmailMonitoringConfigurationResponse;
import org.openapitools.client.model.DescribeGroupRequest;
import org.openapitools.client.model.DescribeGroupResponse;
import org.openapitools.client.model.DescribeInboundDmarcSettingsRequest;
import org.openapitools.client.model.DescribeInboundDmarcSettingsResponse;
import org.openapitools.client.model.DescribeMailboxExportJobRequest;
import org.openapitools.client.model.DescribeMailboxExportJobResponse;
import org.openapitools.client.model.DescribeOrganizationRequest;
import org.openapitools.client.model.DescribeOrganizationResponse;
import org.openapitools.client.model.DescribeResourceRequest;
import org.openapitools.client.model.DescribeResourceResponse;
import org.openapitools.client.model.DescribeUserRequest;
import org.openapitools.client.model.DescribeUserResponse;
import org.openapitools.client.model.DisassociateDelegateFromResourceRequest;
import org.openapitools.client.model.DisassociateMemberFromGroupRequest;
import org.openapitools.client.model.GetAccessControlEffectRequest;
import org.openapitools.client.model.GetAccessControlEffectResponse;
import org.openapitools.client.model.GetDefaultRetentionPolicyRequest;
import org.openapitools.client.model.GetDefaultRetentionPolicyResponse;
import org.openapitools.client.model.GetImpersonationRoleEffectRequest;
import org.openapitools.client.model.GetImpersonationRoleEffectResponse;
import org.openapitools.client.model.GetImpersonationRoleRequest;
import org.openapitools.client.model.GetImpersonationRoleResponse;
import org.openapitools.client.model.GetMailDomainRequest;
import org.openapitools.client.model.GetMailDomainResponse;
import org.openapitools.client.model.GetMailboxDetailsRequest;
import org.openapitools.client.model.GetMailboxDetailsResponse;
import org.openapitools.client.model.GetMobileDeviceAccessEffectRequest;
import org.openapitools.client.model.GetMobileDeviceAccessEffectResponse;
import org.openapitools.client.model.GetMobileDeviceAccessOverrideRequest;
import org.openapitools.client.model.GetMobileDeviceAccessOverrideResponse;
import org.openapitools.client.model.ListAccessControlRulesRequest;
import org.openapitools.client.model.ListAccessControlRulesResponse;
import org.openapitools.client.model.ListAliasesRequest;
import org.openapitools.client.model.ListAliasesResponse;
import org.openapitools.client.model.ListAvailabilityConfigurationsRequest;
import org.openapitools.client.model.ListAvailabilityConfigurationsResponse;
import org.openapitools.client.model.ListGroupMembersRequest;
import org.openapitools.client.model.ListGroupMembersResponse;
import org.openapitools.client.model.ListGroupsRequest;
import org.openapitools.client.model.ListGroupsResponse;
import org.openapitools.client.model.ListImpersonationRolesRequest;
import org.openapitools.client.model.ListImpersonationRolesResponse;
import org.openapitools.client.model.ListMailDomainsRequest;
import org.openapitools.client.model.ListMailDomainsResponse;
import org.openapitools.client.model.ListMailboxExportJobsRequest;
import org.openapitools.client.model.ListMailboxExportJobsResponse;
import org.openapitools.client.model.ListMailboxPermissionsRequest;
import org.openapitools.client.model.ListMailboxPermissionsResponse;
import org.openapitools.client.model.ListMobileDeviceAccessOverridesRequest;
import org.openapitools.client.model.ListMobileDeviceAccessOverridesResponse;
import org.openapitools.client.model.ListMobileDeviceAccessRulesRequest;
import org.openapitools.client.model.ListMobileDeviceAccessRulesResponse;
import org.openapitools.client.model.ListOrganizationsRequest;
import org.openapitools.client.model.ListOrganizationsResponse;
import org.openapitools.client.model.ListResourceDelegatesRequest;
import org.openapitools.client.model.ListResourceDelegatesResponse;
import org.openapitools.client.model.ListResourcesRequest;
import org.openapitools.client.model.ListResourcesResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListUsersRequest;
import org.openapitools.client.model.ListUsersResponse;
import org.openapitools.client.model.PutAccessControlRuleRequest;
import org.openapitools.client.model.PutEmailMonitoringConfigurationRequest;
import org.openapitools.client.model.PutInboundDmarcSettingsRequest;
import org.openapitools.client.model.PutMailboxPermissionsRequest;
import org.openapitools.client.model.PutMobileDeviceAccessOverrideRequest;
import org.openapitools.client.model.PutRetentionPolicyRequest;
import org.openapitools.client.model.RegisterMailDomainRequest;
import org.openapitools.client.model.RegisterToWorkMailRequest;
import org.openapitools.client.model.ResetPasswordRequest;
import org.openapitools.client.model.StartMailboxExportJobRequest;
import org.openapitools.client.model.StartMailboxExportJobResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TestAvailabilityConfigurationRequest;
import org.openapitools.client.model.TestAvailabilityConfigurationResponse;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateAvailabilityConfigurationRequest;
import org.openapitools.client.model.UpdateDefaultMailDomainRequest;
import org.openapitools.client.model.UpdateImpersonationRoleRequest;
import org.openapitools.client.model.UpdateMailboxQuotaRequest;
import org.openapitools.client.model.UpdateMobileDeviceAccessRuleRequest;
import org.openapitools.client.model.UpdatePrimaryEmailAddressRequest;
import org.openapitools.client.model.UpdateResourceRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Adds a member (user or group) to the resource&#39;s set of delegates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateDelegateToResourceTest() throws ApiException {
        String xAmzTarget = null;
        AssociateDelegateToResourceRequest associateDelegateToResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateDelegateToResource(xAmzTarget, associateDelegateToResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds a member (user or group) to the group&#39;s set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateMemberToGroupTest() throws ApiException {
        String xAmzTarget = null;
        AssociateMemberToGroupRequest associateMemberToGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateMemberToGroup(xAmzTarget, associateMemberToGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Assumes an impersonation role for the given WorkMail organization. This method returns an authentication token you can use to make impersonated calls.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assumeImpersonationRoleTest() throws ApiException {
        String xAmzTarget = null;
        AssumeImpersonationRoleRequest assumeImpersonationRoleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssumeImpersonationRoleResponse response = api.assumeImpersonationRole(xAmzTarget, assumeImpersonationRoleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Cancels a mailbox export job.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If the mailbox export job is near completion, it might not be possible to cancel it.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelMailboxExportJobTest() throws ApiException {
        String xAmzTarget = null;
        CancelMailboxExportJobRequest cancelMailboxExportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelMailboxExportJob(xAmzTarget, cancelMailboxExportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds an alias to the set of a given member (user or group) of WorkMail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAliasTest() throws ApiException {
        String xAmzTarget = null;
        CreateAliasRequest createAliasRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createAlias(xAmzTarget, createAliasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an &lt;code&gt;AvailabilityConfiguration&lt;/code&gt; for the given WorkMail organization and domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAvailabilityConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        CreateAvailabilityConfigurationRequest createAvailabilityConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createAvailabilityConfiguration(xAmzTarget, createAvailabilityConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a group that can be used in WorkMail by calling the &lt;a&gt;RegisterToWorkMail&lt;/a&gt; operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        String xAmzTarget = null;
        CreateGroupRequest createGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateGroupResponse response = api.createGroup(xAmzTarget, createGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an impersonation role for the given WorkMail organization.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Idempotency&lt;/i&gt; ensures that an API request completes no more than one time. With an idempotent request, if the original request completes successfully, any subsequent retries also complete successfully without performing any further actions.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImpersonationRoleTest() throws ApiException {
        String xAmzTarget = null;
        CreateImpersonationRoleRequest createImpersonationRoleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateImpersonationRoleResponse response = api.createImpersonationRole(xAmzTarget, createImpersonationRoleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new mobile device access rule for the specified WorkMail organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMobileDeviceAccessRuleTest() throws ApiException {
        String xAmzTarget = null;
        CreateMobileDeviceAccessRuleRequest createMobileDeviceAccessRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateMobileDeviceAccessRuleResponse response = api.createMobileDeviceAccessRule(xAmzTarget, createMobileDeviceAccessRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new WorkMail organization. Optionally, you can choose to associate an existing AWS Directory Service directory with your organization. If an AWS Directory Service directory ID is specified, the organization alias must match the directory alias. If you choose not to associate an existing directory with your organization, then we create a new WorkMail directory for you. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workmail/latest/adminguide/add_new_organization.html\&quot;&gt;Adding an organization&lt;/a&gt; in the &lt;i&gt;WorkMail Administrator Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can associate multiple email domains with an organization, then choose your default email domain from the WorkMail console. You can also associate a domain that is managed in an Amazon Route 53 public hosted zone. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workmail/latest/adminguide/add_domain.html\&quot;&gt;Adding a domain&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workmail/latest/adminguide/default_domain.html\&quot;&gt;Choosing the default domain&lt;/a&gt; in the &lt;i&gt;WorkMail Administrator Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Optionally, you can use a customer managed key from AWS Key Management Service (AWS KMS) to encrypt email for your organization. If you don&#39;t associate an AWS KMS key, WorkMail creates a default, AWS managed key for you.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrganizationTest() throws ApiException {
        String xAmzTarget = null;
        CreateOrganizationRequest createOrganizationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateOrganizationResponse response = api.createOrganization(xAmzTarget, createOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new WorkMail resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createResourceTest() throws ApiException {
        String xAmzTarget = null;
        CreateResourceRequest createResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateResourceResponse response = api.createResource(xAmzTarget, createResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a user who can be used in WorkMail by calling the &lt;a&gt;RegisterToWorkMail&lt;/a&gt; operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        String xAmzTarget = null;
        CreateUserRequest createUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateUserResponse response = api.createUser(xAmzTarget, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an access control rule for the specified WorkMail organization.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Deleting already deleted and non-existing rules does not produce an error. In those cases, the service sends back an HTTP 200 response with an empty HTTP body.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccessControlRuleTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAccessControlRuleRequest deleteAccessControlRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAccessControlRule(xAmzTarget, deleteAccessControlRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Remove one or more specified aliases from a set of aliases for a given user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAliasTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAliasRequest deleteAliasRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAlias(xAmzTarget, deleteAliasRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the &lt;code&gt;AvailabilityConfiguration&lt;/code&gt; for the given WorkMail organization and domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAvailabilityConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAvailabilityConfigurationRequest deleteAvailabilityConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAvailabilityConfiguration(xAmzTarget, deleteAvailabilityConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the email monitoring configuration for a specified organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmailMonitoringConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteEmailMonitoringConfigurationRequest deleteEmailMonitoringConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteEmailMonitoringConfiguration(xAmzTarget, deleteEmailMonitoringConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a group from WorkMail.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String xAmzTarget = null;
        DeleteGroupRequest deleteGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteGroup(xAmzTarget, deleteGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an impersonation role for the given WorkMail organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImpersonationRoleTest() throws ApiException {
        String xAmzTarget = null;
        DeleteImpersonationRoleRequest deleteImpersonationRoleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteImpersonationRole(xAmzTarget, deleteImpersonationRoleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes permissions granted to a member (user or group).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMailboxPermissionsTest() throws ApiException {
        String xAmzTarget = null;
        DeleteMailboxPermissionsRequest deleteMailboxPermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteMailboxPermissions(xAmzTarget, deleteMailboxPermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the mobile device access override for the given WorkMail organization, user, and device.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Deleting already deleted and non-existing overrides does not produce an error. In those cases, the service sends back an HTTP 200 response with an empty HTTP body.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMobileDeviceAccessOverrideTest() throws ApiException {
        String xAmzTarget = null;
        DeleteMobileDeviceAccessOverrideRequest deleteMobileDeviceAccessOverrideRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteMobileDeviceAccessOverride(xAmzTarget, deleteMobileDeviceAccessOverrideRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a mobile device access rule for the specified WorkMail organization.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Deleting already deleted and non-existing rules does not produce an error. In those cases, the service sends back an HTTP 200 response with an empty HTTP body.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMobileDeviceAccessRuleTest() throws ApiException {
        String xAmzTarget = null;
        DeleteMobileDeviceAccessRuleRequest deleteMobileDeviceAccessRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteMobileDeviceAccessRule(xAmzTarget, deleteMobileDeviceAccessRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an WorkMail organization and all underlying AWS resources managed by WorkMail as part of the organization. You can choose whether to delete the associated directory. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workmail/latest/adminguide/remove_organization.html\&quot;&gt;Removing an organization&lt;/a&gt; in the &lt;i&gt;WorkMail Administrator Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganizationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteOrganizationRequest deleteOrganizationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteOrganizationResponse response = api.deleteOrganization(xAmzTarget, deleteOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourceTest() throws ApiException {
        String xAmzTarget = null;
        DeleteResourceRequest deleteResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteResource(xAmzTarget, deleteResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified retention policy from the specified organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRetentionPolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteRetentionPolicyRequest deleteRetentionPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteRetentionPolicy(xAmzTarget, deleteRetentionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a user from WorkMail and all subsequent systems. Before you can delete a user, the user state must be &lt;code&gt;DISABLED&lt;/code&gt;. Use the &lt;a&gt;DescribeUser&lt;/a&gt; action to confirm the user state.&lt;/p&gt; &lt;p&gt;Deleting a user is permanent and cannot be undone. WorkMail archives user mailboxes for 30 days before they are permanently removed.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String xAmzTarget = null;
        DeleteUserRequest deleteUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteUser(xAmzTarget, deleteUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Mark a user, group, or resource as no longer used in WorkMail. This action disassociates the mailbox and schedules it for clean-up. WorkMail keeps mailboxes for 30 days before they are permanently removed. The functionality in the console is &lt;i&gt;Disable&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterFromWorkMailTest() throws ApiException {
        String xAmzTarget = null;
        DeregisterFromWorkMailRequest deregisterFromWorkMailRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deregisterFromWorkMail(xAmzTarget, deregisterFromWorkMailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a domain from WorkMail, stops email routing to WorkMail, and removes the authorization allowing WorkMail use. SES keeps the domain because other applications may use it. You must first remove any email address used by WorkMail entities before you remove the domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterMailDomainTest() throws ApiException {
        String xAmzTarget = null;
        DeregisterMailDomainRequest deregisterMailDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deregisterMailDomain(xAmzTarget, deregisterMailDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the current email monitoring configuration for a specified organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeEmailMonitoringConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DescribeEmailMonitoringConfigurationRequest describeEmailMonitoringConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeEmailMonitoringConfigurationResponse response = api.describeEmailMonitoringConfiguration(xAmzTarget, describeEmailMonitoringConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the data available for the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeGroupTest() throws ApiException {
        String xAmzTarget = null;
        DescribeGroupRequest describeGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeGroupResponse response = api.describeGroup(xAmzTarget, describeGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the settings in a DMARC policy for a specified organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeInboundDmarcSettingsTest() throws ApiException {
        String xAmzTarget = null;
        DescribeInboundDmarcSettingsRequest describeInboundDmarcSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeInboundDmarcSettingsResponse response = api.describeInboundDmarcSettings(xAmzTarget, describeInboundDmarcSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the current status of a mailbox export job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeMailboxExportJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeMailboxExportJobRequest describeMailboxExportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeMailboxExportJobResponse response = api.describeMailboxExportJob(xAmzTarget, describeMailboxExportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides more information regarding a given organization based on its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeOrganizationTest() throws ApiException {
        String xAmzTarget = null;
        DescribeOrganizationRequest describeOrganizationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeOrganizationResponse response = api.describeOrganization(xAmzTarget, describeOrganizationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the data available for the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeResourceTest() throws ApiException {
        String xAmzTarget = null;
        DescribeResourceRequest describeResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeResourceResponse response = api.describeResource(xAmzTarget, describeResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides information regarding the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeUserTest() throws ApiException {
        String xAmzTarget = null;
        DescribeUserRequest describeUserRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeUserResponse response = api.describeUser(xAmzTarget, describeUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a member from the resource&#39;s set of delegates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateDelegateFromResourceTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateDelegateFromResourceRequest disassociateDelegateFromResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateDelegateFromResource(xAmzTarget, disassociateDelegateFromResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes a member from a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateMemberFromGroupTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateMemberFromGroupRequest disassociateMemberFromGroupRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateMemberFromGroup(xAmzTarget, disassociateMemberFromGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the effects of an organization&#39;s access control rules as they apply to a specified IPv4 address, access protocol action, and user ID or impersonation role ID. You must provide either the user ID or impersonation role ID. Impersonation role ID can only be used with Action EWS.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccessControlEffectTest() throws ApiException {
        String xAmzTarget = null;
        GetAccessControlEffectRequest getAccessControlEffectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAccessControlEffectResponse response = api.getAccessControlEffect(xAmzTarget, getAccessControlEffectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the default retention policy details for the specified organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDefaultRetentionPolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetDefaultRetentionPolicyRequest getDefaultRetentionPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDefaultRetentionPolicyResponse response = api.getDefaultRetentionPolicy(xAmzTarget, getDefaultRetentionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the impersonation role details for the given WorkMail organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImpersonationRoleTest() throws ApiException {
        String xAmzTarget = null;
        GetImpersonationRoleRequest getImpersonationRoleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetImpersonationRoleResponse response = api.getImpersonationRole(xAmzTarget, getImpersonationRoleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Tests whether the given impersonation role can impersonate a target user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImpersonationRoleEffectTest() throws ApiException {
        String xAmzTarget = null;
        GetImpersonationRoleEffectRequest getImpersonationRoleEffectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetImpersonationRoleEffectResponse response = api.getImpersonationRoleEffect(xAmzTarget, getImpersonationRoleEffectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details for a mail domain, including domain records required to configure your domain with recommended security.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMailDomainTest() throws ApiException {
        String xAmzTarget = null;
        GetMailDomainRequest getMailDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMailDomainResponse response = api.getMailDomain(xAmzTarget, getMailDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Requests a user&#39;s mailbox details for a specified organization and user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMailboxDetailsTest() throws ApiException {
        String xAmzTarget = null;
        GetMailboxDetailsRequest getMailboxDetailsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMailboxDetailsResponse response = api.getMailboxDetails(xAmzTarget, getMailboxDetailsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Simulates the effect of the mobile device access rules for the given attributes of a sample access event. Use this method to test the effects of the current set of mobile device access rules for the WorkMail organization for a particular user&#39;s attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMobileDeviceAccessEffectTest() throws ApiException {
        String xAmzTarget = null;
        GetMobileDeviceAccessEffectRequest getMobileDeviceAccessEffectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMobileDeviceAccessEffectResponse response = api.getMobileDeviceAccessEffect(xAmzTarget, getMobileDeviceAccessEffectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the mobile device access override for the given WorkMail organization, user, and device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMobileDeviceAccessOverrideTest() throws ApiException {
        String xAmzTarget = null;
        GetMobileDeviceAccessOverrideRequest getMobileDeviceAccessOverrideRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMobileDeviceAccessOverrideResponse response = api.getMobileDeviceAccessOverride(xAmzTarget, getMobileDeviceAccessOverrideRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists the access control rules for the specified organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessControlRulesTest() throws ApiException {
        String xAmzTarget = null;
        ListAccessControlRulesRequest listAccessControlRulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListAccessControlRulesResponse response = api.listAccessControlRules(xAmzTarget, listAccessControlRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a paginated call to list the aliases associated with a given entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAliasesTest() throws ApiException {
        String xAmzTarget = null;
        ListAliasesRequest listAliasesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAliasesResponse response = api.listAliases(xAmzTarget, listAliasesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List all the &lt;code&gt;AvailabilityConfiguration&lt;/code&gt;&#39;s for the given WorkMail organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAvailabilityConfigurationsTest() throws ApiException {
        String xAmzTarget = null;
        ListAvailabilityConfigurationsRequest listAvailabilityConfigurationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAvailabilityConfigurationsResponse response = api.listAvailabilityConfigurations(xAmzTarget, listAvailabilityConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns an overview of the members of a group. Users and groups can be members of a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupMembersTest() throws ApiException {
        String xAmzTarget = null;
        ListGroupMembersRequest listGroupMembersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListGroupMembersResponse response = api.listGroupMembers(xAmzTarget, listGroupMembersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns summaries of the organization&#39;s groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupsTest() throws ApiException {
        String xAmzTarget = null;
        ListGroupsRequest listGroupsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListGroupsResponse response = api.listGroups(xAmzTarget, listGroupsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the impersonation roles for the given WorkMail organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImpersonationRolesTest() throws ApiException {
        String xAmzTarget = null;
        ListImpersonationRolesRequest listImpersonationRolesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListImpersonationRolesResponse response = api.listImpersonationRoles(xAmzTarget, listImpersonationRolesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the mail domains in a given WorkMail organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMailDomainsTest() throws ApiException {
        String xAmzTarget = null;
        ListMailDomainsRequest listMailDomainsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMailDomainsResponse response = api.listMailDomains(xAmzTarget, listMailDomainsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the mailbox export jobs started for the specified organization within the last seven days.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMailboxExportJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListMailboxExportJobsRequest listMailboxExportJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMailboxExportJobsResponse response = api.listMailboxExportJobs(xAmzTarget, listMailboxExportJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the mailbox permissions associated with a user, group, or resource mailbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMailboxPermissionsTest() throws ApiException {
        String xAmzTarget = null;
        ListMailboxPermissionsRequest listMailboxPermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMailboxPermissionsResponse response = api.listMailboxPermissions(xAmzTarget, listMailboxPermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all the mobile device access overrides for any given combination of WorkMail organization, user, or device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMobileDeviceAccessOverridesTest() throws ApiException {
        String xAmzTarget = null;
        ListMobileDeviceAccessOverridesRequest listMobileDeviceAccessOverridesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListMobileDeviceAccessOverridesResponse response = api.listMobileDeviceAccessOverrides(xAmzTarget, listMobileDeviceAccessOverridesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the mobile device access rules for the specified WorkMail organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMobileDeviceAccessRulesTest() throws ApiException {
        String xAmzTarget = null;
        ListMobileDeviceAccessRulesRequest listMobileDeviceAccessRulesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListMobileDeviceAccessRulesResponse response = api.listMobileDeviceAccessRules(xAmzTarget, listMobileDeviceAccessRulesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns summaries of the customer&#39;s organizations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrganizationsTest() throws ApiException {
        String xAmzTarget = null;
        ListOrganizationsRequest listOrganizationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListOrganizationsResponse response = api.listOrganizations(xAmzTarget, listOrganizationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the delegates associated with a resource. Users and groups can be resource delegates and answer requests on behalf of the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourceDelegatesTest() throws ApiException {
        String xAmzTarget = null;
        ListResourceDelegatesRequest listResourceDelegatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResourceDelegatesResponse response = api.listResourceDelegates(xAmzTarget, listResourceDelegatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns summaries of the organization&#39;s resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourcesTest() throws ApiException {
        String xAmzTarget = null;
        ListResourcesRequest listResourcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResourcesResponse response = api.listResources(xAmzTarget, listResourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the tags applied to an WorkMail organization resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(xAmzTarget, listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns summaries of the organization&#39;s users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        String xAmzTarget = null;
        ListUsersRequest listUsersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListUsersResponse response = api.listUsers(xAmzTarget, listUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Adds a new access control rule for the specified organization. The rule allows or denies access to the organization for the specified IPv4 addresses, access protocol actions, user IDs and impersonation IDs. Adding a new rule with the same name as an existing rule replaces the older rule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAccessControlRuleTest() throws ApiException {
        String xAmzTarget = null;
        PutAccessControlRuleRequest putAccessControlRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putAccessControlRule(xAmzTarget, putAccessControlRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates the email monitoring configuration for a specified organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEmailMonitoringConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        PutEmailMonitoringConfigurationRequest putEmailMonitoringConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putEmailMonitoringConfiguration(xAmzTarget, putEmailMonitoringConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables or disables a DMARC policy for a given organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putInboundDmarcSettingsTest() throws ApiException {
        String xAmzTarget = null;
        PutInboundDmarcSettingsRequest putInboundDmarcSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putInboundDmarcSettings(xAmzTarget, putInboundDmarcSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sets permissions for a user, group, or resource. This replaces any pre-existing permissions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putMailboxPermissionsTest() throws ApiException {
        String xAmzTarget = null;
        PutMailboxPermissionsRequest putMailboxPermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putMailboxPermissions(xAmzTarget, putMailboxPermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates a mobile device access override for the given WorkMail organization, user, and device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putMobileDeviceAccessOverrideTest() throws ApiException {
        String xAmzTarget = null;
        PutMobileDeviceAccessOverrideRequest putMobileDeviceAccessOverrideRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putMobileDeviceAccessOverride(xAmzTarget, putMobileDeviceAccessOverrideRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Puts a retention policy to the specified organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putRetentionPolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutRetentionPolicyRequest putRetentionPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putRetentionPolicy(xAmzTarget, putRetentionPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Registers a new domain in WorkMail and SES, and configures it for use by WorkMail. Emails received by SES for this domain are routed to the specified WorkMail organization, and WorkMail has permanent permission to use the specified domain for sending your users&#39; emails.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerMailDomainTest() throws ApiException {
        String xAmzTarget = null;
        RegisterMailDomainRequest registerMailDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.registerMailDomain(xAmzTarget, registerMailDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Registers an existing and disabled user, group, or resource for WorkMail use by associating a mailbox and calendaring capabilities. It performs no change if the user, group, or resource is enabled and fails if the user, group, or resource is deleted. This operation results in the accumulation of costs. For more information, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/workmail/pricing\&quot;&gt;Pricing&lt;/a&gt;. The equivalent console functionality for this operation is &lt;i&gt;Enable&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Users can either be created by calling the &lt;a&gt;CreateUser&lt;/a&gt; API operation or they can be synchronized from your directory. For more information, see &lt;a&gt;DeregisterFromWorkMail&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerToWorkMailTest() throws ApiException {
        String xAmzTarget = null;
        RegisterToWorkMailRequest registerToWorkMailRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.registerToWorkMail(xAmzTarget, registerToWorkMailRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows the administrator to reset the password for a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws ApiException {
        String xAmzTarget = null;
        ResetPasswordRequest resetPasswordRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.resetPassword(xAmzTarget, resetPasswordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a mailbox export job to export MIME-format email messages and calendar items from the specified mailbox to the specified Amazon Simple Storage Service (Amazon S3) bucket. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/workmail/latest/adminguide/mail-export.html\&quot;&gt;Exporting mailbox content&lt;/a&gt; in the &lt;i&gt;WorkMail Administrator Guide&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startMailboxExportJobTest() throws ApiException {
        String xAmzTarget = null;
        StartMailboxExportJobRequest startMailboxExportJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartMailboxExportJobResponse response = api.startMailboxExportJob(xAmzTarget, startMailboxExportJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Applies the specified tags to the specified WorkMailorganization resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Performs a test on an availability provider to ensure that access is allowed. For EWS, it verifies the provided credentials can be used to successfully log in. For Lambda, it verifies that the Lambda function can be invoked and that the resource access policy was configured to deny anonymous access. An anonymous invocation is one done without providing either a &lt;code&gt;SourceArn&lt;/code&gt; or &lt;code&gt;SourceAccount&lt;/code&gt; header.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The request must contain either one provider definition (&lt;code&gt;EwsProvider&lt;/code&gt; or &lt;code&gt;LambdaProvider&lt;/code&gt;) or the &lt;code&gt;DomainName&lt;/code&gt; parameter. If the &lt;code&gt;DomainName&lt;/code&gt; parameter is provided, the configuration stored under the &lt;code&gt;DomainName&lt;/code&gt; will be tested.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testAvailabilityConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        TestAvailabilityConfigurationRequest testAvailabilityConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestAvailabilityConfigurationResponse response = api.testAvailabilityConfiguration(xAmzTarget, testAvailabilityConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Untags the specified tags from the specified WorkMail organization resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing &lt;code&gt;AvailabilityConfiguration&lt;/code&gt; for the given WorkMail organization and domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAvailabilityConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        UpdateAvailabilityConfigurationRequest updateAvailabilityConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateAvailabilityConfiguration(xAmzTarget, updateAvailabilityConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the default mail domain for an organization. The default mail domain is used by the WorkMail AWS Console to suggest an email address when enabling a mail user. You can only have one default domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDefaultMailDomainTest() throws ApiException {
        String xAmzTarget = null;
        UpdateDefaultMailDomainRequest updateDefaultMailDomainRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDefaultMailDomain(xAmzTarget, updateDefaultMailDomainRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an impersonation role for the given WorkMail organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateImpersonationRoleTest() throws ApiException {
        String xAmzTarget = null;
        UpdateImpersonationRoleRequest updateImpersonationRoleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateImpersonationRole(xAmzTarget, updateImpersonationRoleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a user&#39;s current mailbox quota for a specified organization and user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMailboxQuotaTest() throws ApiException {
        String xAmzTarget = null;
        UpdateMailboxQuotaRequest updateMailboxQuotaRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateMailboxQuota(xAmzTarget, updateMailboxQuotaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a mobile device access rule for the specified WorkMail organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMobileDeviceAccessRuleTest() throws ApiException {
        String xAmzTarget = null;
        UpdateMobileDeviceAccessRuleRequest updateMobileDeviceAccessRuleRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateMobileDeviceAccessRule(xAmzTarget, updateMobileDeviceAccessRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the primary email for a user, group, or resource. The current email is moved into the list of aliases (or swapped between an existing alias and the current primary email), and the email provided in the input is promoted as the primary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePrimaryEmailAddressTest() throws ApiException {
        String xAmzTarget = null;
        UpdatePrimaryEmailAddressRequest updatePrimaryEmailAddressRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updatePrimaryEmailAddress(xAmzTarget, updatePrimaryEmailAddressRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates data for the resource. To have the latest information, it must be preceded by a &lt;a&gt;DescribeResource&lt;/a&gt; call. The dataset in the request should be the one expected when performing another &lt;code&gt;DescribeResource&lt;/code&gt; call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourceTest() throws ApiException {
        String xAmzTarget = null;
        UpdateResourceRequest updateResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateResource(xAmzTarget, updateResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
