/*
 * Amazon WorkMail
 * <p>WorkMail is a secure, managed business email and calendaring service with support for existing desktop and mobile email clients. You can access your email, contacts, and calendars using Microsoft Outlook, your browser, or other native iOS and Android email applications. You can integrate WorkMail with your existing corporate directory and control both the keys that encrypt your data and the location in which your data is stored.</p> <p>The WorkMail API is designed for the following scenarios:</p> <ul> <li> <p>Listing and describing organizations</p> </li> </ul> <ul> <li> <p>Managing users</p> </li> </ul> <ul> <li> <p>Managing groups</p> </li> </ul> <ul> <li> <p>Managing resources</p> </li> </ul> <p>All WorkMail API operations are Amazon-authenticated and certificate-signed. They not only require the use of the AWS SDK, but also allow for the exclusive use of AWS Identity and Access Management users and roles to help facilitate access, trust, and permission policies. By creating a role and allowing an IAM user to access the WorkMail site, the IAM user gains full administrative visibility into the entire WorkMail organization (or as set in the IAM policy). This includes, but is not limited to, the ability to create, update, and delete users, groups, and resources. This allows developers to perform the scenarios listed above, as well as give users the ability to grant access on a selective basis using the IAM model.</p>
 *
 * The version of the OpenAPI document: 2017-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeOrganizationResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:12:33.109694-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeOrganizationResponse {
  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "OrganizationId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private String organizationId;

  public static final String SERIALIZED_NAME_ALIAS = "Alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_DIRECTORY_ID = "DirectoryId";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_ID)
  private String directoryId;

  public static final String SERIALIZED_NAME_DIRECTORY_TYPE = "DirectoryType";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_TYPE)
  private String directoryType;

  public static final String SERIALIZED_NAME_DEFAULT_MAIL_DOMAIN = "DefaultMailDomain";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MAIL_DOMAIN)
  private String defaultMailDomain;

  public static final String SERIALIZED_NAME_COMPLETED_DATE = "CompletedDate";
  @SerializedName(SERIALIZED_NAME_COMPLETED_DATE)
  private OffsetDateTime completedDate;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_A_R_N = "ARN";
  @SerializedName(SERIALIZED_NAME_A_R_N)
  private String ARN;

  public DescribeOrganizationResponse() {
  }

  public DescribeOrganizationResponse organizationId(String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Get organizationId
   * @return organizationId
   */
  @javax.annotation.Nullable
  public String getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(String organizationId) {
    this.organizationId = organizationId;
  }


  public DescribeOrganizationResponse alias(String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * Get alias
   * @return alias
   */
  @javax.annotation.Nullable
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }


  public DescribeOrganizationResponse state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public DescribeOrganizationResponse directoryId(String directoryId) {
    this.directoryId = directoryId;
    return this;
  }

  /**
   * Get directoryId
   * @return directoryId
   */
  @javax.annotation.Nullable
  public String getDirectoryId() {
    return directoryId;
  }

  public void setDirectoryId(String directoryId) {
    this.directoryId = directoryId;
  }


  public DescribeOrganizationResponse directoryType(String directoryType) {
    this.directoryType = directoryType;
    return this;
  }

  /**
   * Get directoryType
   * @return directoryType
   */
  @javax.annotation.Nullable
  public String getDirectoryType() {
    return directoryType;
  }

  public void setDirectoryType(String directoryType) {
    this.directoryType = directoryType;
  }


  public DescribeOrganizationResponse defaultMailDomain(String defaultMailDomain) {
    this.defaultMailDomain = defaultMailDomain;
    return this;
  }

  /**
   * Get defaultMailDomain
   * @return defaultMailDomain
   */
  @javax.annotation.Nullable
  public String getDefaultMailDomain() {
    return defaultMailDomain;
  }

  public void setDefaultMailDomain(String defaultMailDomain) {
    this.defaultMailDomain = defaultMailDomain;
  }


  public DescribeOrganizationResponse completedDate(OffsetDateTime completedDate) {
    this.completedDate = completedDate;
    return this;
  }

  /**
   * Get completedDate
   * @return completedDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedDate() {
    return completedDate;
  }

  public void setCompletedDate(OffsetDateTime completedDate) {
    this.completedDate = completedDate;
  }


  public DescribeOrganizationResponse errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public DescribeOrganizationResponse ARN(String ARN) {
    this.ARN = ARN;
    return this;
  }

  /**
   * Get ARN
   * @return ARN
   */
  @javax.annotation.Nullable
  public String getARN() {
    return ARN;
  }

  public void setARN(String ARN) {
    this.ARN = ARN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeOrganizationResponse describeOrganizationResponse = (DescribeOrganizationResponse) o;
    return Objects.equals(this.organizationId, describeOrganizationResponse.organizationId) &&
        Objects.equals(this.alias, describeOrganizationResponse.alias) &&
        Objects.equals(this.state, describeOrganizationResponse.state) &&
        Objects.equals(this.directoryId, describeOrganizationResponse.directoryId) &&
        Objects.equals(this.directoryType, describeOrganizationResponse.directoryType) &&
        Objects.equals(this.defaultMailDomain, describeOrganizationResponse.defaultMailDomain) &&
        Objects.equals(this.completedDate, describeOrganizationResponse.completedDate) &&
        Objects.equals(this.errorMessage, describeOrganizationResponse.errorMessage) &&
        Objects.equals(this.ARN, describeOrganizationResponse.ARN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(organizationId, alias, state, directoryId, directoryType, defaultMailDomain, completedDate, errorMessage, ARN);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeOrganizationResponse {\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    directoryId: ").append(toIndentedString(directoryId)).append("\n");
    sb.append("    directoryType: ").append(toIndentedString(directoryType)).append("\n");
    sb.append("    defaultMailDomain: ").append(toIndentedString(defaultMailDomain)).append("\n");
    sb.append("    completedDate: ").append(toIndentedString(completedDate)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    ARN: ").append(toIndentedString(ARN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OrganizationId");
    openapiFields.add("Alias");
    openapiFields.add("State");
    openapiFields.add("DirectoryId");
    openapiFields.add("DirectoryType");
    openapiFields.add("DefaultMailDomain");
    openapiFields.add("CompletedDate");
    openapiFields.add("ErrorMessage");
    openapiFields.add("ARN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeOrganizationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeOrganizationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeOrganizationResponse is not found in the empty JSON string", DescribeOrganizationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeOrganizationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeOrganizationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `OrganizationId`
      if (jsonObj.get("OrganizationId") != null && !jsonObj.get("OrganizationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OrganizationId"));
      }
      // validate the optional field `Alias`
      if (jsonObj.get("Alias") != null && !jsonObj.get("Alias").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Alias"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `DirectoryId`
      if (jsonObj.get("DirectoryId") != null && !jsonObj.get("DirectoryId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DirectoryId"));
      }
      // validate the optional field `DirectoryType`
      if (jsonObj.get("DirectoryType") != null && !jsonObj.get("DirectoryType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DirectoryType"));
      }
      // validate the optional field `DefaultMailDomain`
      if (jsonObj.get("DefaultMailDomain") != null && !jsonObj.get("DefaultMailDomain").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultMailDomain"));
      }
      // validate the optional field `CompletedDate`
      if (jsonObj.get("CompletedDate") != null && !jsonObj.get("CompletedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CompletedDate"));
      }
      // validate the optional field `ErrorMessage`
      if (jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ErrorMessage"));
      }
      // validate the optional field `ARN`
      if (jsonObj.get("ARN") != null && !jsonObj.get("ARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ARN"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeOrganizationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeOrganizationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeOrganizationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeOrganizationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeOrganizationResponse>() {
           @Override
           public void write(JsonWriter out, DescribeOrganizationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeOrganizationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeOrganizationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeOrganizationResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeOrganizationResponse
   */
  public static DescribeOrganizationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeOrganizationResponse.class);
  }

  /**
   * Convert an instance of DescribeOrganizationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

