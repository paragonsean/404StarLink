/*
 * Amazon WorkMail
 * <p>WorkMail is a secure, managed business email and calendaring service with support for existing desktop and mobile email clients. You can access your email, contacts, and calendars using Microsoft Outlook, your browser, or other native iOS and Android email applications. You can integrate WorkMail with your existing corporate directory and control both the keys that encrypt your data and the location in which your data is stored.</p> <p>The WorkMail API is designed for the following scenarios:</p> <ul> <li> <p>Listing and describing organizations</p> </li> </ul> <ul> <li> <p>Managing users</p> </li> </ul> <ul> <li> <p>Managing groups</p> </li> </ul> <ul> <li> <p>Managing resources</p> </li> </ul> <p>All WorkMail API operations are Amazon-authenticated and certificate-signed. They not only require the use of the AWS SDK, but also allow for the exclusive use of AWS Identity and Access Management users and roles to help facilitate access, trust, and permission policies. By creating a role and allowing an IAM user to access the WorkMail site, the IAM user gains full administrative visibility into the entire WorkMail organization (or as set in the IAM policy). This includes, but is not limited to, the ability to create, update, and delete users, groups, and resources. This allows developers to perform the scenarios listed above, as well as give users the ability to grant access on a selective basis using the IAM model.</p>
 *
 * The version of the OpenAPI document: 2017-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DnsRecordVerificationStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetMailDomainResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:12:33.109694-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetMailDomainResponse {
  public static final String SERIALIZED_NAME_RECORDS = "Records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List records;

  public static final String SERIALIZED_NAME_IS_TEST_DOMAIN = "IsTestDomain";
  @SerializedName(SERIALIZED_NAME_IS_TEST_DOMAIN)
  private Boolean isTestDomain;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "IsDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_OWNERSHIP_VERIFICATION_STATUS = "OwnershipVerificationStatus";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_VERIFICATION_STATUS)
  private DnsRecordVerificationStatus ownershipVerificationStatus;

  public static final String SERIALIZED_NAME_DKIM_VERIFICATION_STATUS = "DkimVerificationStatus";
  @SerializedName(SERIALIZED_NAME_DKIM_VERIFICATION_STATUS)
  private DnsRecordVerificationStatus dkimVerificationStatus;

  public GetMailDomainResponse() {
  }

  public GetMailDomainResponse records(List records) {
    this.records = records;
    return this;
  }

  /**
   * Get records
   * @return records
   */
  @javax.annotation.Nullable
  public List getRecords() {
    return records;
  }

  public void setRecords(List records) {
    this.records = records;
  }


  public GetMailDomainResponse isTestDomain(Boolean isTestDomain) {
    this.isTestDomain = isTestDomain;
    return this;
  }

  /**
   * Get isTestDomain
   * @return isTestDomain
   */
  @javax.annotation.Nullable
  public Boolean getIsTestDomain() {
    return isTestDomain;
  }

  public void setIsTestDomain(Boolean isTestDomain) {
    this.isTestDomain = isTestDomain;
  }


  public GetMailDomainResponse isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Get isDefault
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public GetMailDomainResponse ownershipVerificationStatus(DnsRecordVerificationStatus ownershipVerificationStatus) {
    this.ownershipVerificationStatus = ownershipVerificationStatus;
    return this;
  }

  /**
   * Get ownershipVerificationStatus
   * @return ownershipVerificationStatus
   */
  @javax.annotation.Nullable
  public DnsRecordVerificationStatus getOwnershipVerificationStatus() {
    return ownershipVerificationStatus;
  }

  public void setOwnershipVerificationStatus(DnsRecordVerificationStatus ownershipVerificationStatus) {
    this.ownershipVerificationStatus = ownershipVerificationStatus;
  }


  public GetMailDomainResponse dkimVerificationStatus(DnsRecordVerificationStatus dkimVerificationStatus) {
    this.dkimVerificationStatus = dkimVerificationStatus;
    return this;
  }

  /**
   * Get dkimVerificationStatus
   * @return dkimVerificationStatus
   */
  @javax.annotation.Nullable
  public DnsRecordVerificationStatus getDkimVerificationStatus() {
    return dkimVerificationStatus;
  }

  public void setDkimVerificationStatus(DnsRecordVerificationStatus dkimVerificationStatus) {
    this.dkimVerificationStatus = dkimVerificationStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetMailDomainResponse getMailDomainResponse = (GetMailDomainResponse) o;
    return Objects.equals(this.records, getMailDomainResponse.records) &&
        Objects.equals(this.isTestDomain, getMailDomainResponse.isTestDomain) &&
        Objects.equals(this.isDefault, getMailDomainResponse.isDefault) &&
        Objects.equals(this.ownershipVerificationStatus, getMailDomainResponse.ownershipVerificationStatus) &&
        Objects.equals(this.dkimVerificationStatus, getMailDomainResponse.dkimVerificationStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(records, isTestDomain, isDefault, ownershipVerificationStatus, dkimVerificationStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetMailDomainResponse {\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    isTestDomain: ").append(toIndentedString(isTestDomain)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    ownershipVerificationStatus: ").append(toIndentedString(ownershipVerificationStatus)).append("\n");
    sb.append("    dkimVerificationStatus: ").append(toIndentedString(dkimVerificationStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Records");
    openapiFields.add("IsTestDomain");
    openapiFields.add("IsDefault");
    openapiFields.add("OwnershipVerificationStatus");
    openapiFields.add("DkimVerificationStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetMailDomainResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetMailDomainResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetMailDomainResponse is not found in the empty JSON string", GetMailDomainResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetMailDomainResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetMailDomainResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Records`
      if (jsonObj.get("Records") != null && !jsonObj.get("Records").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Records"));
      }
      // validate the optional field `IsTestDomain`
      if (jsonObj.get("IsTestDomain") != null && !jsonObj.get("IsTestDomain").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsTestDomain"));
      }
      // validate the optional field `IsDefault`
      if (jsonObj.get("IsDefault") != null && !jsonObj.get("IsDefault").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsDefault"));
      }
      // validate the optional field `OwnershipVerificationStatus`
      if (jsonObj.get("OwnershipVerificationStatus") != null && !jsonObj.get("OwnershipVerificationStatus").isJsonNull()) {
        DnsRecordVerificationStatus.validateJsonElement(jsonObj.get("OwnershipVerificationStatus"));
      }
      // validate the optional field `DkimVerificationStatus`
      if (jsonObj.get("DkimVerificationStatus") != null && !jsonObj.get("DkimVerificationStatus").isJsonNull()) {
        DnsRecordVerificationStatus.validateJsonElement(jsonObj.get("DkimVerificationStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetMailDomainResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetMailDomainResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetMailDomainResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetMailDomainResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetMailDomainResponse>() {
           @Override
           public void write(JsonWriter out, GetMailDomainResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetMailDomainResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetMailDomainResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetMailDomainResponse
   * @throws IOException if the JSON string is invalid with respect to GetMailDomainResponse
   */
  public static GetMailDomainResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetMailDomainResponse.class);
  }

  /**
   * Convert an instance of GetMailDomainResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

