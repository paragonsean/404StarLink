/*
 * Amazon WorkMail
 * <p>WorkMail is a secure, managed business email and calendaring service with support for existing desktop and mobile email clients. You can access your email, contacts, and calendars using Microsoft Outlook, your browser, or other native iOS and Android email applications. You can integrate WorkMail with your existing corporate directory and control both the keys that encrypt your data and the location in which your data is stored.</p> <p>The WorkMail API is designed for the following scenarios:</p> <ul> <li> <p>Listing and describing organizations</p> </li> </ul> <ul> <li> <p>Managing users</p> </li> </ul> <ul> <li> <p>Managing groups</p> </li> </ul> <ul> <li> <p>Managing resources</p> </li> </ul> <p>All WorkMail API operations are Amazon-authenticated and certificate-signed. They not only require the use of the AWS SDK, but also allow for the exclusive use of AWS Identity and Access Management users and roles to help facilitate access, trust, and permission policies. By creating a role and allowing an IAM user to access the WorkMail site, the IAM user gains full administrative visibility into the entire WorkMail organization (or as set in the IAM policy). This includes, but is not limited to, the ability to create, update, and delete users, groups, and resources. This allows developers to perform the scenarios listed above, as well as give users the ability to grant access on a selective basis using the IAM model.</p>
 *
 * The version of the OpenAPI document: 2017-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EntityState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeGroupResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:12:33.109694-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeGroupResponse {
  public static final String SERIALIZED_NAME_GROUP_ID = "GroupId";
  @SerializedName(SERIALIZED_NAME_GROUP_ID)
  private String groupId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private EntityState state;

  public static final String SERIALIZED_NAME_ENABLED_DATE = "EnabledDate";
  @SerializedName(SERIALIZED_NAME_ENABLED_DATE)
  private OffsetDateTime enabledDate;

  public static final String SERIALIZED_NAME_DISABLED_DATE = "DisabledDate";
  @SerializedName(SERIALIZED_NAME_DISABLED_DATE)
  private OffsetDateTime disabledDate;

  public DescribeGroupResponse() {
  }

  public DescribeGroupResponse groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

  /**
   * Get groupId
   * @return groupId
   */
  @javax.annotation.Nullable
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }


  public DescribeGroupResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DescribeGroupResponse email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public DescribeGroupResponse state(EntityState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public EntityState getState() {
    return state;
  }

  public void setState(EntityState state) {
    this.state = state;
  }


  public DescribeGroupResponse enabledDate(OffsetDateTime enabledDate) {
    this.enabledDate = enabledDate;
    return this;
  }

  /**
   * Get enabledDate
   * @return enabledDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEnabledDate() {
    return enabledDate;
  }

  public void setEnabledDate(OffsetDateTime enabledDate) {
    this.enabledDate = enabledDate;
  }


  public DescribeGroupResponse disabledDate(OffsetDateTime disabledDate) {
    this.disabledDate = disabledDate;
    return this;
  }

  /**
   * Get disabledDate
   * @return disabledDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDisabledDate() {
    return disabledDate;
  }

  public void setDisabledDate(OffsetDateTime disabledDate) {
    this.disabledDate = disabledDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeGroupResponse describeGroupResponse = (DescribeGroupResponse) o;
    return Objects.equals(this.groupId, describeGroupResponse.groupId) &&
        Objects.equals(this.name, describeGroupResponse.name) &&
        Objects.equals(this.email, describeGroupResponse.email) &&
        Objects.equals(this.state, describeGroupResponse.state) &&
        Objects.equals(this.enabledDate, describeGroupResponse.enabledDate) &&
        Objects.equals(this.disabledDate, describeGroupResponse.disabledDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupId, name, email, state, enabledDate, disabledDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeGroupResponse {\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    enabledDate: ").append(toIndentedString(enabledDate)).append("\n");
    sb.append("    disabledDate: ").append(toIndentedString(disabledDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GroupId");
    openapiFields.add("Name");
    openapiFields.add("Email");
    openapiFields.add("State");
    openapiFields.add("EnabledDate");
    openapiFields.add("DisabledDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeGroupResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeGroupResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeGroupResponse is not found in the empty JSON string", DescribeGroupResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeGroupResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeGroupResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `GroupId`
      if (jsonObj.get("GroupId") != null && !jsonObj.get("GroupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GroupId"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Email`
      if (jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Email"));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        EntityState.validateJsonElement(jsonObj.get("State"));
      }
      // validate the optional field `EnabledDate`
      if (jsonObj.get("EnabledDate") != null && !jsonObj.get("EnabledDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EnabledDate"));
      }
      // validate the optional field `DisabledDate`
      if (jsonObj.get("DisabledDate") != null && !jsonObj.get("DisabledDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DisabledDate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeGroupResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeGroupResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeGroupResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeGroupResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeGroupResponse>() {
           @Override
           public void write(JsonWriter out, DescribeGroupResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeGroupResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeGroupResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeGroupResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeGroupResponse
   */
  public static DescribeGroupResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeGroupResponse.class);
  }

  /**
   * Convert an instance of DescribeGroupResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

