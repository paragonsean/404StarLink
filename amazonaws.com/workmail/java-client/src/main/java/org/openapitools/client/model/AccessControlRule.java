/*
 * Amazon WorkMail
 * <p>WorkMail is a secure, managed business email and calendaring service with support for existing desktop and mobile email clients. You can access your email, contacts, and calendars using Microsoft Outlook, your browser, or other native iOS and Android email applications. You can integrate WorkMail with your existing corporate directory and control both the keys that encrypt your data and the location in which your data is stored.</p> <p>The WorkMail API is designed for the following scenarios:</p> <ul> <li> <p>Listing and describing organizations</p> </li> </ul> <ul> <li> <p>Managing users</p> </li> </ul> <ul> <li> <p>Managing groups</p> </li> </ul> <ul> <li> <p>Managing resources</p> </li> </ul> <p>All WorkMail API operations are Amazon-authenticated and certificate-signed. They not only require the use of the AWS SDK, but also allow for the exclusive use of AWS Identity and Access Management users and roles to help facilitate access, trust, and permission policies. By creating a role and allowing an IAM user to access the WorkMail site, the IAM user gains full administrative visibility into the entire WorkMail organization (or as set in the IAM policy). This includes, but is not limited to, the ability to create, update, and delete users, groups, and resources. This allows developers to perform the scenarios listed above, as well as give users the ability to grant access on a selective basis using the IAM model.</p>
 *
 * The version of the OpenAPI document: 2017-10-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccessControlRuleEffect;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A rule that controls access to an WorkMail organization.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:12:33.109694-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccessControlRule {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EFFECT = "Effect";
  @SerializedName(SERIALIZED_NAME_EFFECT)
  private AccessControlRuleEffect effect;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IP_RANGES = "IpRanges";
  @SerializedName(SERIALIZED_NAME_IP_RANGES)
  private List ipRanges;

  public static final String SERIALIZED_NAME_NOT_IP_RANGES = "NotIpRanges";
  @SerializedName(SERIALIZED_NAME_NOT_IP_RANGES)
  private List notIpRanges;

  public static final String SERIALIZED_NAME_ACTIONS = "Actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List actions;

  public static final String SERIALIZED_NAME_NOT_ACTIONS = "NotActions";
  @SerializedName(SERIALIZED_NAME_NOT_ACTIONS)
  private List notActions;

  public static final String SERIALIZED_NAME_USER_IDS = "UserIds";
  @SerializedName(SERIALIZED_NAME_USER_IDS)
  private List userIds;

  public static final String SERIALIZED_NAME_NOT_USER_IDS = "NotUserIds";
  @SerializedName(SERIALIZED_NAME_NOT_USER_IDS)
  private List notUserIds;

  public static final String SERIALIZED_NAME_DATE_CREATED = "DateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "DateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_IMPERSONATION_ROLE_IDS = "ImpersonationRoleIds";
  @SerializedName(SERIALIZED_NAME_IMPERSONATION_ROLE_IDS)
  private List impersonationRoleIds;

  public static final String SERIALIZED_NAME_NOT_IMPERSONATION_ROLE_IDS = "NotImpersonationRoleIds";
  @SerializedName(SERIALIZED_NAME_NOT_IMPERSONATION_ROLE_IDS)
  private List notImpersonationRoleIds;

  public AccessControlRule() {
  }

  public AccessControlRule name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccessControlRule effect(AccessControlRuleEffect effect) {
    this.effect = effect;
    return this;
  }

  /**
   * Get effect
   * @return effect
   */
  @javax.annotation.Nullable
  public AccessControlRuleEffect getEffect() {
    return effect;
  }

  public void setEffect(AccessControlRuleEffect effect) {
    this.effect = effect;
  }


  public AccessControlRule description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AccessControlRule ipRanges(List ipRanges) {
    this.ipRanges = ipRanges;
    return this;
  }

  /**
   * Get ipRanges
   * @return ipRanges
   */
  @javax.annotation.Nullable
  public List getIpRanges() {
    return ipRanges;
  }

  public void setIpRanges(List ipRanges) {
    this.ipRanges = ipRanges;
  }


  public AccessControlRule notIpRanges(List notIpRanges) {
    this.notIpRanges = notIpRanges;
    return this;
  }

  /**
   * Get notIpRanges
   * @return notIpRanges
   */
  @javax.annotation.Nullable
  public List getNotIpRanges() {
    return notIpRanges;
  }

  public void setNotIpRanges(List notIpRanges) {
    this.notIpRanges = notIpRanges;
  }


  public AccessControlRule actions(List actions) {
    this.actions = actions;
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List getActions() {
    return actions;
  }

  public void setActions(List actions) {
    this.actions = actions;
  }


  public AccessControlRule notActions(List notActions) {
    this.notActions = notActions;
    return this;
  }

  /**
   * Get notActions
   * @return notActions
   */
  @javax.annotation.Nullable
  public List getNotActions() {
    return notActions;
  }

  public void setNotActions(List notActions) {
    this.notActions = notActions;
  }


  public AccessControlRule userIds(List userIds) {
    this.userIds = userIds;
    return this;
  }

  /**
   * Get userIds
   * @return userIds
   */
  @javax.annotation.Nullable
  public List getUserIds() {
    return userIds;
  }

  public void setUserIds(List userIds) {
    this.userIds = userIds;
  }


  public AccessControlRule notUserIds(List notUserIds) {
    this.notUserIds = notUserIds;
    return this;
  }

  /**
   * Get notUserIds
   * @return notUserIds
   */
  @javax.annotation.Nullable
  public List getNotUserIds() {
    return notUserIds;
  }

  public void setNotUserIds(List notUserIds) {
    this.notUserIds = notUserIds;
  }


  public AccessControlRule dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Get dateCreated
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public AccessControlRule dateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
    return this;
  }

  /**
   * Get dateModified
   * @return dateModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }

  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public AccessControlRule impersonationRoleIds(List impersonationRoleIds) {
    this.impersonationRoleIds = impersonationRoleIds;
    return this;
  }

  /**
   * Get impersonationRoleIds
   * @return impersonationRoleIds
   */
  @javax.annotation.Nullable
  public List getImpersonationRoleIds() {
    return impersonationRoleIds;
  }

  public void setImpersonationRoleIds(List impersonationRoleIds) {
    this.impersonationRoleIds = impersonationRoleIds;
  }


  public AccessControlRule notImpersonationRoleIds(List notImpersonationRoleIds) {
    this.notImpersonationRoleIds = notImpersonationRoleIds;
    return this;
  }

  /**
   * Get notImpersonationRoleIds
   * @return notImpersonationRoleIds
   */
  @javax.annotation.Nullable
  public List getNotImpersonationRoleIds() {
    return notImpersonationRoleIds;
  }

  public void setNotImpersonationRoleIds(List notImpersonationRoleIds) {
    this.notImpersonationRoleIds = notImpersonationRoleIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessControlRule accessControlRule = (AccessControlRule) o;
    return Objects.equals(this.name, accessControlRule.name) &&
        Objects.equals(this.effect, accessControlRule.effect) &&
        Objects.equals(this.description, accessControlRule.description) &&
        Objects.equals(this.ipRanges, accessControlRule.ipRanges) &&
        Objects.equals(this.notIpRanges, accessControlRule.notIpRanges) &&
        Objects.equals(this.actions, accessControlRule.actions) &&
        Objects.equals(this.notActions, accessControlRule.notActions) &&
        Objects.equals(this.userIds, accessControlRule.userIds) &&
        Objects.equals(this.notUserIds, accessControlRule.notUserIds) &&
        Objects.equals(this.dateCreated, accessControlRule.dateCreated) &&
        Objects.equals(this.dateModified, accessControlRule.dateModified) &&
        Objects.equals(this.impersonationRoleIds, accessControlRule.impersonationRoleIds) &&
        Objects.equals(this.notImpersonationRoleIds, accessControlRule.notImpersonationRoleIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, effect, description, ipRanges, notIpRanges, actions, notActions, userIds, notUserIds, dateCreated, dateModified, impersonationRoleIds, notImpersonationRoleIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessControlRule {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    effect: ").append(toIndentedString(effect)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ipRanges: ").append(toIndentedString(ipRanges)).append("\n");
    sb.append("    notIpRanges: ").append(toIndentedString(notIpRanges)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    notActions: ").append(toIndentedString(notActions)).append("\n");
    sb.append("    userIds: ").append(toIndentedString(userIds)).append("\n");
    sb.append("    notUserIds: ").append(toIndentedString(notUserIds)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    impersonationRoleIds: ").append(toIndentedString(impersonationRoleIds)).append("\n");
    sb.append("    notImpersonationRoleIds: ").append(toIndentedString(notImpersonationRoleIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Effect");
    openapiFields.add("Description");
    openapiFields.add("IpRanges");
    openapiFields.add("NotIpRanges");
    openapiFields.add("Actions");
    openapiFields.add("NotActions");
    openapiFields.add("UserIds");
    openapiFields.add("NotUserIds");
    openapiFields.add("DateCreated");
    openapiFields.add("DateModified");
    openapiFields.add("ImpersonationRoleIds");
    openapiFields.add("NotImpersonationRoleIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessControlRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessControlRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessControlRule is not found in the empty JSON string", AccessControlRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessControlRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessControlRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Effect`
      if (jsonObj.get("Effect") != null && !jsonObj.get("Effect").isJsonNull()) {
        AccessControlRuleEffect.validateJsonElement(jsonObj.get("Effect"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `IpRanges`
      if (jsonObj.get("IpRanges") != null && !jsonObj.get("IpRanges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IpRanges"));
      }
      // validate the optional field `NotIpRanges`
      if (jsonObj.get("NotIpRanges") != null && !jsonObj.get("NotIpRanges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NotIpRanges"));
      }
      // validate the optional field `Actions`
      if (jsonObj.get("Actions") != null && !jsonObj.get("Actions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Actions"));
      }
      // validate the optional field `NotActions`
      if (jsonObj.get("NotActions") != null && !jsonObj.get("NotActions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NotActions"));
      }
      // validate the optional field `UserIds`
      if (jsonObj.get("UserIds") != null && !jsonObj.get("UserIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("UserIds"));
      }
      // validate the optional field `NotUserIds`
      if (jsonObj.get("NotUserIds") != null && !jsonObj.get("NotUserIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NotUserIds"));
      }
      // validate the optional field `DateCreated`
      if (jsonObj.get("DateCreated") != null && !jsonObj.get("DateCreated").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DateCreated"));
      }
      // validate the optional field `DateModified`
      if (jsonObj.get("DateModified") != null && !jsonObj.get("DateModified").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DateModified"));
      }
      // validate the optional field `ImpersonationRoleIds`
      if (jsonObj.get("ImpersonationRoleIds") != null && !jsonObj.get("ImpersonationRoleIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ImpersonationRoleIds"));
      }
      // validate the optional field `NotImpersonationRoleIds`
      if (jsonObj.get("NotImpersonationRoleIds") != null && !jsonObj.get("NotImpersonationRoleIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("NotImpersonationRoleIds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessControlRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessControlRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessControlRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessControlRule.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessControlRule>() {
           @Override
           public void write(JsonWriter out, AccessControlRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessControlRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessControlRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessControlRule
   * @throws IOException if the JSON string is invalid with respect to AccessControlRule
   */
  public static AccessControlRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessControlRule.class);
  }

  /**
   * Convert an instance of AccessControlRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

