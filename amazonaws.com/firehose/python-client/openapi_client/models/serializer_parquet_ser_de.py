# coding: utf-8

"""
    Amazon Kinesis Firehose

    <fullname>Amazon Kinesis Data Firehose API Reference</fullname> <p>Amazon Kinesis Data Firehose is a fully managed service that delivers real-time streaming data to destinations such as Amazon Simple Storage Service (Amazon S3), Amazon OpenSearch Service, Amazon Redshift, Splunk, and various other supportd destinations.</p>

    The version of the OpenAPI document: 2015-08-04
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bool import bool
from openapi_client.models.int import int
from openapi_client.models.parquet_compression import ParquetCompression
from openapi_client.models.parquet_writer_version import ParquetWriterVersion
from typing import Optional, Set
from typing_extensions import Self

class SerializerParquetSerDe(BaseModel):
    """
    SerializerParquetSerDe
    """ # noqa: E501
    block_size_bytes: Optional[Any] = Field(default=None, alias="BlockSizeBytes")
    page_size_bytes: Optional[Any] = Field(default=None, alias="PageSizeBytes")
    compression: Optional[Any] = Field(default=None, alias="Compression")
    enable_dictionary_compression: Optional[Any] = Field(default=None, alias="EnableDictionaryCompression")
    max_padding_bytes: Optional[Any] = Field(default=None, alias="MaxPaddingBytes")
    writer_version: Optional[Any] = Field(default=None, alias="WriterVersion")
    __properties: ClassVar[List[str]] = ["BlockSizeBytes", "PageSizeBytes", "Compression", "EnableDictionaryCompression", "MaxPaddingBytes", "WriterVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SerializerParquetSerDe from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compression
        if self.compression:
            _dict['Compression'] = self.compression.to_dict()
        # override the default output from pydantic by calling `to_dict()` of writer_version
        if self.writer_version:
            _dict['WriterVersion'] = self.writer_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SerializerParquetSerDe from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BlockSizeBytes": obj.get("BlockSizeBytes"),
            "PageSizeBytes": obj.get("PageSizeBytes"),
            "Compression": ParquetCompression.from_dict(obj["Compression"]) if obj.get("Compression") is not None else None,
            "EnableDictionaryCompression": obj.get("EnableDictionaryCompression"),
            "MaxPaddingBytes": obj.get("MaxPaddingBytes"),
            "WriterVersion": ParquetWriterVersion.from_dict(obj["WriterVersion"]) if obj.get("WriterVersion") is not None else None
        })
        return _obj


