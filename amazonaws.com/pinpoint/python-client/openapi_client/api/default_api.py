# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.create_app_request import CreateAppRequest
from openapi_client.models.create_app_response import CreateAppResponse
from openapi_client.models.create_campaign_request import CreateCampaignRequest
from openapi_client.models.create_campaign_response import CreateCampaignResponse
from openapi_client.models.create_email_template_response import CreateEmailTemplateResponse
from openapi_client.models.create_export_job_request import CreateExportJobRequest
from openapi_client.models.create_export_job_response import CreateExportJobResponse
from openapi_client.models.create_import_job_request import CreateImportJobRequest
from openapi_client.models.create_import_job_response import CreateImportJobResponse
from openapi_client.models.create_in_app_template_response import CreateInAppTemplateResponse
from openapi_client.models.create_journey_request import CreateJourneyRequest
from openapi_client.models.create_journey_response import CreateJourneyResponse
from openapi_client.models.create_push_template_response import CreatePushTemplateResponse
from openapi_client.models.create_recommender_configuration_request import CreateRecommenderConfigurationRequest
from openapi_client.models.create_recommender_configuration_response import CreateRecommenderConfigurationResponse
from openapi_client.models.create_segment_request import CreateSegmentRequest
from openapi_client.models.create_segment_response import CreateSegmentResponse
from openapi_client.models.create_sms_template_response import CreateSmsTemplateResponse
from openapi_client.models.create_voice_template_response import CreateVoiceTemplateResponse
from openapi_client.models.delete_adm_channel_response import DeleteAdmChannelResponse
from openapi_client.models.delete_apns_channel_response import DeleteApnsChannelResponse
from openapi_client.models.delete_apns_sandbox_channel_response import DeleteApnsSandboxChannelResponse
from openapi_client.models.delete_apns_voip_channel_response import DeleteApnsVoipChannelResponse
from openapi_client.models.delete_apns_voip_sandbox_channel_response import DeleteApnsVoipSandboxChannelResponse
from openapi_client.models.delete_app_response import DeleteAppResponse
from openapi_client.models.delete_baidu_channel_response import DeleteBaiduChannelResponse
from openapi_client.models.delete_campaign_response import DeleteCampaignResponse
from openapi_client.models.delete_email_channel_response import DeleteEmailChannelResponse
from openapi_client.models.delete_email_template_response import DeleteEmailTemplateResponse
from openapi_client.models.delete_endpoint_response import DeleteEndpointResponse
from openapi_client.models.delete_event_stream_response import DeleteEventStreamResponse
from openapi_client.models.delete_gcm_channel_response import DeleteGcmChannelResponse
from openapi_client.models.delete_in_app_template_response import DeleteInAppTemplateResponse
from openapi_client.models.delete_journey_response import DeleteJourneyResponse
from openapi_client.models.delete_push_template_response import DeletePushTemplateResponse
from openapi_client.models.delete_recommender_configuration_response import DeleteRecommenderConfigurationResponse
from openapi_client.models.delete_segment_response import DeleteSegmentResponse
from openapi_client.models.delete_sms_channel_response import DeleteSmsChannelResponse
from openapi_client.models.delete_sms_template_response import DeleteSmsTemplateResponse
from openapi_client.models.delete_user_endpoints_response import DeleteUserEndpointsResponse
from openapi_client.models.delete_voice_channel_response import DeleteVoiceChannelResponse
from openapi_client.models.delete_voice_template_response import DeleteVoiceTemplateResponse
from openapi_client.models.get_adm_channel_response import GetAdmChannelResponse
from openapi_client.models.get_apns_channel_response import GetApnsChannelResponse
from openapi_client.models.get_apns_sandbox_channel_response import GetApnsSandboxChannelResponse
from openapi_client.models.get_apns_voip_channel_response import GetApnsVoipChannelResponse
from openapi_client.models.get_apns_voip_sandbox_channel_response import GetApnsVoipSandboxChannelResponse
from openapi_client.models.get_app_response import GetAppResponse
from openapi_client.models.get_application_date_range_kpi_response import GetApplicationDateRangeKpiResponse
from openapi_client.models.get_application_settings_response import GetApplicationSettingsResponse
from openapi_client.models.get_apps_response import GetAppsResponse
from openapi_client.models.get_baidu_channel_response import GetBaiduChannelResponse
from openapi_client.models.get_campaign_activities_response import GetCampaignActivitiesResponse
from openapi_client.models.get_campaign_date_range_kpi_response import GetCampaignDateRangeKpiResponse
from openapi_client.models.get_campaign_response import GetCampaignResponse
from openapi_client.models.get_campaign_version_response import GetCampaignVersionResponse
from openapi_client.models.get_campaign_versions_response import GetCampaignVersionsResponse
from openapi_client.models.get_campaigns_response import GetCampaignsResponse
from openapi_client.models.get_channels_response import GetChannelsResponse
from openapi_client.models.get_email_channel_response import GetEmailChannelResponse
from openapi_client.models.get_email_template_response import GetEmailTemplateResponse
from openapi_client.models.get_endpoint_response import GetEndpointResponse
from openapi_client.models.get_event_stream_response import GetEventStreamResponse
from openapi_client.models.get_export_job_response import GetExportJobResponse
from openapi_client.models.get_export_jobs_response import GetExportJobsResponse
from openapi_client.models.get_gcm_channel_response import GetGcmChannelResponse
from openapi_client.models.get_import_job_response import GetImportJobResponse
from openapi_client.models.get_import_jobs_response import GetImportJobsResponse
from openapi_client.models.get_in_app_messages_response import GetInAppMessagesResponse
from openapi_client.models.get_in_app_template_response import GetInAppTemplateResponse
from openapi_client.models.get_journey_date_range_kpi_response import GetJourneyDateRangeKpiResponse
from openapi_client.models.get_journey_execution_activity_metrics_response import GetJourneyExecutionActivityMetricsResponse
from openapi_client.models.get_journey_execution_metrics_response import GetJourneyExecutionMetricsResponse
from openapi_client.models.get_journey_response import GetJourneyResponse
from openapi_client.models.get_push_template_response import GetPushTemplateResponse
from openapi_client.models.get_recommender_configuration_response import GetRecommenderConfigurationResponse
from openapi_client.models.get_recommender_configurations_response import GetRecommenderConfigurationsResponse
from openapi_client.models.get_segment_export_jobs_response import GetSegmentExportJobsResponse
from openapi_client.models.get_segment_import_jobs_response import GetSegmentImportJobsResponse
from openapi_client.models.get_segment_response import GetSegmentResponse
from openapi_client.models.get_segment_version_response import GetSegmentVersionResponse
from openapi_client.models.get_segment_versions_response import GetSegmentVersionsResponse
from openapi_client.models.get_segments_response import GetSegmentsResponse
from openapi_client.models.get_sms_channel_response import GetSmsChannelResponse
from openapi_client.models.get_sms_template_response import GetSmsTemplateResponse
from openapi_client.models.get_user_endpoints_response import GetUserEndpointsResponse
from openapi_client.models.get_voice_channel_response import GetVoiceChannelResponse
from openapi_client.models.get_voice_template_response import GetVoiceTemplateResponse
from openapi_client.models.list_journeys_response import ListJourneysResponse
from openapi_client.models.list_tags_for_resource_response import ListTagsForResourceResponse
from openapi_client.models.list_template_versions_response import ListTemplateVersionsResponse
from openapi_client.models.list_templates_response import ListTemplatesResponse
from openapi_client.models.phone_number_validate_request import PhoneNumberValidateRequest
from openapi_client.models.phone_number_validate_response import PhoneNumberValidateResponse
from openapi_client.models.put_event_stream_request import PutEventStreamRequest
from openapi_client.models.put_event_stream_response import PutEventStreamResponse
from openapi_client.models.put_events_request import PutEventsRequest
from openapi_client.models.put_events_response import PutEventsResponse
from openapi_client.models.remove_attributes_request import RemoveAttributesRequest
from openapi_client.models.remove_attributes_response import RemoveAttributesResponse
from openapi_client.models.send_messages_request import SendMessagesRequest
from openapi_client.models.send_messages_response import SendMessagesResponse
from openapi_client.models.send_otp_message_request import SendOTPMessageRequest
from openapi_client.models.send_otp_message_response import SendOTPMessageResponse
from openapi_client.models.send_users_messages_request import SendUsersMessagesRequest
from openapi_client.models.send_users_messages_response import SendUsersMessagesResponse
from openapi_client.models.tag_resource_request import TagResourceRequest
from openapi_client.models.update_adm_channel_request import UpdateAdmChannelRequest
from openapi_client.models.update_adm_channel_response import UpdateAdmChannelResponse
from openapi_client.models.update_apns_channel_request import UpdateApnsChannelRequest
from openapi_client.models.update_apns_channel_response import UpdateApnsChannelResponse
from openapi_client.models.update_apns_sandbox_channel_request import UpdateApnsSandboxChannelRequest
from openapi_client.models.update_apns_sandbox_channel_response import UpdateApnsSandboxChannelResponse
from openapi_client.models.update_apns_voip_channel_request import UpdateApnsVoipChannelRequest
from openapi_client.models.update_apns_voip_channel_response import UpdateApnsVoipChannelResponse
from openapi_client.models.update_apns_voip_sandbox_channel_request import UpdateApnsVoipSandboxChannelRequest
from openapi_client.models.update_apns_voip_sandbox_channel_response import UpdateApnsVoipSandboxChannelResponse
from openapi_client.models.update_application_settings_request import UpdateApplicationSettingsRequest
from openapi_client.models.update_application_settings_response import UpdateApplicationSettingsResponse
from openapi_client.models.update_baidu_channel_request import UpdateBaiduChannelRequest
from openapi_client.models.update_baidu_channel_response import UpdateBaiduChannelResponse
from openapi_client.models.update_campaign_response import UpdateCampaignResponse
from openapi_client.models.update_email_channel_request import UpdateEmailChannelRequest
from openapi_client.models.update_email_channel_response import UpdateEmailChannelResponse
from openapi_client.models.update_email_template_request import UpdateEmailTemplateRequest
from openapi_client.models.update_email_template_response import UpdateEmailTemplateResponse
from openapi_client.models.update_endpoint_request import UpdateEndpointRequest
from openapi_client.models.update_endpoint_response import UpdateEndpointResponse
from openapi_client.models.update_endpoints_batch_request import UpdateEndpointsBatchRequest
from openapi_client.models.update_endpoints_batch_response import UpdateEndpointsBatchResponse
from openapi_client.models.update_gcm_channel_request import UpdateGcmChannelRequest
from openapi_client.models.update_gcm_channel_response import UpdateGcmChannelResponse
from openapi_client.models.update_in_app_template_request import UpdateInAppTemplateRequest
from openapi_client.models.update_in_app_template_response import UpdateInAppTemplateResponse
from openapi_client.models.update_journey_response import UpdateJourneyResponse
from openapi_client.models.update_journey_state_request import UpdateJourneyStateRequest
from openapi_client.models.update_journey_state_response import UpdateJourneyStateResponse
from openapi_client.models.update_push_template_request import UpdatePushTemplateRequest
from openapi_client.models.update_push_template_response import UpdatePushTemplateResponse
from openapi_client.models.update_recommender_configuration_request import UpdateRecommenderConfigurationRequest
from openapi_client.models.update_recommender_configuration_response import UpdateRecommenderConfigurationResponse
from openapi_client.models.update_segment_response import UpdateSegmentResponse
from openapi_client.models.update_sms_channel_request import UpdateSmsChannelRequest
from openapi_client.models.update_sms_channel_response import UpdateSmsChannelResponse
from openapi_client.models.update_sms_template_request import UpdateSmsTemplateRequest
from openapi_client.models.update_sms_template_response import UpdateSmsTemplateResponse
from openapi_client.models.update_template_active_version_request import UpdateTemplateActiveVersionRequest
from openapi_client.models.update_template_active_version_response import UpdateTemplateActiveVersionResponse
from openapi_client.models.update_voice_channel_request import UpdateVoiceChannelRequest
from openapi_client.models.update_voice_channel_response import UpdateVoiceChannelResponse
from openapi_client.models.update_voice_template_request import UpdateVoiceTemplateRequest
from openapi_client.models.update_voice_template_response import UpdateVoiceTemplateResponse
from openapi_client.models.verify_otp_message_request import VerifyOTPMessageRequest
from openapi_client.models.verify_otp_message_response import VerifyOTPMessageResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class DefaultApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_app(
        self,
        create_app_request: CreateAppRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateAppResponse:
        """create_app

         <p>Creates an application.</p>

        :param create_app_request: (required)
        :type create_app_request: CreateAppRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_app_serialize(
            create_app_request=create_app_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateAppResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_app_with_http_info(
        self,
        create_app_request: CreateAppRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateAppResponse]:
        """create_app

         <p>Creates an application.</p>

        :param create_app_request: (required)
        :type create_app_request: CreateAppRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_app_serialize(
            create_app_request=create_app_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateAppResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_app_without_preload_content(
        self,
        create_app_request: CreateAppRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_app

         <p>Creates an application.</p>

        :param create_app_request: (required)
        :type create_app_request: CreateAppRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_app_serialize(
            create_app_request=create_app_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateAppResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_app_serialize(
        self,
        create_app_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_app_request is not None:
            _body_params = create_app_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/apps',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_campaign(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_campaign_request: CreateCampaignRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateCampaignResponse:
        """create_campaign

        Creates a new campaign for an application or updates the settings of an existing campaign for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_campaign_request: (required)
        :type create_campaign_request: CreateCampaignRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_campaign_serialize(
            application_id=application_id,
            create_campaign_request=create_campaign_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateCampaignResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_campaign_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_campaign_request: CreateCampaignRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateCampaignResponse]:
        """create_campaign

        Creates a new campaign for an application or updates the settings of an existing campaign for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_campaign_request: (required)
        :type create_campaign_request: CreateCampaignRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_campaign_serialize(
            application_id=application_id,
            create_campaign_request=create_campaign_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateCampaignResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_campaign_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_campaign_request: CreateCampaignRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_campaign

        Creates a new campaign for an application or updates the settings of an existing campaign for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_campaign_request: (required)
        :type create_campaign_request: CreateCampaignRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_campaign_serialize(
            application_id=application_id,
            create_campaign_request=create_campaign_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateCampaignResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_campaign_serialize(
        self,
        application_id,
        create_campaign_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_campaign_request is not None:
            _body_params = create_campaign_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/apps/{application-id}/campaigns',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_email_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_email_template_request: UpdateEmailTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateEmailTemplateResponse:
        """create_email_template

        Creates a message template for messages that are sent through the email channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_email_template_request: (required)
        :type update_email_template_request: UpdateEmailTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_email_template_serialize(
            template_name=template_name,
            update_email_template_request=update_email_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateEmailTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_email_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_email_template_request: UpdateEmailTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateEmailTemplateResponse]:
        """create_email_template

        Creates a message template for messages that are sent through the email channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_email_template_request: (required)
        :type update_email_template_request: UpdateEmailTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_email_template_serialize(
            template_name=template_name,
            update_email_template_request=update_email_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateEmailTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_email_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_email_template_request: UpdateEmailTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_email_template

        Creates a message template for messages that are sent through the email channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_email_template_request: (required)
        :type update_email_template_request: UpdateEmailTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_email_template_serialize(
            template_name=template_name,
            update_email_template_request=update_email_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateEmailTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_email_template_serialize(
        self,
        template_name,
        update_email_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_email_template_request is not None:
            _body_params = update_email_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/templates/{template-name}/email',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_export_job(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_export_job_request: CreateExportJobRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateExportJobResponse:
        """create_export_job

        Creates an export job for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_export_job_request: (required)
        :type create_export_job_request: CreateExportJobRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_export_job_serialize(
            application_id=application_id,
            create_export_job_request=create_export_job_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "CreateExportJobResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_export_job_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_export_job_request: CreateExportJobRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateExportJobResponse]:
        """create_export_job

        Creates an export job for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_export_job_request: (required)
        :type create_export_job_request: CreateExportJobRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_export_job_serialize(
            application_id=application_id,
            create_export_job_request=create_export_job_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "CreateExportJobResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_export_job_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_export_job_request: CreateExportJobRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_export_job

        Creates an export job for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_export_job_request: (required)
        :type create_export_job_request: CreateExportJobRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_export_job_serialize(
            application_id=application_id,
            create_export_job_request=create_export_job_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "CreateExportJobResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_export_job_serialize(
        self,
        application_id,
        create_export_job_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_export_job_request is not None:
            _body_params = create_export_job_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/apps/{application-id}/jobs/export',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_import_job(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_import_job_request: CreateImportJobRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateImportJobResponse:
        """create_import_job

        Creates an import job for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_import_job_request: (required)
        :type create_import_job_request: CreateImportJobRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_import_job_serialize(
            application_id=application_id,
            create_import_job_request=create_import_job_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateImportJobResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_import_job_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_import_job_request: CreateImportJobRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateImportJobResponse]:
        """create_import_job

        Creates an import job for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_import_job_request: (required)
        :type create_import_job_request: CreateImportJobRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_import_job_serialize(
            application_id=application_id,
            create_import_job_request=create_import_job_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateImportJobResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_import_job_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_import_job_request: CreateImportJobRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_import_job

        Creates an import job for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_import_job_request: (required)
        :type create_import_job_request: CreateImportJobRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_import_job_serialize(
            application_id=application_id,
            create_import_job_request=create_import_job_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateImportJobResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_import_job_serialize(
        self,
        application_id,
        create_import_job_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_import_job_request is not None:
            _body_params = create_import_job_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/apps/{application-id}/jobs/import',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_in_app_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_in_app_template_request: UpdateInAppTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateInAppTemplateResponse:
        """create_in_app_template

        Creates a new message template for messages using the in-app message channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_in_app_template_request: (required)
        :type update_in_app_template_request: UpdateInAppTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_in_app_template_serialize(
            template_name=template_name,
            update_in_app_template_request=update_in_app_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateInAppTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_in_app_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_in_app_template_request: UpdateInAppTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateInAppTemplateResponse]:
        """create_in_app_template

        Creates a new message template for messages using the in-app message channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_in_app_template_request: (required)
        :type update_in_app_template_request: UpdateInAppTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_in_app_template_serialize(
            template_name=template_name,
            update_in_app_template_request=update_in_app_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateInAppTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_in_app_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_in_app_template_request: UpdateInAppTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_in_app_template

        Creates a new message template for messages using the in-app message channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_in_app_template_request: (required)
        :type update_in_app_template_request: UpdateInAppTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_in_app_template_serialize(
            template_name=template_name,
            update_in_app_template_request=update_in_app_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateInAppTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_in_app_template_serialize(
        self,
        template_name,
        update_in_app_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_in_app_template_request is not None:
            _body_params = update_in_app_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/templates/{template-name}/inapp',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_journey(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_journey_request: CreateJourneyRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateJourneyResponse:
        """create_journey

        Creates a journey for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_journey_request: (required)
        :type create_journey_request: CreateJourneyRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_journey_serialize(
            application_id=application_id,
            create_journey_request=create_journey_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateJourneyResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_journey_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_journey_request: CreateJourneyRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateJourneyResponse]:
        """create_journey

        Creates a journey for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_journey_request: (required)
        :type create_journey_request: CreateJourneyRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_journey_serialize(
            application_id=application_id,
            create_journey_request=create_journey_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateJourneyResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_journey_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_journey_request: CreateJourneyRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_journey

        Creates a journey for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_journey_request: (required)
        :type create_journey_request: CreateJourneyRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_journey_serialize(
            application_id=application_id,
            create_journey_request=create_journey_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateJourneyResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_journey_serialize(
        self,
        application_id,
        create_journey_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_journey_request is not None:
            _body_params = create_journey_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/apps/{application-id}/journeys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_push_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_push_template_request: UpdatePushTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreatePushTemplateResponse:
        """create_push_template

        Creates a message template for messages that are sent through a push notification channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_push_template_request: (required)
        :type update_push_template_request: UpdatePushTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_push_template_serialize(
            template_name=template_name,
            update_push_template_request=update_push_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreatePushTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_push_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_push_template_request: UpdatePushTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreatePushTemplateResponse]:
        """create_push_template

        Creates a message template for messages that are sent through a push notification channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_push_template_request: (required)
        :type update_push_template_request: UpdatePushTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_push_template_serialize(
            template_name=template_name,
            update_push_template_request=update_push_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreatePushTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_push_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_push_template_request: UpdatePushTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_push_template

        Creates a message template for messages that are sent through a push notification channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_push_template_request: (required)
        :type update_push_template_request: UpdatePushTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_push_template_serialize(
            template_name=template_name,
            update_push_template_request=update_push_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreatePushTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_push_template_serialize(
        self,
        template_name,
        update_push_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_push_template_request is not None:
            _body_params = update_push_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/templates/{template-name}/push',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_recommender_configuration(
        self,
        create_recommender_configuration_request: CreateRecommenderConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateRecommenderConfigurationResponse:
        """create_recommender_configuration

        Creates an Amazon Pinpoint configuration for a recommender model.

        :param create_recommender_configuration_request: (required)
        :type create_recommender_configuration_request: CreateRecommenderConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_recommender_configuration_serialize(
            create_recommender_configuration_request=create_recommender_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateRecommenderConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_recommender_configuration_with_http_info(
        self,
        create_recommender_configuration_request: CreateRecommenderConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateRecommenderConfigurationResponse]:
        """create_recommender_configuration

        Creates an Amazon Pinpoint configuration for a recommender model.

        :param create_recommender_configuration_request: (required)
        :type create_recommender_configuration_request: CreateRecommenderConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_recommender_configuration_serialize(
            create_recommender_configuration_request=create_recommender_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateRecommenderConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_recommender_configuration_without_preload_content(
        self,
        create_recommender_configuration_request: CreateRecommenderConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_recommender_configuration

        Creates an Amazon Pinpoint configuration for a recommender model.

        :param create_recommender_configuration_request: (required)
        :type create_recommender_configuration_request: CreateRecommenderConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_recommender_configuration_serialize(
            create_recommender_configuration_request=create_recommender_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateRecommenderConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_recommender_configuration_serialize(
        self,
        create_recommender_configuration_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_recommender_configuration_request is not None:
            _body_params = create_recommender_configuration_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/recommenders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_segment(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_segment_request: CreateSegmentRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateSegmentResponse:
        """create_segment

        Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_segment_request: (required)
        :type create_segment_request: CreateSegmentRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_segment_serialize(
            application_id=application_id,
            create_segment_request=create_segment_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateSegmentResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_segment_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_segment_request: CreateSegmentRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateSegmentResponse]:
        """create_segment

        Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_segment_request: (required)
        :type create_segment_request: CreateSegmentRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_segment_serialize(
            application_id=application_id,
            create_segment_request=create_segment_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateSegmentResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_segment_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        create_segment_request: CreateSegmentRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_segment

        Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param create_segment_request: (required)
        :type create_segment_request: CreateSegmentRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_segment_serialize(
            application_id=application_id,
            create_segment_request=create_segment_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateSegmentResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_segment_serialize(
        self,
        application_id,
        create_segment_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_segment_request is not None:
            _body_params = create_segment_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/apps/{application-id}/segments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_sms_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_sms_template_request: UpdateSmsTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateSmsTemplateResponse:
        """create_sms_template

        Creates a message template for messages that are sent through the SMS channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_sms_template_request: (required)
        :type update_sms_template_request: UpdateSmsTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_sms_template_serialize(
            template_name=template_name,
            update_sms_template_request=update_sms_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateSmsTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_sms_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_sms_template_request: UpdateSmsTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateSmsTemplateResponse]:
        """create_sms_template

        Creates a message template for messages that are sent through the SMS channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_sms_template_request: (required)
        :type update_sms_template_request: UpdateSmsTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_sms_template_serialize(
            template_name=template_name,
            update_sms_template_request=update_sms_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateSmsTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_sms_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_sms_template_request: UpdateSmsTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_sms_template

        Creates a message template for messages that are sent through the SMS channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_sms_template_request: (required)
        :type update_sms_template_request: UpdateSmsTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_sms_template_serialize(
            template_name=template_name,
            update_sms_template_request=update_sms_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateSmsTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_sms_template_serialize(
        self,
        template_name,
        update_sms_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_sms_template_request is not None:
            _body_params = update_sms_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/templates/{template-name}/sms',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def create_voice_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_voice_template_request: UpdateVoiceTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> CreateVoiceTemplateResponse:
        """create_voice_template

        Creates a message template for messages that are sent through the voice channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_voice_template_request: (required)
        :type update_voice_template_request: UpdateVoiceTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_voice_template_serialize(
            template_name=template_name,
            update_voice_template_request=update_voice_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateVoiceTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_voice_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_voice_template_request: UpdateVoiceTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[CreateVoiceTemplateResponse]:
        """create_voice_template

        Creates a message template for messages that are sent through the voice channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_voice_template_request: (required)
        :type update_voice_template_request: UpdateVoiceTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_voice_template_serialize(
            template_name=template_name,
            update_voice_template_request=update_voice_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateVoiceTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_voice_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_voice_template_request: UpdateVoiceTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_voice_template

        Creates a message template for messages that are sent through the voice channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_voice_template_request: (required)
        :type update_voice_template_request: UpdateVoiceTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_voice_template_serialize(
            template_name=template_name,
            update_voice_template_request=update_voice_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "CreateVoiceTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_voice_template_serialize(
        self,
        template_name,
        update_voice_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_voice_template_request is not None:
            _body_params = update_voice_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/templates/{template-name}/voice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_adm_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteAdmChannelResponse:
        """delete_adm_channel

        Disables the ADM channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_adm_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteAdmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_adm_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteAdmChannelResponse]:
        """delete_adm_channel

        Disables the ADM channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_adm_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteAdmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_adm_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_adm_channel

        Disables the ADM channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_adm_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteAdmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_adm_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/channels/adm',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_apns_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteApnsChannelResponse:
        """delete_apns_channel

        Disables the APNs channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_apns_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteApnsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_apns_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteApnsChannelResponse]:
        """delete_apns_channel

        Disables the APNs channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_apns_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteApnsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_apns_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_apns_channel

        Disables the APNs channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_apns_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteApnsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_apns_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/channels/apns',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_apns_sandbox_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteApnsSandboxChannelResponse:
        """delete_apns_sandbox_channel

        Disables the APNs sandbox channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_apns_sandbox_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteApnsSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_apns_sandbox_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteApnsSandboxChannelResponse]:
        """delete_apns_sandbox_channel

        Disables the APNs sandbox channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_apns_sandbox_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteApnsSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_apns_sandbox_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_apns_sandbox_channel

        Disables the APNs sandbox channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_apns_sandbox_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteApnsSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_apns_sandbox_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/channels/apns_sandbox',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_apns_voip_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteApnsVoipChannelResponse:
        """delete_apns_voip_channel

        Disables the APNs VoIP channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_apns_voip_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteApnsVoipChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_apns_voip_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteApnsVoipChannelResponse]:
        """delete_apns_voip_channel

        Disables the APNs VoIP channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_apns_voip_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteApnsVoipChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_apns_voip_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_apns_voip_channel

        Disables the APNs VoIP channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_apns_voip_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteApnsVoipChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_apns_voip_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/channels/apns_voip',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_apns_voip_sandbox_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteApnsVoipSandboxChannelResponse:
        """delete_apns_voip_sandbox_channel

        Disables the APNs VoIP sandbox channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_apns_voip_sandbox_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteApnsVoipSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_apns_voip_sandbox_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteApnsVoipSandboxChannelResponse]:
        """delete_apns_voip_sandbox_channel

        Disables the APNs VoIP sandbox channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_apns_voip_sandbox_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteApnsVoipSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_apns_voip_sandbox_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_apns_voip_sandbox_channel

        Disables the APNs VoIP sandbox channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_apns_voip_sandbox_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteApnsVoipSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_apns_voip_sandbox_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/channels/apns_voip_sandbox',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_app(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteAppResponse:
        """delete_app

        Deletes an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_app_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteAppResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_app_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteAppResponse]:
        """delete_app

        Deletes an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_app_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteAppResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_app_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_app

        Deletes an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_app_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteAppResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_app_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_baidu_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteBaiduChannelResponse:
        """delete_baidu_channel

        Disables the Baidu channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_baidu_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteBaiduChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_baidu_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteBaiduChannelResponse]:
        """delete_baidu_channel

        Disables the Baidu channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_baidu_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteBaiduChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_baidu_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_baidu_channel

        Disables the Baidu channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_baidu_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteBaiduChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_baidu_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/channels/baidu',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_campaign(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteCampaignResponse:
        """delete_campaign

        Deletes a campaign from an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_campaign_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteCampaignResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_campaign_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteCampaignResponse]:
        """delete_campaign

        Deletes a campaign from an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_campaign_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteCampaignResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_campaign_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_campaign

        Deletes a campaign from an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_campaign_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteCampaignResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_campaign_serialize(
        self,
        application_id,
        campaign_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if campaign_id is not None:
            _path_params['campaign-id'] = campaign_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/campaigns/{campaign-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_email_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteEmailChannelResponse:
        """delete_email_channel

        Disables the email channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_email_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteEmailChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_email_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteEmailChannelResponse]:
        """delete_email_channel

        Disables the email channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_email_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteEmailChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_email_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_email_channel

        Disables the email channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_email_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteEmailChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_email_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/channels/email',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_email_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteEmailTemplateResponse:
        """delete_email_template

        Deletes a message template for messages that were sent through the email channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_email_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteEmailTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_email_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteEmailTemplateResponse]:
        """delete_email_template

        Deletes a message template for messages that were sent through the email channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_email_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteEmailTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_email_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_email_template

        Deletes a message template for messages that were sent through the email channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_email_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteEmailTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_email_template_serialize(
        self,
        template_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/templates/{template-name}/email',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_endpoint(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        endpoint_id: Annotated[StrictStr, Field(description="The unique identifier for the endpoint.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteEndpointResponse:
        """delete_endpoint

        Deletes an endpoint from an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param endpoint_id: The unique identifier for the endpoint. (required)
        :type endpoint_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_endpoint_serialize(
            application_id=application_id,
            endpoint_id=endpoint_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteEndpointResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_endpoint_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        endpoint_id: Annotated[StrictStr, Field(description="The unique identifier for the endpoint.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteEndpointResponse]:
        """delete_endpoint

        Deletes an endpoint from an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param endpoint_id: The unique identifier for the endpoint. (required)
        :type endpoint_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_endpoint_serialize(
            application_id=application_id,
            endpoint_id=endpoint_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteEndpointResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_endpoint_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        endpoint_id: Annotated[StrictStr, Field(description="The unique identifier for the endpoint.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_endpoint

        Deletes an endpoint from an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param endpoint_id: The unique identifier for the endpoint. (required)
        :type endpoint_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_endpoint_serialize(
            application_id=application_id,
            endpoint_id=endpoint_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteEndpointResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_endpoint_serialize(
        self,
        application_id,
        endpoint_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if endpoint_id is not None:
            _path_params['endpoint-id'] = endpoint_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/endpoints/{endpoint-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_event_stream(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteEventStreamResponse:
        """delete_event_stream

        Deletes the event stream for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_event_stream_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteEventStreamResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_event_stream_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteEventStreamResponse]:
        """delete_event_stream

        Deletes the event stream for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_event_stream_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteEventStreamResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_event_stream_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_event_stream

        Deletes the event stream for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_event_stream_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteEventStreamResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_event_stream_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/eventstream',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_gcm_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteGcmChannelResponse:
        """delete_gcm_channel

        Disables the GCM channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_gcm_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteGcmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_gcm_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteGcmChannelResponse]:
        """delete_gcm_channel

        Disables the GCM channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_gcm_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteGcmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_gcm_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_gcm_channel

        Disables the GCM channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_gcm_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteGcmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_gcm_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/channels/gcm',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_in_app_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteInAppTemplateResponse:
        """delete_in_app_template

        Deletes a message template for messages sent using the in-app message channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_in_app_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteInAppTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_in_app_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteInAppTemplateResponse]:
        """delete_in_app_template

        Deletes a message template for messages sent using the in-app message channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_in_app_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteInAppTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_in_app_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_in_app_template

        Deletes a message template for messages sent using the in-app message channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_in_app_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteInAppTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_in_app_template_serialize(
        self,
        template_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/templates/{template-name}/inapp',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_journey(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteJourneyResponse:
        """delete_journey

        Deletes a journey from an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_journey_serialize(
            application_id=application_id,
            journey_id=journey_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteJourneyResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_journey_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteJourneyResponse]:
        """delete_journey

        Deletes a journey from an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_journey_serialize(
            application_id=application_id,
            journey_id=journey_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteJourneyResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_journey_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_journey

        Deletes a journey from an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_journey_serialize(
            application_id=application_id,
            journey_id=journey_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteJourneyResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_journey_serialize(
        self,
        application_id,
        journey_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if journey_id is not None:
            _path_params['journey-id'] = journey_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/journeys/{journey-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_push_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeletePushTemplateResponse:
        """delete_push_template

        Deletes a message template for messages that were sent through a push notification channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_push_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeletePushTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_push_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeletePushTemplateResponse]:
        """delete_push_template

        Deletes a message template for messages that were sent through a push notification channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_push_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeletePushTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_push_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_push_template

        Deletes a message template for messages that were sent through a push notification channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_push_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeletePushTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_push_template_serialize(
        self,
        template_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/templates/{template-name}/push',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_recommender_configuration(
        self,
        recommender_id: Annotated[StrictStr, Field(description="The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteRecommenderConfigurationResponse:
        """delete_recommender_configuration

        Deletes an Amazon Pinpoint configuration for a recommender model.

        :param recommender_id: The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console. (required)
        :type recommender_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_recommender_configuration_serialize(
            recommender_id=recommender_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteRecommenderConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_recommender_configuration_with_http_info(
        self,
        recommender_id: Annotated[StrictStr, Field(description="The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteRecommenderConfigurationResponse]:
        """delete_recommender_configuration

        Deletes an Amazon Pinpoint configuration for a recommender model.

        :param recommender_id: The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console. (required)
        :type recommender_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_recommender_configuration_serialize(
            recommender_id=recommender_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteRecommenderConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_recommender_configuration_without_preload_content(
        self,
        recommender_id: Annotated[StrictStr, Field(description="The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_recommender_configuration

        Deletes an Amazon Pinpoint configuration for a recommender model.

        :param recommender_id: The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console. (required)
        :type recommender_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_recommender_configuration_serialize(
            recommender_id=recommender_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteRecommenderConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_recommender_configuration_serialize(
        self,
        recommender_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if recommender_id is not None:
            _path_params['recommender-id'] = recommender_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/recommenders/{recommender-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_segment(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteSegmentResponse:
        """delete_segment

        Deletes a segment from an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_segment_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteSegmentResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_segment_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteSegmentResponse]:
        """delete_segment

        Deletes a segment from an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_segment_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteSegmentResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_segment_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_segment

        Deletes a segment from an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_segment_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteSegmentResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_segment_serialize(
        self,
        application_id,
        segment_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if segment_id is not None:
            _path_params['segment-id'] = segment_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/segments/{segment-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_sms_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteSmsChannelResponse:
        """delete_sms_channel

        Disables the SMS channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_sms_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteSmsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_sms_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteSmsChannelResponse]:
        """delete_sms_channel

        Disables the SMS channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_sms_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteSmsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_sms_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_sms_channel

        Disables the SMS channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_sms_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteSmsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_sms_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/channels/sms',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_sms_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteSmsTemplateResponse:
        """delete_sms_template

        Deletes a message template for messages that were sent through the SMS channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_sms_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteSmsTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_sms_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteSmsTemplateResponse]:
        """delete_sms_template

        Deletes a message template for messages that were sent through the SMS channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_sms_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteSmsTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_sms_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_sms_template

        Deletes a message template for messages that were sent through the SMS channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_sms_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteSmsTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_sms_template_serialize(
        self,
        template_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/templates/{template-name}/sms',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_user_endpoints(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        user_id: Annotated[StrictStr, Field(description="The unique identifier for the user.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteUserEndpointsResponse:
        """delete_user_endpoints

        Deletes all the endpoints that are associated with a specific user ID.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param user_id: The unique identifier for the user. (required)
        :type user_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_user_endpoints_serialize(
            application_id=application_id,
            user_id=user_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteUserEndpointsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_user_endpoints_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        user_id: Annotated[StrictStr, Field(description="The unique identifier for the user.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteUserEndpointsResponse]:
        """delete_user_endpoints

        Deletes all the endpoints that are associated with a specific user ID.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param user_id: The unique identifier for the user. (required)
        :type user_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_user_endpoints_serialize(
            application_id=application_id,
            user_id=user_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteUserEndpointsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_user_endpoints_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        user_id: Annotated[StrictStr, Field(description="The unique identifier for the user.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_user_endpoints

        Deletes all the endpoints that are associated with a specific user ID.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param user_id: The unique identifier for the user. (required)
        :type user_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_user_endpoints_serialize(
            application_id=application_id,
            user_id=user_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteUserEndpointsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_user_endpoints_serialize(
        self,
        application_id,
        user_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if user_id is not None:
            _path_params['user-id'] = user_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/users/{user-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_voice_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteVoiceChannelResponse:
        """delete_voice_channel

        Disables the voice channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_voice_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteVoiceChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_voice_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteVoiceChannelResponse]:
        """delete_voice_channel

        Disables the voice channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_voice_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteVoiceChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_voice_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_voice_channel

        Disables the voice channel for an application and deletes any existing settings for the channel.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_voice_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DeleteVoiceChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_voice_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/apps/{application-id}/channels/voice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_voice_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DeleteVoiceTemplateResponse:
        """delete_voice_template

        Deletes a message template for messages that were sent through the voice channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_voice_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteVoiceTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_voice_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DeleteVoiceTemplateResponse]:
        """delete_voice_template

        Deletes a message template for messages that were sent through the voice channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_voice_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteVoiceTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_voice_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_voice_template

        Deletes a message template for messages that were sent through the voice channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_voice_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "DeleteVoiceTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_voice_template_serialize(
        self,
        template_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/templates/{template-name}/voice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_adm_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAdmChannelResponse:
        """get_adm_channel

        Retrieves information about the status and settings of the ADM channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_adm_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAdmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_adm_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAdmChannelResponse]:
        """get_adm_channel

        Retrieves information about the status and settings of the ADM channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_adm_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAdmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_adm_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_adm_channel

        Retrieves information about the status and settings of the ADM channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_adm_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAdmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_adm_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/channels/adm',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_apns_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetApnsChannelResponse:
        """get_apns_channel

        Retrieves information about the status and settings of the APNs channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apns_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApnsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_apns_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetApnsChannelResponse]:
        """get_apns_channel

        Retrieves information about the status and settings of the APNs channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apns_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApnsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_apns_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_apns_channel

        Retrieves information about the status and settings of the APNs channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apns_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApnsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_apns_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/channels/apns',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_apns_sandbox_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetApnsSandboxChannelResponse:
        """get_apns_sandbox_channel

        Retrieves information about the status and settings of the APNs sandbox channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apns_sandbox_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApnsSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_apns_sandbox_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetApnsSandboxChannelResponse]:
        """get_apns_sandbox_channel

        Retrieves information about the status and settings of the APNs sandbox channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apns_sandbox_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApnsSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_apns_sandbox_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_apns_sandbox_channel

        Retrieves information about the status and settings of the APNs sandbox channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apns_sandbox_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApnsSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_apns_sandbox_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/channels/apns_sandbox',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_apns_voip_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetApnsVoipChannelResponse:
        """get_apns_voip_channel

        Retrieves information about the status and settings of the APNs VoIP channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apns_voip_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApnsVoipChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_apns_voip_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetApnsVoipChannelResponse]:
        """get_apns_voip_channel

        Retrieves information about the status and settings of the APNs VoIP channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apns_voip_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApnsVoipChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_apns_voip_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_apns_voip_channel

        Retrieves information about the status and settings of the APNs VoIP channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apns_voip_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApnsVoipChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_apns_voip_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/channels/apns_voip',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_apns_voip_sandbox_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetApnsVoipSandboxChannelResponse:
        """get_apns_voip_sandbox_channel

        Retrieves information about the status and settings of the APNs VoIP sandbox channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apns_voip_sandbox_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApnsVoipSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_apns_voip_sandbox_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetApnsVoipSandboxChannelResponse]:
        """get_apns_voip_sandbox_channel

        Retrieves information about the status and settings of the APNs VoIP sandbox channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apns_voip_sandbox_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApnsVoipSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_apns_voip_sandbox_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_apns_voip_sandbox_channel

        Retrieves information about the status and settings of the APNs VoIP sandbox channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apns_voip_sandbox_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApnsVoipSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_apns_voip_sandbox_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/channels/apns_voip_sandbox',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_app(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAppResponse:
        """get_app

        Retrieves information about an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_app_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAppResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_app_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAppResponse]:
        """get_app

        Retrieves information about an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_app_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAppResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_app_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_app

        Retrieves information about an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_app_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAppResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_app_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_application_date_range_kpi(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        kpi_name: Annotated[StrictStr, Field(description="The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        end_time: Annotated[Optional[datetime], Field(description="The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        start_time: Annotated[Optional[datetime], Field(description="The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetApplicationDateRangeKpiResponse:
        """get_application_date_range_kpi

        Retrieves (queries) pre-aggregated data for a standard metric that applies to an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param kpi_name: The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>. (required)
        :type kpi_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param end_time: The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
        :type end_time: datetime
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param start_time: The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
        :type start_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_application_date_range_kpi_serialize(
            application_id=application_id,
            kpi_name=kpi_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            end_time=end_time,
            next_token=next_token,
            page_size=page_size,
            start_time=start_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApplicationDateRangeKpiResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_application_date_range_kpi_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        kpi_name: Annotated[StrictStr, Field(description="The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        end_time: Annotated[Optional[datetime], Field(description="The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        start_time: Annotated[Optional[datetime], Field(description="The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetApplicationDateRangeKpiResponse]:
        """get_application_date_range_kpi

        Retrieves (queries) pre-aggregated data for a standard metric that applies to an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param kpi_name: The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>. (required)
        :type kpi_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param end_time: The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
        :type end_time: datetime
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param start_time: The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
        :type start_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_application_date_range_kpi_serialize(
            application_id=application_id,
            kpi_name=kpi_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            end_time=end_time,
            next_token=next_token,
            page_size=page_size,
            start_time=start_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApplicationDateRangeKpiResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_application_date_range_kpi_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        kpi_name: Annotated[StrictStr, Field(description="The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        end_time: Annotated[Optional[datetime], Field(description="The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        start_time: Annotated[Optional[datetime], Field(description="The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_application_date_range_kpi

        Retrieves (queries) pre-aggregated data for a standard metric that applies to an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param kpi_name: The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>. (required)
        :type kpi_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param end_time: The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
        :type end_time: datetime
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param start_time: The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
        :type start_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_application_date_range_kpi_serialize(
            application_id=application_id,
            kpi_name=kpi_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            end_time=end_time,
            next_token=next_token,
            page_size=page_size,
            start_time=start_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApplicationDateRangeKpiResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_application_date_range_kpi_serialize(
        self,
        application_id,
        kpi_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        end_time,
        next_token,
        page_size,
        start_time,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if kpi_name is not None:
            _path_params['kpi-name'] = kpi_name
        # process the query parameters
        if end_time is not None:
            if isinstance(end_time, datetime):
                _query_params.append(
                    (
                        'end-time',
                        end_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end-time', end_time))
            
        if next_token is not None:
            
            _query_params.append(('next-token', next_token))
            
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if start_time is not None:
            if isinstance(start_time, datetime):
                _query_params.append(
                    (
                        'start-time',
                        start_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start-time', start_time))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/kpis/daterange/{kpi-name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_application_settings(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetApplicationSettingsResponse:
        """get_application_settings

        Retrieves information about the settings for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_application_settings_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApplicationSettingsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_application_settings_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetApplicationSettingsResponse]:
        """get_application_settings

        Retrieves information about the settings for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_application_settings_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApplicationSettingsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_application_settings_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_application_settings

        Retrieves information about the settings for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_application_settings_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetApplicationSettingsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_application_settings_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/settings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_apps(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetAppsResponse:
        """get_apps

        Retrieves information about all the applications that are associated with your Amazon Pinpoint account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apps_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAppsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_apps_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetAppsResponse]:
        """get_apps

        Retrieves information about all the applications that are associated with your Amazon Pinpoint account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apps_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAppsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_apps_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_apps

        Retrieves information about all the applications that are associated with your Amazon Pinpoint account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_apps_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetAppsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_apps_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        page_size,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_baidu_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetBaiduChannelResponse:
        """get_baidu_channel

        Retrieves information about the status and settings of the Baidu channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_baidu_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetBaiduChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_baidu_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetBaiduChannelResponse]:
        """get_baidu_channel

        Retrieves information about the status and settings of the Baidu channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_baidu_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetBaiduChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_baidu_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_baidu_channel

        Retrieves information about the status and settings of the Baidu channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_baidu_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetBaiduChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_baidu_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/channels/baidu',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_campaign(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCampaignResponse:
        """get_campaign

        Retrieves information about the status, configuration, and other settings for a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_campaign_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCampaignResponse]:
        """get_campaign

        Retrieves information about the status, configuration, and other settings for a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_campaign_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_campaign

        Retrieves information about the status, configuration, and other settings for a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_campaign_serialize(
        self,
        application_id,
        campaign_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if campaign_id is not None:
            _path_params['campaign-id'] = campaign_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/campaigns/{campaign-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_campaign_activities(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCampaignActivitiesResponse:
        """get_campaign_activities

        Retrieves information about all the activities for a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_activities_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignActivitiesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_campaign_activities_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCampaignActivitiesResponse]:
        """get_campaign_activities

        Retrieves information about all the activities for a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_activities_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignActivitiesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_campaign_activities_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_campaign_activities

        Retrieves information about all the activities for a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_activities_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignActivitiesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_campaign_activities_serialize(
        self,
        application_id,
        campaign_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        page_size,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if campaign_id is not None:
            _path_params['campaign-id'] = campaign_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/campaigns/{campaign-id}/activities',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_campaign_date_range_kpi(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        kpi_name: Annotated[StrictStr, Field(description="The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        end_time: Annotated[Optional[datetime], Field(description="The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        start_time: Annotated[Optional[datetime], Field(description="The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCampaignDateRangeKpiResponse:
        """get_campaign_date_range_kpi

        Retrieves (queries) pre-aggregated data for a standard metric that applies to a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param kpi_name: The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>. (required)
        :type kpi_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param end_time: The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
        :type end_time: datetime
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param start_time: The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
        :type start_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_date_range_kpi_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            kpi_name=kpi_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            end_time=end_time,
            next_token=next_token,
            page_size=page_size,
            start_time=start_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignDateRangeKpiResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_campaign_date_range_kpi_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        kpi_name: Annotated[StrictStr, Field(description="The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        end_time: Annotated[Optional[datetime], Field(description="The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        start_time: Annotated[Optional[datetime], Field(description="The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCampaignDateRangeKpiResponse]:
        """get_campaign_date_range_kpi

        Retrieves (queries) pre-aggregated data for a standard metric that applies to a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param kpi_name: The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>. (required)
        :type kpi_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param end_time: The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
        :type end_time: datetime
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param start_time: The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
        :type start_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_date_range_kpi_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            kpi_name=kpi_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            end_time=end_time,
            next_token=next_token,
            page_size=page_size,
            start_time=start_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignDateRangeKpiResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_campaign_date_range_kpi_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        kpi_name: Annotated[StrictStr, Field(description="The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        end_time: Annotated[Optional[datetime], Field(description="The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        start_time: Annotated[Optional[datetime], Field(description="The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_campaign_date_range_kpi

        Retrieves (queries) pre-aggregated data for a standard metric that applies to a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param kpi_name: The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>. (required)
        :type kpi_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param end_time: The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
        :type end_time: datetime
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param start_time: The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
        :type start_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_date_range_kpi_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            kpi_name=kpi_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            end_time=end_time,
            next_token=next_token,
            page_size=page_size,
            start_time=start_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignDateRangeKpiResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_campaign_date_range_kpi_serialize(
        self,
        application_id,
        campaign_id,
        kpi_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        end_time,
        next_token,
        page_size,
        start_time,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if campaign_id is not None:
            _path_params['campaign-id'] = campaign_id
        if kpi_name is not None:
            _path_params['kpi-name'] = kpi_name
        # process the query parameters
        if end_time is not None:
            if isinstance(end_time, datetime):
                _query_params.append(
                    (
                        'end-time',
                        end_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end-time', end_time))
            
        if next_token is not None:
            
            _query_params.append(('next-token', next_token))
            
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if start_time is not None:
            if isinstance(start_time, datetime):
                _query_params.append(
                    (
                        'start-time',
                        start_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start-time', start_time))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/campaigns/{campaign-id}/kpis/daterange/{kpi-name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_campaign_version(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        version: Annotated[StrictStr, Field(description="The unique version number (Version property) for the campaign version.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCampaignVersionResponse:
        """get_campaign_version

        Retrieves information about the status, configuration, and other settings for a specific version of a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param version: The unique version number (Version property) for the campaign version. (required)
        :type version: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_version_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            version=version,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignVersionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_campaign_version_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        version: Annotated[StrictStr, Field(description="The unique version number (Version property) for the campaign version.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCampaignVersionResponse]:
        """get_campaign_version

        Retrieves information about the status, configuration, and other settings for a specific version of a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param version: The unique version number (Version property) for the campaign version. (required)
        :type version: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_version_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            version=version,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignVersionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_campaign_version_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        version: Annotated[StrictStr, Field(description="The unique version number (Version property) for the campaign version.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_campaign_version

        Retrieves information about the status, configuration, and other settings for a specific version of a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param version: The unique version number (Version property) for the campaign version. (required)
        :type version: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_version_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            version=version,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignVersionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_campaign_version_serialize(
        self,
        application_id,
        campaign_id,
        version,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if campaign_id is not None:
            _path_params['campaign-id'] = campaign_id
        if version is not None:
            _path_params['version'] = version
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/campaigns/{campaign-id}/versions/{version}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_campaign_versions(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCampaignVersionsResponse:
        """get_campaign_versions

        Retrieves information about the status, configuration, and other settings for all versions of a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_versions_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignVersionsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_campaign_versions_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCampaignVersionsResponse]:
        """get_campaign_versions

        Retrieves information about the status, configuration, and other settings for all versions of a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_versions_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignVersionsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_campaign_versions_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_campaign_versions

        Retrieves information about the status, configuration, and other settings for all versions of a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaign_versions_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignVersionsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_campaign_versions_serialize(
        self,
        application_id,
        campaign_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        page_size,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if campaign_id is not None:
            _path_params['campaign-id'] = campaign_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/campaigns/{campaign-id}/versions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_campaigns(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetCampaignsResponse:
        """get_campaigns

        Retrieves information about the status, configuration, and other settings for all the campaigns that are associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaigns_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_campaigns_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetCampaignsResponse]:
        """get_campaigns

        Retrieves information about the status, configuration, and other settings for all the campaigns that are associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaigns_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_campaigns_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_campaigns

        Retrieves information about the status, configuration, and other settings for all the campaigns that are associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_campaigns_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetCampaignsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_campaigns_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        page_size,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/campaigns',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_channels(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetChannelsResponse:
        """get_channels

        Retrieves information about the history and status of each channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_channels_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetChannelsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_channels_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetChannelsResponse]:
        """get_channels

        Retrieves information about the history and status of each channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_channels_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetChannelsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_channels_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_channels

        Retrieves information about the history and status of each channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_channels_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetChannelsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_channels_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/channels',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_email_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetEmailChannelResponse:
        """get_email_channel

        Retrieves information about the status and settings of the email channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_email_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEmailChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_email_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetEmailChannelResponse]:
        """get_email_channel

        Retrieves information about the status and settings of the email channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_email_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEmailChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_email_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_email_channel

        Retrieves information about the status and settings of the email channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_email_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEmailChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_email_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/channels/email',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_email_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetEmailTemplateResponse:
        """get_email_template

        Retrieves the content and settings of a message template for messages that are sent through the email channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_email_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEmailTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_email_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetEmailTemplateResponse]:
        """get_email_template

        Retrieves the content and settings of a message template for messages that are sent through the email channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_email_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEmailTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_email_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_email_template

        Retrieves the content and settings of a message template for messages that are sent through the email channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_email_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEmailTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_email_template_serialize(
        self,
        template_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/templates/{template-name}/email',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_endpoint(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        endpoint_id: Annotated[StrictStr, Field(description="The unique identifier for the endpoint.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetEndpointResponse:
        """get_endpoint

        Retrieves information about the settings and attributes of a specific endpoint for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param endpoint_id: The unique identifier for the endpoint. (required)
        :type endpoint_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_endpoint_serialize(
            application_id=application_id,
            endpoint_id=endpoint_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEndpointResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_endpoint_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        endpoint_id: Annotated[StrictStr, Field(description="The unique identifier for the endpoint.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetEndpointResponse]:
        """get_endpoint

        Retrieves information about the settings and attributes of a specific endpoint for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param endpoint_id: The unique identifier for the endpoint. (required)
        :type endpoint_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_endpoint_serialize(
            application_id=application_id,
            endpoint_id=endpoint_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEndpointResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_endpoint_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        endpoint_id: Annotated[StrictStr, Field(description="The unique identifier for the endpoint.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_endpoint

        Retrieves information about the settings and attributes of a specific endpoint for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param endpoint_id: The unique identifier for the endpoint. (required)
        :type endpoint_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_endpoint_serialize(
            application_id=application_id,
            endpoint_id=endpoint_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEndpointResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_endpoint_serialize(
        self,
        application_id,
        endpoint_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if endpoint_id is not None:
            _path_params['endpoint-id'] = endpoint_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/endpoints/{endpoint-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_event_stream(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetEventStreamResponse:
        """get_event_stream

        Retrieves information about the event stream settings for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_event_stream_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEventStreamResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_event_stream_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetEventStreamResponse]:
        """get_event_stream

        Retrieves information about the event stream settings for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_event_stream_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEventStreamResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_event_stream_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_event_stream

        Retrieves information about the event stream settings for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_event_stream_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetEventStreamResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_event_stream_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/eventstream',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_export_job(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        job_id: Annotated[StrictStr, Field(description="The unique identifier for the job.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetExportJobResponse:
        """get_export_job

        Retrieves information about the status and settings of a specific export job for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param job_id: The unique identifier for the job. (required)
        :type job_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_export_job_serialize(
            application_id=application_id,
            job_id=job_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetExportJobResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_export_job_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        job_id: Annotated[StrictStr, Field(description="The unique identifier for the job.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetExportJobResponse]:
        """get_export_job

        Retrieves information about the status and settings of a specific export job for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param job_id: The unique identifier for the job. (required)
        :type job_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_export_job_serialize(
            application_id=application_id,
            job_id=job_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetExportJobResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_export_job_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        job_id: Annotated[StrictStr, Field(description="The unique identifier for the job.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_export_job

        Retrieves information about the status and settings of a specific export job for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param job_id: The unique identifier for the job. (required)
        :type job_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_export_job_serialize(
            application_id=application_id,
            job_id=job_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetExportJobResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_export_job_serialize(
        self,
        application_id,
        job_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if job_id is not None:
            _path_params['job-id'] = job_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/jobs/export/{job-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_export_jobs(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetExportJobsResponse:
        """get_export_jobs

        Retrieves information about the status and settings of all the export jobs for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_export_jobs_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetExportJobsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_export_jobs_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetExportJobsResponse]:
        """get_export_jobs

        Retrieves information about the status and settings of all the export jobs for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_export_jobs_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetExportJobsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_export_jobs_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_export_jobs

        Retrieves information about the status and settings of all the export jobs for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_export_jobs_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetExportJobsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_export_jobs_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        page_size,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/jobs/export',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_gcm_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetGcmChannelResponse:
        """get_gcm_channel

        Retrieves information about the status and settings of the GCM channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gcm_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGcmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_gcm_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetGcmChannelResponse]:
        """get_gcm_channel

        Retrieves information about the status and settings of the GCM channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gcm_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGcmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_gcm_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_gcm_channel

        Retrieves information about the status and settings of the GCM channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_gcm_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetGcmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_gcm_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/channels/gcm',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_import_job(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        job_id: Annotated[StrictStr, Field(description="The unique identifier for the job.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetImportJobResponse:
        """get_import_job

        Retrieves information about the status and settings of a specific import job for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param job_id: The unique identifier for the job. (required)
        :type job_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_import_job_serialize(
            application_id=application_id,
            job_id=job_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetImportJobResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_import_job_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        job_id: Annotated[StrictStr, Field(description="The unique identifier for the job.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetImportJobResponse]:
        """get_import_job

        Retrieves information about the status and settings of a specific import job for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param job_id: The unique identifier for the job. (required)
        :type job_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_import_job_serialize(
            application_id=application_id,
            job_id=job_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetImportJobResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_import_job_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        job_id: Annotated[StrictStr, Field(description="The unique identifier for the job.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_import_job

        Retrieves information about the status and settings of a specific import job for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param job_id: The unique identifier for the job. (required)
        :type job_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_import_job_serialize(
            application_id=application_id,
            job_id=job_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetImportJobResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_import_job_serialize(
        self,
        application_id,
        job_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if job_id is not None:
            _path_params['job-id'] = job_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/jobs/import/{job-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_import_jobs(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetImportJobsResponse:
        """get_import_jobs

        Retrieves information about the status and settings of all the import jobs for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_import_jobs_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetImportJobsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_import_jobs_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetImportJobsResponse]:
        """get_import_jobs

        Retrieves information about the status and settings of all the import jobs for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_import_jobs_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetImportJobsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_import_jobs_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_import_jobs

        Retrieves information about the status and settings of all the import jobs for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_import_jobs_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetImportJobsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_import_jobs_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        page_size,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/jobs/import',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_in_app_messages(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        endpoint_id: Annotated[StrictStr, Field(description="The unique identifier for the endpoint.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetInAppMessagesResponse:
        """get_in_app_messages

        Retrieves the in-app messages targeted for the provided endpoint ID.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param endpoint_id: The unique identifier for the endpoint. (required)
        :type endpoint_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_in_app_messages_serialize(
            application_id=application_id,
            endpoint_id=endpoint_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetInAppMessagesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_in_app_messages_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        endpoint_id: Annotated[StrictStr, Field(description="The unique identifier for the endpoint.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetInAppMessagesResponse]:
        """get_in_app_messages

        Retrieves the in-app messages targeted for the provided endpoint ID.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param endpoint_id: The unique identifier for the endpoint. (required)
        :type endpoint_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_in_app_messages_serialize(
            application_id=application_id,
            endpoint_id=endpoint_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetInAppMessagesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_in_app_messages_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        endpoint_id: Annotated[StrictStr, Field(description="The unique identifier for the endpoint.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_in_app_messages

        Retrieves the in-app messages targeted for the provided endpoint ID.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param endpoint_id: The unique identifier for the endpoint. (required)
        :type endpoint_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_in_app_messages_serialize(
            application_id=application_id,
            endpoint_id=endpoint_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetInAppMessagesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_in_app_messages_serialize(
        self,
        application_id,
        endpoint_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if endpoint_id is not None:
            _path_params['endpoint-id'] = endpoint_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/endpoints/{endpoint-id}/inappmessages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_in_app_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetInAppTemplateResponse:
        """get_in_app_template

        Retrieves the content and settings of a message template for messages sent through the in-app channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_in_app_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetInAppTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_in_app_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetInAppTemplateResponse]:
        """get_in_app_template

        Retrieves the content and settings of a message template for messages sent through the in-app channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_in_app_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetInAppTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_in_app_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_in_app_template

        Retrieves the content and settings of a message template for messages sent through the in-app channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_in_app_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetInAppTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_in_app_template_serialize(
        self,
        template_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/templates/{template-name}/inapp',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_journey(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetJourneyResponse:
        """get_journey

        Retrieves information about the status, configuration, and other settings for a journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_journey_serialize(
            application_id=application_id,
            journey_id=journey_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetJourneyResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_journey_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetJourneyResponse]:
        """get_journey

        Retrieves information about the status, configuration, and other settings for a journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_journey_serialize(
            application_id=application_id,
            journey_id=journey_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetJourneyResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_journey_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_journey

        Retrieves information about the status, configuration, and other settings for a journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_journey_serialize(
            application_id=application_id,
            journey_id=journey_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetJourneyResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_journey_serialize(
        self,
        application_id,
        journey_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if journey_id is not None:
            _path_params['journey-id'] = journey_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/journeys/{journey-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_journey_date_range_kpi(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        kpi_name: Annotated[StrictStr, Field(description="The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        end_time: Annotated[Optional[datetime], Field(description="The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        start_time: Annotated[Optional[datetime], Field(description="The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetJourneyDateRangeKpiResponse:
        """get_journey_date_range_kpi

        Retrieves (queries) pre-aggregated data for a standard engagement metric that applies to a journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param kpi_name: The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>. (required)
        :type kpi_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param end_time: The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
        :type end_time: datetime
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param start_time: The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
        :type start_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_journey_date_range_kpi_serialize(
            application_id=application_id,
            journey_id=journey_id,
            kpi_name=kpi_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            end_time=end_time,
            next_token=next_token,
            page_size=page_size,
            start_time=start_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetJourneyDateRangeKpiResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_journey_date_range_kpi_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        kpi_name: Annotated[StrictStr, Field(description="The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        end_time: Annotated[Optional[datetime], Field(description="The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        start_time: Annotated[Optional[datetime], Field(description="The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetJourneyDateRangeKpiResponse]:
        """get_journey_date_range_kpi

        Retrieves (queries) pre-aggregated data for a standard engagement metric that applies to a journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param kpi_name: The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>. (required)
        :type kpi_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param end_time: The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
        :type end_time: datetime
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param start_time: The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
        :type start_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_journey_date_range_kpi_serialize(
            application_id=application_id,
            journey_id=journey_id,
            kpi_name=kpi_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            end_time=end_time,
            next_token=next_token,
            page_size=page_size,
            start_time=start_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetJourneyDateRangeKpiResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_journey_date_range_kpi_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        kpi_name: Annotated[StrictStr, Field(description="The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        end_time: Annotated[Optional[datetime], Field(description="The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.")] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        start_time: Annotated[Optional[datetime], Field(description="The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_journey_date_range_kpi

        Retrieves (queries) pre-aggregated data for a standard engagement metric that applies to a journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param kpi_name: The name of the metric, also referred to as a <i>key performance indicator (KPI)</i>, to retrieve data for. This value describes the associated metric and consists of two or more terms, which are comprised of lowercase alphanumeric characters, separated by a hyphen. Examples are email-open-rate and successful-delivery-rate. For a list of valid values, see the <a href=\"https://docs.aws.amazon.com/pinpoint/latest/developerguide/analytics-standard-metrics.html\">Amazon Pinpoint Developer Guide</a>. (required)
        :type kpi_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param end_time: The last date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-26T20:00:00Z for 8:00 PM UTC July 26, 2019.
        :type end_time: datetime
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param start_time: The first date and time to retrieve data for, as part of an inclusive date range that filters the query results. This value should be in extended ISO 8601 format and use Coordinated Universal Time (UTC), for example: 2019-07-19T20:00:00Z for 8:00 PM UTC July 19, 2019. This value should also be fewer than 90 days from the current day.
        :type start_time: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_journey_date_range_kpi_serialize(
            application_id=application_id,
            journey_id=journey_id,
            kpi_name=kpi_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            end_time=end_time,
            next_token=next_token,
            page_size=page_size,
            start_time=start_time,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetJourneyDateRangeKpiResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_journey_date_range_kpi_serialize(
        self,
        application_id,
        journey_id,
        kpi_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        end_time,
        next_token,
        page_size,
        start_time,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if journey_id is not None:
            _path_params['journey-id'] = journey_id
        if kpi_name is not None:
            _path_params['kpi-name'] = kpi_name
        # process the query parameters
        if end_time is not None:
            if isinstance(end_time, datetime):
                _query_params.append(
                    (
                        'end-time',
                        end_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('end-time', end_time))
            
        if next_token is not None:
            
            _query_params.append(('next-token', next_token))
            
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if start_time is not None:
            if isinstance(start_time, datetime):
                _query_params.append(
                    (
                        'start-time',
                        start_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('start-time', start_time))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/journeys/{journey-id}/kpis/daterange/{kpi-name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_journey_execution_activity_metrics(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_activity_id: Annotated[StrictStr, Field(description="The unique identifier for the journey activity.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetJourneyExecutionActivityMetricsResponse:
        """get_journey_execution_activity_metrics

        Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey activity.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_activity_id: The unique identifier for the journey activity. (required)
        :type journey_activity_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_journey_execution_activity_metrics_serialize(
            application_id=application_id,
            journey_activity_id=journey_activity_id,
            journey_id=journey_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetJourneyExecutionActivityMetricsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_journey_execution_activity_metrics_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_activity_id: Annotated[StrictStr, Field(description="The unique identifier for the journey activity.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetJourneyExecutionActivityMetricsResponse]:
        """get_journey_execution_activity_metrics

        Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey activity.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_activity_id: The unique identifier for the journey activity. (required)
        :type journey_activity_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_journey_execution_activity_metrics_serialize(
            application_id=application_id,
            journey_activity_id=journey_activity_id,
            journey_id=journey_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetJourneyExecutionActivityMetricsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_journey_execution_activity_metrics_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_activity_id: Annotated[StrictStr, Field(description="The unique identifier for the journey activity.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_journey_execution_activity_metrics

        Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey activity.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_activity_id: The unique identifier for the journey activity. (required)
        :type journey_activity_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_journey_execution_activity_metrics_serialize(
            application_id=application_id,
            journey_activity_id=journey_activity_id,
            journey_id=journey_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetJourneyExecutionActivityMetricsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_journey_execution_activity_metrics_serialize(
        self,
        application_id,
        journey_activity_id,
        journey_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        next_token,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if journey_activity_id is not None:
            _path_params['journey-activity-id'] = journey_activity_id
        if journey_id is not None:
            _path_params['journey-id'] = journey_id
        # process the query parameters
        if next_token is not None:
            
            _query_params.append(('next-token', next_token))
            
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/journeys/{journey-id}/activities/{journey-activity-id}/execution-metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_journey_execution_metrics(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetJourneyExecutionMetricsResponse:
        """get_journey_execution_metrics

        Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_journey_execution_metrics_serialize(
            application_id=application_id,
            journey_id=journey_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetJourneyExecutionMetricsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_journey_execution_metrics_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetJourneyExecutionMetricsResponse]:
        """get_journey_execution_metrics

        Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_journey_execution_metrics_serialize(
            application_id=application_id,
            journey_id=journey_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetJourneyExecutionMetricsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_journey_execution_metrics_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_journey_execution_metrics

        Retrieves (queries) pre-aggregated data for a standard execution metric that applies to a journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_journey_execution_metrics_serialize(
            application_id=application_id,
            journey_id=journey_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetJourneyExecutionMetricsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_journey_execution_metrics_serialize(
        self,
        application_id,
        journey_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        next_token,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if journey_id is not None:
            _path_params['journey-id'] = journey_id
        # process the query parameters
        if next_token is not None:
            
            _query_params.append(('next-token', next_token))
            
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/journeys/{journey-id}/execution-metrics',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_push_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetPushTemplateResponse:
        """get_push_template

        Retrieves the content and settings of a message template for messages that are sent through a push notification channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_push_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPushTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_push_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetPushTemplateResponse]:
        """get_push_template

        Retrieves the content and settings of a message template for messages that are sent through a push notification channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_push_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPushTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_push_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_push_template

        Retrieves the content and settings of a message template for messages that are sent through a push notification channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_push_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetPushTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_push_template_serialize(
        self,
        template_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/templates/{template-name}/push',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recommender_configuration(
        self,
        recommender_id: Annotated[StrictStr, Field(description="The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRecommenderConfigurationResponse:
        """get_recommender_configuration

        Retrieves information about an Amazon Pinpoint configuration for a recommender model.

        :param recommender_id: The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console. (required)
        :type recommender_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recommender_configuration_serialize(
            recommender_id=recommender_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecommenderConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recommender_configuration_with_http_info(
        self,
        recommender_id: Annotated[StrictStr, Field(description="The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRecommenderConfigurationResponse]:
        """get_recommender_configuration

        Retrieves information about an Amazon Pinpoint configuration for a recommender model.

        :param recommender_id: The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console. (required)
        :type recommender_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recommender_configuration_serialize(
            recommender_id=recommender_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecommenderConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recommender_configuration_without_preload_content(
        self,
        recommender_id: Annotated[StrictStr, Field(description="The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_recommender_configuration

        Retrieves information about an Amazon Pinpoint configuration for a recommender model.

        :param recommender_id: The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console. (required)
        :type recommender_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recommender_configuration_serialize(
            recommender_id=recommender_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecommenderConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recommender_configuration_serialize(
        self,
        recommender_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if recommender_id is not None:
            _path_params['recommender-id'] = recommender_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/recommenders/{recommender-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_recommender_configurations(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetRecommenderConfigurationsResponse:
        """get_recommender_configurations

        Retrieves information about all the recommender model configurations that are associated with your Amazon Pinpoint account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recommender_configurations_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecommenderConfigurationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_recommender_configurations_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetRecommenderConfigurationsResponse]:
        """get_recommender_configurations

        Retrieves information about all the recommender model configurations that are associated with your Amazon Pinpoint account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recommender_configurations_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecommenderConfigurationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_recommender_configurations_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_recommender_configurations

        Retrieves information about all the recommender model configurations that are associated with your Amazon Pinpoint account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_recommender_configurations_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetRecommenderConfigurationsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_recommender_configurations_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        page_size,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/recommenders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_segment(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSegmentResponse:
        """get_segment

        Retrieves information about the configuration, dimension, and other settings for a specific segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_segment_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSegmentResponse]:
        """get_segment

        Retrieves information about the configuration, dimension, and other settings for a specific segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_segment_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_segment

        Retrieves information about the configuration, dimension, and other settings for a specific segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_segment_serialize(
        self,
        application_id,
        segment_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if segment_id is not None:
            _path_params['segment-id'] = segment_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/segments/{segment-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_segment_export_jobs(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSegmentExportJobsResponse:
        """get_segment_export_jobs

        Retrieves information about the status and settings of the export jobs for a segment.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_export_jobs_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentExportJobsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_segment_export_jobs_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSegmentExportJobsResponse]:
        """get_segment_export_jobs

        Retrieves information about the status and settings of the export jobs for a segment.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_export_jobs_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentExportJobsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_segment_export_jobs_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_segment_export_jobs

        Retrieves information about the status and settings of the export jobs for a segment.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_export_jobs_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentExportJobsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_segment_export_jobs_serialize(
        self,
        application_id,
        segment_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        page_size,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if segment_id is not None:
            _path_params['segment-id'] = segment_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/segments/{segment-id}/jobs/export',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_segment_import_jobs(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSegmentImportJobsResponse:
        """get_segment_import_jobs

        Retrieves information about the status and settings of the import jobs for a segment.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_import_jobs_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentImportJobsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_segment_import_jobs_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSegmentImportJobsResponse]:
        """get_segment_import_jobs

        Retrieves information about the status and settings of the import jobs for a segment.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_import_jobs_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentImportJobsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_segment_import_jobs_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_segment_import_jobs

        Retrieves information about the status and settings of the import jobs for a segment.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_import_jobs_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentImportJobsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_segment_import_jobs_serialize(
        self,
        application_id,
        segment_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        page_size,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if segment_id is not None:
            _path_params['segment-id'] = segment_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/segments/{segment-id}/jobs/import',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_segment_version(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        version: Annotated[StrictStr, Field(description="The unique version number (Version property) for the campaign version.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSegmentVersionResponse:
        """get_segment_version

        Retrieves information about the configuration, dimension, and other settings for a specific version of a segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param version: The unique version number (Version property) for the campaign version. (required)
        :type version: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_version_serialize(
            application_id=application_id,
            segment_id=segment_id,
            version=version,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentVersionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_segment_version_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        version: Annotated[StrictStr, Field(description="The unique version number (Version property) for the campaign version.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSegmentVersionResponse]:
        """get_segment_version

        Retrieves information about the configuration, dimension, and other settings for a specific version of a segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param version: The unique version number (Version property) for the campaign version. (required)
        :type version: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_version_serialize(
            application_id=application_id,
            segment_id=segment_id,
            version=version,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentVersionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_segment_version_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        version: Annotated[StrictStr, Field(description="The unique version number (Version property) for the campaign version.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_segment_version

        Retrieves information about the configuration, dimension, and other settings for a specific version of a segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param version: The unique version number (Version property) for the campaign version. (required)
        :type version: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_version_serialize(
            application_id=application_id,
            segment_id=segment_id,
            version=version,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentVersionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_segment_version_serialize(
        self,
        application_id,
        segment_id,
        version,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if segment_id is not None:
            _path_params['segment-id'] = segment_id
        if version is not None:
            _path_params['version'] = version
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/segments/{segment-id}/versions/{version}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_segment_versions(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSegmentVersionsResponse:
        """get_segment_versions

        Retrieves information about the configuration, dimension, and other settings for all the versions of a specific segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_versions_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentVersionsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_segment_versions_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSegmentVersionsResponse]:
        """get_segment_versions

        Retrieves information about the configuration, dimension, and other settings for all the versions of a specific segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_versions_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentVersionsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_segment_versions_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_segment_versions

        Retrieves information about the configuration, dimension, and other settings for all the versions of a specific segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segment_versions_serialize(
            application_id=application_id,
            segment_id=segment_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentVersionsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_segment_versions_serialize(
        self,
        application_id,
        segment_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        page_size,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if segment_id is not None:
            _path_params['segment-id'] = segment_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/segments/{segment-id}/versions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_segments(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSegmentsResponse:
        """get_segments

        Retrieves information about the configuration, dimension, and other settings for all the segments that are associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segments_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_segments_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSegmentsResponse]:
        """get_segments

        Retrieves information about the configuration, dimension, and other settings for all the segments that are associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segments_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_segments_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_segments

        Retrieves information about the configuration, dimension, and other settings for all the segments that are associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_segments_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSegmentsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_segments_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        page_size,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/segments',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_sms_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSmsChannelResponse:
        """get_sms_channel

        Retrieves information about the status and settings of the SMS channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sms_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSmsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_sms_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSmsChannelResponse]:
        """get_sms_channel

        Retrieves information about the status and settings of the SMS channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sms_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSmsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_sms_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_sms_channel

        Retrieves information about the status and settings of the SMS channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sms_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSmsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_sms_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/channels/sms',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_sms_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetSmsTemplateResponse:
        """get_sms_template

        Retrieves the content and settings of a message template for messages that are sent through the SMS channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sms_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSmsTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_sms_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetSmsTemplateResponse]:
        """get_sms_template

        Retrieves the content and settings of a message template for messages that are sent through the SMS channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sms_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSmsTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_sms_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_sms_template

        Retrieves the content and settings of a message template for messages that are sent through the SMS channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_sms_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetSmsTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_sms_template_serialize(
        self,
        template_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/templates/{template-name}/sms',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_user_endpoints(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        user_id: Annotated[StrictStr, Field(description="The unique identifier for the user.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetUserEndpointsResponse:
        """get_user_endpoints

        Retrieves information about all the endpoints that are associated with a specific user ID.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param user_id: The unique identifier for the user. (required)
        :type user_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_user_endpoints_serialize(
            application_id=application_id,
            user_id=user_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUserEndpointsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_user_endpoints_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        user_id: Annotated[StrictStr, Field(description="The unique identifier for the user.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetUserEndpointsResponse]:
        """get_user_endpoints

        Retrieves information about all the endpoints that are associated with a specific user ID.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param user_id: The unique identifier for the user. (required)
        :type user_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_user_endpoints_serialize(
            application_id=application_id,
            user_id=user_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUserEndpointsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_user_endpoints_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        user_id: Annotated[StrictStr, Field(description="The unique identifier for the user.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_user_endpoints

        Retrieves information about all the endpoints that are associated with a specific user ID.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param user_id: The unique identifier for the user. (required)
        :type user_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_user_endpoints_serialize(
            application_id=application_id,
            user_id=user_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetUserEndpointsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_user_endpoints_serialize(
        self,
        application_id,
        user_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if user_id is not None:
            _path_params['user-id'] = user_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/users/{user-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_voice_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetVoiceChannelResponse:
        """get_voice_channel

        Retrieves information about the status and settings of the voice channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_voice_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVoiceChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_voice_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetVoiceChannelResponse]:
        """get_voice_channel

        Retrieves information about the status and settings of the voice channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_voice_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVoiceChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_voice_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_voice_channel

        Retrieves information about the status and settings of the voice channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_voice_channel_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVoiceChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_voice_channel_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/channels/voice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_voice_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetVoiceTemplateResponse:
        """get_voice_template

        Retrieves the content and settings of a message template for messages that are sent through the voice channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_voice_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVoiceTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_voice_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetVoiceTemplateResponse]:
        """get_voice_template

        Retrieves the content and settings of a message template for messages that are sent through the voice channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_voice_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVoiceTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_voice_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_voice_template

        Retrieves the content and settings of a message template for messages that are sent through the voice channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_voice_template_serialize(
            template_name=template_name,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetVoiceTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_voice_template_serialize(
        self,
        template_name,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/templates/{template-name}/voice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_journeys(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListJourneysResponse:
        """list_journeys

        Retrieves information about the status, configuration, and other settings for all the journeys that are associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_journeys_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListJourneysResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_journeys_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListJourneysResponse]:
        """list_journeys

        Retrieves information about the status, configuration, and other settings for all the journeys that are associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_journeys_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListJourneysResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_journeys_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        token: Annotated[Optional[StrictStr], Field(description="The NextToken string that specifies which page of results to return in a paginated response.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_journeys

        Retrieves information about the status, configuration, and other settings for all the journeys that are associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param token: The NextToken string that specifies which page of results to return in a paginated response.
        :type token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_journeys_serialize(
            application_id=application_id,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            page_size=page_size,
            token=token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListJourneysResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_journeys_serialize(
        self,
        application_id,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        page_size,
        token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if token is not None:
            
            _query_params.append(('token', token))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/apps/{application-id}/journeys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_tags_for_resource(
        self,
        resource_arn: Annotated[StrictStr, Field(description="The Amazon Resource Name (ARN) of the resource.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListTagsForResourceResponse:
        """list_tags_for_resource

        Retrieves all the tags (keys and values) that are associated with an application, campaign, message template, or segment.

        :param resource_arn: The Amazon Resource Name (ARN) of the resource. (required)
        :type resource_arn: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_tags_for_resource_serialize(
            resource_arn=resource_arn,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTagsForResourceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_tags_for_resource_with_http_info(
        self,
        resource_arn: Annotated[StrictStr, Field(description="The Amazon Resource Name (ARN) of the resource.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListTagsForResourceResponse]:
        """list_tags_for_resource

        Retrieves all the tags (keys and values) that are associated with an application, campaign, message template, or segment.

        :param resource_arn: The Amazon Resource Name (ARN) of the resource. (required)
        :type resource_arn: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_tags_for_resource_serialize(
            resource_arn=resource_arn,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTagsForResourceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_tags_for_resource_without_preload_content(
        self,
        resource_arn: Annotated[StrictStr, Field(description="The Amazon Resource Name (ARN) of the resource.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_tags_for_resource

        Retrieves all the tags (keys and values) that are associated with an application, campaign, message template, or segment.

        :param resource_arn: The Amazon Resource Name (ARN) of the resource. (required)
        :type resource_arn: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_tags_for_resource_serialize(
            resource_arn=resource_arn,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTagsForResourceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_tags_for_resource_serialize(
        self,
        resource_arn,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_arn is not None:
            _path_params['resource-arn'] = resource_arn
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/tags/{resource-arn}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_template_versions(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        template_type: Annotated[StrictStr, Field(description="The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListTemplateVersionsResponse:
        """list_template_versions

        Retrieves information about all the versions of a specific message template.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param template_type: The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE. (required)
        :type template_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_template_versions_serialize(
            template_name=template_name,
            template_type=template_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTemplateVersionsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_template_versions_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        template_type: Annotated[StrictStr, Field(description="The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListTemplateVersionsResponse]:
        """list_template_versions

        Retrieves information about all the versions of a specific message template.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param template_type: The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE. (required)
        :type template_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_template_versions_serialize(
            template_name=template_name,
            template_type=template_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTemplateVersionsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_template_versions_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        template_type: Annotated[StrictStr, Field(description="The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE.")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_template_versions

        Retrieves information about all the versions of a specific message template.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param template_type: The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE. (required)
        :type template_type: str
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_template_versions_serialize(
            template_name=template_name,
            template_type=template_type,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            page_size=page_size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTemplateVersionsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_template_versions_serialize(
        self,
        template_name,
        template_type,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        next_token,
        page_size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        if template_type is not None:
            _path_params['template-type'] = template_type
        # process the query parameters
        if next_token is not None:
            
            _query_params.append(('next-token', next_token))
            
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/templates/{template-name}/{template-type}/versions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_templates(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        prefix: Annotated[Optional[StrictStr], Field(description="The substring to match in the names of the message templates to include in the results. If you specify this value, Amazon Pinpoint returns only those templates whose names begin with the value that you specify.")] = None,
        template_type: Annotated[Optional[StrictStr], Field(description="The type of message template to include in the results. Valid values are: EMAIL, PUSH, SMS, and VOICE. To include all types of templates in the results, don't include this parameter in your request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListTemplatesResponse:
        """list_templates

        Retrieves information about all the message templates that are associated with your Amazon Pinpoint account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param prefix: The substring to match in the names of the message templates to include in the results. If you specify this value, Amazon Pinpoint returns only those templates whose names begin with the value that you specify.
        :type prefix: str
        :param template_type: The type of message template to include in the results. Valid values are: EMAIL, PUSH, SMS, and VOICE. To include all types of templates in the results, don't include this parameter in your request.
        :type template_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_templates_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            page_size=page_size,
            prefix=prefix,
            template_type=template_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTemplatesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_templates_with_http_info(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        prefix: Annotated[Optional[StrictStr], Field(description="The substring to match in the names of the message templates to include in the results. If you specify this value, Amazon Pinpoint returns only those templates whose names begin with the value that you specify.")] = None,
        template_type: Annotated[Optional[StrictStr], Field(description="The type of message template to include in the results. Valid values are: EMAIL, PUSH, SMS, and VOICE. To include all types of templates in the results, don't include this parameter in your request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListTemplatesResponse]:
        """list_templates

        Retrieves information about all the message templates that are associated with your Amazon Pinpoint account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param prefix: The substring to match in the names of the message templates to include in the results. If you specify this value, Amazon Pinpoint returns only those templates whose names begin with the value that you specify.
        :type prefix: str
        :param template_type: The type of message template to include in the results. Valid values are: EMAIL, PUSH, SMS, and VOICE. To include all types of templates in the results, don't include this parameter in your request.
        :type template_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_templates_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            page_size=page_size,
            prefix=prefix,
            template_type=template_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTemplatesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_templates_without_preload_content(
        self,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        next_token: Annotated[Optional[StrictStr], Field(description="The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        page_size: Annotated[Optional[StrictStr], Field(description="The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.")] = None,
        prefix: Annotated[Optional[StrictStr], Field(description="The substring to match in the names of the message templates to include in the results. If you specify this value, Amazon Pinpoint returns only those templates whose names begin with the value that you specify.")] = None,
        template_type: Annotated[Optional[StrictStr], Field(description="The type of message template to include in the results. Valid values are: EMAIL, PUSH, SMS, and VOICE. To include all types of templates in the results, don't include this parameter in your request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """list_templates

        Retrieves information about all the message templates that are associated with your Amazon Pinpoint account.

        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param next_token: The  string that specifies which page of results to return in a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type next_token: str
        :param page_size: The maximum number of items to include in each page of a paginated response. This parameter is not supported for application, campaign, and journey metrics.
        :type page_size: str
        :param prefix: The substring to match in the names of the message templates to include in the results. If you specify this value, Amazon Pinpoint returns only those templates whose names begin with the value that you specify.
        :type prefix: str
        :param template_type: The type of message template to include in the results. Valid values are: EMAIL, PUSH, SMS, and VOICE. To include all types of templates in the results, don't include this parameter in your request.
        :type template_type: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_templates_serialize(
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            next_token=next_token,
            page_size=page_size,
            prefix=prefix,
            template_type=template_type,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListTemplatesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_templates_serialize(
        self,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        next_token,
        page_size,
        prefix,
        template_type,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if next_token is not None:
            
            _query_params.append(('next-token', next_token))
            
        if page_size is not None:
            
            _query_params.append(('page-size', page_size))
            
        if prefix is not None:
            
            _query_params.append(('prefix', prefix))
            
        if template_type is not None:
            
            _query_params.append(('template-type', template_type))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/templates',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def phone_number_validate(
        self,
        phone_number_validate_request: PhoneNumberValidateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PhoneNumberValidateResponse:
        """phone_number_validate

        Retrieves information about a phone number.

        :param phone_number_validate_request: (required)
        :type phone_number_validate_request: PhoneNumberValidateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._phone_number_validate_serialize(
            phone_number_validate_request=phone_number_validate_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PhoneNumberValidateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def phone_number_validate_with_http_info(
        self,
        phone_number_validate_request: PhoneNumberValidateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PhoneNumberValidateResponse]:
        """phone_number_validate

        Retrieves information about a phone number.

        :param phone_number_validate_request: (required)
        :type phone_number_validate_request: PhoneNumberValidateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._phone_number_validate_serialize(
            phone_number_validate_request=phone_number_validate_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PhoneNumberValidateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def phone_number_validate_without_preload_content(
        self,
        phone_number_validate_request: PhoneNumberValidateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """phone_number_validate

        Retrieves information about a phone number.

        :param phone_number_validate_request: (required)
        :type phone_number_validate_request: PhoneNumberValidateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._phone_number_validate_serialize(
            phone_number_validate_request=phone_number_validate_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PhoneNumberValidateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _phone_number_validate_serialize(
        self,
        phone_number_validate_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if phone_number_validate_request is not None:
            _body_params = phone_number_validate_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/phone/number/validate',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_event_stream(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        put_event_stream_request: PutEventStreamRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PutEventStreamResponse:
        """put_event_stream

        Creates a new event stream for an application or updates the settings of an existing event stream for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param put_event_stream_request: (required)
        :type put_event_stream_request: PutEventStreamRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_event_stream_serialize(
            application_id=application_id,
            put_event_stream_request=put_event_stream_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PutEventStreamResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_event_stream_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        put_event_stream_request: PutEventStreamRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PutEventStreamResponse]:
        """put_event_stream

        Creates a new event stream for an application or updates the settings of an existing event stream for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param put_event_stream_request: (required)
        :type put_event_stream_request: PutEventStreamRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_event_stream_serialize(
            application_id=application_id,
            put_event_stream_request=put_event_stream_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PutEventStreamResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_event_stream_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        put_event_stream_request: PutEventStreamRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_event_stream

        Creates a new event stream for an application or updates the settings of an existing event stream for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param put_event_stream_request: (required)
        :type put_event_stream_request: PutEventStreamRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_event_stream_serialize(
            application_id=application_id,
            put_event_stream_request=put_event_stream_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PutEventStreamResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_event_stream_serialize(
        self,
        application_id,
        put_event_stream_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if put_event_stream_request is not None:
            _body_params = put_event_stream_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/apps/{application-id}/eventstream',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def put_events(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        put_events_request: PutEventsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PutEventsResponse:
        """put_events

        Creates a new event to record for endpoints, or creates or updates endpoint data that existing events are associated with.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param put_events_request: (required)
        :type put_events_request: PutEventsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_events_serialize(
            application_id=application_id,
            put_events_request=put_events_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "PutEventsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def put_events_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        put_events_request: PutEventsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PutEventsResponse]:
        """put_events

        Creates a new event to record for endpoints, or creates or updates endpoint data that existing events are associated with.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param put_events_request: (required)
        :type put_events_request: PutEventsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_events_serialize(
            application_id=application_id,
            put_events_request=put_events_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "PutEventsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def put_events_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        put_events_request: PutEventsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """put_events

        Creates a new event to record for endpoints, or creates or updates endpoint data that existing events are associated with.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param put_events_request: (required)
        :type put_events_request: PutEventsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._put_events_serialize(
            application_id=application_id,
            put_events_request=put_events_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "PutEventsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _put_events_serialize(
        self,
        application_id,
        put_events_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if put_events_request is not None:
            _body_params = put_events_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/apps/{application-id}/events',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def remove_attributes(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        attribute_type: Annotated[StrictStr, Field(description=" <p>The type of attribute or attributes to remove. Valid values are:</p> <ul><li><p>endpoint-custom-attributes - Custom attributes that describe endpoints, such as the date when an associated user opted in or out of receiving communications from you through a specific type of channel.</p></li> <li><p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints, such as the number of app sessions or the number of items left in a cart.</p></li> <li><p>endpoint-user-attributes - Custom attributes that describe users, such as first name, last name, and age.</p></li></ul>")],
        remove_attributes_request: RemoveAttributesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RemoveAttributesResponse:
        """remove_attributes

        Removes one or more attributes, of the same attribute type, from all the endpoints that are associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param attribute_type:  <p>The type of attribute or attributes to remove. Valid values are:</p> <ul><li><p>endpoint-custom-attributes - Custom attributes that describe endpoints, such as the date when an associated user opted in or out of receiving communications from you through a specific type of channel.</p></li> <li><p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints, such as the number of app sessions or the number of items left in a cart.</p></li> <li><p>endpoint-user-attributes - Custom attributes that describe users, such as first name, last name, and age.</p></li></ul> (required)
        :type attribute_type: str
        :param remove_attributes_request: (required)
        :type remove_attributes_request: RemoveAttributesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_attributes_serialize(
            application_id=application_id,
            attribute_type=attribute_type,
            remove_attributes_request=remove_attributes_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RemoveAttributesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def remove_attributes_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        attribute_type: Annotated[StrictStr, Field(description=" <p>The type of attribute or attributes to remove. Valid values are:</p> <ul><li><p>endpoint-custom-attributes - Custom attributes that describe endpoints, such as the date when an associated user opted in or out of receiving communications from you through a specific type of channel.</p></li> <li><p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints, such as the number of app sessions or the number of items left in a cart.</p></li> <li><p>endpoint-user-attributes - Custom attributes that describe users, such as first name, last name, and age.</p></li></ul>")],
        remove_attributes_request: RemoveAttributesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RemoveAttributesResponse]:
        """remove_attributes

        Removes one or more attributes, of the same attribute type, from all the endpoints that are associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param attribute_type:  <p>The type of attribute or attributes to remove. Valid values are:</p> <ul><li><p>endpoint-custom-attributes - Custom attributes that describe endpoints, such as the date when an associated user opted in or out of receiving communications from you through a specific type of channel.</p></li> <li><p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints, such as the number of app sessions or the number of items left in a cart.</p></li> <li><p>endpoint-user-attributes - Custom attributes that describe users, such as first name, last name, and age.</p></li></ul> (required)
        :type attribute_type: str
        :param remove_attributes_request: (required)
        :type remove_attributes_request: RemoveAttributesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_attributes_serialize(
            application_id=application_id,
            attribute_type=attribute_type,
            remove_attributes_request=remove_attributes_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RemoveAttributesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def remove_attributes_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        attribute_type: Annotated[StrictStr, Field(description=" <p>The type of attribute or attributes to remove. Valid values are:</p> <ul><li><p>endpoint-custom-attributes - Custom attributes that describe endpoints, such as the date when an associated user opted in or out of receiving communications from you through a specific type of channel.</p></li> <li><p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints, such as the number of app sessions or the number of items left in a cart.</p></li> <li><p>endpoint-user-attributes - Custom attributes that describe users, such as first name, last name, and age.</p></li></ul>")],
        remove_attributes_request: RemoveAttributesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """remove_attributes

        Removes one or more attributes, of the same attribute type, from all the endpoints that are associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param attribute_type:  <p>The type of attribute or attributes to remove. Valid values are:</p> <ul><li><p>endpoint-custom-attributes - Custom attributes that describe endpoints, such as the date when an associated user opted in or out of receiving communications from you through a specific type of channel.</p></li> <li><p>endpoint-metric-attributes - Custom metrics that your app reports to Amazon Pinpoint for endpoints, such as the number of app sessions or the number of items left in a cart.</p></li> <li><p>endpoint-user-attributes - Custom attributes that describe users, such as first name, last name, and age.</p></li></ul> (required)
        :type attribute_type: str
        :param remove_attributes_request: (required)
        :type remove_attributes_request: RemoveAttributesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._remove_attributes_serialize(
            application_id=application_id,
            attribute_type=attribute_type,
            remove_attributes_request=remove_attributes_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RemoveAttributesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _remove_attributes_serialize(
        self,
        application_id,
        attribute_type,
        remove_attributes_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if attribute_type is not None:
            _path_params['attribute-type'] = attribute_type
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if remove_attributes_request is not None:
            _body_params = remove_attributes_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/attributes/{attribute-type}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def send_messages(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        send_messages_request: SendMessagesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SendMessagesResponse:
        """send_messages

        Creates and sends a direct message.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param send_messages_request: (required)
        :type send_messages_request: SendMessagesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_messages_serialize(
            application_id=application_id,
            send_messages_request=send_messages_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SendMessagesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def send_messages_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        send_messages_request: SendMessagesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SendMessagesResponse]:
        """send_messages

        Creates and sends a direct message.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param send_messages_request: (required)
        :type send_messages_request: SendMessagesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_messages_serialize(
            application_id=application_id,
            send_messages_request=send_messages_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SendMessagesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def send_messages_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        send_messages_request: SendMessagesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """send_messages

        Creates and sends a direct message.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param send_messages_request: (required)
        :type send_messages_request: SendMessagesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_messages_serialize(
            application_id=application_id,
            send_messages_request=send_messages_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SendMessagesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _send_messages_serialize(
        self,
        application_id,
        send_messages_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if send_messages_request is not None:
            _body_params = send_messages_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/apps/{application-id}/messages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def send_otp_message(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique ID of your Amazon Pinpoint application.")],
        send_otp_message_request: SendOTPMessageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SendOTPMessageResponse:
        """send_otp_message

        Send an OTP message

        :param application_id: The unique ID of your Amazon Pinpoint application. (required)
        :type application_id: str
        :param send_otp_message_request: (required)
        :type send_otp_message_request: SendOTPMessageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_otp_message_serialize(
            application_id=application_id,
            send_otp_message_request=send_otp_message_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SendOTPMessageResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def send_otp_message_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique ID of your Amazon Pinpoint application.")],
        send_otp_message_request: SendOTPMessageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SendOTPMessageResponse]:
        """send_otp_message

        Send an OTP message

        :param application_id: The unique ID of your Amazon Pinpoint application. (required)
        :type application_id: str
        :param send_otp_message_request: (required)
        :type send_otp_message_request: SendOTPMessageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_otp_message_serialize(
            application_id=application_id,
            send_otp_message_request=send_otp_message_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SendOTPMessageResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def send_otp_message_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique ID of your Amazon Pinpoint application.")],
        send_otp_message_request: SendOTPMessageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """send_otp_message

        Send an OTP message

        :param application_id: The unique ID of your Amazon Pinpoint application. (required)
        :type application_id: str
        :param send_otp_message_request: (required)
        :type send_otp_message_request: SendOTPMessageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_otp_message_serialize(
            application_id=application_id,
            send_otp_message_request=send_otp_message_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SendOTPMessageResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _send_otp_message_serialize(
        self,
        application_id,
        send_otp_message_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if send_otp_message_request is not None:
            _body_params = send_otp_message_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/apps/{application-id}/otp',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def send_users_messages(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        send_users_messages_request: SendUsersMessagesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SendUsersMessagesResponse:
        """send_users_messages

        Creates and sends a message to a list of users.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param send_users_messages_request: (required)
        :type send_users_messages_request: SendUsersMessagesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_users_messages_serialize(
            application_id=application_id,
            send_users_messages_request=send_users_messages_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SendUsersMessagesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def send_users_messages_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        send_users_messages_request: SendUsersMessagesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SendUsersMessagesResponse]:
        """send_users_messages

        Creates and sends a message to a list of users.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param send_users_messages_request: (required)
        :type send_users_messages_request: SendUsersMessagesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_users_messages_serialize(
            application_id=application_id,
            send_users_messages_request=send_users_messages_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SendUsersMessagesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def send_users_messages_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        send_users_messages_request: SendUsersMessagesRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """send_users_messages

        Creates and sends a message to a list of users.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param send_users_messages_request: (required)
        :type send_users_messages_request: SendUsersMessagesRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._send_users_messages_serialize(
            application_id=application_id,
            send_users_messages_request=send_users_messages_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SendUsersMessagesResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _send_users_messages_serialize(
        self,
        application_id,
        send_users_messages_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if send_users_messages_request is not None:
            _body_params = send_users_messages_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/apps/{application-id}/users-messages',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def tag_resource(
        self,
        resource_arn: Annotated[StrictStr, Field(description="The Amazon Resource Name (ARN) of the resource.")],
        tag_resource_request: TagResourceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """tag_resource

        Adds one or more tags (keys and values) to an application, campaign, message template, or segment.

        :param resource_arn: The Amazon Resource Name (ARN) of the resource. (required)
        :type resource_arn: str
        :param tag_resource_request: (required)
        :type tag_resource_request: TagResourceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tag_resource_serialize(
            resource_arn=resource_arn,
            tag_resource_request=tag_resource_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def tag_resource_with_http_info(
        self,
        resource_arn: Annotated[StrictStr, Field(description="The Amazon Resource Name (ARN) of the resource.")],
        tag_resource_request: TagResourceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """tag_resource

        Adds one or more tags (keys and values) to an application, campaign, message template, or segment.

        :param resource_arn: The Amazon Resource Name (ARN) of the resource. (required)
        :type resource_arn: str
        :param tag_resource_request: (required)
        :type tag_resource_request: TagResourceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tag_resource_serialize(
            resource_arn=resource_arn,
            tag_resource_request=tag_resource_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def tag_resource_without_preload_content(
        self,
        resource_arn: Annotated[StrictStr, Field(description="The Amazon Resource Name (ARN) of the resource.")],
        tag_resource_request: TagResourceRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """tag_resource

        Adds one or more tags (keys and values) to an application, campaign, message template, or segment.

        :param resource_arn: The Amazon Resource Name (ARN) of the resource. (required)
        :type resource_arn: str
        :param tag_resource_request: (required)
        :type tag_resource_request: TagResourceRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._tag_resource_serialize(
            resource_arn=resource_arn,
            tag_resource_request=tag_resource_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _tag_resource_serialize(
        self,
        resource_arn,
        tag_resource_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_arn is not None:
            _path_params['resource-arn'] = resource_arn
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if tag_resource_request is not None:
            _body_params = tag_resource_request



        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/tags/{resource-arn}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def untag_resource(
        self,
        resource_arn: Annotated[StrictStr, Field(description="The Amazon Resource Name (ARN) of the resource.")],
        tag_keys: Annotated[List[StrictStr], Field(description="The key of the tag to remove from the resource. To remove multiple tags, append the tagKeys parameter and argument for each additional tag to remove, separated by an ampersand (&amp;).")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """untag_resource

        Removes one or more tags (keys and values) from an application, campaign, message template, or segment.

        :param resource_arn: The Amazon Resource Name (ARN) of the resource. (required)
        :type resource_arn: str
        :param tag_keys: The key of the tag to remove from the resource. To remove multiple tags, append the tagKeys parameter and argument for each additional tag to remove, separated by an ampersand (&amp;). (required)
        :type tag_keys: List[str]
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._untag_resource_serialize(
            resource_arn=resource_arn,
            tag_keys=tag_keys,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def untag_resource_with_http_info(
        self,
        resource_arn: Annotated[StrictStr, Field(description="The Amazon Resource Name (ARN) of the resource.")],
        tag_keys: Annotated[List[StrictStr], Field(description="The key of the tag to remove from the resource. To remove multiple tags, append the tagKeys parameter and argument for each additional tag to remove, separated by an ampersand (&amp;).")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """untag_resource

        Removes one or more tags (keys and values) from an application, campaign, message template, or segment.

        :param resource_arn: The Amazon Resource Name (ARN) of the resource. (required)
        :type resource_arn: str
        :param tag_keys: The key of the tag to remove from the resource. To remove multiple tags, append the tagKeys parameter and argument for each additional tag to remove, separated by an ampersand (&amp;). (required)
        :type tag_keys: List[str]
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._untag_resource_serialize(
            resource_arn=resource_arn,
            tag_keys=tag_keys,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def untag_resource_without_preload_content(
        self,
        resource_arn: Annotated[StrictStr, Field(description="The Amazon Resource Name (ARN) of the resource.")],
        tag_keys: Annotated[List[StrictStr], Field(description="The key of the tag to remove from the resource. To remove multiple tags, append the tagKeys parameter and argument for each additional tag to remove, separated by an ampersand (&amp;).")],
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """untag_resource

        Removes one or more tags (keys and values) from an application, campaign, message template, or segment.

        :param resource_arn: The Amazon Resource Name (ARN) of the resource. (required)
        :type resource_arn: str
        :param tag_keys: The key of the tag to remove from the resource. To remove multiple tags, append the tagKeys parameter and argument for each additional tag to remove, separated by an ampersand (&amp;). (required)
        :type tag_keys: List[str]
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._untag_resource_serialize(
            resource_arn=resource_arn,
            tag_keys=tag_keys,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _untag_resource_serialize(
        self,
        resource_arn,
        tag_keys,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'tagKeys': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource_arn is not None:
            _path_params['resource-arn'] = resource_arn
        # process the query parameters
        if tag_keys is not None:
            
            _query_params.append(('tagKeys', tag_keys))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1/tags/{resource-arn}#tagKeys',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_adm_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_adm_channel_request: UpdateAdmChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateAdmChannelResponse:
        """update_adm_channel

        Enables the ADM channel for an application or updates the status and settings of the ADM channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_adm_channel_request: (required)
        :type update_adm_channel_request: UpdateAdmChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_adm_channel_serialize(
            application_id=application_id,
            update_adm_channel_request=update_adm_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateAdmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_adm_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_adm_channel_request: UpdateAdmChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateAdmChannelResponse]:
        """update_adm_channel

        Enables the ADM channel for an application or updates the status and settings of the ADM channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_adm_channel_request: (required)
        :type update_adm_channel_request: UpdateAdmChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_adm_channel_serialize(
            application_id=application_id,
            update_adm_channel_request=update_adm_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateAdmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_adm_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_adm_channel_request: UpdateAdmChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_adm_channel

        Enables the ADM channel for an application or updates the status and settings of the ADM channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_adm_channel_request: (required)
        :type update_adm_channel_request: UpdateAdmChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_adm_channel_serialize(
            application_id=application_id,
            update_adm_channel_request=update_adm_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateAdmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_adm_channel_serialize(
        self,
        application_id,
        update_adm_channel_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_adm_channel_request is not None:
            _body_params = update_adm_channel_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/channels/adm',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_apns_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_apns_channel_request: UpdateApnsChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateApnsChannelResponse:
        """update_apns_channel

        Enables the APNs channel for an application or updates the status and settings of the APNs channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_apns_channel_request: (required)
        :type update_apns_channel_request: UpdateApnsChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_apns_channel_serialize(
            application_id=application_id,
            update_apns_channel_request=update_apns_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApnsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_apns_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_apns_channel_request: UpdateApnsChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateApnsChannelResponse]:
        """update_apns_channel

        Enables the APNs channel for an application or updates the status and settings of the APNs channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_apns_channel_request: (required)
        :type update_apns_channel_request: UpdateApnsChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_apns_channel_serialize(
            application_id=application_id,
            update_apns_channel_request=update_apns_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApnsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_apns_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_apns_channel_request: UpdateApnsChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_apns_channel

        Enables the APNs channel for an application or updates the status and settings of the APNs channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_apns_channel_request: (required)
        :type update_apns_channel_request: UpdateApnsChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_apns_channel_serialize(
            application_id=application_id,
            update_apns_channel_request=update_apns_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApnsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_apns_channel_serialize(
        self,
        application_id,
        update_apns_channel_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_apns_channel_request is not None:
            _body_params = update_apns_channel_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/channels/apns',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_apns_sandbox_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_apns_sandbox_channel_request: UpdateApnsSandboxChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateApnsSandboxChannelResponse:
        """update_apns_sandbox_channel

        Enables the APNs sandbox channel for an application or updates the status and settings of the APNs sandbox channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_apns_sandbox_channel_request: (required)
        :type update_apns_sandbox_channel_request: UpdateApnsSandboxChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_apns_sandbox_channel_serialize(
            application_id=application_id,
            update_apns_sandbox_channel_request=update_apns_sandbox_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApnsSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_apns_sandbox_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_apns_sandbox_channel_request: UpdateApnsSandboxChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateApnsSandboxChannelResponse]:
        """update_apns_sandbox_channel

        Enables the APNs sandbox channel for an application or updates the status and settings of the APNs sandbox channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_apns_sandbox_channel_request: (required)
        :type update_apns_sandbox_channel_request: UpdateApnsSandboxChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_apns_sandbox_channel_serialize(
            application_id=application_id,
            update_apns_sandbox_channel_request=update_apns_sandbox_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApnsSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_apns_sandbox_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_apns_sandbox_channel_request: UpdateApnsSandboxChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_apns_sandbox_channel

        Enables the APNs sandbox channel for an application or updates the status and settings of the APNs sandbox channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_apns_sandbox_channel_request: (required)
        :type update_apns_sandbox_channel_request: UpdateApnsSandboxChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_apns_sandbox_channel_serialize(
            application_id=application_id,
            update_apns_sandbox_channel_request=update_apns_sandbox_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApnsSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_apns_sandbox_channel_serialize(
        self,
        application_id,
        update_apns_sandbox_channel_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_apns_sandbox_channel_request is not None:
            _body_params = update_apns_sandbox_channel_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/channels/apns_sandbox',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_apns_voip_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_apns_voip_channel_request: UpdateApnsVoipChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateApnsVoipChannelResponse:
        """update_apns_voip_channel

        Enables the APNs VoIP channel for an application or updates the status and settings of the APNs VoIP channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_apns_voip_channel_request: (required)
        :type update_apns_voip_channel_request: UpdateApnsVoipChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_apns_voip_channel_serialize(
            application_id=application_id,
            update_apns_voip_channel_request=update_apns_voip_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApnsVoipChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_apns_voip_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_apns_voip_channel_request: UpdateApnsVoipChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateApnsVoipChannelResponse]:
        """update_apns_voip_channel

        Enables the APNs VoIP channel for an application or updates the status and settings of the APNs VoIP channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_apns_voip_channel_request: (required)
        :type update_apns_voip_channel_request: UpdateApnsVoipChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_apns_voip_channel_serialize(
            application_id=application_id,
            update_apns_voip_channel_request=update_apns_voip_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApnsVoipChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_apns_voip_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_apns_voip_channel_request: UpdateApnsVoipChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_apns_voip_channel

        Enables the APNs VoIP channel for an application or updates the status and settings of the APNs VoIP channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_apns_voip_channel_request: (required)
        :type update_apns_voip_channel_request: UpdateApnsVoipChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_apns_voip_channel_serialize(
            application_id=application_id,
            update_apns_voip_channel_request=update_apns_voip_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApnsVoipChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_apns_voip_channel_serialize(
        self,
        application_id,
        update_apns_voip_channel_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_apns_voip_channel_request is not None:
            _body_params = update_apns_voip_channel_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/channels/apns_voip',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_apns_voip_sandbox_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_apns_voip_sandbox_channel_request: UpdateApnsVoipSandboxChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateApnsVoipSandboxChannelResponse:
        """update_apns_voip_sandbox_channel

        Enables the APNs VoIP sandbox channel for an application or updates the status and settings of the APNs VoIP sandbox channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_apns_voip_sandbox_channel_request: (required)
        :type update_apns_voip_sandbox_channel_request: UpdateApnsVoipSandboxChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_apns_voip_sandbox_channel_serialize(
            application_id=application_id,
            update_apns_voip_sandbox_channel_request=update_apns_voip_sandbox_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApnsVoipSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_apns_voip_sandbox_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_apns_voip_sandbox_channel_request: UpdateApnsVoipSandboxChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateApnsVoipSandboxChannelResponse]:
        """update_apns_voip_sandbox_channel

        Enables the APNs VoIP sandbox channel for an application or updates the status and settings of the APNs VoIP sandbox channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_apns_voip_sandbox_channel_request: (required)
        :type update_apns_voip_sandbox_channel_request: UpdateApnsVoipSandboxChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_apns_voip_sandbox_channel_serialize(
            application_id=application_id,
            update_apns_voip_sandbox_channel_request=update_apns_voip_sandbox_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApnsVoipSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_apns_voip_sandbox_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_apns_voip_sandbox_channel_request: UpdateApnsVoipSandboxChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_apns_voip_sandbox_channel

        Enables the APNs VoIP sandbox channel for an application or updates the status and settings of the APNs VoIP sandbox channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_apns_voip_sandbox_channel_request: (required)
        :type update_apns_voip_sandbox_channel_request: UpdateApnsVoipSandboxChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_apns_voip_sandbox_channel_serialize(
            application_id=application_id,
            update_apns_voip_sandbox_channel_request=update_apns_voip_sandbox_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApnsVoipSandboxChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_apns_voip_sandbox_channel_serialize(
        self,
        application_id,
        update_apns_voip_sandbox_channel_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_apns_voip_sandbox_channel_request is not None:
            _body_params = update_apns_voip_sandbox_channel_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/channels/apns_voip_sandbox',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_application_settings(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_application_settings_request: UpdateApplicationSettingsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateApplicationSettingsResponse:
        """update_application_settings

        Updates the settings for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_application_settings_request: (required)
        :type update_application_settings_request: UpdateApplicationSettingsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_application_settings_serialize(
            application_id=application_id,
            update_application_settings_request=update_application_settings_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApplicationSettingsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_application_settings_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_application_settings_request: UpdateApplicationSettingsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateApplicationSettingsResponse]:
        """update_application_settings

        Updates the settings for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_application_settings_request: (required)
        :type update_application_settings_request: UpdateApplicationSettingsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_application_settings_serialize(
            application_id=application_id,
            update_application_settings_request=update_application_settings_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApplicationSettingsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_application_settings_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_application_settings_request: UpdateApplicationSettingsRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_application_settings

        Updates the settings for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_application_settings_request: (required)
        :type update_application_settings_request: UpdateApplicationSettingsRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_application_settings_serialize(
            application_id=application_id,
            update_application_settings_request=update_application_settings_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateApplicationSettingsResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_application_settings_serialize(
        self,
        application_id,
        update_application_settings_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_application_settings_request is not None:
            _body_params = update_application_settings_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/settings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_baidu_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_baidu_channel_request: UpdateBaiduChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateBaiduChannelResponse:
        """update_baidu_channel

        Enables the Baidu channel for an application or updates the status and settings of the Baidu channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_baidu_channel_request: (required)
        :type update_baidu_channel_request: UpdateBaiduChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_baidu_channel_serialize(
            application_id=application_id,
            update_baidu_channel_request=update_baidu_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateBaiduChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_baidu_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_baidu_channel_request: UpdateBaiduChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateBaiduChannelResponse]:
        """update_baidu_channel

        Enables the Baidu channel for an application or updates the status and settings of the Baidu channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_baidu_channel_request: (required)
        :type update_baidu_channel_request: UpdateBaiduChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_baidu_channel_serialize(
            application_id=application_id,
            update_baidu_channel_request=update_baidu_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateBaiduChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_baidu_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_baidu_channel_request: UpdateBaiduChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_baidu_channel

        Enables the Baidu channel for an application or updates the status and settings of the Baidu channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_baidu_channel_request: (required)
        :type update_baidu_channel_request: UpdateBaiduChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_baidu_channel_serialize(
            application_id=application_id,
            update_baidu_channel_request=update_baidu_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateBaiduChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_baidu_channel_serialize(
        self,
        application_id,
        update_baidu_channel_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_baidu_channel_request is not None:
            _body_params = update_baidu_channel_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/channels/baidu',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_campaign(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        create_campaign_request: CreateCampaignRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateCampaignResponse:
        """update_campaign

        Updates the configuration and other settings for a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param create_campaign_request: (required)
        :type create_campaign_request: CreateCampaignRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_campaign_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            create_campaign_request=create_campaign_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateCampaignResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_campaign_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        create_campaign_request: CreateCampaignRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateCampaignResponse]:
        """update_campaign

        Updates the configuration and other settings for a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param create_campaign_request: (required)
        :type create_campaign_request: CreateCampaignRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_campaign_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            create_campaign_request=create_campaign_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateCampaignResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_campaign_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        campaign_id: Annotated[StrictStr, Field(description="The unique identifier for the campaign.")],
        create_campaign_request: CreateCampaignRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_campaign

        Updates the configuration and other settings for a campaign.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param campaign_id: The unique identifier for the campaign. (required)
        :type campaign_id: str
        :param create_campaign_request: (required)
        :type create_campaign_request: CreateCampaignRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_campaign_serialize(
            application_id=application_id,
            campaign_id=campaign_id,
            create_campaign_request=create_campaign_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateCampaignResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_campaign_serialize(
        self,
        application_id,
        campaign_id,
        create_campaign_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if campaign_id is not None:
            _path_params['campaign-id'] = campaign_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_campaign_request is not None:
            _body_params = create_campaign_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/campaigns/{campaign-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_email_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_email_channel_request: UpdateEmailChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateEmailChannelResponse:
        """update_email_channel

        Enables the email channel for an application or updates the status and settings of the email channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_email_channel_request: (required)
        :type update_email_channel_request: UpdateEmailChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_email_channel_serialize(
            application_id=application_id,
            update_email_channel_request=update_email_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateEmailChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_email_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_email_channel_request: UpdateEmailChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateEmailChannelResponse]:
        """update_email_channel

        Enables the email channel for an application or updates the status and settings of the email channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_email_channel_request: (required)
        :type update_email_channel_request: UpdateEmailChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_email_channel_serialize(
            application_id=application_id,
            update_email_channel_request=update_email_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateEmailChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_email_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_email_channel_request: UpdateEmailChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_email_channel

        Enables the email channel for an application or updates the status and settings of the email channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_email_channel_request: (required)
        :type update_email_channel_request: UpdateEmailChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_email_channel_serialize(
            application_id=application_id,
            update_email_channel_request=update_email_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateEmailChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_email_channel_serialize(
        self,
        application_id,
        update_email_channel_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_email_channel_request is not None:
            _body_params = update_email_channel_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/channels/email',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_email_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_email_template_request: UpdateEmailTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateEmailTemplateResponse:
        """update_email_template

        Updates an existing message template for messages that are sent through the email channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_email_template_request: (required)
        :type update_email_template_request: UpdateEmailTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_email_template_serialize(
            template_name=template_name,
            update_email_template_request=update_email_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateEmailTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_email_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_email_template_request: UpdateEmailTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateEmailTemplateResponse]:
        """update_email_template

        Updates an existing message template for messages that are sent through the email channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_email_template_request: (required)
        :type update_email_template_request: UpdateEmailTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_email_template_serialize(
            template_name=template_name,
            update_email_template_request=update_email_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateEmailTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_email_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_email_template_request: UpdateEmailTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_email_template

        Updates an existing message template for messages that are sent through the email channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_email_template_request: (required)
        :type update_email_template_request: UpdateEmailTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_email_template_serialize(
            template_name=template_name,
            update_email_template_request=update_email_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateEmailTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_email_template_serialize(
        self,
        template_name,
        update_email_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        create_new_version,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if create_new_version is not None:
            
            _query_params.append(('create-new-version', create_new_version))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_email_template_request is not None:
            _body_params = update_email_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/templates/{template-name}/email',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_endpoint(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        endpoint_id: Annotated[StrictStr, Field(description="The unique identifier for the endpoint.")],
        update_endpoint_request: UpdateEndpointRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateEndpointResponse:
        """update_endpoint

        Creates a new endpoint for an application or updates the settings and attributes of an existing endpoint for an application. You can also use this operation to define custom attributes for an endpoint. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param endpoint_id: The unique identifier for the endpoint. (required)
        :type endpoint_id: str
        :param update_endpoint_request: (required)
        :type update_endpoint_request: UpdateEndpointRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_endpoint_serialize(
            application_id=application_id,
            endpoint_id=endpoint_id,
            update_endpoint_request=update_endpoint_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateEndpointResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_endpoint_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        endpoint_id: Annotated[StrictStr, Field(description="The unique identifier for the endpoint.")],
        update_endpoint_request: UpdateEndpointRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateEndpointResponse]:
        """update_endpoint

        Creates a new endpoint for an application or updates the settings and attributes of an existing endpoint for an application. You can also use this operation to define custom attributes for an endpoint. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param endpoint_id: The unique identifier for the endpoint. (required)
        :type endpoint_id: str
        :param update_endpoint_request: (required)
        :type update_endpoint_request: UpdateEndpointRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_endpoint_serialize(
            application_id=application_id,
            endpoint_id=endpoint_id,
            update_endpoint_request=update_endpoint_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateEndpointResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_endpoint_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        endpoint_id: Annotated[StrictStr, Field(description="The unique identifier for the endpoint.")],
        update_endpoint_request: UpdateEndpointRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_endpoint

        Creates a new endpoint for an application or updates the settings and attributes of an existing endpoint for an application. You can also use this operation to define custom attributes for an endpoint. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param endpoint_id: The unique identifier for the endpoint. (required)
        :type endpoint_id: str
        :param update_endpoint_request: (required)
        :type update_endpoint_request: UpdateEndpointRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_endpoint_serialize(
            application_id=application_id,
            endpoint_id=endpoint_id,
            update_endpoint_request=update_endpoint_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateEndpointResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_endpoint_serialize(
        self,
        application_id,
        endpoint_id,
        update_endpoint_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if endpoint_id is not None:
            _path_params['endpoint-id'] = endpoint_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_endpoint_request is not None:
            _body_params = update_endpoint_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/endpoints/{endpoint-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_endpoints_batch(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_endpoints_batch_request: UpdateEndpointsBatchRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateEndpointsBatchResponse:
        """update_endpoints_batch

        Creates a new batch of endpoints for an application or updates the settings and attributes of a batch of existing endpoints for an application. You can also use this operation to define custom attributes for a batch of endpoints. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_endpoints_batch_request: (required)
        :type update_endpoints_batch_request: UpdateEndpointsBatchRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_endpoints_batch_serialize(
            application_id=application_id,
            update_endpoints_batch_request=update_endpoints_batch_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateEndpointsBatchResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_endpoints_batch_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_endpoints_batch_request: UpdateEndpointsBatchRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateEndpointsBatchResponse]:
        """update_endpoints_batch

        Creates a new batch of endpoints for an application or updates the settings and attributes of a batch of existing endpoints for an application. You can also use this operation to define custom attributes for a batch of endpoints. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_endpoints_batch_request: (required)
        :type update_endpoints_batch_request: UpdateEndpointsBatchRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_endpoints_batch_serialize(
            application_id=application_id,
            update_endpoints_batch_request=update_endpoints_batch_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateEndpointsBatchResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_endpoints_batch_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_endpoints_batch_request: UpdateEndpointsBatchRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_endpoints_batch

        Creates a new batch of endpoints for an application or updates the settings and attributes of a batch of existing endpoints for an application. You can also use this operation to define custom attributes for a batch of endpoints. If an update includes one or more values for a custom attribute, Amazon Pinpoint replaces (overwrites) any existing values with the new values.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_endpoints_batch_request: (required)
        :type update_endpoints_batch_request: UpdateEndpointsBatchRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_endpoints_batch_serialize(
            application_id=application_id,
            update_endpoints_batch_request=update_endpoints_batch_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateEndpointsBatchResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_endpoints_batch_serialize(
        self,
        application_id,
        update_endpoints_batch_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_endpoints_batch_request is not None:
            _body_params = update_endpoints_batch_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/endpoints',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_gcm_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_gcm_channel_request: UpdateGcmChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateGcmChannelResponse:
        """update_gcm_channel

        Enables the GCM channel for an application or updates the status and settings of the GCM channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_gcm_channel_request: (required)
        :type update_gcm_channel_request: UpdateGcmChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_gcm_channel_serialize(
            application_id=application_id,
            update_gcm_channel_request=update_gcm_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateGcmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_gcm_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_gcm_channel_request: UpdateGcmChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateGcmChannelResponse]:
        """update_gcm_channel

        Enables the GCM channel for an application or updates the status and settings of the GCM channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_gcm_channel_request: (required)
        :type update_gcm_channel_request: UpdateGcmChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_gcm_channel_serialize(
            application_id=application_id,
            update_gcm_channel_request=update_gcm_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateGcmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_gcm_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_gcm_channel_request: UpdateGcmChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_gcm_channel

        Enables the GCM channel for an application or updates the status and settings of the GCM channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_gcm_channel_request: (required)
        :type update_gcm_channel_request: UpdateGcmChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_gcm_channel_serialize(
            application_id=application_id,
            update_gcm_channel_request=update_gcm_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateGcmChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_gcm_channel_serialize(
        self,
        application_id,
        update_gcm_channel_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_gcm_channel_request is not None:
            _body_params = update_gcm_channel_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/channels/gcm',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_in_app_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_in_app_template_request: UpdateInAppTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateInAppTemplateResponse:
        """update_in_app_template

        Updates an existing message template for messages sent through the in-app message channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_in_app_template_request: (required)
        :type update_in_app_template_request: UpdateInAppTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_in_app_template_serialize(
            template_name=template_name,
            update_in_app_template_request=update_in_app_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateInAppTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_in_app_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_in_app_template_request: UpdateInAppTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateInAppTemplateResponse]:
        """update_in_app_template

        Updates an existing message template for messages sent through the in-app message channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_in_app_template_request: (required)
        :type update_in_app_template_request: UpdateInAppTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_in_app_template_serialize(
            template_name=template_name,
            update_in_app_template_request=update_in_app_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateInAppTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_in_app_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_in_app_template_request: UpdateInAppTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_in_app_template

        Updates an existing message template for messages sent through the in-app message channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_in_app_template_request: (required)
        :type update_in_app_template_request: UpdateInAppTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_in_app_template_serialize(
            template_name=template_name,
            update_in_app_template_request=update_in_app_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateInAppTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_in_app_template_serialize(
        self,
        template_name,
        update_in_app_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        create_new_version,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if create_new_version is not None:
            
            _query_params.append(('create-new-version', create_new_version))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_in_app_template_request is not None:
            _body_params = update_in_app_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/templates/{template-name}/inapp',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_journey(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        create_journey_request: CreateJourneyRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateJourneyResponse:
        """update_journey

        Updates the configuration and other settings for a journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param create_journey_request: (required)
        :type create_journey_request: CreateJourneyRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_journey_serialize(
            application_id=application_id,
            journey_id=journey_id,
            create_journey_request=create_journey_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateJourneyResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
            '487': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_journey_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        create_journey_request: CreateJourneyRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateJourneyResponse]:
        """update_journey

        Updates the configuration and other settings for a journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param create_journey_request: (required)
        :type create_journey_request: CreateJourneyRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_journey_serialize(
            application_id=application_id,
            journey_id=journey_id,
            create_journey_request=create_journey_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateJourneyResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
            '487': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_journey_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        create_journey_request: CreateJourneyRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_journey

        Updates the configuration and other settings for a journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param create_journey_request: (required)
        :type create_journey_request: CreateJourneyRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_journey_serialize(
            application_id=application_id,
            journey_id=journey_id,
            create_journey_request=create_journey_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateJourneyResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
            '487': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_journey_serialize(
        self,
        application_id,
        journey_id,
        create_journey_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if journey_id is not None:
            _path_params['journey-id'] = journey_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_journey_request is not None:
            _body_params = create_journey_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/journeys/{journey-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_journey_state(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        update_journey_state_request: UpdateJourneyStateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateJourneyStateResponse:
        """update_journey_state

        Cancels (stops) an active journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param update_journey_state_request: (required)
        :type update_journey_state_request: UpdateJourneyStateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_journey_state_serialize(
            application_id=application_id,
            journey_id=journey_id,
            update_journey_state_request=update_journey_state_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateJourneyStateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_journey_state_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        update_journey_state_request: UpdateJourneyStateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateJourneyStateResponse]:
        """update_journey_state

        Cancels (stops) an active journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param update_journey_state_request: (required)
        :type update_journey_state_request: UpdateJourneyStateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_journey_state_serialize(
            application_id=application_id,
            journey_id=journey_id,
            update_journey_state_request=update_journey_state_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateJourneyStateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_journey_state_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        journey_id: Annotated[StrictStr, Field(description="The unique identifier for the journey.")],
        update_journey_state_request: UpdateJourneyStateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_journey_state

        Cancels (stops) an active journey.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param journey_id: The unique identifier for the journey. (required)
        :type journey_id: str
        :param update_journey_state_request: (required)
        :type update_journey_state_request: UpdateJourneyStateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_journey_state_serialize(
            application_id=application_id,
            journey_id=journey_id,
            update_journey_state_request=update_journey_state_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateJourneyStateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_journey_state_serialize(
        self,
        application_id,
        journey_id,
        update_journey_state_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if journey_id is not None:
            _path_params['journey-id'] = journey_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_journey_state_request is not None:
            _body_params = update_journey_state_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/journeys/{journey-id}/state',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_push_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_push_template_request: UpdatePushTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdatePushTemplateResponse:
        """update_push_template

        Updates an existing message template for messages that are sent through a push notification channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_push_template_request: (required)
        :type update_push_template_request: UpdatePushTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_push_template_serialize(
            template_name=template_name,
            update_push_template_request=update_push_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdatePushTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_push_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_push_template_request: UpdatePushTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdatePushTemplateResponse]:
        """update_push_template

        Updates an existing message template for messages that are sent through a push notification channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_push_template_request: (required)
        :type update_push_template_request: UpdatePushTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_push_template_serialize(
            template_name=template_name,
            update_push_template_request=update_push_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdatePushTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_push_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_push_template_request: UpdatePushTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_push_template

        Updates an existing message template for messages that are sent through a push notification channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_push_template_request: (required)
        :type update_push_template_request: UpdatePushTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_push_template_serialize(
            template_name=template_name,
            update_push_template_request=update_push_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdatePushTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_push_template_serialize(
        self,
        template_name,
        update_push_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        create_new_version,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if create_new_version is not None:
            
            _query_params.append(('create-new-version', create_new_version))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_push_template_request is not None:
            _body_params = update_push_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/templates/{template-name}/push',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_recommender_configuration(
        self,
        recommender_id: Annotated[StrictStr, Field(description="The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console.")],
        update_recommender_configuration_request: UpdateRecommenderConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateRecommenderConfigurationResponse:
        """update_recommender_configuration

        Updates an Amazon Pinpoint configuration for a recommender model.

        :param recommender_id: The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console. (required)
        :type recommender_id: str
        :param update_recommender_configuration_request: (required)
        :type update_recommender_configuration_request: UpdateRecommenderConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_recommender_configuration_serialize(
            recommender_id=recommender_id,
            update_recommender_configuration_request=update_recommender_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateRecommenderConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_recommender_configuration_with_http_info(
        self,
        recommender_id: Annotated[StrictStr, Field(description="The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console.")],
        update_recommender_configuration_request: UpdateRecommenderConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateRecommenderConfigurationResponse]:
        """update_recommender_configuration

        Updates an Amazon Pinpoint configuration for a recommender model.

        :param recommender_id: The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console. (required)
        :type recommender_id: str
        :param update_recommender_configuration_request: (required)
        :type update_recommender_configuration_request: UpdateRecommenderConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_recommender_configuration_serialize(
            recommender_id=recommender_id,
            update_recommender_configuration_request=update_recommender_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateRecommenderConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_recommender_configuration_without_preload_content(
        self,
        recommender_id: Annotated[StrictStr, Field(description="The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console.")],
        update_recommender_configuration_request: UpdateRecommenderConfigurationRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_recommender_configuration

        Updates an Amazon Pinpoint configuration for a recommender model.

        :param recommender_id: The unique identifier for the recommender model configuration. This identifier is displayed as the <b>Recommender ID</b> on the Amazon Pinpoint console. (required)
        :type recommender_id: str
        :param update_recommender_configuration_request: (required)
        :type update_recommender_configuration_request: UpdateRecommenderConfigurationRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_recommender_configuration_serialize(
            recommender_id=recommender_id,
            update_recommender_configuration_request=update_recommender_configuration_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateRecommenderConfigurationResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_recommender_configuration_serialize(
        self,
        recommender_id,
        update_recommender_configuration_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if recommender_id is not None:
            _path_params['recommender-id'] = recommender_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_recommender_configuration_request is not None:
            _body_params = update_recommender_configuration_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/recommenders/{recommender-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_segment(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        create_segment_request: CreateSegmentRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateSegmentResponse:
        """update_segment

        Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param create_segment_request: (required)
        :type create_segment_request: CreateSegmentRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_segment_serialize(
            application_id=application_id,
            segment_id=segment_id,
            create_segment_request=create_segment_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateSegmentResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_segment_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        create_segment_request: CreateSegmentRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateSegmentResponse]:
        """update_segment

        Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param create_segment_request: (required)
        :type create_segment_request: CreateSegmentRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_segment_serialize(
            application_id=application_id,
            segment_id=segment_id,
            create_segment_request=create_segment_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateSegmentResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_segment_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        segment_id: Annotated[StrictStr, Field(description="The unique identifier for the segment.")],
        create_segment_request: CreateSegmentRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_segment

        Creates a new segment for an application or updates the configuration, dimension, and other settings for an existing segment that's associated with an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param segment_id: The unique identifier for the segment. (required)
        :type segment_id: str
        :param create_segment_request: (required)
        :type create_segment_request: CreateSegmentRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_segment_serialize(
            application_id=application_id,
            segment_id=segment_id,
            create_segment_request=create_segment_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateSegmentResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_segment_serialize(
        self,
        application_id,
        segment_id,
        create_segment_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        if segment_id is not None:
            _path_params['segment-id'] = segment_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if create_segment_request is not None:
            _body_params = create_segment_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/segments/{segment-id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_sms_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_sms_channel_request: UpdateSmsChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateSmsChannelResponse:
        """update_sms_channel

        Enables the SMS channel for an application or updates the status and settings of the SMS channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_sms_channel_request: (required)
        :type update_sms_channel_request: UpdateSmsChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_sms_channel_serialize(
            application_id=application_id,
            update_sms_channel_request=update_sms_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateSmsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_sms_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_sms_channel_request: UpdateSmsChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateSmsChannelResponse]:
        """update_sms_channel

        Enables the SMS channel for an application or updates the status and settings of the SMS channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_sms_channel_request: (required)
        :type update_sms_channel_request: UpdateSmsChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_sms_channel_serialize(
            application_id=application_id,
            update_sms_channel_request=update_sms_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateSmsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_sms_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_sms_channel_request: UpdateSmsChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_sms_channel

        Enables the SMS channel for an application or updates the status and settings of the SMS channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_sms_channel_request: (required)
        :type update_sms_channel_request: UpdateSmsChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_sms_channel_serialize(
            application_id=application_id,
            update_sms_channel_request=update_sms_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateSmsChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_sms_channel_serialize(
        self,
        application_id,
        update_sms_channel_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_sms_channel_request is not None:
            _body_params = update_sms_channel_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/channels/sms',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_sms_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_sms_template_request: UpdateSmsTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateSmsTemplateResponse:
        """update_sms_template

        Updates an existing message template for messages that are sent through the SMS channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_sms_template_request: (required)
        :type update_sms_template_request: UpdateSmsTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_sms_template_serialize(
            template_name=template_name,
            update_sms_template_request=update_sms_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateSmsTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_sms_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_sms_template_request: UpdateSmsTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateSmsTemplateResponse]:
        """update_sms_template

        Updates an existing message template for messages that are sent through the SMS channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_sms_template_request: (required)
        :type update_sms_template_request: UpdateSmsTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_sms_template_serialize(
            template_name=template_name,
            update_sms_template_request=update_sms_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateSmsTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_sms_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_sms_template_request: UpdateSmsTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_sms_template

        Updates an existing message template for messages that are sent through the SMS channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_sms_template_request: (required)
        :type update_sms_template_request: UpdateSmsTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_sms_template_serialize(
            template_name=template_name,
            update_sms_template_request=update_sms_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateSmsTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_sms_template_serialize(
        self,
        template_name,
        update_sms_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        create_new_version,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if create_new_version is not None:
            
            _query_params.append(('create-new-version', create_new_version))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_sms_template_request is not None:
            _body_params = update_sms_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/templates/{template-name}/sms',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_template_active_version(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        template_type: Annotated[StrictStr, Field(description="The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE.")],
        update_template_active_version_request: UpdateTemplateActiveVersionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateTemplateActiveVersionResponse:
        """update_template_active_version

        Changes the status of a specific version of a message template to <i>active</i>.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param template_type: The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE. (required)
        :type template_type: str
        :param update_template_active_version_request: (required)
        :type update_template_active_version_request: UpdateTemplateActiveVersionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_template_active_version_serialize(
            template_name=template_name,
            template_type=template_type,
            update_template_active_version_request=update_template_active_version_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateTemplateActiveVersionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_template_active_version_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        template_type: Annotated[StrictStr, Field(description="The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE.")],
        update_template_active_version_request: UpdateTemplateActiveVersionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateTemplateActiveVersionResponse]:
        """update_template_active_version

        Changes the status of a specific version of a message template to <i>active</i>.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param template_type: The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE. (required)
        :type template_type: str
        :param update_template_active_version_request: (required)
        :type update_template_active_version_request: UpdateTemplateActiveVersionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_template_active_version_serialize(
            template_name=template_name,
            template_type=template_type,
            update_template_active_version_request=update_template_active_version_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateTemplateActiveVersionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_template_active_version_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        template_type: Annotated[StrictStr, Field(description="The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE.")],
        update_template_active_version_request: UpdateTemplateActiveVersionRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_template_active_version

        Changes the status of a specific version of a message template to <i>active</i>.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param template_type: The type of channel that the message template is designed for. Valid values are: EMAIL, PUSH, SMS, and VOICE. (required)
        :type template_type: str
        :param update_template_active_version_request: (required)
        :type update_template_active_version_request: UpdateTemplateActiveVersionRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_template_active_version_serialize(
            template_name=template_name,
            template_type=template_type,
            update_template_active_version_request=update_template_active_version_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateTemplateActiveVersionResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_template_active_version_serialize(
        self,
        template_name,
        template_type,
        update_template_active_version_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        if template_type is not None:
            _path_params['template-type'] = template_type
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_template_active_version_request is not None:
            _body_params = update_template_active_version_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/templates/{template-name}/{template-type}/active-version',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_voice_channel(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_voice_channel_request: UpdateVoiceChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateVoiceChannelResponse:
        """update_voice_channel

        Enables the voice channel for an application or updates the status and settings of the voice channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_voice_channel_request: (required)
        :type update_voice_channel_request: UpdateVoiceChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_voice_channel_serialize(
            application_id=application_id,
            update_voice_channel_request=update_voice_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateVoiceChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_voice_channel_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_voice_channel_request: UpdateVoiceChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateVoiceChannelResponse]:
        """update_voice_channel

        Enables the voice channel for an application or updates the status and settings of the voice channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_voice_channel_request: (required)
        :type update_voice_channel_request: UpdateVoiceChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_voice_channel_serialize(
            application_id=application_id,
            update_voice_channel_request=update_voice_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateVoiceChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_voice_channel_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console.")],
        update_voice_channel_request: UpdateVoiceChannelRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_voice_channel

        Enables the voice channel for an application or updates the status and settings of the voice channel for an application.

        :param application_id: The unique identifier for the application. This identifier is displayed as the <b>Project ID</b> on the Amazon Pinpoint console. (required)
        :type application_id: str
        :param update_voice_channel_request: (required)
        :type update_voice_channel_request: UpdateVoiceChannelRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_voice_channel_serialize(
            application_id=application_id,
            update_voice_channel_request=update_voice_channel_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UpdateVoiceChannelResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_voice_channel_serialize(
        self,
        application_id,
        update_voice_channel_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_voice_channel_request is not None:
            _body_params = update_voice_channel_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/apps/{application-id}/channels/voice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_voice_template(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_voice_template_request: UpdateVoiceTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UpdateVoiceTemplateResponse:
        """update_voice_template

        Updates an existing message template for messages that are sent through the voice channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_voice_template_request: (required)
        :type update_voice_template_request: UpdateVoiceTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_voice_template_serialize(
            template_name=template_name,
            update_voice_template_request=update_voice_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateVoiceTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_voice_template_with_http_info(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_voice_template_request: UpdateVoiceTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UpdateVoiceTemplateResponse]:
        """update_voice_template

        Updates an existing message template for messages that are sent through the voice channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_voice_template_request: (required)
        :type update_voice_template_request: UpdateVoiceTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_voice_template_serialize(
            template_name=template_name,
            update_voice_template_request=update_voice_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateVoiceTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_voice_template_without_preload_content(
        self,
        template_name: Annotated[StrictStr, Field(description="The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive.")],
        update_voice_template_request: UpdateVoiceTemplateRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        create_new_version: Annotated[Optional[StrictBool], Field(description="<p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>")] = None,
        version: Annotated[Optional[StrictStr], Field(description="<p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_voice_template

        Updates an existing message template for messages that are sent through the voice channel.

        :param template_name: The name of the message template. A template name must start with an alphanumeric character and can contain a maximum of 128 characters. The characters can be alphanumeric characters, underscores (_), or hyphens (-). Template names are case sensitive. (required)
        :type template_name: str
        :param update_voice_template_request: (required)
        :type update_voice_template_request: UpdateVoiceTemplateRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param create_new_version: <p>Specifies whether to save the updates as a new version of the message template. Valid values are: true, save the updates as a new version; and, false, save the updates to (overwrite) the latest existing version of the template.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint saves the updates to (overwrites) the latest existing version of the template. If you specify a value of true for this parameter, don't specify a value for the version parameter. Otherwise, an error will occur.</p>
        :type create_new_version: bool
        :param version: <p>The unique identifier for the version of the message template to update, retrieve information about, or delete. To retrieve identifiers and other information for all the versions of a template, use the <link  linkend=\"templates-template-name-template-type-versions\">Template Versions</link> resource.</p> <p>If specified, this value must match the identifier for an existing template version. If specified for an update operation, this value must match the identifier for the latest existing version of the template. This restriction helps ensure that race conditions don't occur.</p> <p>If you don't specify a value for this parameter, Amazon Pinpoint does the following:</p> <ul><li><p>For a get operation, retrieves information about the active version of the template.</p></li> <li><p>For an update operation, saves the updates to (overwrites) the latest existing version of the template, if the create-new-version parameter isn't used or is set to false.</p></li> <li><p>For a delete operation, deletes the template, including all versions of the template.</p></li></ul>
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_voice_template_serialize(
            template_name=template_name,
            update_voice_template_request=update_voice_template_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            create_new_version=create_new_version,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '202': "UpdateVoiceTemplateResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_voice_template_serialize(
        self,
        template_name,
        update_voice_template_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        create_new_version,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if template_name is not None:
            _path_params['template-name'] = template_name
        # process the query parameters
        if create_new_version is not None:
            
            _query_params.append(('create-new-version', create_new_version))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if update_voice_template_request is not None:
            _body_params = update_voice_template_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1/templates/{template-name}/voice',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def verify_otp_message(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique ID of your Amazon Pinpoint application.")],
        verify_otp_message_request: VerifyOTPMessageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> VerifyOTPMessageResponse:
        """verify_otp_message

        Verify an OTP

        :param application_id: The unique ID of your Amazon Pinpoint application. (required)
        :type application_id: str
        :param verify_otp_message_request: (required)
        :type verify_otp_message_request: VerifyOTPMessageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_otp_message_serialize(
            application_id=application_id,
            verify_otp_message_request=verify_otp_message_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifyOTPMessageResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def verify_otp_message_with_http_info(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique ID of your Amazon Pinpoint application.")],
        verify_otp_message_request: VerifyOTPMessageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[VerifyOTPMessageResponse]:
        """verify_otp_message

        Verify an OTP

        :param application_id: The unique ID of your Amazon Pinpoint application. (required)
        :type application_id: str
        :param verify_otp_message_request: (required)
        :type verify_otp_message_request: VerifyOTPMessageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_otp_message_serialize(
            application_id=application_id,
            verify_otp_message_request=verify_otp_message_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifyOTPMessageResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def verify_otp_message_without_preload_content(
        self,
        application_id: Annotated[StrictStr, Field(description="The unique ID of your Amazon Pinpoint application.")],
        verify_otp_message_request: VerifyOTPMessageRequest,
        x_amz_content_sha256: Optional[StrictStr] = None,
        x_amz_date: Optional[StrictStr] = None,
        x_amz_algorithm: Optional[StrictStr] = None,
        x_amz_credential: Optional[StrictStr] = None,
        x_amz_security_token: Optional[StrictStr] = None,
        x_amz_signature: Optional[StrictStr] = None,
        x_amz_signed_headers: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """verify_otp_message

        Verify an OTP

        :param application_id: The unique ID of your Amazon Pinpoint application. (required)
        :type application_id: str
        :param verify_otp_message_request: (required)
        :type verify_otp_message_request: VerifyOTPMessageRequest
        :param x_amz_content_sha256:
        :type x_amz_content_sha256: str
        :param x_amz_date:
        :type x_amz_date: str
        :param x_amz_algorithm:
        :type x_amz_algorithm: str
        :param x_amz_credential:
        :type x_amz_credential: str
        :param x_amz_security_token:
        :type x_amz_security_token: str
        :param x_amz_signature:
        :type x_amz_signature: str
        :param x_amz_signed_headers:
        :type x_amz_signed_headers: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._verify_otp_message_serialize(
            application_id=application_id,
            verify_otp_message_request=verify_otp_message_request,
            x_amz_content_sha256=x_amz_content_sha256,
            x_amz_date=x_amz_date,
            x_amz_algorithm=x_amz_algorithm,
            x_amz_credential=x_amz_credential,
            x_amz_security_token=x_amz_security_token,
            x_amz_signature=x_amz_signature,
            x_amz_signed_headers=x_amz_signed_headers,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VerifyOTPMessageResponse",
            '480': "object",
            '481': "object",
            '482': "object",
            '483': "object",
            '484': "object",
            '485': "object",
            '486': "object",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _verify_otp_message_serialize(
        self,
        application_id,
        verify_otp_message_request,
        x_amz_content_sha256,
        x_amz_date,
        x_amz_algorithm,
        x_amz_credential,
        x_amz_security_token,
        x_amz_signature,
        x_amz_signed_headers,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if application_id is not None:
            _path_params['application-id'] = application_id
        # process the query parameters
        # process the header parameters
        if x_amz_content_sha256 is not None:
            _header_params['X-Amz-Content-Sha256'] = x_amz_content_sha256
        if x_amz_date is not None:
            _header_params['X-Amz-Date'] = x_amz_date
        if x_amz_algorithm is not None:
            _header_params['X-Amz-Algorithm'] = x_amz_algorithm
        if x_amz_credential is not None:
            _header_params['X-Amz-Credential'] = x_amz_credential
        if x_amz_security_token is not None:
            _header_params['X-Amz-Security-Token'] = x_amz_security_token
        if x_amz_signature is not None:
            _header_params['X-Amz-Signature'] = x_amz_signature
        if x_amz_signed_headers is not None:
            _header_params['X-Amz-SignedHeaders'] = x_amz_signed_headers
        # process the form parameters
        # process the body parameter
        if verify_otp_message_request is not None:
            _body_params = verify_otp_message_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'hmac'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1/apps/{application-id}/verify-otp',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


