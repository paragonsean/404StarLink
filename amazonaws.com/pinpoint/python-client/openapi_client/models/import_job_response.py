# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.import_job_response_definition import ImportJobResponseDefinition
from typing import Optional, Set
from typing_extensions import Self

class ImportJobResponse(BaseModel):
    """
    Provides information about the status and settings of a job that imports endpoint definitions from one or more files. The files can be stored in an Amazon Simple Storage Service (Amazon S3) bucket or uploaded directly from a computer by using the Amazon Pinpoint console.
    """ # noqa: E501
    application_id: Any = Field(alias="ApplicationId")
    completed_pieces: Optional[Any] = Field(default=None, alias="CompletedPieces")
    completion_date: Optional[Any] = Field(default=None, alias="CompletionDate")
    creation_date: Any = Field(alias="CreationDate")
    definition: ImportJobResponseDefinition = Field(alias="Definition")
    failed_pieces: Optional[Any] = Field(default=None, alias="FailedPieces")
    failures: Optional[Any] = Field(default=None, alias="Failures")
    id: Any = Field(alias="Id")
    job_status: Any = Field(alias="JobStatus")
    total_failures: Optional[Any] = Field(default=None, alias="TotalFailures")
    total_pieces: Optional[Any] = Field(default=None, alias="TotalPieces")
    total_processed: Optional[Any] = Field(default=None, alias="TotalProcessed")
    type: Any = Field(alias="Type")
    __properties: ClassVar[List[str]] = ["ApplicationId", "CompletedPieces", "CompletionDate", "CreationDate", "Definition", "FailedPieces", "Failures", "Id", "JobStatus", "TotalFailures", "TotalPieces", "TotalProcessed", "Type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportJobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of definition
        if self.definition:
            _dict['Definition'] = self.definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_status
        if self.job_status:
            _dict['JobStatus'] = self.job_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportJobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApplicationId": obj.get("ApplicationId"),
            "CompletedPieces": obj.get("CompletedPieces"),
            "CompletionDate": obj.get("CompletionDate"),
            "CreationDate": obj.get("CreationDate"),
            "Definition": ImportJobResponseDefinition.from_dict(obj["Definition"]) if obj.get("Definition") is not None else None,
            "FailedPieces": obj.get("FailedPieces"),
            "Failures": obj.get("Failures"),
            "Id": obj.get("Id"),
            "JobStatus": JobStatus.from_dict(obj["JobStatus"]) if obj.get("JobStatus") is not None else None,
            "TotalFailures": obj.get("TotalFailures"),
            "TotalPieces": obj.get("TotalPieces"),
            "TotalProcessed": obj.get("TotalProcessed"),
            "Type": obj.get("Type")
        })
        return _obj


