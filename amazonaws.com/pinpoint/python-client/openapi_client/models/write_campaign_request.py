# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_campaign_request_write_campaign_request_custom_delivery_configuration import CreateCampaignRequestWriteCampaignRequestCustomDeliveryConfiguration
from openapi_client.models.create_campaign_request_write_campaign_request_hook import CreateCampaignRequestWriteCampaignRequestHook
from openapi_client.models.create_campaign_request_write_campaign_request_limits import CreateCampaignRequestWriteCampaignRequestLimits
from openapi_client.models.create_campaign_request_write_campaign_request_message_configuration import CreateCampaignRequestWriteCampaignRequestMessageConfiguration
from openapi_client.models.create_campaign_request_write_campaign_request_schedule import CreateCampaignRequestWriteCampaignRequestSchedule
from openapi_client.models.create_campaign_request_write_campaign_request_template_configuration import CreateCampaignRequestWriteCampaignRequestTemplateConfiguration
from typing import Optional, Set
from typing_extensions import Self

class WriteCampaignRequest(BaseModel):
    """
    Specifies the configuration and other settings for a campaign.
    """ # noqa: E501
    additional_treatments: Optional[Any] = Field(default=None, alias="AdditionalTreatments")
    custom_delivery_configuration: Optional[CreateCampaignRequestWriteCampaignRequestCustomDeliveryConfiguration] = Field(default=None, alias="CustomDeliveryConfiguration")
    description: Optional[Any] = Field(default=None, alias="Description")
    holdout_percent: Optional[Any] = Field(default=None, alias="HoldoutPercent")
    hook: Optional[CreateCampaignRequestWriteCampaignRequestHook] = Field(default=None, alias="Hook")
    is_paused: Optional[Any] = Field(default=None, alias="IsPaused")
    limits: Optional[CreateCampaignRequestWriteCampaignRequestLimits] = Field(default=None, alias="Limits")
    message_configuration: Optional[CreateCampaignRequestWriteCampaignRequestMessageConfiguration] = Field(default=None, alias="MessageConfiguration")
    name: Optional[Any] = Field(default=None, alias="Name")
    schedule: Optional[CreateCampaignRequestWriteCampaignRequestSchedule] = Field(default=None, alias="Schedule")
    segment_id: Optional[Any] = Field(default=None, alias="SegmentId")
    segment_version: Optional[Any] = Field(default=None, alias="SegmentVersion")
    tags: Optional[Any] = None
    template_configuration: Optional[CreateCampaignRequestWriteCampaignRequestTemplateConfiguration] = Field(default=None, alias="TemplateConfiguration")
    treatment_description: Optional[Any] = Field(default=None, alias="TreatmentDescription")
    treatment_name: Optional[Any] = Field(default=None, alias="TreatmentName")
    priority: Optional[Any] = Field(default=None, alias="Priority")
    __properties: ClassVar[List[str]] = ["AdditionalTreatments", "CustomDeliveryConfiguration", "Description", "HoldoutPercent", "Hook", "IsPaused", "Limits", "MessageConfiguration", "Name", "Schedule", "SegmentId", "SegmentVersion", "tags", "TemplateConfiguration", "TreatmentDescription", "TreatmentName", "Priority"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WriteCampaignRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_delivery_configuration
        if self.custom_delivery_configuration:
            _dict['CustomDeliveryConfiguration'] = self.custom_delivery_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hook
        if self.hook:
            _dict['Hook'] = self.hook.to_dict()
        # override the default output from pydantic by calling `to_dict()` of limits
        if self.limits:
            _dict['Limits'] = self.limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_configuration
        if self.message_configuration:
            _dict['MessageConfiguration'] = self.message_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['Schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template_configuration
        if self.template_configuration:
            _dict['TemplateConfiguration'] = self.template_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WriteCampaignRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AdditionalTreatments": obj.get("AdditionalTreatments"),
            "CustomDeliveryConfiguration": CreateCampaignRequestWriteCampaignRequestCustomDeliveryConfiguration.from_dict(obj["CustomDeliveryConfiguration"]) if obj.get("CustomDeliveryConfiguration") is not None else None,
            "Description": obj.get("Description"),
            "HoldoutPercent": obj.get("HoldoutPercent"),
            "Hook": CreateCampaignRequestWriteCampaignRequestHook.from_dict(obj["Hook"]) if obj.get("Hook") is not None else None,
            "IsPaused": obj.get("IsPaused"),
            "Limits": CreateCampaignRequestWriteCampaignRequestLimits.from_dict(obj["Limits"]) if obj.get("Limits") is not None else None,
            "MessageConfiguration": CreateCampaignRequestWriteCampaignRequestMessageConfiguration.from_dict(obj["MessageConfiguration"]) if obj.get("MessageConfiguration") is not None else None,
            "Name": obj.get("Name"),
            "Schedule": CreateCampaignRequestWriteCampaignRequestSchedule.from_dict(obj["Schedule"]) if obj.get("Schedule") is not None else None,
            "SegmentId": obj.get("SegmentId"),
            "SegmentVersion": obj.get("SegmentVersion"),
            "tags": obj.get("tags"),
            "TemplateConfiguration": CreateCampaignRequestWriteCampaignRequestTemplateConfiguration.from_dict(obj["TemplateConfiguration"]) if obj.get("TemplateConfiguration") is not None else None,
            "TreatmentDescription": obj.get("TreatmentDescription"),
            "TreatmentName": obj.get("TreatmentName"),
            "Priority": obj.get("Priority")
        })
        return _obj


