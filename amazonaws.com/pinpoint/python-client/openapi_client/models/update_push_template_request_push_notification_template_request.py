# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_push_template_request_push_notification_template_request_adm import UpdatePushTemplateRequestPushNotificationTemplateRequestADM
from openapi_client.models.update_push_template_request_push_notification_template_request_apns import UpdatePushTemplateRequestPushNotificationTemplateRequestAPNS
from openapi_client.models.update_push_template_request_push_notification_template_request_baidu import UpdatePushTemplateRequestPushNotificationTemplateRequestBaidu
from openapi_client.models.update_push_template_request_push_notification_template_request_default import UpdatePushTemplateRequestPushNotificationTemplateRequestDefault
from openapi_client.models.update_push_template_request_push_notification_template_request_gcm import UpdatePushTemplateRequestPushNotificationTemplateRequestGCM
from typing import Optional, Set
from typing_extensions import Self

class UpdatePushTemplateRequestPushNotificationTemplateRequest(BaseModel):
    """
    Specifies the content and settings for a message template that can be used in messages that are sent through a push notification channel.
    """ # noqa: E501
    adm: Optional[UpdatePushTemplateRequestPushNotificationTemplateRequestADM] = Field(default=None, alias="ADM")
    apns: Optional[UpdatePushTemplateRequestPushNotificationTemplateRequestAPNS] = Field(default=None, alias="APNS")
    baidu: Optional[UpdatePushTemplateRequestPushNotificationTemplateRequestBaidu] = Field(default=None, alias="Baidu")
    default: Optional[UpdatePushTemplateRequestPushNotificationTemplateRequestDefault] = Field(default=None, alias="Default")
    default_substitutions: Optional[Any] = Field(default=None, alias="DefaultSubstitutions")
    gcm: Optional[UpdatePushTemplateRequestPushNotificationTemplateRequestGCM] = Field(default=None, alias="GCM")
    recommender_id: Optional[Any] = Field(default=None, alias="RecommenderId")
    tags: Optional[Any] = None
    template_description: Optional[Any] = Field(default=None, alias="TemplateDescription")
    __properties: ClassVar[List[str]] = ["ADM", "APNS", "Baidu", "Default", "DefaultSubstitutions", "GCM", "RecommenderId", "tags", "TemplateDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdatePushTemplateRequestPushNotificationTemplateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of adm
        if self.adm:
            _dict['ADM'] = self.adm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of apns
        if self.apns:
            _dict['APNS'] = self.apns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of baidu
        if self.baidu:
            _dict['Baidu'] = self.baidu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default
        if self.default:
            _dict['Default'] = self.default.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcm
        if self.gcm:
            _dict['GCM'] = self.gcm.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdatePushTemplateRequestPushNotificationTemplateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ADM": UpdatePushTemplateRequestPushNotificationTemplateRequestADM.from_dict(obj["ADM"]) if obj.get("ADM") is not None else None,
            "APNS": UpdatePushTemplateRequestPushNotificationTemplateRequestAPNS.from_dict(obj["APNS"]) if obj.get("APNS") is not None else None,
            "Baidu": UpdatePushTemplateRequestPushNotificationTemplateRequestBaidu.from_dict(obj["Baidu"]) if obj.get("Baidu") is not None else None,
            "Default": UpdatePushTemplateRequestPushNotificationTemplateRequestDefault.from_dict(obj["Default"]) if obj.get("Default") is not None else None,
            "DefaultSubstitutions": obj.get("DefaultSubstitutions"),
            "GCM": UpdatePushTemplateRequestPushNotificationTemplateRequestGCM.from_dict(obj["GCM"]) if obj.get("GCM") is not None else None,
            "RecommenderId": obj.get("RecommenderId"),
            "tags": obj.get("tags"),
            "TemplateDescription": obj.get("TemplateDescription")
        })
        return _obj


