# coding: utf-8

"""
    Amazon Pinpoint

    Doc Engage API - Amazon Pinpoint API

    The version of the OpenAPI document: 2016-12-01
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SendOTPMessageRequestParameters(BaseModel):
    """
    Send OTP message request parameters.
    """ # noqa: E501
    allowed_attempts: Optional[Any] = Field(default=None, alias="AllowedAttempts")
    brand_name: Any = Field(alias="BrandName")
    channel: Any = Field(alias="Channel")
    code_length: Optional[Any] = Field(default=None, alias="CodeLength")
    destination_identity: Any = Field(alias="DestinationIdentity")
    entity_id: Optional[Any] = Field(default=None, alias="EntityId")
    language: Optional[Any] = Field(default=None, alias="Language")
    origination_identity: Any = Field(alias="OriginationIdentity")
    reference_id: Any = Field(alias="ReferenceId")
    template_id: Optional[Any] = Field(default=None, alias="TemplateId")
    validity_period: Optional[Any] = Field(default=None, alias="ValidityPeriod")
    __properties: ClassVar[List[str]] = ["AllowedAttempts", "BrandName", "Channel", "CodeLength", "DestinationIdentity", "EntityId", "Language", "OriginationIdentity", "ReferenceId", "TemplateId", "ValidityPeriod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendOTPMessageRequestParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendOTPMessageRequestParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AllowedAttempts": obj.get("AllowedAttempts"),
            "BrandName": obj.get("BrandName"),
            "Channel": obj.get("Channel"),
            "CodeLength": obj.get("CodeLength"),
            "DestinationIdentity": obj.get("DestinationIdentity"),
            "EntityId": obj.get("EntityId"),
            "Language": obj.get("Language"),
            "OriginationIdentity": obj.get("OriginationIdentity"),
            "ReferenceId": obj.get("ReferenceId"),
            "TemplateId": obj.get("TemplateId"),
            "ValidityPeriod": obj.get("ValidityPeriod")
        })
        return _obj


