openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: " Amazon Honeycode is a fully managed service that allows you to quickly\
    \ build mobile and web apps for teamsâ€”without programming. Build Honeycode apps\
    \ for managing almost anything, like projects, customers, operations, approvals,\
    \ resources, and even your team. "
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Honeycode
  version: 2020-03-01
  x-release: v4
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_twitter.com_awscloud_profile_image.png
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: honeycode
  x-aws-signingName: honeycode
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/honeycode-2020-03-01.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/honeycode/
servers:
- description: The Honeycode multi-region endpoint
  url: "http://honeycode.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Honeycode multi-region endpoint
  url: "https://honeycode.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Honeycode endpoint for China (Beijing) and China (Ningxia)
  url: "http://honeycode.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Honeycode endpoint for China (Beijing) and China (Ningxia)
  url: "https://honeycode.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /workbooks/{workbookId}/tables/{tableId}/rows/batchcreate:
    post:
      description: "<p> The BatchCreateTableRows API allows you to create one or more\
        \ rows at the end of a table in a workbook. The API allows you to specify\
        \ the values to set in some or all of the columns in the new rows. </p> <p>\
        \ If a column is not explicitly set in a specific row, then the column level\
        \ formula specified in the table will be applied to the new row. If there\
        \ is no column level formula but the last row of the table has a formula,\
        \ then that formula will be copied down to the new row. If there is no column\
        \ level formula and no formula in the last row of the table, then that column\
        \ will be left blank for the new rows. </p>"
      operationId: BatchCreateTableRows
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The ID of the workbook where the new rows are being added.</p>\
          \ <p> If a workbook with the specified ID could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: workbookId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: "<p>The ID of the table where the new rows are being added.</p>\
          \ <p> If a table with the specified ID could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: tableId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateTableRows_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchCreateTableRowsResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /workbooks/{workbookId}/tables/{tableId}/rows/batchdelete:
    post:
      description: ' The BatchDeleteTableRows API allows you to delete one or more
        rows from a table in a workbook. You need to specify the ids of the rows that
        you want to delete from the table. '
      operationId: BatchDeleteTableRows
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The ID of the workbook where the rows are being deleted.</p>\
          \ <p> If a workbook with the specified id could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: workbookId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: "<p>The ID of the table where the rows are being deleted.</p>\
          \ <p> If a table with the specified id could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: tableId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDeleteTableRows_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchDeleteTableRowsResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-content-type: application/json
      x-accepts:
      - application/json
  /workbooks/{workbookId}/tables/{tableId}/rows/batchupdate:
    post:
      description: "<p> The BatchUpdateTableRows API allows you to update one or more\
        \ rows in a table in a workbook. </p> <p> You can specify the values to set\
        \ in some or all of the columns in the table for the specified rows. If a\
        \ column is not explicitly specified in a particular row, then that column\
        \ will not be updated for that row. To clear out the data in a specific cell,\
        \ you need to set the value as an empty string (\"\"). </p>"
      operationId: BatchUpdateTableRows
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The ID of the workbook where the rows are being updated.</p>\
          \ <p> If a workbook with the specified id could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: workbookId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: "<p>The ID of the table where the rows are being updated.</p>\
          \ <p> If a table with the specified id could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: tableId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpdateTableRows_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpdateTableRowsResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-content-type: application/json
      x-accepts:
      - application/json
  /workbooks/{workbookId}/tables/{tableId}/rows/batchupsert:
    post:
      description: "<p> The BatchUpsertTableRows API allows you to upsert one or more\
        \ rows in a table. The upsert operation takes a filter expression as input\
        \ and evaluates it to find matching rows on the destination table. If matching\
        \ rows are found, it will update the cells in the matching rows to new values\
        \ specified in the request. If no matching rows are found, a new row is added\
        \ at the end of the table and the cells in that row are set to the new values\
        \ specified in the request. </p> <p> You can specify the values to set in\
        \ some or all of the columns in the table for the matching or newly appended\
        \ rows. If a column is not explicitly specified for a particular row, then\
        \ that column will not be updated for that row. To clear out the data in a\
        \ specific cell, you need to set the value as an empty string (\"\"). </p>"
      operationId: BatchUpsertTableRows
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The ID of the workbook where the rows are being upserted.</p>\
          \ <p> If a workbook with the specified id could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: workbookId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: "<p>The ID of the table where the rows are being upserted.</p>\
          \ <p> If a table with the specified id could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: tableId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchUpsertTableRows_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpsertTableRowsResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /workbooks/{workbookId}/tables/{tableId}/import/{jobId}:
    get:
      description: ' The DescribeTableDataImportJob API allows you to retrieve the
        status and details of a table data import job. '
      operationId: DescribeTableDataImportJob
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The ID of the workbook into which data was imported.</p>\
          \ <p> If a workbook with the specified id could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: workbookId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: "<p>The ID of the table into which data was imported.</p> <p>\
          \ If a table with the specified id could not be found, this API throws ResourceNotFoundException.\
          \ </p>"
        explode: false
        in: path
        name: tableId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: "<p>The ID of the job that was returned by the StartTableDataImportJob\
          \ request.</p> <p> If a job with the specified id could not be found, this\
          \ API throws ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          maxLength: 100
          minLength: 1
          pattern: "^[^\\n\\r\\x00\\x08\\x0B\\x0C\\x0E\\x1F]*$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeTableDataImportJobResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
      x-accepts:
      - application/json
  /screendata:
    post:
      description: " The GetScreenData API allows retrieval of data from a screen\
        \ in a Honeycode app. The API allows setting local variables in the screen\
        \ to filter, sort or otherwise affect what will be displayed on the screen. "
      operationId: GetScreenData
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetScreenData_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScreenDataResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /workbooks/{workbookId}/apps/{appId}/screens/{screenId}/automations/{automationId}:
    post:
      description: " The InvokeScreenAutomation API allows invoking an action defined\
        \ in a screen in a Honeycode app. The API allows setting local variables,\
        \ which can then be used in the automation being invoked. This allows automating\
        \ the Honeycode app interactions to write, update or delete data in the workbook. "
      operationId: InvokeScreenAutomation
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The ID of the workbook that contains the screen automation.
        explode: false
        in: path
        name: workbookId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: The ID of the app that contains the screen automation.
        explode: false
        in: path
        name: appId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: The ID of the screen that contains the screen automation.
        explode: false
        in: path
        name: screenId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: The ID of the automation action to be performed.
        explode: false
        in: path
        name: automationId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeScreenAutomation_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeScreenAutomationResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationExecutionException'
          description: AutomationExecutionException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationExecutionTimeoutException'
          description: AutomationExecutionTimeoutException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /workbooks/{workbookId}/tables/{tableId}/columns:
    get:
      description: ' The ListTableColumns API allows you to retrieve a list of all
        the columns in a table in a workbook. '
      operationId: ListTableColumns
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The ID of the workbook that contains the table whose columns\
          \ are being retrieved.</p> <p> If a workbook with the specified id could\
          \ not be found, this API throws ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: workbookId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: "<p>The ID of the table whose columns are being retrieved.</p>\
          \ <p> If a table with the specified id could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: tableId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: "<p> This parameter is optional. If a nextToken is not specified,\
          \ the API returns the first page of data. </p> <p> Pagination tokens expire\
          \ after 1 hour. If you use a token that was returned more than an hour back,\
          \ the API will throw ValidationException. </p>"
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 1024
          minLength: 1
          pattern: ^(?!\s*$).+
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTableColumnsResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-accepts:
      - application/json
  /workbooks/{workbookId}/tables/{tableId}/rows/list:
    post:
      description: ' The ListTableRows API allows you to retrieve a list of all the
        rows in a table in a workbook. '
      operationId: ListTableRows
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The ID of the workbook that contains the table whose rows\
          \ are being retrieved.</p> <p> If a workbook with the specified id could\
          \ not be found, this API throws ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: workbookId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: "<p>The ID of the table whose rows are being retrieved.</p> <p>\
          \ If a table with the specified id could not be found, this API throws ResourceNotFoundException.\
          \ </p>"
        explode: false
        in: path
        name: tableId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTableRows_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTableRowsResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
      x-content-type: application/json
      x-accepts:
      - application/json
  /workbooks/{workbookId}/tables:
    get:
      description: ' The ListTables API allows you to retrieve a list of all the tables
        in a workbook. '
      operationId: ListTables
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The ID of the workbook whose tables are being retrieved.</p>\
          \ <p> If a workbook with the specified id could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: workbookId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: The maximum number of tables to return in each page of the results.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: "<p> This parameter is optional. If a nextToken is not specified,\
          \ the API returns the first page of data. </p> <p> Pagination tokens expire\
          \ after 1 hour. If you use a token that was returned more than an hour back,\
          \ the API will throw ValidationException. </p>"
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          maxLength: 1024
          minLength: 1
          pattern: ^(?!\s*$).+
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTablesResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-accepts:
      - application/json
  /tags/{resourceArn}:
    get:
      description: ' The ListTagsForResource API allows you to return a resource''s
        tags. '
      operationId: ListTagsForResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The resource's Amazon Resource Name (ARN).
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 256
          minLength: 1
          pattern: "^arn:aws:honeycode:.+:[0-9]{12}:.+:.+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-accepts:
      - application/json
    post:
      description: " The TagResource API allows you to add tags to an ARN-able resource.\
        \ Resource includes workbook, table, screen and screen-automation. "
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The resource's Amazon Resource Name (ARN).
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 256
          minLength: 1
          pattern: "^arn:aws:honeycode:.+:[0-9]{12}:.+:.+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /workbooks/{workbookId}/tables/{tableId}/rows/query:
    post:
      description: ' The QueryTableRows API allows you to use a filter formula to
        query for specific rows in a table. '
      operationId: QueryTableRows
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The ID of the workbook whose table rows are being queried.</p>\
          \ <p> If a workbook with the specified id could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: workbookId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: "<p>The ID of the table whose rows are being queried.</p> <p>\
          \ If a table with the specified id could not be found, this API throws ResourceNotFoundException.\
          \ </p>"
        explode: false
        in: path
        name: tableId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryTableRows_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryTableRowsResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-content-type: application/json
      x-accepts:
      - application/json
  /workbooks/{workbookId}/tables/{tableId}/import:
    post:
      description: " The StartTableDataImportJob API allows you to start an import\
        \ job on a table. This API will only return the id of the job that was started.\
        \ To find out the status of the import request, you need to call the DescribeTableDataImportJob\
        \ API. "
      operationId: StartTableDataImportJob
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>The ID of the workbook where the rows are being imported.</p>\
          \ <p> If a workbook with the specified id could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: workbookId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      - description: "<p>The ID of the table where the rows are being imported.</p>\
          \ <p> If a table with the specified id could not be found, this API throws\
          \ ResourceNotFoundException. </p>"
        explode: false
        in: path
        name: tableId
        required: true
        schema:
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartTableDataImportJob_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartTableDataImportJobResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceQuotaExceededException'
          description: ServiceQuotaExceededException
      x-content-type: application/json
      x-accepts:
      - application/json
  /tags/{resourceArn}#tagKeys:
    delete:
      description: " The UntagResource API allows you to removes tags from an ARN-able\
        \ resource. Resource includes workbook, table, screen and screen-automation. "
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The resource's Amazon Resource Name (ARN).
        explode: false
        in: path
        name: resourceArn
        required: true
        schema:
          maxLength: 256
          minLength: 1
          pattern: "^arn:aws:honeycode:.+:[0-9]{12}:.+:.+$"
          type: string
        style: simple
      - description: A list of tag keys to remove from the resource.
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          description: A list of tag keys
          items:
            $ref: '#/components/schemas/TagKey'
          maxItems: 100
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceResult'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableException'
          description: ServiceUnavailableException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    BatchCreateTableRowsResult:
      example:
        createdRows: ""
        workbookCursor: ""
        failedBatchItems: ""
      properties:
        workbookCursor:
          allOf:
          - $ref: '#/components/schemas/WorkbookCursor'
          - description: The updated workbook cursor after adding the new rows at
              the end of the table.
        createdRows:
          allOf:
          - $ref: '#/components/schemas/CreatedRowsMap'
          - description: The map of batch item id to the row id that was created for
              that item.
        failedBatchItems:
          allOf:
          - $ref: '#/components/schemas/FailedBatchItems'
          - description: ' The list of batch items in the request that could not be
              added to the table. Each element in this list contains one item from
              the request that could not be added to the table along with the reason
              why that item could not be added. '
      required:
      - createdRows
      - workbookCursor
      type: object
    CreateRowData:
      description: ' Data needed to create a single row in a table as part of the
        BatchCreateTableRows request. '
      properties:
        batchItemId:
          allOf:
          - $ref: '#/components/schemas/BatchItemId'
          - description: ' An external identifier that represents the single row that
              is being created as part of the BatchCreateTableRows request. This can
              be any string that you can use to identify the row in the request. The
              BatchCreateTableRows API puts the batch item id in the results to allow
              you to link data in the request to data in the results. '
        cellsToCreate:
          allOf:
          - $ref: '#/components/schemas/RowDataInput'
          - description: ' A map representing the cells to create in the new row.
              The key is the column id of the cell and the value is the CellInput
              object that represents the data to set in that cell. '
      required:
      - batchItemId
      - cellsToCreate
      type: object
    AccessDeniedException: {}
    InternalServerException: {}
    RequestTimeoutException: {}
    ResourceNotFoundException: {}
    ServiceQuotaExceededException: {}
    ServiceUnavailableException: {}
    ThrottlingException: {}
    ValidationException: {}
    BatchDeleteTableRowsResult:
      example:
        workbookCursor: ""
        failedBatchItems: ""
      properties:
        workbookCursor:
          allOf:
          - $ref: '#/components/schemas/WorkbookCursor'
          - description: The updated workbook cursor after deleting the rows from
              the table.
        failedBatchItems:
          allOf:
          - $ref: '#/components/schemas/FailedBatchItems'
          - description: ' The list of row ids in the request that could not be deleted
              from the table. Each element in this list contains one row id from the
              request that could not be deleted along with the reason why that item
              could not be deleted. '
      required:
      - workbookCursor
      type: object
    RowId:
      maxLength: 77
      minLength: 77
      pattern: "row:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\\
        /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      type: string
    BatchUpdateTableRowsResult:
      example:
        workbookCursor: ""
        failedBatchItems: ""
      properties:
        workbookCursor:
          allOf:
          - $ref: '#/components/schemas/WorkbookCursor'
          - description: The updated workbook cursor after adding the new rows at
              the end of the table.
        failedBatchItems:
          allOf:
          - $ref: '#/components/schemas/FailedBatchItems'
          - description: ' The list of batch items in the request that could not be
              updated in the table. Each element in this list contains one item from
              the request that could not be updated in the table along with the reason
              why that item could not be updated. '
      required:
      - workbookCursor
      type: object
    UpdateRowData:
      description: ' Data needed to create a single row in a table as part of the
        BatchCreateTableRows request. '
      properties:
        rowId:
          allOf:
          - $ref: '#/components/schemas/RowId'
          - description: ' The id of the row that needs to be updated. '
        cellsToUpdate:
          allOf:
          - $ref: '#/components/schemas/RowDataInput'
          - description: ' A map representing the cells to update in the given row.
              The key is the column id of the cell and the value is the CellInput
              object that represents the data to set in that cell. '
      required:
      - cellsToUpdate
      - rowId
      type: object
    BatchUpsertTableRowsResult:
      example:
        rows: ""
        workbookCursor: ""
        failedBatchItems: ""
      properties:
        rows:
          allOf:
          - $ref: '#/components/schemas/UpsertRowsResultMap'
          - description: " A map with the batch item id as the key and the result\
              \ of the upsert operation as the value. The result of the upsert operation\
              \ specifies whether existing rows were updated or a new row was appended,\
              \ along with the list of row ids that were affected. "
        workbookCursor:
          allOf:
          - $ref: '#/components/schemas/WorkbookCursor'
          - description: The updated workbook cursor after updating or appending rows
              in the table.
        failedBatchItems:
          allOf:
          - $ref: '#/components/schemas/FailedBatchItems'
          - description: ' The list of batch items in the request that could not be
              updated or appended in the table. Each element in this list contains
              one item from the request that could not be updated in the table along
              with the reason why that item could not be updated or appended. '
      required:
      - rows
      - workbookCursor
      type: object
    UpsertRowData:
      description: ' Data needed to upsert rows in a table as part of a single item
        in the BatchUpsertTableRows request. '
      properties:
        batchItemId:
          allOf:
          - $ref: '#/components/schemas/BatchItemId'
          - description: ' An external identifier that represents a single item in
              the request that is being upserted as part of the BatchUpsertTableRows
              request. This can be any string that you can use to identify the item
              in the request. The BatchUpsertTableRows API puts the batch item id
              in the results to allow you to link data in the request to data in the
              results. '
        filter:
          $ref: '#/components/schemas/UpsertRowData_filter'
        cellsToUpdate:
          allOf:
          - $ref: '#/components/schemas/RowDataInput'
          - description: ' A map representing the cells to update for the matching
              rows or an appended row. The key is the column id of the cell and the
              value is the CellInput object that represents the data to set in that
              cell. '
      required:
      - batchItemId
      - cellsToUpdate
      - filter
      type: object
    DescribeTableDataImportJobResult:
      example:
        jobStatus: ""
        jobMetadata:
          submitter:
            userArn: ""
            email: ""
          importOptions:
            destinationOptions:
              columnMap: ""
            delimitedTextOptions:
              dataCharacterEncoding: ""
              delimiter: ""
              ignoreEmptyRows: ""
              hasHeaderRow: ""
          submitTime: ""
          dataSource:
            dataSourceConfig:
              dataSourceUrl: ""
        errorCode: ""
        message: ""
      properties:
        jobStatus:
          allOf:
          - $ref: '#/components/schemas/TableDataImportJobStatus'
          - description: ' The current status of the import job. '
        message:
          allOf:
          - $ref: '#/components/schemas/TableDataImportJobMessage'
          - description: ' A message providing more details about the current status
              of the import job. '
        jobMetadata:
          $ref: '#/components/schemas/DescribeTableDataImportJobResult_jobMetadata'
        errorCode:
          allOf:
          - $ref: '#/components/schemas/ErrorCode'
          - description: " If job status is failed, error code to understand reason\
              \ for the failure. "
      required:
      - jobMetadata
      - jobStatus
      - message
      type: object
    GetScreenDataResult:
      example:
        nextToken: ""
        workbookCursor: ""
        results: ""
      properties:
        results:
          allOf:
          - $ref: '#/components/schemas/ResultSetMap'
          - description: A map of all the rows on the screen keyed by block name.
        workbookCursor:
          allOf:
          - $ref: '#/components/schemas/WorkbookCursor'
          - description: ' Indicates the cursor of the workbook at which the data
              returned by this workbook is read. Workbook cursor keeps increasing
              with every update and the increments are not sequential. '
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: " Provides the pagination token to load the next page if\
              \ there are more results matching the request. If a pagination token\
              \ is not present in the response, it means that all data matching the\
              \ query has been loaded. "
      required:
      - results
      - workbookCursor
      type: object
    VariableValue:
      description: The input variables to the app to be used by the InvokeScreenAutomation
        action request.
      properties:
        rawValue:
          allOf:
          - $ref: '#/components/schemas/RawValue'
          - description: Raw value of the variable.
      required:
      - rawValue
      type: object
    InvokeScreenAutomationResult:
      example:
        workbookCursor: ""
      properties:
        workbookCursor:
          allOf:
          - $ref: '#/components/schemas/WorkbookCursor'
          - description: The updated workbook cursor after performing the automation
              action.
      required:
      - workbookCursor
      type: object
    AutomationExecutionException: {}
    AutomationExecutionTimeoutException: {}
    ListTableColumnsResult:
      example:
        tableColumns: ""
        nextToken: ""
        workbookCursor: ""
      properties:
        tableColumns:
          allOf:
          - $ref: '#/components/schemas/TableColumns'
          - description: ' The list of columns in the table. '
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: " Provides the pagination token to load the next page if\
              \ there are more results matching the request. If a pagination token\
              \ is not present in the response, it means that all data matching the\
              \ request has been loaded. "
        workbookCursor:
          allOf:
          - $ref: '#/components/schemas/WorkbookCursor'
          - description: ' Indicates the cursor of the workbook at which the data
              returned by this request is read. Workbook cursor keeps increasing with
              every update and the increments are not sequential. '
      required:
      - tableColumns
      type: object
    ListTableRowsResult:
      example:
        rowIdsNotFound: ""
        columnIds: ""
        nextToken: ""
        rows: ""
        workbookCursor: ""
      properties:
        columnIds:
          allOf:
          - $ref: '#/components/schemas/ResourceIds'
          - description: ' The list of columns in the table whose row data is returned
              in the result. '
        rows:
          allOf:
          - $ref: '#/components/schemas/TableRows'
          - description: " The list of rows in the table. Note that this result is\
              \ paginated, so this list contains a maximum of 100 rows. "
        rowIdsNotFound:
          allOf:
          - $ref: '#/components/schemas/RowIdList'
          - description: ' The list of row ids included in the request that were not
              found in the table. '
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: " Provides the pagination token to load the next page if\
              \ there are more results matching the request. If a pagination token\
              \ is not present in the response, it means that all data matching the\
              \ request has been loaded. "
        workbookCursor:
          allOf:
          - $ref: '#/components/schemas/WorkbookCursor'
          - description: ' Indicates the cursor of the workbook at which the data
              returned by this request is read. Workbook cursor keeps increasing with
              every update and the increments are not sequential. '
      required:
      - columnIds
      - rows
      - workbookCursor
      type: object
    ListTablesResult:
      example:
        tables: ""
        nextToken: ""
        workbookCursor: ""
      properties:
        tables:
          allOf:
          - $ref: '#/components/schemas/Tables'
          - description: ' The list of tables in the workbook. '
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: " Provides the pagination token to load the next page if\
              \ there are more results matching the request. If a pagination token\
              \ is not present in the response, it means that all data matching the\
              \ request has been loaded. "
        workbookCursor:
          allOf:
          - $ref: '#/components/schemas/WorkbookCursor'
          - description: ' Indicates the cursor of the workbook at which the data
              returned by this request is read. Workbook cursor keeps increasing with
              every update and the increments are not sequential. '
      required:
      - tables
      type: object
    ListTagsForResourceResult:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: The resource's tags.
      type: object
    QueryTableRowsResult:
      example:
        columnIds: ""
        nextToken: ""
        rows: ""
        workbookCursor: ""
      properties:
        columnIds:
          allOf:
          - $ref: '#/components/schemas/ResourceIds'
          - description: ' The list of columns in the table whose row data is returned
              in the result. '
        rows:
          allOf:
          - $ref: '#/components/schemas/TableRows'
          - description: ' The list of rows in the table that match the query filter. '
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: " Provides the pagination token to load the next page if\
              \ there are more results matching the request. If a pagination token\
              \ is not present in the response, it means that all data matching the\
              \ request has been loaded. "
        workbookCursor:
          allOf:
          - $ref: '#/components/schemas/WorkbookCursor'
          - description: ' Indicates the cursor of the workbook at which the data
              returned by this request is read. Workbook cursor keeps increasing with
              every update and the increments are not sequential. '
      required:
      - columnIds
      - rows
      - workbookCursor
      type: object
    Formula:
      format: password
      maxLength: 8192
      minLength: 0
      pattern: ^=.*
      type: string
    StartTableDataImportJobResult:
      example:
        jobId: ""
        jobStatus: ""
      properties:
        jobId:
          allOf:
          - $ref: '#/components/schemas/JobId'
          - description: ' The id that is assigned to this import job. Future requests
              to find out the status of this import job need to send this id in the
              appropriate parameter in the request. '
        jobStatus:
          allOf:
          - $ref: '#/components/schemas/TableDataImportJobStatus'
          - description: ' The status of the import job immediately after submitting
              the request. '
      required:
      - jobId
      - jobStatus
      type: object
    ImportDataSourceConfig:
      description: ' An object that contains the configuration parameters for the
        data source of an import request. '
      properties:
        dataSourceUrl:
          allOf:
          - $ref: '#/components/schemas/SecureURL'
          - description: ' The URL from which source data will be downloaded for the
              import request. '
      type: object
    DestinationOptions:
      description: An object that contains the options relating to the destination
        of the import request.
      properties:
        columnMap:
          allOf:
          - $ref: '#/components/schemas/ImportColumnMap'
          - description: A map of the column id to the import properties for each
              column.
      type: object
    DelimitedTextImportOptions:
      description: ' An object that contains the options relating to parsing delimited
        text as part of an import request. '
      properties:
        delimiter:
          allOf:
          - $ref: '#/components/schemas/DelimitedTextDelimiter'
          - description: The delimiter to use for separating columns in a single row
              of the input.
        hasHeaderRow:
          allOf:
          - $ref: '#/components/schemas/HasHeaderRow'
          - description: Indicates whether the input file has a header row at the
              top containing the column names.
        ignoreEmptyRows:
          allOf:
          - $ref: '#/components/schemas/IgnoreEmptyRows'
          - description: A parameter to indicate whether empty rows should be ignored
              or be included in the import.
        dataCharacterEncoding:
          allOf:
          - $ref: '#/components/schemas/ImportDataCharacterEncoding'
          - description: The encoding of the data in the input file.
      required:
      - delimiter
      type: object
    TagResourceResult:
      properties: {}
      type: object
    TagValue:
      maxLength: 100
      minLength: 1
      pattern: "^[^\\n\\r\\x00\\x08\\x0B\\x0C\\x0E\\x1F]*$"
      type: string
    UntagResourceResult:
      properties: {}
      type: object
    TagKey:
      maxLength: 100
      minLength: 1
      pattern: "^[^\\n\\r\\x00\\x08\\x0B\\x0C\\x0E\\x1F]*$"
      type: string
    AwsUserArn:
      maxLength: 2048
      minLength: 20
      type: string
    ResourceId:
      maxLength: 36
      minLength: 36
      pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
      type: string
    CreateRowDataList:
      items:
        $ref: '#/components/schemas/CreateRowData'
      maxItems: 100
      minItems: 1
      type: array
    ClientRequestToken:
      maxLength: 64
      minLength: 32
      pattern: ^(?!\s*$).+
      type: string
    BatchCreateTableRowsRequest:
      example:
        clientRequestToken: ""
        rowsToCreate: ""
      properties:
        rowsToCreate:
          allOf:
          - $ref: '#/components/schemas/CreateRowDataList'
          - description: "<p> The list of rows to create at the end of the table.\
              \ Each item in this list needs to have a batch item id to uniquely identify\
              \ the element in the request and the cells to create for that row. You\
              \ need to specify at least one item in this list. </p> <p> Note that\
              \ if one of the column ids in any of the rows in the request does not\
              \ exist in the table, then the request fails and no updates are made\
              \ to the table. </p>"
        clientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          - description: "<p> The request token for performing the batch create operation.\
              \ Request tokens help to identify duplicate requests. If a call times\
              \ out or fails due to a transient error like a failed network connection,\
              \ you can retry the call with the same request token. The service ensures\
              \ that if the first call using that request token is successfully performed,\
              \ the second call will not perform the operation again. </p> <p> Note\
              \ that request tokens are valid only for a few minutes. You cannot use\
              \ request tokens to dedupe requests spanning hours or days. </p>"
      required:
      - rowsToCreate
      title: BatchCreateTableRowsRequest
      type: object
    WorkbookCursor:
      type: integer
    CreatedRowsMap:
      additionalProperties:
        $ref: '#/components/schemas/RowId'
      type: object
    FailedBatchItems:
      items:
        $ref: '#/components/schemas/FailedBatchItem'
      maxItems: 100
      minItems: 0
      type: array
    RowIdList:
      items:
        $ref: '#/components/schemas/RowId'
      maxItems: 100
      minItems: 1
      type: array
    BatchDeleteTableRowsRequest:
      example:
        clientRequestToken: ""
        rowIds: ""
      properties:
        rowIds:
          allOf:
          - $ref: '#/components/schemas/RowIdList'
          - description: "<p> The list of row ids to delete from the table. You need\
              \ to specify at least one row id in this list. </p> <p> Note that if\
              \ one of the row ids provided in the request does not exist in the table,\
              \ then the request fails and no rows are deleted from the table. </p>"
        clientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          - description: "<p> The request token for performing the delete action.\
              \ Request tokens help to identify duplicate requests. If a call times\
              \ out or fails due to a transient error like a failed network connection,\
              \ you can retry the call with the same request token. The service ensures\
              \ that if the first call using that request token is successfully performed,\
              \ the second call will not perform the action again. </p> <p> Note that\
              \ request tokens are valid only for a few minutes. You cannot use request\
              \ tokens to dedupe requests spanning hours or days. </p>"
      required:
      - rowIds
      title: BatchDeleteTableRowsRequest
      type: object
    BatchErrorMessage:
      pattern: ^(?!\s*$).+
      type: string
    BatchItemId:
      maxLength: 64
      minLength: 1
      pattern: ^(?!\s*$).+
      type: string
    UpdateRowDataList:
      items:
        $ref: '#/components/schemas/UpdateRowData'
      maxItems: 100
      minItems: 1
      type: array
    BatchUpdateTableRowsRequest:
      example:
        clientRequestToken: ""
        rowsToUpdate: ""
      properties:
        rowsToUpdate:
          allOf:
          - $ref: '#/components/schemas/UpdateRowDataList'
          - description: "<p> The list of rows to update in the table. Each item in\
              \ this list needs to contain the row id to update along with the map\
              \ of column id to cell values for each column in that row that needs\
              \ to be updated. You need to specify at least one row in this list,\
              \ and for each row, you need to specify at least one column to update.\
              \ </p> <p> Note that if one of the row or column ids in the request\
              \ does not exist in the table, then the request fails and no updates\
              \ are made to the table. </p>"
        clientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          - description: "<p> The request token for performing the update action.\
              \ Request tokens help to identify duplicate requests. If a call times\
              \ out or fails due to a transient error like a failed network connection,\
              \ you can retry the call with the same request token. The service ensures\
              \ that if the first call using that request token is successfully performed,\
              \ the second call will not perform the action again. </p> <p> Note that\
              \ request tokens are valid only for a few minutes. You cannot use request\
              \ tokens to dedupe requests spanning hours or days. </p>"
      required:
      - rowsToUpdate
      title: BatchUpdateTableRowsRequest
      type: object
    UpsertRowDataList:
      items:
        $ref: '#/components/schemas/UpsertRowData'
      type: array
    BatchUpsertTableRowsRequest:
      example:
        clientRequestToken: ""
        rowsToUpsert: ""
      properties:
        rowsToUpsert:
          allOf:
          - $ref: '#/components/schemas/UpsertRowDataList'
          - description: "<p> The list of rows to upsert in the table. Each item in\
              \ this list needs to have a batch item id to uniquely identify the element\
              \ in the request, a filter expression to find the rows to update for\
              \ that element and the cell values to set for each column in the upserted\
              \ rows. You need to specify at least one item in this list. </p> <p>\
              \ Note that if one of the filter formulas in the request fails to evaluate\
              \ because of an error or one of the column ids in any of the rows does\
              \ not exist in the table, then the request fails and no updates are\
              \ made to the table. </p>"
        clientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          - description: "<p> The request token for performing the update action.\
              \ Request tokens help to identify duplicate requests. If a call times\
              \ out or fails due to a transient error like a failed network connection,\
              \ you can retry the call with the same request token. The service ensures\
              \ that if the first call using that request token is successfully performed,\
              \ the second call will not perform the action again. </p> <p> Note that\
              \ request tokens are valid only for a few minutes. You cannot use request\
              \ tokens to dedupe requests spanning hours or days. </p>"
      required:
      - rowsToUpsert
      title: BatchUpsertTableRowsRequest
      type: object
    UpsertRowsResultMap:
      additionalProperties:
        $ref: '#/components/schemas/UpsertRowsResult'
      type: object
    Format:
      enum:
      - AUTO
      - NUMBER
      - CURRENCY
      - DATE
      - TIME
      - DATE_TIME
      - PERCENTAGE
      - TEXT
      - ACCOUNTING
      - CONTACT
      - ROWLINK
      - ROWSET
      type: string
    RawValue:
      maxLength: 32767
      minLength: 0
      pattern: "[\\s\\S]*"
      type: string
    FormattedValue:
      maxLength: 8192
      minLength: 0
      pattern: "[\\s\\S]*"
      type: string
    FormattedValuesList:
      items:
        $ref: '#/components/schemas/FormattedValue'
      maxItems: 220
      minItems: 0
      type: array
    Cell:
      description: An object that represents a single cell in a table.
      properties:
        formula:
          allOf:
          - $ref: '#/components/schemas/Formula'
          - description: ' The formula contained in the cell. This field is empty
              if a cell does not have a formula. '
        format:
          allOf:
          - $ref: '#/components/schemas/Format'
          - description: "The format of the cell. If this field is empty, then the\
              \ format is either not specified in the workbook or the format is set\
              \ to AUTO."
        rawValue:
          allOf:
          - $ref: '#/components/schemas/RawValue'
          - description: "<p> The raw value of the data contained in the cell. The\
              \ raw value depends on the format of the data in the cell. However the\
              \ attribute in the API return value is always a string containing the\
              \ raw value. </p> <p> Cells with format DATE, DATE_TIME or TIME have\
              \ the raw value as a floating point number where the whole number represents\
              \ the number of days since 1/1/1900 and the fractional part represents\
              \ the fraction of the day since midnight. For example, a cell with date\
              \ 11/3/2020 has the raw value \"44138\". A cell with the time 9:00 AM\
              \ has the raw value \"0.375\" and a cell with date/time value of 11/3/2020\
              \ 9:00 AM has the raw value \"44138.375\". Notice that even though the\
              \ raw value is a number in all three cases, it is still represented\
              \ as a string. </p> <p> Cells with format NUMBER, CURRENCY, PERCENTAGE\
              \ and ACCOUNTING have the raw value of the data as the number representing\
              \ the data being displayed. For example, the number 1.325 with two decimal\
              \ places in the format will have it's raw value as \"1.325\" and formatted\
              \ value as \"1.33\". A currency value for $10 will have the raw value\
              \ as \"10\" and formatted value as \"$10.00\". A value representing\
              \ 20% with two decimal places in the format will have its raw value\
              \ as \"0.2\" and the formatted value as \"20.00%\". An accounting value\
              \ of -$25 will have \"-25\" as the raw value and \"$ (25.00)\" as the\
              \ formatted value. </p> <p> Cells with format TEXT will have the raw\
              \ text as the raw value. For example, a cell with text \"John Smith\"\
              \ will have \"John Smith\" as both the raw value and the formatted value.\
              \ </p> <p> Cells with format CONTACT will have the name of the contact\
              \ as a formatted value and the email address of the contact as the raw\
              \ value. For example, a contact for John Smith will have \"John Smith\"\
              \ as the formatted value and \"john.smith@example.com\" as the raw value.\
              \ </p> <p> Cells with format ROWLINK (aka picklist) will have the first\
              \ column of the linked row as the formatted value and the row id of\
              \ the linked row as the raw value. For example, a cell containing a\
              \ picklist to a table that displays task status might have \"Completed\"\
              \ as the formatted value and \"row:dfcefaee-5b37-4355-8f28-40c3e4ff5dd4/ca432b2f-b8eb-431d-9fb5-cbe0342f9f03\"\
              \ as the raw value. </p> <p> Cells with format ROWSET (aka multi-select\
              \ or multi-record picklist) will by default have the first column of\
              \ each of the linked rows as the formatted value in the list, and the\
              \ rowset id of the linked rows as the raw value. For example, a cell\
              \ containing a multi-select picklist to a table that contains items\
              \ might have \"Item A\", \"Item B\" in the formatted value list and\
              \ \"rows:b742c1f4-6cb0-4650-a845-35eb86fcc2bb/ [fdea123b-8f68-474a-aa8a-5ff87aa333af,6daf41f0-a138-4eee-89da-123086d36ecf]\"\
              \ as the raw value. </p> <p> Cells with format ATTACHMENT will have\
              \ the name of the attachment as the formatted value and the attachment\
              \ id as the raw value. For example, a cell containing an attachment\
              \ named \"image.jpeg\" will have \"image.jpeg\" as the formatted value\
              \ and \"attachment:ca432b2f-b8eb-431d-9fb5-cbe0342f9f03\" as the raw\
              \ value. </p> <p> Cells with format AUTO or cells without any format\
              \ that are auto-detected as one of the formats above will contain the\
              \ raw and formatted values as mentioned above, based on the auto-detected\
              \ formats. If there is no auto-detected format, the raw and formatted\
              \ values will be the same as the data in the cell. </p>"
        formattedValue:
          allOf:
          - $ref: '#/components/schemas/FormattedValue'
          - description: "<p> The formatted value of the cell. This is the value that\
              \ you see displayed in the cell in the UI. </p> <p> Note that the formatted\
              \ value of a cell is always represented as a string irrespective of\
              \ the data that is stored in the cell. For example, if a cell contains\
              \ a date, the formatted value of the cell is the string representation\
              \ of the formatted date being shown in the cell in the UI. See details\
              \ in the rawValue field below for how cells of different formats will\
              \ have different raw and formatted values. </p>"
        formattedValues:
          allOf:
          - $ref: '#/components/schemas/FormattedValuesList'
          - description: ' A list of formatted values of the cell. This field is only
              returned when the cell is ROWSET format (aka multi-select or multi-record
              picklist). Values in the list are always represented as strings. The
              formattedValue field will be empty if this field is returned. '
      type: object
    Fact:
      format: password
      maxLength: 8192
      minLength: 0
      pattern: "[\\s\\S]*"
      type: string
    FactList:
      items:
        $ref: '#/components/schemas/Fact'
      maxItems: 220
      minItems: 0
      type: array
    CellInput:
      description: "<p> CellInput object contains the data needed to create or update\
        \ cells in a table. </p> <note> <p> CellInput object has only a facts field\
        \ or a fact field, but not both. A 400 bad request will be thrown if both\
        \ fact and facts field are present. </p> </note>"
      properties:
        fact:
          allOf:
          - $ref: '#/components/schemas/Fact'
          - description: ' Fact represents the data that is entered into a cell. This
              data can be free text or a formula. Formulas need to start with the
              equals (=) sign. '
        facts:
          allOf:
          - $ref: '#/components/schemas/FactList'
          - description: " A list representing the values that are entered into a\
              \ ROWSET cell. Facts list can have either only values or rowIDs, and\
              \ rowIDs should from the same table. "
      type: object
    Cells:
      items:
        $ref: '#/components/schemas/Cell'
      type: array
    Name:
      format: password
      type: string
    ColumnMetadata:
      description: Metadata for column in the table.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the column.
        format:
          allOf:
          - $ref: '#/components/schemas/Format'
          - description: The format of the column.
      required:
      - format
      - name
      type: object
    RowDataInput:
      additionalProperties:
        $ref: '#/components/schemas/CellInput'
      maxProperties: 100
      minProperties: 1
      type: object
    DataItem:
      description: The data in a particular data cell defined on the screen.
      properties:
        overrideFormat:
          allOf:
          - $ref: '#/components/schemas/Format'
          - description: ' The overrideFormat is optional and is specified only if
              a particular row of data has a different format for the data than the
              default format defined on the screen or the table. '
        rawValue:
          allOf:
          - $ref: '#/components/schemas/RawValue'
          - description: The raw value of the data. e.g. jsmith@example.com
        formattedValue:
          allOf:
          - $ref: '#/components/schemas/FormattedValue'
          - description: The formatted value of the data. e.g. John Smith.
      type: object
    DataItems:
      items:
        $ref: '#/components/schemas/DataItem'
      type: array
    DelimitedTextDelimiter:
      maxLength: 1
      minLength: 1
      pattern: "^[^\\n\\r\\x00\\x08\\x0B\\x0C\\x0E\\x1F]?$"
      type: string
    HasHeaderRow:
      type: boolean
    IgnoreEmptyRows:
      type: boolean
    ImportDataCharacterEncoding:
      enum:
      - UTF-8
      - US-ASCII
      - ISO-8859-1
      - UTF-16BE
      - UTF-16LE
      - UTF-16
      type: string
    JobId:
      maxLength: 100
      minLength: 1
      pattern: "^[^\\n\\r\\x00\\x08\\x0B\\x0C\\x0E\\x1F]*$"
      type: string
    DescribeTableDataImportJobRequest:
      properties: {}
      title: DescribeTableDataImportJobRequest
      type: object
    TableDataImportJobStatus:
      enum:
      - SUBMITTED
      - IN_PROGRESS
      - COMPLETED
      - FAILED
      type: string
    TableDataImportJobMessage:
      type: string
    TableDataImportJobMetadata:
      description: The metadata associated with the table data import job that was
        submitted.
      properties:
        submitter:
          $ref: '#/components/schemas/TableDataImportJobMetadata_submitter'
        submitTime:
          allOf:
          - $ref: '#/components/schemas/TimestampInMillis'
          - description: The timestamp when the job was submitted for import.
        importOptions:
          $ref: '#/components/schemas/TableDataImportJobMetadata_importOptions'
        dataSource:
          $ref: '#/components/schemas/TableDataImportJobMetadata_dataSource'
      required:
      - dataSource
      - importOptions
      - submitTime
      - submitter
      type: object
    ErrorCode:
      enum:
      - ACCESS_DENIED
      - INVALID_URL_ERROR
      - INVALID_IMPORT_OPTIONS_ERROR
      - INVALID_TABLE_ID_ERROR
      - INVALID_TABLE_COLUMN_ID_ERROR
      - TABLE_NOT_FOUND_ERROR
      - FILE_EMPTY_ERROR
      - INVALID_FILE_TYPE_ERROR
      - FILE_PARSING_ERROR
      - FILE_SIZE_LIMIT_ERROR
      - FILE_NOT_FOUND_ERROR
      - UNKNOWN_ERROR
      - RESOURCE_NOT_FOUND_ERROR
      - SYSTEM_LIMIT_ERROR
      type: string
    ImportColumnMap:
      additionalProperties:
        $ref: '#/components/schemas/SourceDataColumnProperties'
      maxProperties: 100
      type: object
    Email:
      format: password
      maxLength: 254
      minLength: 3
      pattern: "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$"
      type: string
    FailedBatchItem:
      description: ' A single item in a batch that failed to perform the intended
        action because of an error preventing it from succeeding. '
      properties:
        id:
          allOf:
          - $ref: '#/components/schemas/BatchItemId'
          - description: ' The id of the batch item that failed. This is the batch
              item id for the BatchCreateTableRows and BatchUpsertTableRows operations
              and the row id for the BatchUpdateTableRows and BatchDeleteTableRows
              operations. '
        errorMessage:
          allOf:
          - $ref: '#/components/schemas/BatchErrorMessage'
          - description: ' The error message that indicates why the batch item failed. '
      required:
      - errorMessage
      - id
      type: object
    Filter:
      description: ' An object that represents a filter formula along with the id
        of the context row under which the filter function needs to evaluate. '
      properties:
        formula:
          allOf:
          - $ref: '#/components/schemas/Formula'
          - description: " A formula representing a filter function that returns zero\
              \ or more matching rows from a table. Valid formulas in this field return\
              \ a list of rows from a table. The most common ways of writing a formula\
              \ to return a list of rows are to use the FindRow() or Filter() functions.\
              \ Any other formula that returns zero or more rows is also acceptable.\
              \ For example, you can use a formula that points to a cell that contains\
              \ a filter function. "
        contextRowId:
          allOf:
          - $ref: '#/components/schemas/RowId'
          - description: ' The optional contextRowId attribute can be used to specify
              the row id of the context row if the filter formula contains unqualified
              references to table columns and needs a context row to evaluate them
              successfully. '
      required:
      - formula
      type: object
    VariableValueMap:
      additionalProperties:
        $ref: '#/components/schemas/VariableValue'
      type: object
    MaxResults:
      maximum: 100
      minimum: 1
      type: integer
    PaginationToken:
      maxLength: 1024
      minLength: 1
      pattern: ^(?!\s*$).+
      type: string
    GetScreenDataRequest:
      example:
        screenId: ""
        variables: ""
        maxResults: ""
        nextToken: ""
        appId: ""
        workbookId: ""
      properties:
        workbookId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The ID of the workbook that contains the screen.
        appId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The ID of the app that contains the screen.
        screenId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The ID of the screen.
        variables:
          allOf:
          - $ref: '#/components/schemas/VariableValueMap'
          - description: " Variables are optional and are needed only if the screen\
              \ requires them to render correctly. Variables are specified as a map\
              \ where the key is the name of the variable as defined on the screen.\
              \ The value is an object which currently has only one property, rawValue,\
              \ which holds the value of the variable to be passed to the screen. "
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: "<p> The number of results to be returned on a single page.\
              \ Specify a number between 1 and 100. The maximum value is 100. </p>\
              \ <p> This parameter is optional. If you don't specify this parameter,\
              \ the default page size is 100. </p>"
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "<p> This parameter is optional. If a nextToken is not specified,\
              \ the API returns the first page of data. </p> <p> Pagination tokens\
              \ expire after 1 hour. If you use a token that was returned more than\
              \ an hour back, the API will throw ValidationException. </p>"
      required:
      - appId
      - screenId
      - workbookId
      title: GetScreenDataRequest
      type: object
    ResultSetMap:
      additionalProperties:
        $ref: '#/components/schemas/ResultSet'
      type: object
    SourceDataColumnProperties:
      description: An object that contains the properties for importing data to a
        specific column in a table.
      properties:
        columnIndex:
          allOf:
          - $ref: '#/components/schemas/SourceDataColumnIndex'
          - description: The index of the column in the input file.
      type: object
    ImportDataSource:
      description: An object that has details about the source of the data that was
        submitted for import.
      properties:
        dataSourceConfig:
          $ref: '#/components/schemas/StartTableDataImportJob_request_dataSource_dataSourceConfig'
      required:
      - dataSourceConfig
      type: object
    SecureURL:
      format: password
      maxLength: 8000
      minLength: 1
      pattern: "^https:\\/\\/[^\\n\\r\\x00\\x08\\x0B\\x0C\\x0E\\x1F]*$"
      type: string
    ImportJobSubmitter:
      description: An object that contains the attributes of the submitter of the
        import job.
      properties:
        email:
          allOf:
          - $ref: '#/components/schemas/Email'
          - description: "The email id of the submitter of the import job, if available."
        userArn:
          allOf:
          - $ref: '#/components/schemas/AwsUserArn'
          - description: "The AWS user ARN of the submitter of the import job, if\
              \ available."
      type: object
    ImportOptions:
      description: An object that contains the options specified by the sumitter of
        the import request.
      properties:
        destinationOptions:
          $ref: '#/components/schemas/StartTableDataImportJob_request_importOptions_destinationOptions'
        delimitedTextOptions:
          $ref: '#/components/schemas/StartTableDataImportJob_request_importOptions_delimitedTextOptions'
      type: object
    ImportSourceDataFormat:
      enum:
      - DELIMITED_TEXT
      type: string
    InvokeScreenAutomationRequest:
      example:
        variables: ""
        clientRequestToken: ""
        rowId: ""
      properties:
        variables:
          allOf:
          - $ref: '#/components/schemas/VariableValueMap'
          - description: " Variables are specified as a map where the key is the name\
              \ of the variable as defined on the screen. The value is an object which\
              \ currently has only one property, rawValue, which holds the value of\
              \ the variable to be passed to the screen. Any variables defined in\
              \ a screen are required to be passed in the call. "
        rowId:
          allOf:
          - $ref: '#/components/schemas/RowId'
          - description: ' The row ID for the automation if the automation is defined
              inside a block with source or list. '
        clientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          - description: "<p> The request token for performing the automation action.\
              \ Request tokens help to identify duplicate requests. If a call times\
              \ out or fails due to a transient error like a failed network connection,\
              \ you can retry the call with the same request token. The service ensures\
              \ that if the first call using that request token is successfully performed,\
              \ the second call will return the response of the previous call rather\
              \ than performing the action again. </p> <p> Note that request tokens\
              \ are valid only for a few minutes. You cannot use request tokens to\
              \ dedupe requests spanning hours or days. </p>"
      title: InvokeScreenAutomationRequest
      type: object
    ListTableColumnsRequest:
      properties: {}
      title: ListTableColumnsRequest
      type: object
    TableColumns:
      items:
        $ref: '#/components/schemas/TableColumn'
      type: array
    ListTableRowsRequest:
      example:
        rowIds: ""
        maxResults: ""
        nextToken: ""
      properties:
        rowIds:
          allOf:
          - $ref: '#/components/schemas/RowIdList'
          - description: " This parameter is optional. If one or more row ids are\
              \ specified in this list, then only the specified row ids are returned\
              \ in the result. If no row ids are specified here, then all the rows\
              \ in the table are returned. "
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: The maximum number of rows to return in each page of the
              results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "<p> This parameter is optional. If a nextToken is not specified,\
              \ the API returns the first page of data. </p> <p> Pagination tokens\
              \ expire after 1 hour. If you use a token that was returned more than\
              \ an hour back, the API will throw ValidationException. </p>"
      title: ListTableRowsRequest
      type: object
    ResourceIds:
      items:
        $ref: '#/components/schemas/ResourceId'
      maxItems: 100
      minItems: 1
      type: array
    TableRows:
      items:
        $ref: '#/components/schemas/TableRow'
      type: array
    ListTablesRequest:
      properties: {}
      title: ListTablesRequest
      type: object
    Tables:
      items:
        $ref: '#/components/schemas/Table'
      type: array
    ResourceArn:
      maxLength: 256
      minLength: 1
      pattern: "^arn:aws:honeycode:.+:[0-9]{12}:.+:.+$"
      type: string
    ListTagsForResourceRequest:
      properties: {}
      title: ListTagsForResourceRequest
      type: object
    TagsMap:
      additionalProperties:
        $ref: '#/components/schemas/TagValue'
      description: A string to string map representing tags
      maxProperties: 100
      type: object
    QueryTableRowsRequest:
      example:
        maxResults: ""
        nextToken: ""
        filterFormula:
          formula: ""
          contextRowId: ""
      properties:
        filterFormula:
          $ref: '#/components/schemas/QueryTableRowsRequest_filterFormula'
        maxResults:
          allOf:
          - $ref: '#/components/schemas/MaxResults'
          - description: The maximum number of rows to return in each page of the
              results.
        nextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "<p> This parameter is optional. If a nextToken is not specified,\
              \ the API returns the first page of data. </p> <p> Pagination tokens\
              \ expire after 1 hour. If you use a token that was returned more than\
              \ an hour back, the API will throw ValidationException. </p>"
      required:
      - filterFormula
      title: QueryTableRowsRequest
      type: object
    ResultHeader:
      items:
        $ref: '#/components/schemas/ColumnMetadata'
      type: array
    ResultRow:
      description: A single row in the ResultSet.
      properties:
        rowId:
          allOf:
          - $ref: '#/components/schemas/RowId'
          - description: The ID for a particular row.
        dataItems:
          allOf:
          - $ref: '#/components/schemas/DataItems'
          - description: List of all the data cells in a row.
      required:
      - dataItems
      type: object
    ResultRows:
      items:
        $ref: '#/components/schemas/ResultRow'
      type: array
    ResultSet:
      description: ' ResultSet contains the results of the request for a single block
        or list defined on the screen. '
      properties:
        headers:
          allOf:
          - $ref: '#/components/schemas/ResultHeader'
          - description: "<p> List of headers for all the data cells in the block.\
              \ The header identifies the name and default format of the data cell.\
              \ Data cells appear in the same order in all rows as defined in the\
              \ header. The names and formats are not repeated in the rows. If a particular\
              \ row does not have a value for a data cell, a blank value is used.\
              \ </p> <p> For example, a task list that displays the task name, due\
              \ date and assigned person might have headers [ { \"name\": \"Task Name\"\
              }, {\"name\": \"Due Date\", \"format\": \"DATE\"}, {\"name\": \"Assigned\"\
              , \"format\": \"CONTACT\"} ]. Every row in the result will have the\
              \ task name as the first item, due date as the second item and assigned\
              \ person as the third item. If a particular task does not have a due\
              \ date, that row will still have a blank value in the second element\
              \ and the assigned person will still be in the third element. </p>"
        rows:
          allOf:
          - $ref: '#/components/schemas/ResultRows'
          - description: ' List of rows returned by the request. Each row has a row
              Id and a list of data cells in that row. The data cells will be present
              in the same order as they are defined in the header. '
      required:
      - headers
      - rows
      type: object
    SourceDataColumnIndex:
      minimum: 1
      type: integer
    StartTableDataImportJobRequest:
      example:
        importOptions:
          destinationOptions:
            columnMap: ""
          delimitedTextOptions:
            dataCharacterEncoding: ""
            delimiter: ""
            ignoreEmptyRows: ""
            hasHeaderRow: ""
        clientRequestToken: ""
        dataFormat: ""
        dataSource:
          dataSourceConfig:
            dataSourceUrl: ""
      properties:
        dataSource:
          $ref: '#/components/schemas/StartTableDataImportJobRequest_dataSource'
        dataFormat:
          allOf:
          - $ref: '#/components/schemas/ImportSourceDataFormat'
          - description: ' The format of the data that is being imported. Currently
              the only option supported is "DELIMITED_TEXT". '
        importOptions:
          $ref: '#/components/schemas/StartTableDataImportJobRequest_importOptions'
        clientRequestToken:
          allOf:
          - $ref: '#/components/schemas/ClientRequestToken'
          - description: "<p> The request token for performing the update action.\
              \ Request tokens help to identify duplicate requests. If a call times\
              \ out or fails due to a transient error like a failed network connection,\
              \ you can retry the call with the same request token. The service ensures\
              \ that if the first call using that request token is successfully performed,\
              \ the second call will not perform the action again. </p> <p> Note that\
              \ request tokens are valid only for a few minutes. You cannot use request\
              \ tokens to dedupe requests spanning hours or days. </p>"
      required:
      - clientRequestToken
      - dataFormat
      - dataSource
      - importOptions
      title: StartTableDataImportJobRequest
      type: object
    TableName:
      type: string
    Table:
      description: An object representing the properties of a table in a workbook.
      properties:
        tableId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The id of the table.
        tableName:
          allOf:
          - $ref: '#/components/schemas/TableName'
          - description: The name of the table.
      type: object
    TableColumnName:
      type: string
    TableColumn:
      description: An object that contains attributes about a single column in a table
      properties:
        tableColumnId:
          allOf:
          - $ref: '#/components/schemas/ResourceId'
          - description: The id of the column in the table.
        tableColumnName:
          allOf:
          - $ref: '#/components/schemas/TableColumnName'
          - description: The name of the column in the table.
        format:
          allOf:
          - $ref: '#/components/schemas/Format'
          - description: ' The column level format that is applied in the table. An
              empty value in this field means that the column format is the default
              value ''AUTO''. '
      type: object
    TimestampInMillis:
      format: date-time
      type: string
    TableRow:
      description: An object that contains attributes about a single row in a table
      properties:
        rowId:
          allOf:
          - $ref: '#/components/schemas/RowId'
          - description: The id of the row in the table.
        cells:
          allOf:
          - $ref: '#/components/schemas/Cells'
          - description: 'A list of cells in the table row. The cells appear in the
              same order as the columns of the table. '
      required:
      - cells
      - rowId
      type: object
    TagKeysList:
      description: A list of tag keys
      items:
        $ref: '#/components/schemas/TagKey'
      maxItems: 100
      type: array
    TagResourceRequest:
      example:
        tags: ""
      properties:
        tags:
          allOf:
          - $ref: '#/components/schemas/TagsMap'
          - description: A list of tags to apply to the resource.
      required:
      - tags
      title: TagResourceRequest
      type: object
    UntagResourceRequest:
      properties: {}
      title: UntagResourceRequest
      type: object
    UpsertAction:
      enum:
      - UPDATED
      - APPENDED
      type: string
    UpsertRowsResult:
      description: ' An object that represents the result of a single upsert row request. '
      properties:
        rowIds:
          allOf:
          - $ref: '#/components/schemas/RowIdList'
          - description: " The list of row ids that were changed as part of an upsert\
              \ row operation. If the upsert resulted in an update, this list could\
              \ potentially contain multiple rows that matched the filter and hence\
              \ got updated. If the upsert resulted in an append, this list would\
              \ only have the single row that was appended. "
        upsertAction:
          allOf:
          - $ref: '#/components/schemas/UpsertAction'
          - description: ' The result of the upsert action. '
      required:
      - rowIds
      - upsertAction
      type: object
    VariableName:
      format: password
      maxLength: 255
      minLength: 1
      pattern: ^(?!\s*$).+
      type: string
    BatchCreateTableRows_request:
      properties:
        rowsToCreate:
          description: "<p> The list of rows to create at the end of the table. Each\
            \ item in this list needs to have a batch item id to uniquely identify\
            \ the element in the request and the cells to create for that row. You\
            \ need to specify at least one item in this list. </p> <p> Note that if\
            \ one of the column ids in any of the rows in the request does not exist\
            \ in the table, then the request fails and no updates are made to the\
            \ table. </p>"
          items:
            $ref: '#/components/schemas/CreateRowData'
          maxItems: 100
          minItems: 1
          type: array
        clientRequestToken:
          description: "<p> The request token for performing the batch create operation.\
            \ Request tokens help to identify duplicate requests. If a call times\
            \ out or fails due to a transient error like a failed network connection,\
            \ you can retry the call with the same request token. The service ensures\
            \ that if the first call using that request token is successfully performed,\
            \ the second call will not perform the operation again. </p> <p> Note\
            \ that request tokens are valid only for a few minutes. You cannot use\
            \ request tokens to dedupe requests spanning hours or days. </p>"
          maxLength: 64
          minLength: 32
          pattern: ^(?!\s*$).+
          type: string
      required:
      - rowsToCreate
      type: object
    BatchDeleteTableRows_request:
      properties:
        rowIds:
          description: "<p> The list of row ids to delete from the table. You need\
            \ to specify at least one row id in this list. </p> <p> Note that if one\
            \ of the row ids provided in the request does not exist in the table,\
            \ then the request fails and no rows are deleted from the table. </p>"
          items:
            $ref: '#/components/schemas/RowId'
          maxItems: 100
          minItems: 1
          type: array
        clientRequestToken:
          description: "<p> The request token for performing the delete action. Request\
            \ tokens help to identify duplicate requests. If a call times out or fails\
            \ due to a transient error like a failed network connection, you can retry\
            \ the call with the same request token. The service ensures that if the\
            \ first call using that request token is successfully performed, the second\
            \ call will not perform the action again. </p> <p> Note that request tokens\
            \ are valid only for a few minutes. You cannot use request tokens to dedupe\
            \ requests spanning hours or days. </p>"
          maxLength: 64
          minLength: 32
          pattern: ^(?!\s*$).+
          type: string
      required:
      - rowIds
      type: object
    BatchUpdateTableRows_request:
      properties:
        rowsToUpdate:
          description: "<p> The list of rows to update in the table. Each item in\
            \ this list needs to contain the row id to update along with the map of\
            \ column id to cell values for each column in that row that needs to be\
            \ updated. You need to specify at least one row in this list, and for\
            \ each row, you need to specify at least one column to update. </p> <p>\
            \ Note that if one of the row or column ids in the request does not exist\
            \ in the table, then the request fails and no updates are made to the\
            \ table. </p>"
          items:
            $ref: '#/components/schemas/UpdateRowData'
          maxItems: 100
          minItems: 1
          type: array
        clientRequestToken:
          description: "<p> The request token for performing the update action. Request\
            \ tokens help to identify duplicate requests. If a call times out or fails\
            \ due to a transient error like a failed network connection, you can retry\
            \ the call with the same request token. The service ensures that if the\
            \ first call using that request token is successfully performed, the second\
            \ call will not perform the action again. </p> <p> Note that request tokens\
            \ are valid only for a few minutes. You cannot use request tokens to dedupe\
            \ requests spanning hours or days. </p>"
          maxLength: 64
          minLength: 32
          pattern: ^(?!\s*$).+
          type: string
      required:
      - rowsToUpdate
      type: object
    BatchUpsertTableRows_request:
      properties:
        rowsToUpsert:
          description: "<p> The list of rows to upsert in the table. Each item in\
            \ this list needs to have a batch item id to uniquely identify the element\
            \ in the request, a filter expression to find the rows to update for that\
            \ element and the cell values to set for each column in the upserted rows.\
            \ You need to specify at least one item in this list. </p> <p> Note that\
            \ if one of the filter formulas in the request fails to evaluate because\
            \ of an error or one of the column ids in any of the rows does not exist\
            \ in the table, then the request fails and no updates are made to the\
            \ table. </p>"
          items:
            $ref: '#/components/schemas/UpsertRowData'
          type: array
        clientRequestToken:
          description: "<p> The request token for performing the update action. Request\
            \ tokens help to identify duplicate requests. If a call times out or fails\
            \ due to a transient error like a failed network connection, you can retry\
            \ the call with the same request token. The service ensures that if the\
            \ first call using that request token is successfully performed, the second\
            \ call will not perform the action again. </p> <p> Note that request tokens\
            \ are valid only for a few minutes. You cannot use request tokens to dedupe\
            \ requests spanning hours or days. </p>"
          maxLength: 64
          minLength: 32
          pattern: ^(?!\s*$).+
          type: string
      required:
      - rowsToUpsert
      type: object
    GetScreenData_request:
      properties:
        workbookId:
          description: The ID of the workbook that contains the screen.
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        appId:
          description: The ID of the app that contains the screen.
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        screenId:
          description: The ID of the screen.
          maxLength: 36
          minLength: 36
          pattern: "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValue'
          description: " Variables are optional and are needed only if the screen\
            \ requires them to render correctly. Variables are specified as a map\
            \ where the key is the name of the variable as defined on the screen.\
            \ The value is an object which currently has only one property, rawValue,\
            \ which holds the value of the variable to be passed to the screen. "
          type: object
        maxResults:
          description: "<p> The number of results to be returned on a single page.\
            \ Specify a number between 1 and 100. The maximum value is 100. </p> <p>\
            \ This parameter is optional. If you don't specify this parameter, the\
            \ default page size is 100. </p>"
          maximum: 100
          minimum: 1
          type: integer
        nextToken:
          description: "<p> This parameter is optional. If a nextToken is not specified,\
            \ the API returns the first page of data. </p> <p> Pagination tokens expire\
            \ after 1 hour. If you use a token that was returned more than an hour\
            \ back, the API will throw ValidationException. </p>"
          maxLength: 1024
          minLength: 1
          pattern: ^(?!\s*$).+
          type: string
      required:
      - appId
      - screenId
      - workbookId
      type: object
    InvokeScreenAutomation_request:
      properties:
        variables:
          additionalProperties:
            $ref: '#/components/schemas/VariableValue'
          description: " Variables are specified as a map where the key is the name\
            \ of the variable as defined on the screen. The value is an object which\
            \ currently has only one property, rawValue, which holds the value of\
            \ the variable to be passed to the screen. Any variables defined in a\
            \ screen are required to be passed in the call. "
          type: object
        rowId:
          description: ' The row ID for the automation if the automation is defined
            inside a block with source or list. '
          maxLength: 77
          minLength: 77
          pattern: "row:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\\
            /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"
          type: string
        clientRequestToken:
          description: "<p> The request token for performing the automation action.\
            \ Request tokens help to identify duplicate requests. If a call times\
            \ out or fails due to a transient error like a failed network connection,\
            \ you can retry the call with the same request token. The service ensures\
            \ that if the first call using that request token is successfully performed,\
            \ the second call will return the response of the previous call rather\
            \ than performing the action again. </p> <p> Note that request tokens\
            \ are valid only for a few minutes. You cannot use request tokens to dedupe\
            \ requests spanning hours or days. </p>"
          maxLength: 64
          minLength: 32
          pattern: ^(?!\s*$).+
          type: string
      type: object
    ListTableRows_request:
      properties:
        rowIds:
          description: " This parameter is optional. If one or more row ids are specified\
            \ in this list, then only the specified row ids are returned in the result.\
            \ If no row ids are specified here, then all the rows in the table are\
            \ returned. "
          items:
            $ref: '#/components/schemas/RowId'
          maxItems: 100
          minItems: 1
          type: array
        maxResults:
          description: The maximum number of rows to return in each page of the results.
          maximum: 100
          minimum: 1
          type: integer
        nextToken:
          description: "<p> This parameter is optional. If a nextToken is not specified,\
            \ the API returns the first page of data. </p> <p> Pagination tokens expire\
            \ after 1 hour. If you use a token that was returned more than an hour\
            \ back, the API will throw ValidationException. </p>"
          maxLength: 1024
          minLength: 1
          pattern: ^(?!\s*$).+
          type: string
      type: object
    TagResource_request:
      properties:
        tags:
          additionalProperties:
            $ref: '#/components/schemas/TagValue'
          description: A string to string map representing tags
          maxProperties: 100
          type: object
      required:
      - tags
      type: object
    QueryTableRows_request_filterFormula:
      description: ' An object that represents a filter formula along with the id
        of the context row under which the filter function needs to evaluate. '
      properties:
        formula:
          allOf:
          - $ref: '#/components/schemas/Formula'
          - description: " A formula representing a filter function that returns zero\
              \ or more matching rows from a table. Valid formulas in this field return\
              \ a list of rows from a table. The most common ways of writing a formula\
              \ to return a list of rows are to use the FindRow() or Filter() functions.\
              \ Any other formula that returns zero or more rows is also acceptable.\
              \ For example, you can use a formula that points to a cell that contains\
              \ a filter function. "
        contextRowId:
          allOf:
          - $ref: '#/components/schemas/RowId'
          - description: ' The optional contextRowId attribute can be used to specify
              the row id of the context row if the filter formula contains unqualified
              references to table columns and needs a context row to evaluate them
              successfully. '
      type: object
    QueryTableRows_request:
      properties:
        filterFormula:
          $ref: '#/components/schemas/QueryTableRows_request_filterFormula'
        maxResults:
          description: The maximum number of rows to return in each page of the results.
          maximum: 100
          minimum: 1
          type: integer
        nextToken:
          description: "<p> This parameter is optional. If a nextToken is not specified,\
            \ the API returns the first page of data. </p> <p> Pagination tokens expire\
            \ after 1 hour. If you use a token that was returned more than an hour\
            \ back, the API will throw ValidationException. </p>"
          maxLength: 1024
          minLength: 1
          pattern: ^(?!\s*$).+
          type: string
      required:
      - filterFormula
      type: object
    StartTableDataImportJob_request_dataSource_dataSourceConfig:
      allOf:
      - $ref: '#/components/schemas/ImportDataSourceConfig'
      - description: The configuration parameters for the data source of the import
      example:
        dataSourceUrl: ""
    StartTableDataImportJob_request_dataSource:
      description: An object that has details about the source of the data that was
        submitted for import.
      properties:
        dataSourceConfig:
          $ref: '#/components/schemas/StartTableDataImportJob_request_dataSource_dataSourceConfig'
      type: object
    StartTableDataImportJob_request_importOptions_destinationOptions:
      allOf:
      - $ref: '#/components/schemas/DestinationOptions'
      - description: Options relating to the destination of the import request.
      example:
        columnMap: ""
    StartTableDataImportJob_request_importOptions_delimitedTextOptions:
      allOf:
      - $ref: '#/components/schemas/DelimitedTextImportOptions'
      - description: Options relating to parsing delimited text. Required if dataFormat
          is DELIMITED_TEXT.
      example:
        dataCharacterEncoding: ""
        delimiter: ""
        ignoreEmptyRows: ""
        hasHeaderRow: ""
    StartTableDataImportJob_request_importOptions:
      description: An object that contains the options specified by the sumitter of
        the import request.
      properties:
        destinationOptions:
          $ref: '#/components/schemas/StartTableDataImportJob_request_importOptions_destinationOptions'
        delimitedTextOptions:
          $ref: '#/components/schemas/StartTableDataImportJob_request_importOptions_delimitedTextOptions'
      type: object
    StartTableDataImportJob_request:
      properties:
        dataSource:
          $ref: '#/components/schemas/StartTableDataImportJob_request_dataSource'
        dataFormat:
          description: ' The format of the data that is being imported. Currently
            the only option supported is "DELIMITED_TEXT". '
          enum:
          - DELIMITED_TEXT
          type: string
        importOptions:
          $ref: '#/components/schemas/StartTableDataImportJob_request_importOptions'
        clientRequestToken:
          description: "<p> The request token for performing the update action. Request\
            \ tokens help to identify duplicate requests. If a call times out or fails\
            \ due to a transient error like a failed network connection, you can retry\
            \ the call with the same request token. The service ensures that if the\
            \ first call using that request token is successfully performed, the second\
            \ call will not perform the action again. </p> <p> Note that request tokens\
            \ are valid only for a few minutes. You cannot use request tokens to dedupe\
            \ requests spanning hours or days. </p>"
          maxLength: 64
          minLength: 32
          pattern: ^(?!\s*$).+
          type: string
      required:
      - clientRequestToken
      - dataFormat
      - dataSource
      - importOptions
      type: object
    UpsertRowData_filter:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - description: "<p> The filter formula to use to find existing matching rows\
          \ to update. The formula needs to return zero or more rows. If the formula\
          \ returns 0 rows, then a new row will be appended in the target table. If\
          \ the formula returns one or more rows, then the returned rows will be updated.\
          \ </p> <p> Note that the filter formula needs to return rows from the target\
          \ table for the upsert operation to succeed. If the filter formula has a\
          \ syntax error or it doesn't evaluate to zero or more rows in the target\
          \ table for any one item in the input list, then the entire BatchUpsertTableRows\
          \ request fails and no updates are made to the table. </p>"
    DescribeTableDataImportJobResult_jobMetadata:
      allOf:
      - $ref: '#/components/schemas/TableDataImportJobMetadata'
      - description: ' The metadata about the job that was submitted for import. '
      example:
        submitter:
          userArn: ""
          email: ""
        importOptions:
          destinationOptions:
            columnMap: ""
          delimitedTextOptions:
            dataCharacterEncoding: ""
            delimiter: ""
            ignoreEmptyRows: ""
            hasHeaderRow: ""
        submitTime: ""
        dataSource:
          dataSourceConfig:
            dataSourceUrl: ""
    TableDataImportJobMetadata_submitter:
      allOf:
      - $ref: '#/components/schemas/ImportJobSubmitter'
      - description: Details about the submitter of the import request.
      example:
        userArn: ""
        email: ""
    TableDataImportJobMetadata_importOptions:
      allOf:
      - $ref: '#/components/schemas/ImportOptions'
      - description: The options that was specified at the time of submitting the
          import request.
      example:
        destinationOptions:
          columnMap: ""
        delimitedTextOptions:
          dataCharacterEncoding: ""
          delimiter: ""
          ignoreEmptyRows: ""
          hasHeaderRow: ""
    TableDataImportJobMetadata_dataSource:
      allOf:
      - $ref: '#/components/schemas/ImportDataSource'
      - description: The source of the data that was submitted for import.
      example:
        dataSourceConfig:
          dataSourceUrl: ""
    QueryTableRowsRequest_filterFormula:
      allOf:
      - $ref: '#/components/schemas/Filter'
      - description: An object that represents a filter formula along with the id
          of the context row under which the filter function needs to evaluate.
      example:
        formula: ""
        contextRowId: ""
    StartTableDataImportJobRequest_dataSource:
      allOf:
      - $ref: '#/components/schemas/ImportDataSource'
      - description: " The source of the data that is being imported. The size of\
          \ source must be no larger than 100 MB. Source must have no more than 100,000\
          \ cells and no more than 1,000 rows. "
      example:
        dataSourceConfig:
          dataSourceUrl: ""
    StartTableDataImportJobRequest_importOptions:
      allOf:
      - $ref: '#/components/schemas/ImportOptions'
      - description: ' The options for customizing this import request. '
      example:
        destinationOptions:
          columnMap: ""
        delimitedTextOptions:
          dataCharacterEncoding: ""
          delimiter: ""
          ignoreEmptyRows: ""
          hasHeaderRow: ""
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

