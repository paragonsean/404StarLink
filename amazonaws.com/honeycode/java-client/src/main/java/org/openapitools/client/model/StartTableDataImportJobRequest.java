/*
 * Amazon Honeycode
 *  Amazon Honeycode is a fully managed service that allows you to quickly build mobile and web apps for teamsâ€”without programming. Build Honeycode apps for managing almost anything, like projects, customers, operations, approvals, resources, and even your team. 
 *
 * The version of the OpenAPI document: 2020-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StartTableDataImportJobRequestDataSource;
import org.openapitools.client.model.StartTableDataImportJobRequestImportOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartTableDataImportJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:19:28.423278-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartTableDataImportJobRequest {
  public static final String SERIALIZED_NAME_DATA_SOURCE = "dataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private StartTableDataImportJobRequestDataSource dataSource;

  /**
   *  The format of the data that is being imported. Currently the only option supported is \&quot;DELIMITED_TEXT\&quot;. 
   */
  @JsonAdapter(DataFormatEnum.Adapter.class)
  public enum DataFormatEnum {
    DELIMITED_TEXT("DELIMITED_TEXT");

    private String value;

    DataFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataFormatEnum fromValue(String value) {
      for (DataFormatEnum b : DataFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_FORMAT = "dataFormat";
  @SerializedName(SERIALIZED_NAME_DATA_FORMAT)
  private DataFormatEnum dataFormat;

  public static final String SERIALIZED_NAME_IMPORT_OPTIONS = "importOptions";
  @SerializedName(SERIALIZED_NAME_IMPORT_OPTIONS)
  private StartTableDataImportJobRequestImportOptions importOptions;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public StartTableDataImportJobRequest() {
  }

  public StartTableDataImportJobRequest dataSource(StartTableDataImportJobRequestDataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nonnull
  public StartTableDataImportJobRequestDataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(StartTableDataImportJobRequestDataSource dataSource) {
    this.dataSource = dataSource;
  }


  public StartTableDataImportJobRequest dataFormat(DataFormatEnum dataFormat) {
    this.dataFormat = dataFormat;
    return this;
  }

  /**
   *  The format of the data that is being imported. Currently the only option supported is \&quot;DELIMITED_TEXT\&quot;. 
   * @return dataFormat
   */
  @javax.annotation.Nonnull
  public DataFormatEnum getDataFormat() {
    return dataFormat;
  }

  public void setDataFormat(DataFormatEnum dataFormat) {
    this.dataFormat = dataFormat;
  }


  public StartTableDataImportJobRequest importOptions(StartTableDataImportJobRequestImportOptions importOptions) {
    this.importOptions = importOptions;
    return this;
  }

  /**
   * Get importOptions
   * @return importOptions
   */
  @javax.annotation.Nonnull
  public StartTableDataImportJobRequestImportOptions getImportOptions() {
    return importOptions;
  }

  public void setImportOptions(StartTableDataImportJobRequestImportOptions importOptions) {
    this.importOptions = importOptions;
  }


  public StartTableDataImportJobRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * &lt;p&gt; The request token for performing the update action. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the action again. &lt;/p&gt; &lt;p&gt; Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. &lt;/p&gt;
   * @return clientRequestToken
   */
  @javax.annotation.Nonnull
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartTableDataImportJobRequest startTableDataImportJobRequest = (StartTableDataImportJobRequest) o;
    return Objects.equals(this.dataSource, startTableDataImportJobRequest.dataSource) &&
        Objects.equals(this.dataFormat, startTableDataImportJobRequest.dataFormat) &&
        Objects.equals(this.importOptions, startTableDataImportJobRequest.importOptions) &&
        Objects.equals(this.clientRequestToken, startTableDataImportJobRequest.clientRequestToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSource, dataFormat, importOptions, clientRequestToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartTableDataImportJobRequest {\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    dataFormat: ").append(toIndentedString(dataFormat)).append("\n");
    sb.append("    importOptions: ").append(toIndentedString(importOptions)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSource");
    openapiFields.add("dataFormat");
    openapiFields.add("importOptions");
    openapiFields.add("clientRequestToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataSource");
    openapiRequiredFields.add("dataFormat");
    openapiRequiredFields.add("importOptions");
    openapiRequiredFields.add("clientRequestToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartTableDataImportJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartTableDataImportJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartTableDataImportJobRequest is not found in the empty JSON string", StartTableDataImportJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartTableDataImportJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartTableDataImportJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartTableDataImportJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `dataSource`
      StartTableDataImportJobRequestDataSource.validateJsonElement(jsonObj.get("dataSource"));
      if (!jsonObj.get("dataFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataFormat").toString()));
      }
      // validate the required field `dataFormat`
      DataFormatEnum.validateJsonElement(jsonObj.get("dataFormat"));
      // validate the required field `importOptions`
      StartTableDataImportJobRequestImportOptions.validateJsonElement(jsonObj.get("importOptions"));
      if (!jsonObj.get("clientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRequestToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartTableDataImportJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartTableDataImportJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartTableDataImportJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartTableDataImportJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartTableDataImportJobRequest>() {
           @Override
           public void write(JsonWriter out, StartTableDataImportJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartTableDataImportJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartTableDataImportJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartTableDataImportJobRequest
   * @throws IOException if the JSON string is invalid with respect to StartTableDataImportJobRequest
   */
  public static StartTableDataImportJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartTableDataImportJobRequest.class);
  }

  /**
   * Convert an instance of StartTableDataImportJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

