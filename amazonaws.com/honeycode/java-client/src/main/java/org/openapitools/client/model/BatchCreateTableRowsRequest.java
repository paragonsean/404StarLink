/*
 * Amazon Honeycode
 *  Amazon Honeycode is a fully managed service that allows you to quickly build mobile and web apps for teamsâ€”without programming. Build Honeycode apps for managing almost anything, like projects, customers, operations, approvals, resources, and even your team. 
 *
 * The version of the OpenAPI document: 2020-03-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateRowData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchCreateTableRowsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:19:28.423278-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchCreateTableRowsRequest {
  public static final String SERIALIZED_NAME_ROWS_TO_CREATE = "rowsToCreate";
  @SerializedName(SERIALIZED_NAME_ROWS_TO_CREATE)
  private List<CreateRowData> rowsToCreate = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "clientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public BatchCreateTableRowsRequest() {
  }

  public BatchCreateTableRowsRequest rowsToCreate(List<CreateRowData> rowsToCreate) {
    this.rowsToCreate = rowsToCreate;
    return this;
  }

  public BatchCreateTableRowsRequest addRowsToCreateItem(CreateRowData rowsToCreateItem) {
    if (this.rowsToCreate == null) {
      this.rowsToCreate = new ArrayList<>();
    }
    this.rowsToCreate.add(rowsToCreateItem);
    return this;
  }

  /**
   * &lt;p&gt; The list of rows to create at the end of the table. Each item in this list needs to have a batch item id to uniquely identify the element in the request and the cells to create for that row. You need to specify at least one item in this list. &lt;/p&gt; &lt;p&gt; Note that if one of the column ids in any of the rows in the request does not exist in the table, then the request fails and no updates are made to the table. &lt;/p&gt;
   * @return rowsToCreate
   */
  @javax.annotation.Nonnull
  public List<CreateRowData> getRowsToCreate() {
    return rowsToCreate;
  }

  public void setRowsToCreate(List<CreateRowData> rowsToCreate) {
    this.rowsToCreate = rowsToCreate;
  }


  public BatchCreateTableRowsRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * &lt;p&gt; The request token for performing the batch create operation. Request tokens help to identify duplicate requests. If a call times out or fails due to a transient error like a failed network connection, you can retry the call with the same request token. The service ensures that if the first call using that request token is successfully performed, the second call will not perform the operation again. &lt;/p&gt; &lt;p&gt; Note that request tokens are valid only for a few minutes. You cannot use request tokens to dedupe requests spanning hours or days. &lt;/p&gt;
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchCreateTableRowsRequest batchCreateTableRowsRequest = (BatchCreateTableRowsRequest) o;
    return Objects.equals(this.rowsToCreate, batchCreateTableRowsRequest.rowsToCreate) &&
        Objects.equals(this.clientRequestToken, batchCreateTableRowsRequest.clientRequestToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rowsToCreate, clientRequestToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchCreateTableRowsRequest {\n");
    sb.append("    rowsToCreate: ").append(toIndentedString(rowsToCreate)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rowsToCreate");
    openapiFields.add("clientRequestToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("rowsToCreate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchCreateTableRowsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchCreateTableRowsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchCreateTableRowsRequest is not found in the empty JSON string", BatchCreateTableRowsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchCreateTableRowsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchCreateTableRowsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchCreateTableRowsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("rowsToCreate").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rowsToCreate` to be an array in the JSON string but got `%s`", jsonObj.get("rowsToCreate").toString()));
      }

      JsonArray jsonArrayrowsToCreate = jsonObj.getAsJsonArray("rowsToCreate");
      // validate the required field `rowsToCreate` (array)
      for (int i = 0; i < jsonArrayrowsToCreate.size(); i++) {
        CreateRowData.validateJsonElement(jsonArrayrowsToCreate.get(i));
      };
      if ((jsonObj.get("clientRequestToken") != null && !jsonObj.get("clientRequestToken").isJsonNull()) && !jsonObj.get("clientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRequestToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchCreateTableRowsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchCreateTableRowsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchCreateTableRowsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchCreateTableRowsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchCreateTableRowsRequest>() {
           @Override
           public void write(JsonWriter out, BatchCreateTableRowsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchCreateTableRowsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchCreateTableRowsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchCreateTableRowsRequest
   * @throws IOException if the JSON string is invalid with respect to BatchCreateTableRowsRequest
   */
  public static BatchCreateTableRowsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchCreateTableRowsRequest.class);
  }

  /**
   * Convert an instance of BatchCreateTableRowsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

