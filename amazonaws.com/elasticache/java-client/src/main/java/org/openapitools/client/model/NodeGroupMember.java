/*
 * Amazon ElastiCache
 * <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
 *
 * The version of the OpenAPI document: 2015-02-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NodeGroupMemberReadEndpoint;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single node within a node group (shard).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:03:52.956161-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeGroupMember {
  public static final String SERIALIZED_NAME_CACHE_CLUSTER_ID = "CacheClusterId";
  @SerializedName(SERIALIZED_NAME_CACHE_CLUSTER_ID)
  private String cacheClusterId;

  public static final String SERIALIZED_NAME_CACHE_NODE_ID = "CacheNodeId";
  @SerializedName(SERIALIZED_NAME_CACHE_NODE_ID)
  private String cacheNodeId;

  public static final String SERIALIZED_NAME_READ_ENDPOINT = "ReadEndpoint";
  @SerializedName(SERIALIZED_NAME_READ_ENDPOINT)
  private NodeGroupMemberReadEndpoint readEndpoint;

  public static final String SERIALIZED_NAME_PREFERRED_AVAILABILITY_ZONE = "PreferredAvailabilityZone";
  @SerializedName(SERIALIZED_NAME_PREFERRED_AVAILABILITY_ZONE)
  private String preferredAvailabilityZone;

  public static final String SERIALIZED_NAME_PREFERRED_OUTPOST_ARN = "PreferredOutpostArn";
  @SerializedName(SERIALIZED_NAME_PREFERRED_OUTPOST_ARN)
  private String preferredOutpostArn;

  public static final String SERIALIZED_NAME_CURRENT_ROLE = "CurrentRole";
  @SerializedName(SERIALIZED_NAME_CURRENT_ROLE)
  private String currentRole;

  public NodeGroupMember() {
  }

  public NodeGroupMember cacheClusterId(String cacheClusterId) {
    this.cacheClusterId = cacheClusterId;
    return this;
  }

  /**
   * Get cacheClusterId
   * @return cacheClusterId
   */
  @javax.annotation.Nullable
  public String getCacheClusterId() {
    return cacheClusterId;
  }

  public void setCacheClusterId(String cacheClusterId) {
    this.cacheClusterId = cacheClusterId;
  }


  public NodeGroupMember cacheNodeId(String cacheNodeId) {
    this.cacheNodeId = cacheNodeId;
    return this;
  }

  /**
   * Get cacheNodeId
   * @return cacheNodeId
   */
  @javax.annotation.Nullable
  public String getCacheNodeId() {
    return cacheNodeId;
  }

  public void setCacheNodeId(String cacheNodeId) {
    this.cacheNodeId = cacheNodeId;
  }


  public NodeGroupMember readEndpoint(NodeGroupMemberReadEndpoint readEndpoint) {
    this.readEndpoint = readEndpoint;
    return this;
  }

  /**
   * Get readEndpoint
   * @return readEndpoint
   */
  @javax.annotation.Nullable
  public NodeGroupMemberReadEndpoint getReadEndpoint() {
    return readEndpoint;
  }

  public void setReadEndpoint(NodeGroupMemberReadEndpoint readEndpoint) {
    this.readEndpoint = readEndpoint;
  }


  public NodeGroupMember preferredAvailabilityZone(String preferredAvailabilityZone) {
    this.preferredAvailabilityZone = preferredAvailabilityZone;
    return this;
  }

  /**
   * Get preferredAvailabilityZone
   * @return preferredAvailabilityZone
   */
  @javax.annotation.Nullable
  public String getPreferredAvailabilityZone() {
    return preferredAvailabilityZone;
  }

  public void setPreferredAvailabilityZone(String preferredAvailabilityZone) {
    this.preferredAvailabilityZone = preferredAvailabilityZone;
  }


  public NodeGroupMember preferredOutpostArn(String preferredOutpostArn) {
    this.preferredOutpostArn = preferredOutpostArn;
    return this;
  }

  /**
   * Get preferredOutpostArn
   * @return preferredOutpostArn
   */
  @javax.annotation.Nullable
  public String getPreferredOutpostArn() {
    return preferredOutpostArn;
  }

  public void setPreferredOutpostArn(String preferredOutpostArn) {
    this.preferredOutpostArn = preferredOutpostArn;
  }


  public NodeGroupMember currentRole(String currentRole) {
    this.currentRole = currentRole;
    return this;
  }

  /**
   * Get currentRole
   * @return currentRole
   */
  @javax.annotation.Nullable
  public String getCurrentRole() {
    return currentRole;
  }

  public void setCurrentRole(String currentRole) {
    this.currentRole = currentRole;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeGroupMember nodeGroupMember = (NodeGroupMember) o;
    return Objects.equals(this.cacheClusterId, nodeGroupMember.cacheClusterId) &&
        Objects.equals(this.cacheNodeId, nodeGroupMember.cacheNodeId) &&
        Objects.equals(this.readEndpoint, nodeGroupMember.readEndpoint) &&
        Objects.equals(this.preferredAvailabilityZone, nodeGroupMember.preferredAvailabilityZone) &&
        Objects.equals(this.preferredOutpostArn, nodeGroupMember.preferredOutpostArn) &&
        Objects.equals(this.currentRole, nodeGroupMember.currentRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheClusterId, cacheNodeId, readEndpoint, preferredAvailabilityZone, preferredOutpostArn, currentRole);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeGroupMember {\n");
    sb.append("    cacheClusterId: ").append(toIndentedString(cacheClusterId)).append("\n");
    sb.append("    cacheNodeId: ").append(toIndentedString(cacheNodeId)).append("\n");
    sb.append("    readEndpoint: ").append(toIndentedString(readEndpoint)).append("\n");
    sb.append("    preferredAvailabilityZone: ").append(toIndentedString(preferredAvailabilityZone)).append("\n");
    sb.append("    preferredOutpostArn: ").append(toIndentedString(preferredOutpostArn)).append("\n");
    sb.append("    currentRole: ").append(toIndentedString(currentRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CacheClusterId");
    openapiFields.add("CacheNodeId");
    openapiFields.add("ReadEndpoint");
    openapiFields.add("PreferredAvailabilityZone");
    openapiFields.add("PreferredOutpostArn");
    openapiFields.add("CurrentRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeGroupMember
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeGroupMember.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeGroupMember is not found in the empty JSON string", NodeGroupMember.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeGroupMember.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeGroupMember` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CacheClusterId`
      if (jsonObj.get("CacheClusterId") != null && !jsonObj.get("CacheClusterId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CacheClusterId"));
      }
      // validate the optional field `CacheNodeId`
      if (jsonObj.get("CacheNodeId") != null && !jsonObj.get("CacheNodeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CacheNodeId"));
      }
      // validate the optional field `ReadEndpoint`
      if (jsonObj.get("ReadEndpoint") != null && !jsonObj.get("ReadEndpoint").isJsonNull()) {
        NodeGroupMemberReadEndpoint.validateJsonElement(jsonObj.get("ReadEndpoint"));
      }
      // validate the optional field `PreferredAvailabilityZone`
      if (jsonObj.get("PreferredAvailabilityZone") != null && !jsonObj.get("PreferredAvailabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredAvailabilityZone"));
      }
      // validate the optional field `PreferredOutpostArn`
      if (jsonObj.get("PreferredOutpostArn") != null && !jsonObj.get("PreferredOutpostArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PreferredOutpostArn"));
      }
      // validate the optional field `CurrentRole`
      if (jsonObj.get("CurrentRole") != null && !jsonObj.get("CurrentRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentRole"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeGroupMember.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeGroupMember' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeGroupMember> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeGroupMember.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeGroupMember>() {
           @Override
           public void write(JsonWriter out, NodeGroupMember value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeGroupMember read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeGroupMember given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeGroupMember
   * @throws IOException if the JSON string is invalid with respect to NodeGroupMember
   */
  public static NodeGroupMember fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeGroupMember.class);
  }

  /**
   * Convert an instance of NodeGroupMember to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

