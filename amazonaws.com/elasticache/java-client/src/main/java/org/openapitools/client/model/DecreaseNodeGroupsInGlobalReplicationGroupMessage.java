/*
 * Amazon ElastiCache
 * <fullname>Amazon ElastiCache</fullname> <p>Amazon ElastiCache is a web service that makes it easier to set up, operate, and scale a distributed cache in the cloud.</p> <p>With ElastiCache, customers get all of the benefits of a high-performance, in-memory cache with less of the administrative burden involved in launching and managing a distributed cache. The service makes setup, scaling, and cluster failure handling much simpler than in a self-managed cache deployment.</p> <p>In addition, through integration with Amazon CloudWatch, customers get enhanced visibility into the key performance statistics associated with their cache and can receive alarms if a part of their cache runs hot.</p>
 *
 * The version of the OpenAPI document: 2015-02-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DecreaseNodeGroupsInGlobalReplicationGroupMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-11T02:03:52.956161-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DecreaseNodeGroupsInGlobalReplicationGroupMessage {
  public static final String SERIALIZED_NAME_GLOBAL_REPLICATION_GROUP_ID = "GlobalReplicationGroupId";
  @SerializedName(SERIALIZED_NAME_GLOBAL_REPLICATION_GROUP_ID)
  private String globalReplicationGroupId;

  public static final String SERIALIZED_NAME_NODE_GROUP_COUNT = "NodeGroupCount";
  @SerializedName(SERIALIZED_NAME_NODE_GROUP_COUNT)
  private Integer nodeGroupCount;

  public static final String SERIALIZED_NAME_GLOBAL_NODE_GROUPS_TO_REMOVE = "GlobalNodeGroupsToRemove";
  @SerializedName(SERIALIZED_NAME_GLOBAL_NODE_GROUPS_TO_REMOVE)
  private List globalNodeGroupsToRemove;

  public static final String SERIALIZED_NAME_GLOBAL_NODE_GROUPS_TO_RETAIN = "GlobalNodeGroupsToRetain";
  @SerializedName(SERIALIZED_NAME_GLOBAL_NODE_GROUPS_TO_RETAIN)
  private List globalNodeGroupsToRetain;

  public static final String SERIALIZED_NAME_APPLY_IMMEDIATELY = "ApplyImmediately";
  @SerializedName(SERIALIZED_NAME_APPLY_IMMEDIATELY)
  private Boolean applyImmediately;

  public DecreaseNodeGroupsInGlobalReplicationGroupMessage() {
  }

  public DecreaseNodeGroupsInGlobalReplicationGroupMessage globalReplicationGroupId(String globalReplicationGroupId) {
    this.globalReplicationGroupId = globalReplicationGroupId;
    return this;
  }

  /**
   * Get globalReplicationGroupId
   * @return globalReplicationGroupId
   */
  @javax.annotation.Nonnull
  public String getGlobalReplicationGroupId() {
    return globalReplicationGroupId;
  }

  public void setGlobalReplicationGroupId(String globalReplicationGroupId) {
    this.globalReplicationGroupId = globalReplicationGroupId;
  }


  public DecreaseNodeGroupsInGlobalReplicationGroupMessage nodeGroupCount(Integer nodeGroupCount) {
    this.nodeGroupCount = nodeGroupCount;
    return this;
  }

  /**
   * Get nodeGroupCount
   * @return nodeGroupCount
   */
  @javax.annotation.Nonnull
  public Integer getNodeGroupCount() {
    return nodeGroupCount;
  }

  public void setNodeGroupCount(Integer nodeGroupCount) {
    this.nodeGroupCount = nodeGroupCount;
  }


  public DecreaseNodeGroupsInGlobalReplicationGroupMessage globalNodeGroupsToRemove(List globalNodeGroupsToRemove) {
    this.globalNodeGroupsToRemove = globalNodeGroupsToRemove;
    return this;
  }

  /**
   * Get globalNodeGroupsToRemove
   * @return globalNodeGroupsToRemove
   */
  @javax.annotation.Nullable
  public List getGlobalNodeGroupsToRemove() {
    return globalNodeGroupsToRemove;
  }

  public void setGlobalNodeGroupsToRemove(List globalNodeGroupsToRemove) {
    this.globalNodeGroupsToRemove = globalNodeGroupsToRemove;
  }


  public DecreaseNodeGroupsInGlobalReplicationGroupMessage globalNodeGroupsToRetain(List globalNodeGroupsToRetain) {
    this.globalNodeGroupsToRetain = globalNodeGroupsToRetain;
    return this;
  }

  /**
   * Get globalNodeGroupsToRetain
   * @return globalNodeGroupsToRetain
   */
  @javax.annotation.Nullable
  public List getGlobalNodeGroupsToRetain() {
    return globalNodeGroupsToRetain;
  }

  public void setGlobalNodeGroupsToRetain(List globalNodeGroupsToRetain) {
    this.globalNodeGroupsToRetain = globalNodeGroupsToRetain;
  }


  public DecreaseNodeGroupsInGlobalReplicationGroupMessage applyImmediately(Boolean applyImmediately) {
    this.applyImmediately = applyImmediately;
    return this;
  }

  /**
   * Get applyImmediately
   * @return applyImmediately
   */
  @javax.annotation.Nonnull
  public Boolean getApplyImmediately() {
    return applyImmediately;
  }

  public void setApplyImmediately(Boolean applyImmediately) {
    this.applyImmediately = applyImmediately;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DecreaseNodeGroupsInGlobalReplicationGroupMessage decreaseNodeGroupsInGlobalReplicationGroupMessage = (DecreaseNodeGroupsInGlobalReplicationGroupMessage) o;
    return Objects.equals(this.globalReplicationGroupId, decreaseNodeGroupsInGlobalReplicationGroupMessage.globalReplicationGroupId) &&
        Objects.equals(this.nodeGroupCount, decreaseNodeGroupsInGlobalReplicationGroupMessage.nodeGroupCount) &&
        Objects.equals(this.globalNodeGroupsToRemove, decreaseNodeGroupsInGlobalReplicationGroupMessage.globalNodeGroupsToRemove) &&
        Objects.equals(this.globalNodeGroupsToRetain, decreaseNodeGroupsInGlobalReplicationGroupMessage.globalNodeGroupsToRetain) &&
        Objects.equals(this.applyImmediately, decreaseNodeGroupsInGlobalReplicationGroupMessage.applyImmediately);
  }

  @Override
  public int hashCode() {
    return Objects.hash(globalReplicationGroupId, nodeGroupCount, globalNodeGroupsToRemove, globalNodeGroupsToRetain, applyImmediately);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DecreaseNodeGroupsInGlobalReplicationGroupMessage {\n");
    sb.append("    globalReplicationGroupId: ").append(toIndentedString(globalReplicationGroupId)).append("\n");
    sb.append("    nodeGroupCount: ").append(toIndentedString(nodeGroupCount)).append("\n");
    sb.append("    globalNodeGroupsToRemove: ").append(toIndentedString(globalNodeGroupsToRemove)).append("\n");
    sb.append("    globalNodeGroupsToRetain: ").append(toIndentedString(globalNodeGroupsToRetain)).append("\n");
    sb.append("    applyImmediately: ").append(toIndentedString(applyImmediately)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("GlobalReplicationGroupId");
    openapiFields.add("NodeGroupCount");
    openapiFields.add("GlobalNodeGroupsToRemove");
    openapiFields.add("GlobalNodeGroupsToRetain");
    openapiFields.add("ApplyImmediately");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("GlobalReplicationGroupId");
    openapiRequiredFields.add("NodeGroupCount");
    openapiRequiredFields.add("ApplyImmediately");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DecreaseNodeGroupsInGlobalReplicationGroupMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DecreaseNodeGroupsInGlobalReplicationGroupMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DecreaseNodeGroupsInGlobalReplicationGroupMessage is not found in the empty JSON string", DecreaseNodeGroupsInGlobalReplicationGroupMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DecreaseNodeGroupsInGlobalReplicationGroupMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DecreaseNodeGroupsInGlobalReplicationGroupMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DecreaseNodeGroupsInGlobalReplicationGroupMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `GlobalReplicationGroupId`
      String.validateJsonElement(jsonObj.get("GlobalReplicationGroupId"));
      // validate the required field `NodeGroupCount`
      Integer.validateJsonElement(jsonObj.get("NodeGroupCount"));
      // validate the optional field `GlobalNodeGroupsToRemove`
      if (jsonObj.get("GlobalNodeGroupsToRemove") != null && !jsonObj.get("GlobalNodeGroupsToRemove").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GlobalNodeGroupsToRemove"));
      }
      // validate the optional field `GlobalNodeGroupsToRetain`
      if (jsonObj.get("GlobalNodeGroupsToRetain") != null && !jsonObj.get("GlobalNodeGroupsToRetain").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("GlobalNodeGroupsToRetain"));
      }
      // validate the required field `ApplyImmediately`
      Boolean.validateJsonElement(jsonObj.get("ApplyImmediately"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DecreaseNodeGroupsInGlobalReplicationGroupMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DecreaseNodeGroupsInGlobalReplicationGroupMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DecreaseNodeGroupsInGlobalReplicationGroupMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DecreaseNodeGroupsInGlobalReplicationGroupMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<DecreaseNodeGroupsInGlobalReplicationGroupMessage>() {
           @Override
           public void write(JsonWriter out, DecreaseNodeGroupsInGlobalReplicationGroupMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DecreaseNodeGroupsInGlobalReplicationGroupMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DecreaseNodeGroupsInGlobalReplicationGroupMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DecreaseNodeGroupsInGlobalReplicationGroupMessage
   * @throws IOException if the JSON string is invalid with respect to DecreaseNodeGroupsInGlobalReplicationGroupMessage
   */
  public static DecreaseNodeGroupsInGlobalReplicationGroupMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DecreaseNodeGroupsInGlobalReplicationGroupMessage.class);
  }

  /**
   * Convert an instance of DecreaseNodeGroupsInGlobalReplicationGroupMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

