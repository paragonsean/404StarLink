# coding: utf-8

"""
    AWS IoT Wireless

    <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>

    The version of the OpenAPI document: 2020-11-22
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.create_fuota_task_request_lo_ra_wan import CreateFuotaTaskRequestLoRaWAN
from typing import Optional, Set
from typing_extensions import Self

class UpdateFuotaTaskRequest(BaseModel):
    """
    UpdateFuotaTaskRequest
    """ # noqa: E501
    name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="The name of a FUOTA task.", alias="Name")
    description: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default=None, description="The description of the new resource.", alias="Description")
    lo_ra_wan: Optional[CreateFuotaTaskRequestLoRaWAN] = Field(default=None, alias="LoRaWAN")
    firmware_update_image: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=4096)]] = Field(default=None, description="The S3 URI points to a firmware update image that is to be used with a FUOTA task.", alias="FirmwareUpdateImage")
    firmware_update_role: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=2048)]] = Field(default=None, description="The firmware update role that is to be used with a FUOTA task.", alias="FirmwareUpdateRole")
    redundancy_percent: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=None, description="The percentage of added redundant fragments. For example, if firmware file is 100 bytes and fragment size is 10 bytes, with <code>RedundancyPercent</code> set to 50(%), the final number of encoded fragments is (100 / 10) + (100 / 10 * 50%) = 15.", alias="RedundancyPercent")
    fragment_size_bytes: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The size of each fragment in bytes. Currently only supported in fuota tasks with multicast groups.", alias="FragmentSizeBytes")
    fragment_interval_ms: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The interval of sending fragments in milliseconds. Currently the interval will be rounded to the nearest second. Note that this interval only controls the timing when the cloud sends the fragments down. The actual delay of receiving fragments at device side depends on the device's class and the communication delay with the cloud.", alias="FragmentIntervalMS")
    __properties: ClassVar[List[str]] = ["Name", "Description", "LoRaWAN", "FirmwareUpdateImage", "FirmwareUpdateRole", "RedundancyPercent", "FragmentSizeBytes", "FragmentIntervalMS"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateFuotaTaskRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lo_ra_wan
        if self.lo_ra_wan:
            _dict['LoRaWAN'] = self.lo_ra_wan.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateFuotaTaskRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "Description": obj.get("Description"),
            "LoRaWAN": CreateFuotaTaskRequestLoRaWAN.from_dict(obj["LoRaWAN"]) if obj.get("LoRaWAN") is not None else None,
            "FirmwareUpdateImage": obj.get("FirmwareUpdateImage"),
            "FirmwareUpdateRole": obj.get("FirmwareUpdateRole"),
            "RedundancyPercent": obj.get("RedundancyPercent"),
            "FragmentSizeBytes": obj.get("FragmentSizeBytes"),
            "FragmentIntervalMS": obj.get("FragmentIntervalMS")
        })
        return _obj


