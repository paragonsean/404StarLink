# coding: utf-8

"""
    AWS IoT Wireless

    <p>AWS IoT Wireless provides bi-directional communication between internet-connected wireless devices and the AWS Cloud. To onboard both LoRaWAN and Sidewalk devices to AWS IoT, use the IoT Wireless API. These wireless devices use the Low Power Wide Area Networking (LPWAN) communication protocol to communicate with AWS IoT.</p> <p>Using the API, you can perform create, read, update, and delete operations for your wireless devices, gateways, destinations, and profiles. After onboarding your devices, you can use the API operations to set log levels and monitor your devices with CloudWatch.</p> <p>You can also use the API operations to create multicast groups and schedule a multicast session for sending a downlink message to devices in the group. By using Firmware Updates Over-The-Air (FUOTA) API operations, you can create a FUOTA task and schedule a session to update the firmware of individual devices or an entire group of devices in a multicast group.</p>

    The version of the OpenAPI document: 2020-11-22
    Contact: mike.ralphson@gmail.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_wireless_device_request_lo_ra_wan_abp_v10_x import CreateWirelessDeviceRequestLoRaWANAbpV10X
from openapi_client.models.create_wireless_device_request_lo_ra_wan_abp_v11 import CreateWirelessDeviceRequestLoRaWANAbpV11
from openapi_client.models.create_wireless_device_request_lo_ra_wan_otaa_v10_x import CreateWirelessDeviceRequestLoRaWANOtaaV10X
from openapi_client.models.create_wireless_device_request_lo_ra_wan_otaa_v11 import CreateWirelessDeviceRequestLoRaWANOtaaV11
from openapi_client.models.f_ports import FPorts
from openapi_client.models.str import str
from typing import Optional, Set
from typing_extensions import Self

class CreateWirelessDeviceRequestLoRaWAN(BaseModel):
    """
    CreateWirelessDeviceRequestLoRaWAN
    """ # noqa: E501
    dev_eui: Optional[Any] = Field(default=None, alias="DevEui")
    device_profile_id: Optional[Any] = Field(default=None, alias="DeviceProfileId")
    service_profile_id: Optional[Any] = Field(default=None, alias="ServiceProfileId")
    otaa_v1_1: Optional[CreateWirelessDeviceRequestLoRaWANOtaaV11] = Field(default=None, alias="OtaaV1_1")
    otaa_v1_0_x: Optional[CreateWirelessDeviceRequestLoRaWANOtaaV10X] = Field(default=None, alias="OtaaV1_0_x")
    abp_v1_1: Optional[CreateWirelessDeviceRequestLoRaWANAbpV11] = Field(default=None, alias="AbpV1_1")
    abp_v1_0_x: Optional[CreateWirelessDeviceRequestLoRaWANAbpV10X] = Field(default=None, alias="AbpV1_0_x")
    f_ports: Optional[FPorts] = Field(default=None, alias="FPorts")
    __properties: ClassVar[List[str]] = ["DevEui", "DeviceProfileId", "ServiceProfileId", "OtaaV1_1", "OtaaV1_0_x", "AbpV1_1", "AbpV1_0_x", "FPorts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateWirelessDeviceRequestLoRaWAN from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of otaa_v1_1
        if self.otaa_v1_1:
            _dict['OtaaV1_1'] = self.otaa_v1_1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of otaa_v1_0_x
        if self.otaa_v1_0_x:
            _dict['OtaaV1_0_x'] = self.otaa_v1_0_x.to_dict()
        # override the default output from pydantic by calling `to_dict()` of abp_v1_1
        if self.abp_v1_1:
            _dict['AbpV1_1'] = self.abp_v1_1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of abp_v1_0_x
        if self.abp_v1_0_x:
            _dict['AbpV1_0_x'] = self.abp_v1_0_x.to_dict()
        # override the default output from pydantic by calling `to_dict()` of f_ports
        if self.f_ports:
            _dict['FPorts'] = self.f_ports.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateWirelessDeviceRequestLoRaWAN from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DevEui": obj.get("DevEui"),
            "DeviceProfileId": obj.get("DeviceProfileId"),
            "ServiceProfileId": obj.get("ServiceProfileId"),
            "OtaaV1_1": CreateWirelessDeviceRequestLoRaWANOtaaV11.from_dict(obj["OtaaV1_1"]) if obj.get("OtaaV1_1") is not None else None,
            "OtaaV1_0_x": CreateWirelessDeviceRequestLoRaWANOtaaV10X.from_dict(obj["OtaaV1_0_x"]) if obj.get("OtaaV1_0_x") is not None else None,
            "AbpV1_1": CreateWirelessDeviceRequestLoRaWANAbpV11.from_dict(obj["AbpV1_1"]) if obj.get("AbpV1_1") is not None else None,
            "AbpV1_0_x": CreateWirelessDeviceRequestLoRaWANAbpV10X.from_dict(obj["AbpV1_0_x"]) if obj.get("AbpV1_0_x") is not None else None,
            "FPorts": FPorts.from_dict(obj["FPorts"]) if obj.get("FPorts") is not None else None
        })
        return _obj


